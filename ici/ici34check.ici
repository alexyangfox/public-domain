note = [struct

    a_top = "use %s only if a stack, see array.h",
    new_array = "%s->ici_array_new, also argument change",
    assign = "%s->ici_%s",
    assign_simple = "%s->ici_assign_fail",
    atom = "%s->ici_%s",
    decref = "%s->ici_%s",
    fetch = "%s->ici_%s",
    fetch_simple = "%s->ici_fetch_fail",
    new_float = "%s->ici_float_new",
    float_ret = "%s->ici_float_ret",
    syserr = "%s->ici_get_last_errno, but also a semantics change, see syserr.c",
    incref = "%s->ici_%s",
    new_int = "%s->ici_int_new",
    int_ret = "%s->ici_int_ret",
    mark = "%s->ici_mark",
    new_mem = "%s->ici_mem_new",
    ici_new_method = "%s->ici_method_new",
    need_stdin = "%s->ici_%s",
    need_stdout = "%s->ici_%s",
    o_one = "%s->ici_one",
    new_ptr = "%s->ici_ptr_new",
    new_regexp = "%s->ici_regexp_new",
    o_type = "no o_type, use ici_register_type, see object.h",
    new_set = "%s->ici_set_new",
    unassign_set = "%s->ici_set_unassign",
    get_cname = "%s->ici_str_get_nul_term",
    new_name = "%s->ici_str_new",
    new_cname = "%s->ici_str_new_nul_term",
    str_ret = "%s->ici_str_ret",
    new_struct = "%s->ici_struct_new",
    unassign_struct = "%s->ici_struct_unassign",
    ici_alloc = "ici_alloc, if possible use ici_talloc or ici_nalloc, see alloc.h",
    o_zero = "%s->ici_zero",
    ici_call = "%s now returns int, and string_t * not char * in arg 1",
    ici_callv = "%s now returns int, and string_t * not char * in arg 1",
    ici_func = "%s now returns an int",
    ici_funcv = "%s now returns an int and has an extra arg",
    null_ret = "%s->ici_%s",
    cmp_unique = "%s->ici_%s",
    copy_simple = "%s->ici_%s",
    def_cfuncs = "%s->ici_%s",
    new_file = "%s->ici_file_new",
    f_close = "%s->ici_file_close",
    free_simple = "deleted",
    hash_unique = "%s->ici_%s",
    o_null = "objof(&o_null)->ici_null",
    objname = "%s->ici_%s",
    parse_file = "%s->ici_%s",
    rego = "%s->ici_%s",
    stdio_ftype = "%s->ici_%s",
    new_string = "%s->ici_str_alloc",
    atom_probe = "%s->ici_%s",
    talloc = "%s->ici_%s, but *must* free with ici_tfree()",
    v_top = "%s->ici_vs.a_top",
    x_top = "%s->ici_xs.a_top",
    o_top = "%s->ici_os.a_top",
    chkbuf = "%s->ici_%s",
];

edit = argv[1] == "-e";
interactive = argv[1] == "-i";

/*
 * Build a regular expressions from the keys of the above struct...
 */
check := strbuf("\\b(");
forall (n, k in note)
    strcat(check, k, "|");
check[nels(check) - 1] = ')';
strcat(check, "\\b");
check = regexp(check);

/*
 * Use it to report on all matches in *.[ch] in the current dir...
 */
forall (fname in dir(#((\.[cC])|(\.[hH]))$#))
{
    repl = array();
    have_simple_subs = 0;
    printf("%s...\n", fname);
    f = fopen(fname);
    lineno = 1;
    while (l = getline(f))
    {
        if (match = l ~~ check)
        {
            printf("%s, %d: ", fname, lineno);
            if ((n = note[match]) != NULL)
            {
                printf("[");
                printf(n, match, match);
                printf("] ");
                if ((r := n ~~ #^%s->([a-zA-Z0-9_%]+)$#))
                {
                    l = gsub(l, "\\b" + match + "\\b", sprintf(r, match));
                    ++have_simple_subs;
                }
            }
            printf("%s\n", l ~~ #^[ \t]*(.*$)#);
        }
        push(repl, l);
        push(repl, "\n");
        ++lineno;
    }
    close(f);
    if ((edit || interactive) && have_simple_subs)
    {
        if (interactive)
        {
            printf("Apply simply substitutions to %s (y or n)? ", fname);
            if (getline() !~ #^[yY]#)
                continue;
        }
        f := fopen(fname + ".bak", "w");
        put(getfile(fname), f);
        close(f);
        f := fopen(fname, "w");
        put(implode(repl), f);
        close(f);
        printf("%s updated. %s.bak made.\n", fname, fname);
    }
}

/* file "interval.salm" */

/*
 *  This file contains an implementation of a class for doing interval
 *  arithmetic.
 *
 *  Written by Chris Wilson.
 *
 *  This file is hearby placed in the public domain by its author.
 */


use "numeric_operable.salm" : "numeric_operable.si";


hide;

use "limited_floating_point.salm" : "limited_floating_point.si";
use "convertable.salm" : "convertable.si";

immutable lower_controller := class()
  {
    use default_fp_controller;
    function rounding() returns rounding_mode (round_down);
  }();

immutable upper_controller := class()
  {
    use default_fp_controller;
    function rounding() returns rounding_mode (round_up);
  }();

function dynamic_item_type(lower_type : type !{}, upper_type : type !{},
                           operand_base_type : type !{}) returns type !{}
  (type (<<numeric_operable(
                   type <<interval_access_type(operand_base_type,
                                               operand_base_type)>> |
                        operand_base_type,
                   interval_access_type(lower_type, upper_type))>> &
         <<interval_access_type(lower_type, upper_type)>> &
         interface
           [
             compare :-
                     {-1, 0, 1} <--
                     (other : operand_base_type |
                              <<interval_access_type(operand_base_type,
                                                     operand_base_type)>>),
             sprint :-
                     string <--
                     (specifier : string := *, plus : boolean := *,
                      space : boolean := *, hash : boolean := *,
                      zero_width : [0...+oo) := *,
                      precision : [0...+oo) | {null} := *)
           ]) <--
        (init_lower_value : lower_type | operand_base_type,
         init_upper_value : upper_type | operand_base_type := *));

immutable comparable_with_zero : type !{} :=
        type (rational |
              interface
                [
                  operator< :- boolean <-- ({0}, reversed : boolean),
                  operator> :- boolean <-- ({0}, reversed : boolean),
                  operator<= :- boolean <-- ({0}, reversed : boolean),
                  operator>= :- boolean <-- ({0}, reversed : boolean),
                  operator== :- boolean <-- ({0}, reversed : boolean),
                  operator!= :- boolean <-- ({0}, reversed : boolean)
                ]);

export;

quark et_interval_comparison_indeterminate;

function interval_access_type(lower_type : type !{}, upper_type : type !{})
        returns type !{}
  {
    return type interface
      [
        lower :- lower_type <-- (),
        upper :- upper_type <-- ()
      ];
  };

immutable any_interval :=
        type (<<numeric_operable(interval_access_type(type {}, type {}),
                                 interval_access_type(type !{}, type !{}))>> &
              <<interval_access_type(type !{}, type !{})>> &
              interface
                [
                  compare :-
                          {-1, 0, 1} <--
                          (other : <<interval_access_type(type {}, type {})>>),
                  sprint :-
                          string <--
                          (specifier : string := *, plus : boolean := *,
                           space : boolean := *, hash : boolean := *,
                           zero_width : [0...+oo) := *,
                           precision : [0...+oo) | {null} := *)
                ]);

immutable static_item_type : type !{} :=
        type any_interval <--
             (init_lower_value : {}, init_upper_value : {} := *);

class interval_ecosystem(
        ageless lower_type : type !{} /
                (type <<numeric_operable(type (lower_type | operand_base_type),
                                         lower_type)>>) &
                <<convertable_from(operand_base_type)>> &
                <<convertable_from(type {-oo, +oo})>> &
                <<convertable_from(upper_type)>> & type comparable_with_zero,
        ageless upper_type : type !{} /
                (type <<numeric_operable(type (upper_type | operand_base_type),
                                         upper_type)>>) &
                <<convertable_from(operand_base_type)>> &
                <<convertable_from(type {-oo, +oo})>> &
                <<convertable_from(lower_type)>> & type comparable_with_zero,
        ageless operand_base_type : type !{})
        returns interface
          [
            this_return :- type !{},
            item_class :- static_item_type
          ] / interface
          [
            this_return :- type !{},
            item_class :-
                    <<dynamic_item_type(lower_type, upper_type,
                                        operand_base_type)>>
          ]
  {
    immutable this_return :=
            type <<numeric_operable(
                    type <<interval_access_type(operand_base_type,
                                                operand_base_type)>> |
                    operand_base_type, type lazy this_return)>> &
                 <<interval_access_type(lower_type, upper_type)>> &
                 interface
                   [
                     compare :-
                             {-1, 0, 1} <--
                             (other : operand_base_type |
                                      <<interval_access_type(operand_base_type,
                                                operand_base_type)>>),
                     sprint :-
                             string <--
                             (specifier : string := *, plus : boolean := *,
                              space : boolean := *, hash : boolean := *,
                              zero_width : [0...+oo) := *,
                              precision : [0...+oo) | {null} := *)
                   ];

    class item_class(init_lower_value : lower_type | operand_base_type,
            init_upper_value : upper_type | operand_base_type ::=
                    init_lower_value)
            returns this_return
      {
        hide;

        immutable operand_interval_type :=
                interval_access_type(operand_base_type, operand_base_type);

        static immutable unsigned_infinity := 1/0;
        static immutable zero_zero := 0/0;
        static function equal(x, y) returns boolean (x == y);

        immutable unsigned : boolean :=
                equal(init_lower_value, unsigned_infinity) ||
                equal(init_lower_value, zero_zero) ||
                equal(init_upper_value, unsigned_infinity) ||
                equal(init_upper_value, zero_zero);
        immutable lower_value : lower_type ::=
                (unsigned ? -oo : init_lower_value);
        immutable upper_value : upper_type ::=
                (unsigned ? +oo : init_upper_value);

        function add(other : operand_base_type) returns item_class
          {
            return item_class(lower_value + other, upper_value + other);
          };

        function add(other : operand_interval_type) returns item_class
          {
            return item_class(lower_value + other.lower(),
                              upper_value + other.upper());
          };

        function multiply(other : operand_base_type) returns item_class
          {
            if (other >= 0)
              {
                return item_class(lower_value * other, upper_value * other);
              }
            else
              {
                assert(other <= 0);
                return item_class(((upper_value :: lower_type) * other),
                                  ((lower_value :: upper_type) * other));
              };
          };

        function multiply(other : operand_interval_type) returns item_class
          {
            if (other.lower() >= 0)
              {
                assert(other.upper() >= 0);
                return item_class(
                        ((lower_value >= 0) ? (lower_value * other.lower()) :
                         (lower_value * other.upper())),
                        ((upper_value >= 0) ? (upper_value * other.upper()) :
                         (upper_value * other.lower())));
              }
            else if (other.upper() <= 0)
              {
                assert(other.lower() <= 0);
                return item_class(
                        ((upper_value :: lower_type) *
                         ((upper_value >= 0) ? other.lower() : other.upper())),
                        ((lower_value :: upper_type) *
                         ((lower_value >= 0) ? other.upper() :
                                               other.lower())));
              }
            else
              {
                immutable candidate_lower1 :=
                        ((upper_value :: lower_type) * other.lower());
                immutable candidate_lower2 := (lower_value * other.upper());
                immutable candidate_upper1 :=
                        ((lower_value :: upper_type) * other.lower());
                immutable candidate_upper2 := (upper_value * other.upper());
                return item_class(
                        ((candidate_lower1 <= candidate_lower2) ?
                         candidate_lower1 : candidate_lower2),
                        ((candidate_upper1 <= candidate_upper2) ?
                         candidate_upper1 : candidate_upper2));
              };
          };

        export;

        function lower() returns lower_type  (lower_value);
        function upper() returns upper_type  (upper_value);

        function operator+(other : operand_base_type, reversed : boolean)
                returns item_class
          (add(other));

        function operator+(other : operand_interval_type, reversed : boolean)
                returns item_class
          (add(other));

        function operator-(other : operand_base_type, reversed : boolean)
                returns item_class
          (reversed ? 
           item_class((other :: lower_type) - upper_value,
                      (other :: upper_type) - lower_value) :
           item_class(lower_value - other, upper_value - other));

        function operator-(other : operand_interval_type, reversed : boolean)
                returns item_class
          (reversed ?
           item_class((other.lower() :: lower_type) - upper_value,
                      (other.upper() :: upper_type) - lower_value) :
           item_class(lower_value - other.upper(),
                      upper_value - other.lower()));

        function operator-() returns item_class
          (item_class((0 :: lower_type) - upper_value,
                      (0 :: upper_type) - lower_value));

        function operator+() returns item_class
          (item_class(lower_value, upper_value));

        function operator*(other : operand_base_type, reversed : boolean)
                returns item_class
          (multiply(other));

        function operator*(other : operand_interval_type, reversed : boolean)
                returns item_class
          (multiply(other));

        function operator/(other : operand_base_type, reversed : boolean)
                returns item_class
          {
            if (reversed)
              {
                if (lower_value >= 0)
                  {
                    assert(upper_value >= 0);
                    if (lower_value == 0)
                      {
                        if (upper_value == 0)
                            return item_class(-oo, +oo);;
                        return item_class(
                                ((other >= 0) ?
                                 reverse_divide((upper_value :: lower_type),
                                                other) : -oo),
                                ((other >= 0) ? +oo :
                                 reverse_divide(upper_value, other)));
                      };
                    return item_class(
                            ((other >= 0) ?
                             reverse_divide((upper_value :: lower_type), other)
                             : reverse_divide(lower_value, other)),
                            ((other >= 0) ?
                             reverse_divide((lower_value :: upper_type), other)
                             : reverse_divide(upper_value, other)));
                  }
                else if (upper_value <= 0)
                  {
                    assert(lower_value < 0);
                    if (upper_value == 0)
                      {
                        return item_class(
                                ((other >= 0) ? -oo :
                                 reverse_divide(lower_value, other)),
                                ((other >= 0) ?
                                 reverse_divide((lower_value :: upper_type),
                                                other) : +oo));
                      };
                    return item_class(
                            reverse_divide(
                                    ((other >= 0) ? (upper_value :: lower_type)
                                                  : lower_value), other),
                            reverse_divide(
                                    ((other >= 0) ? (lower_value :: upper_type)
                                                  : upper_value), other));
                  }
                else
                  {
                    return item_class(-oo, +oo);
                  };
              }
            else
              {
                if (other == 0)
                  {
                    return item_class(-oo, +oo);;
                  }
                else if (other > 0)
                  {
                    return item_class((lower_value / other),
                                      (upper_value / other));
                  }
                else
                  {
                    assert(other < 0);
                    return item_class(((upper_value :: lower_type) / other),
                                      ((lower_value :: upper_type) / other));
                  };
              };
          };

        hide reverse_divide;
        static function reverse_divide(x, y)
          {
            if (x in interface[operator/ :- !{} <-- ({y}, reversed : {true})])
                return x.operator/(y, reversed := true);;
            return (y / x);
          };

        function operator/(other : operand_interval_type, reversed : boolean)
                returns item_class
          {
            if (reversed)
              {
                if (lower_value >= 0)
                  {
                    assert(upper_value >= 0);
                    if (lower_value == 0)
                      {
                        if (upper_value == 0)
                            return item_class(-oo, +oo);;
                        return item_class(
                                ((other.lower() >= 0) ?
                                 reverse_divide((upper_value :: lower_type),
                                                other.lower()) : -oo),
                                ((other.upper() >= 0) ? +oo :
                                 reverse_divide(upper_value, other.upper())));
                      };
                    return item_class(
                            ((other.lower() >= 0) ?
                             reverse_divide((upper_value :: lower_type),
                                            other.lower()) :
                             reverse_divide(lower_value, other.lower())),
                            ((other.upper() >= 0) ?
                             reverse_divide((lower_value :: upper_type),
                                            other.upper()) :
                             reverse_divide(upper_value, other.upper())));
                  }
                else if (upper_value <= 0)
                  {
                    assert(lower_value < 0);
                    if (upper_value == 0)
                      {
                        return item_class(
                                ((other.upper() >= 0) ? -oo :
                                 reverse_divide(lower_value, other.upper())),
                                ((other.lower() >= 0) ?
                                 reverse_divide((lower_value :: upper_type),
                                                other.lower()) : +oo));
                      };
                    return item_class(
                            reverse_divide(
                                    ((other.upper() >= 0) ?
                                     (upper_value :: lower_type) :
                                     lower_value), other.upper()),
                            reverse_divide(
                                    ((other.lower() >= 0) ?
                                     (lower_value :: upper_type) :
                                     upper_value), other.lower()));
                  }
                else
                  {
                    return item_class(-oo, +oo);
                  };
              }
            else
              {
                if (other.lower() >= 0)
                  {
                    assert(other.upper() >= 0);
                    if (other.lower() == 0)
                      {
                        if (other.upper() == 0)
                            return item_class(-oo, +oo);;
                        return item_class(
                                ((lower_value >= 0) ?
                                 (lower_value / other.upper()) : -oo),
                                ((upper_value >= 0) ? +oo :
                                 (upper_value / other.upper())));
                      };
                    return item_class(
                            ((lower_value >= 0) ? (lower_value / other.upper())
                             : (lower_value / other.lower())),
                            ((upper_value >= 0) ? (upper_value / other.lower())
                             : (upper_value / other.upper())));
                  }
                else if (other.upper() <= 0)
                  {
                    assert(other.lower() < 0);
                    if (other.upper() == 0)
                      {
                        return item_class(
                                ((upper_value >= 0) ? -oo :
                                 ((upper_value :: lower_type) /
                                  other.lower())),
                                ((lower_value >= 0) ?
                                 ((lower_value :: upper_type) / other.lower())
                                 : +oo));
                      };
                    return item_class(
                            ((upper_value :: lower_type) /
                             ((upper_value >= 0) ? other.upper() :
                                                   other.lower())),
                            ((lower_value :: upper_type) /
                             ((lower_value >= 0) ? other.lower() :
                                                   other.upper())));
                  }
                else
                  {
                    return item_class(-oo, +oo);
                  };
              };
          };

        function compare(other : operand_base_type) returns {-1, 0, 1}
          {
            if (upper_value < other)
                return -1;;
            if (lower_value > other)
                return 1;;
            if ((lower_value == upper_value) && (lower_value == other))
                return 0;;
            throw(et_interval_comparison_indeterminate,
                  "An attempt was made to compare a scalar to an interval " ~
                  "that includes that scalar.");
          };

        function compare(other : operand_interval_type) returns {-1, 0, 1}
          {
            if (upper_value < other.lower())
                return -1;;
            if (lower_value > other.upper())
                return 1;;
            if ((lower_value == upper_value) &&
                (other.lower() == other.upper()) &&
                (lower_value == other.lower()))
              {
                return 0;
              };
            throw(et_interval_comparison_indeterminate,
                  "An attempt was made to compare two overlapping intervals.");
          };

        function operator==(other : operand_base_type, reversed : boolean)
                returns boolean
          (compare(other) == 0);

        function operator==(other : operand_interval_type, reversed : boolean)
                returns boolean
          (compare(other) == 0);

        function operator!=(other : operand_base_type, reversed : boolean)
                returns boolean
          (compare(other) != 0);

        function operator!=(other : operand_interval_type, reversed : boolean)
                returns boolean
          (compare(other) != 0);

        function operator>=(other : operand_base_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) <= 0) : (compare(other) >= 0));

        function operator>=(other : operand_interval_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) <= 0) : (compare(other) >= 0));

        function operator<=(other : operand_base_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) >= 0) : (compare(other) <= 0));

        function operator<=(other : operand_interval_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) >= 0) : (compare(other) <= 0));

        function operator>(other : operand_base_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) < 0) : (compare(other) > 0));

        function operator>(other : operand_interval_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) < 0) : (compare(other) > 0));

        function operator<(other : operand_base_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) > 0) : (compare(other) < 0));

        function operator<(other : operand_interval_type, reversed : boolean)
                returns boolean
          (reversed ? (compare(other) > 0) : (compare(other) < 0));

        function sprint(specifier : string := "v", plus : boolean := false,
                space : boolean := false, hash : boolean := false,
                zero_width : [0...+oo) := 0,
                precision : [0...+oo) | {null} := null) returns string
          {
            immutable lower_rational : rational ::= lower_value;
            immutable upper_rational : rational ::= upper_value;
            immutable format_prefix : string :=
                    "%" ~ (plus ? "+" : "") ~ (space ? " " : "") ~
                    (hash ? "#" : "");
            immutable format_suffix : string :=
                    ((precision != null) ? "." ~ sprint(precision) : "") ~
                    specifier ~ "%";
            immutable result_suffix : string :=
                   " +/- " ~
                   sprintf(format_prefix ~ format_suffix,
                           (upper_rational - lower_rational) / 2);
            immutable result_suffix_length : [0...+oo) :=
                    length(result_suffix);
            immutable format : string :=
                    format_prefix ~
                    ((zero_width > result_suffix_length) ?
                     ("0" ~ sprint(zero_width - result_suffix_length)) : "") ~
                    format_suffix;
            return sprintf(format, (lower_rational + upper_rational) / 2) ~
                   result_suffix;
          };

        assert(lower_value <= upper_value);
      };
  };

function interval(
        lower_type : type !{} /
                (type <<numeric_operable(type (lower_type | operand_base_type),
                                         lower_type)>>) &
                <<convertable_from(operand_base_type)>> &
                <<convertable_from(type {-oo, +oo})>> &
                <<convertable_from(upper_type)>> & type comparable_with_zero,
        upper_type : type !{} /
                (type <<numeric_operable(type (upper_type | operand_base_type),
                                         upper_type)>>) &
                <<convertable_from(operand_base_type)>> &
                <<convertable_from(type {-oo, +oo})>> &
                <<convertable_from(lower_type)>> & type comparable_with_zero,
        operand_base_type : type !{})
        returns static_item_type /
                <<dynamic_item_type(lower_type, upper_type,
                                    operand_base_type)>>
  {
    return interval_ecosystem(lower_type, upper_type, operand_base_type).
            item_class;
  };

function interval(base : (0...+oo), mantissa_digits : (0...+oo))
        returns static_item_type
  {
    immutable mantissa_magnitude_lower_limit :=
            power(base, (mantissa_digits - 1));
    return interval(
            type <<limited_floating_point(base, mantissa_magnitude_lower_limit,
                           init_default_controller := lower_controller)>>,
            type <<limited_floating_point(base, mantissa_magnitude_lower_limit,
                           init_default_controller := upper_controller)>>,
            type (rational | <<floating_point_interface(base)>>));
  };

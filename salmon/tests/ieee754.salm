/* file "ieee754.salm" */

/*
 *  This file runs tests of the ieee754 module.
 *
 *  Written by Chris Wilson.
 *
 *  This file is hearby placed in the public domain by its author.
 */


use "ieee754.salm" : "ieee754.si";


/* First, we'll test the exponent limits of the seven formats specified by IEEE
 * 754-2008. */

  {
    printf("binary16(1, 14): %xg%.\n", binary16(1, 14));
    printf("binary16(1, 15): %xg%.\n", binary16(1, 15));
    printf("binary16(1, 16): %xg%.\n", binary16(1, 16));
    printf("binary16(1, -14): %xg%.\n", binary16(1, -14));
    printf("binary16(1, -15): %xg%.\n", binary16(1, -15));
    printf("binary16(1, -16): %xg%.\n", binary16(1, -16));
    printf("binary16(1, -24): %xg%.\n", binary16(1, -24));
    printf("binary16(1, -25): %xg%.\n", binary16(1, -25));
    printf("binary32(1, 126): %xg%.\n", binary32(1, 126));
    printf("binary32(1, 127): %xg%.\n", binary32(1, 127));
    printf("binary32(1, 128): %xg%.\n", binary32(1, 128));
    printf("binary32(1, -126): %xg%.\n", binary32(1, -126));
    printf("binary32(1, -127): %xg%.\n", binary32(1, -127));
    printf("binary32(1, -128): %xg%.\n", binary32(1, -128));
    printf("binary32(1, -149): %xg%.\n", binary32(1, -149));
    printf("binary32(1, -150): %xg%.\n", binary32(1, -150));
    printf("binary64(1, 1022): %xg%.\n", binary64(1, 1022));
    printf("binary64(1, 1023): %xg%.\n", binary64(1, 1023));
    printf("binary64(1, 1024): %xg%.\n", binary64(1, 1024));
    printf("binary64(1, -1022): %xg%.\n", binary64(1, -1022));
    printf("binary64(1, -1023): %xg%.\n", binary64(1, -1023));
    printf("binary64(1, -1024): %xg%.\n", binary64(1, -1024));
    printf("binary64(1, -1074): %xg%.\n", binary64(1, -1074));
    printf("binary64(1, -1075): %xg%.\n", binary64(1, -1075));
    printf("binary128(1, 16382): %xg%.\n", binary128(1, 16382));
    printf("binary128(1, 16383): %xg%.\n", binary128(1, 16383));
    printf("binary128(1, 16384): %xg%.\n", binary128(1, 16384));
    printf("binary128(1, -16382): %xg%.\n", binary128(1, -16382));
    printf("binary128(1, -16383): %xg%.\n", binary128(1, -16383));
    printf("binary128(1, -16384): %xg%.\n", binary128(1, -16384));
    printf("binary128(1, -16494): %xg%.\n", binary128(1, -16494));
    printf("binary128(1, -16495): %xg%.\n", binary128(1, -16495));
    printf("decimal32(1, 95): %g%.\n", decimal32(1, 95));
    printf("decimal32(1, 96): %g%.\n", decimal32(1, 96));
    printf("decimal32(1, 97): %g%.\n", decimal32(1, 97));
    printf("decimal32(1, -95): %g%.\n", decimal32(1, -95));
    printf("decimal32(1, -96): %g%.\n", decimal32(1, -96));
    printf("decimal32(1, -97): %g%.\n", decimal32(1, -97));
    printf("decimal32(1, -101): %g%.\n", decimal32(1, -101));
    printf("decimal32(1, -102): %g%.\n", decimal32(1, -102));
    printf("decimal64(1, 383): %g%.\n", decimal64(1, 383));
    printf("decimal64(1, 384): %g%.\n", decimal64(1, 384));
    printf("decimal64(1, 385): %g%.\n", decimal64(1, 385));
    printf("decimal64(1, -383): %g%.\n", decimal64(1, -383));
    printf("decimal64(1, -384): %g%.\n", decimal64(1, -384));
    printf("decimal64(1, -385): %g%.\n", decimal64(1, -385));
    printf("decimal64(1, -398): %g%.\n", decimal64(1, -398));
    printf("decimal64(1, -399): %g%.\n", decimal64(1, -399));
    printf("decimal128(1, 6143): %g%.\n", decimal128(1, 6143));
    printf("decimal128(1, 6144): %g%.\n", decimal128(1, 6144));
    printf("decimal128(1, 6145): %g%.\n", decimal128(1, 6145));
    printf("decimal128(1, -6143): %g%.\n", decimal128(1, -6143));
    printf("decimal128(1, -6144): %g%.\n", decimal128(1, -6144));
    printf("decimal128(1, -6145): %g%.\n", decimal128(1, -6145));
    printf("decimal128(1, -6176): %g%.\n", decimal128(1, -6176));
    printf("decimal128(1, -6177): %g%.\n", decimal128(1, -6177));
  };


/* Next, we'll do some testing of conversions to and from bit encodings. */

  {
    procedure test(format, x, exponent, bits, payload := null)
      {
        immutable formatted :=
                ((payload == null) ? format(x, exponent) :
                 format(x, exponent, init_nan_payload := payload));
        immutable x_string : string :=
                (((x in (-oo....+oo)) && (formatted.base() != 10)) ?
                 sprintf("%s%0x%." ~ sprint(format..format_bits / 4) ~
                         "xg%, %v%",
                         ((x < 0) ? "-" : ""), ((x < 0) ? -x : x), exponent) :
                 sprintf("%v%, %v%", x, exponent));
        immutable formatted_string :=
                sprintf("%s%(%s%%s%)", format..format_name, x_string,
                        ((payload == null) ? "" :
                         ", payload := " ~
                         sprintf(((formatted.base() != 10) ? "%#x%" : "%d%"),
                                 payload)));
        printf("%s%: %t%.\n", formatted_string, formatted);
        immutable precision_string := sprint(format..format_bits / 4);
        printf("%s%.encoding_bits(): %#." ~ precision_string ~ "x%.\n",
               formatted_string, formatted.encoding_bits());
        printf("%s%..decode_bits(%#." ~ precision_string ~ "x%): %t%.\n",
               format..format_name, bits, format..decode_bits(bits));
      };

    test(binary16, 0, 0, 0x0000);
    test(binary16, negative_zero, 0, 0x8000);
    test(binary16, 1, -24, 0x0001);
    test(binary16, -1, -24, 0x8001);
    test(binary16, 1, -23, 0x0002);
    test(binary16, -1, -23, 0x8002);
    test(binary16, 3, -24, 0x0003);
    test(binary16, -3, -24, 0x8003);
    test(binary16, 1, -15, 0x0200);
    test(binary16, -1, -15, 0x8200);
    test(binary16, 1 - 1/(1 << 10), -14, 0x03ff);
    test(binary16, -(1 - 1/(1 << 10)), -14, 0x83ff);
    test(binary16, 1, -14, 0x0400);
    test(binary16, -1, -14, 0x8400);
    test(binary16, 1 + 1/(1 << 10), -14, 0x0401);
    test(binary16, -(1 + 1/(1 << 10)), -14, 0x8401);
    test(binary16, 1, -13, 0x0800);
    test(binary16, -1, -13, 0x8800);
    test(binary16, 1, 14, 0x7400);
    test(binary16, -1, 14, 0xf400);
    test(binary16, 1, 15, 0x7800);
    test(binary16, -1, 15, 0xf800);
    test(binary16, (1 << 11) - 1, 5, 0x7bff);
    test(binary16, -((1 << 11) - 1), 5, 0xfbff);
    test(binary16, +oo, 0, 0x7c00);
    test(binary16, -oo, 0, 0xfc00);
    test(binary16, 0/0, 0, 0x7e00);
    test(binary16, negative_zero_zero, 0, 0xfe00);
    test(binary16, signalling_zero_zero, 0, 0x7c01);
    test(binary16, negative_signalling_zero_zero, 0, 0xfc01);
    test(binary16, 0/0, 0, 0x7e01, payload := 0x1);
    test(binary16, negative_zero_zero, 0, 0xfe01, payload := 0x1);
    test(binary16, 0/0, 0, 0x7fff, payload := 0x1ff);
    test(binary16, negative_zero_zero, 0, 0xffff, payload := 0x1ff);
    test(binary16, signalling_zero_zero, 0, 0x7dff, payload := 0x1ff);
    test(binary16, negative_signalling_zero_zero, 0, 0xfdff, payload := 0x1ff);

    test(binary32, 0, 0, 0x00000000);
    test(binary32, negative_zero, 0, 0x80000000);
    test(binary32, 1, -149, 0x00000001);
    test(binary32, -1, -149, 0x80000001);
    test(binary32, 1, -148, 0x00000002);
    test(binary32, -1, -148, 0x80000002);
    test(binary32, 3, -149, 0x00000003);
    test(binary32, -3, -149, 0x80000003);
    test(binary32, 1, -127, 0x00400000);
    test(binary32, -1, -127, 0x80400000);
    test(binary32, 1 - 1/(1 << 23), -126, 0x007fffff);
    test(binary32, -(1 - 1/(1 << 23)), -126, 0x807fffff);
    test(binary32, 1, -126, 0x00800000);
    test(binary32, -1, -126, 0x80800000);
    test(binary32, 1 + 1/(1 << 23), -126, 0x00800001);
    test(binary32, -(1 + 1/(1 << 23)), -126, 0x80800001);
    test(binary32, 1, -125, 0x01000000);
    test(binary32, -1, -125, 0x81000000);
    test(binary32, 1, 126, 0x7e800000);
    test(binary32, -1, 126, 0xfe800000);
    test(binary32, 1, 127, 0x7f000000);
    test(binary32, -1, 127, 0xff000000);
    test(binary32, (1 << 24) - 1, 104, 0x7f7fffff);
    test(binary32, -((1 << 24) - 1), 104, 0xff7fffff);
    test(binary32, +oo, 0, 0x7f800000);
    test(binary32, -oo, 0, 0xff800000);
    test(binary32, 0/0, 0, 0x7fc00000);
    test(binary32, negative_zero_zero, 0, 0xffc00000);
    test(binary32, signalling_zero_zero, 0, 0x7f800001);
    test(binary32, negative_signalling_zero_zero, 0, 0xff800001);
    test(binary32, 0/0, 0, 0x7fc00001, payload := 0x1);
    test(binary32, negative_zero_zero, 0, 0xffc00001, payload := 0x1);
    test(binary32, 0/0, 0, 0x7fffffff, payload := 0x3fffff);
    test(binary32, negative_zero_zero, 0, 0xffffffff, payload := 0x3fffff);
    test(binary32, signalling_zero_zero, 0, 0x7fbfffff, payload := 0x3fffff);
    test(binary32, negative_signalling_zero_zero, 0, 0xffbfffff,
         payload := 0x3fffff);

    test(binary64, 0, 0, 0x0000000000000000);
    test(binary64, negative_zero, 0, 0x8000000000000000);
    test(binary64, 1, -1074, 0x0000000000000001);
    test(binary64, -1, -1074, 0x8000000000000001);
    test(binary64, 1, -1073, 0x0000000000000002);
    test(binary64, -1, -1073, 0x8000000000000002);
    test(binary64, 3, -1074, 0x0000000000000003);
    test(binary64, -3, -1074, 0x8000000000000003);
    test(binary64, 1, -1023, 0x0008000000000000);
    test(binary64, -1, -1023, 0x8008000000000000);
    test(binary64, 1 - 1/(1 << 52), -1022, 0x000fffffffffffff);
    test(binary64, -(1 - 1/(1 << 52)), -1022, 0x800fffffffffffff);
    test(binary64, 1, -1022, 0x0010000000000000);
    test(binary64, -1, -1022, 0x8010000000000000);
    test(binary64, 1 + 1/(1 << 52), -1022, 0x0010000000000001);
    test(binary64, -(1 + 1/(1 << 52)), -1022, 0x8010000000000001);
    test(binary64, 1, -1021, 0x0020000000000000);
    test(binary64, -1, -1021, 0x8020000000000000);
    test(binary64, 1, 1022, 0x7fd0000000000000);
    test(binary64, -1, 1022, 0xffd0000000000000);
    test(binary64, 1, 1023, 0x7fe0000000000000);
    test(binary64, -1, 1023, 0xffe0000000000000);
    test(binary64, (1 << 53) - 1, 971, 0x7fefffffffffffff);
    test(binary64, -((1 << 53) - 1), 971, 0xffefffffffffffff);
    test(binary64, +oo, 0, 0x7ff0000000000000);
    test(binary64, -oo, 0, 0xfff0000000000000);
    test(binary64, 0/0, 0, 0x7ff8000000000000);
    test(binary64, negative_zero_zero, 0, 0xfff8000000000000);
    test(binary64, signalling_zero_zero, 0, 0x7ff0000000000001);
    test(binary64, negative_signalling_zero_zero, 0, 0xfff0000000000001);
    test(binary64, 0/0, 0, 0x7ff8000000000001, payload := 0x1);
    test(binary64, negative_zero_zero, 0, 0xfff8000000000001, payload := 0x1);
    test(binary64, 0/0, 0, 0x7fffffffffffffff, payload := 0x7ffffffffffff);
    test(binary64, negative_zero_zero, 0, 0xffffffffffffffff,
         payload := 0x7ffffffffffff);
    test(binary64, signalling_zero_zero, 0, 0x7ff7ffffffffffff,
         payload := 0x7ffffffffffff);
    test(binary64, negative_signalling_zero_zero, 0, 0xfff7ffffffffffff,
         payload := 0x7ffffffffffff);

    test(binary128, 0, 0, 0x00000000000000000000000000000000);
    test(binary128, negative_zero, 0, 0x80000000000000000000000000000000);
    test(binary128, 1, -16494, 0x00000000000000000000000000000001);
    test(binary128, -1, -16494, 0x80000000000000000000000000000001);
    test(binary128, 1, -16493, 0x00000000000000000000000000000002);
    test(binary128, -1, -16493, 0x80000000000000000000000000000002);
    test(binary128, 3, -16494, 0x00000000000000000000000000000003);
    test(binary128, -3, -16494, 0x80000000000000000000000000000003);
    test(binary128, 1, -16383, 0x00008000000000000000000000000000);
    test(binary128, -1, -16383, 0x80008000000000000000000000000000);
    test(binary128, 1 - 1/(1 << 112), -16382,
         0x0000ffffffffffffffffffffffffffff);
    test(binary128, -(1 - 1/(1 << 112)), -16382,
         0x8000ffffffffffffffffffffffffffff);
    test(binary128, 1, -16382, 0x00010000000000000000000000000000);
    test(binary128, -1, -16382, 0x80010000000000000000000000000000);
    test(binary128, 1 + 1/(1 << 112), -16382,
         0x00010000000000000000000000000001);
    test(binary128, -(1 + 1/(1 << 112)), -16382,
         0x80010000000000000000000000000001);
    test(binary128, 1, -16381, 0x00020000000000000000000000000000);
    test(binary128, -1, -16381, 0x80020000000000000000000000000000);
    test(binary128, 1, 16382, 0x7ffd0000000000000000000000000000);
    test(binary128, -1, 16382, 0xfffd0000000000000000000000000000);
    test(binary128, 1, 16383, 0x7ffe0000000000000000000000000000);
    test(binary128, -1, 16383, 0xfffe0000000000000000000000000000);
    test(binary128, (1 << 113) - 1, 16271, 0x7ffeffffffffffffffffffffffffffff);
    test(binary128, -((1 << 113) - 1), 16271,
         0xfffeffffffffffffffffffffffffffff);
    test(binary128, +oo, 0, 0x7fff0000000000000000000000000000);
    test(binary128, -oo, 0, 0xffff0000000000000000000000000000);
    test(binary128, 0/0, 0, 0x7fff8000000000000000000000000000);
    test(binary128, negative_zero_zero, 0, 0xffff8000000000000000000000000000);
    test(binary128, signalling_zero_zero, 0,
         0x7fff0000000000000000000000000001);
    test(binary128, negative_signalling_zero_zero, 0,
         0xffff0000000000000000000000000001);
    test(binary128, 0/0, 0, 0x7fff8000000000000000000000000001,
         payload := 0x1);
    test(binary128, negative_zero_zero, 0, 0xffff8000000000000000000000000001,
         payload := 0x1);
    test(binary128, 0/0, 0, 0x7fffffffffffffffffffffffffffffff,
         payload := 0x7fffffffffffffffffffffffffff);
    test(binary128, negative_zero_zero, 0, 0xffffffffffffffffffffffffffffffff,
         payload := 0x7fffffffffffffffffffffffffff);
    test(binary128, signalling_zero_zero, 0,
         0x7fff7fffffffffffffffffffffffffff,
         payload := 0x7fffffffffffffffffffffffffff);
    test(binary128, negative_signalling_zero_zero, 0,
         0xffff7fffffffffffffffffffffffffff,
         payload := 0x7fffffffffffffffffffffffffff);

    "    Decimal using packed decimal encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(false);

    test(decimal32, 0, -101, 0x00000000);
    test(decimal32, 0, -102, 0x00000000);
    test(decimal32, 0, -100, 0x00100000);
    test(decimal32, 0, -99, 0x00200000);
    test(decimal32, 0, -98, 0x00300000);
    test(decimal32, 0, -97, 0x00400000);
    test(decimal32, 0, -93, 0x00800000);
    test(decimal32, 0, -85, 0x01000000);
    test(decimal32, 0, -69, 0x02000000);
    test(decimal32, 0, -37, 0x20000000);
    test(decimal32, 0, 27, 0x40000000);
    test(decimal32, 0, 89, 0x43e00000);
    test(decimal32, 0, 90, 0x43f00000);
    test(decimal32, 0, 91, 0x43f00000);
    test(decimal32, negative_zero, -101, 0x80000000);
    test(decimal32, negative_zero, -102, 0x80000000);
    test(decimal32, negative_zero, -100, 0x80100000);
    test(decimal32, negative_zero, -99, 0x80200000);
    test(decimal32, negative_zero, -98, 0x80300000);
    test(decimal32, negative_zero, -97, 0x80400000);
    test(decimal32, negative_zero, -93, 0x80800000);
    test(decimal32, negative_zero, -85, 0x81000000);
    test(decimal32, negative_zero, -69, 0x82000000);
    test(decimal32, negative_zero, -37, 0xa0000000);
    test(decimal32, negative_zero, 27, 0xc0000000);
    test(decimal32, negative_zero, 89, 0xc3e00000);
    test(decimal32, negative_zero, 90, 0xc3f00000);
    test(decimal32, negative_zero, 91, 0xc3f00000);
    test(decimal32, 1, -101, 0x00000001);
    test(decimal32, -1, -101, 0x80000001);
    test(decimal32, 2, -101, 0x00000002);
    test(decimal32, -2, -101, 0x80000002);
    test(decimal32, 1, -100, 0x00100001);
    test(decimal32, -1, -100, 0x80100001);
    test(decimal32, 3, -101, 0x00000003);
    test(decimal32, -3, -101, 0x80000003);

    /* Now we'll test the encoding and decoding of all the canonical declets
     * we haven't just tried. */
    test(decimal32, 4, -101, 0x00000004);
    test(decimal32, 5, -101, 0x00000005);
    test(decimal32, 6, -101, 0x00000006);
    test(decimal32, 7, -101, 0x00000007);
    test(decimal32, 8, -101, 0x00000008);
    test(decimal32, 9, -101, 0x00000009);
    test(decimal32, 10, -101, 0x00000010);
    test(decimal32, 11, -101, 0x00000011);
    test(decimal32, 12, -101, 0x00000012);
    test(decimal32, 13, -101, 0x00000013);
    test(decimal32, 14, -101, 0x00000014);
    test(decimal32, 15, -101, 0x00000015);
    test(decimal32, 16, -101, 0x00000016);
    test(decimal32, 17, -101, 0x00000017);
    test(decimal32, 18, -101, 0x00000018);
    test(decimal32, 19, -101, 0x00000019);
    test(decimal32, 20, -101, 0x00000020);
    test(decimal32, 21, -101, 0x00000021);
    test(decimal32, 22, -101, 0x00000022);
    test(decimal32, 23, -101, 0x00000023);
    test(decimal32, 24, -101, 0x00000024);
    test(decimal32, 25, -101, 0x00000025);
    test(decimal32, 26, -101, 0x00000026);
    test(decimal32, 27, -101, 0x00000027);
    test(decimal32, 28, -101, 0x00000028);
    test(decimal32, 29, -101, 0x00000029);
    test(decimal32, 30, -101, 0x00000030);
    test(decimal32, 31, -101, 0x00000031);
    test(decimal32, 32, -101, 0x00000032);
    test(decimal32, 33, -101, 0x00000033);
    test(decimal32, 34, -101, 0x00000034);
    test(decimal32, 35, -101, 0x00000035);
    test(decimal32, 36, -101, 0x00000036);
    test(decimal32, 37, -101, 0x00000037);
    test(decimal32, 38, -101, 0x00000038);
    test(decimal32, 39, -101, 0x00000039);
    test(decimal32, 40, -101, 0x00000040);
    test(decimal32, 41, -101, 0x00000041);
    test(decimal32, 42, -101, 0x00000042);
    test(decimal32, 43, -101, 0x00000043);
    test(decimal32, 44, -101, 0x00000044);
    test(decimal32, 45, -101, 0x00000045);
    test(decimal32, 46, -101, 0x00000046);
    test(decimal32, 47, -101, 0x00000047);
    test(decimal32, 48, -101, 0x00000048);
    test(decimal32, 49, -101, 0x00000049);
    test(decimal32, 50, -101, 0x00000050);
    test(decimal32, 51, -101, 0x00000051);
    test(decimal32, 52, -101, 0x00000052);
    test(decimal32, 53, -101, 0x00000053);
    test(decimal32, 54, -101, 0x00000054);
    test(decimal32, 55, -101, 0x00000055);
    test(decimal32, 56, -101, 0x00000056);
    test(decimal32, 57, -101, 0x00000057);
    test(decimal32, 58, -101, 0x00000058);
    test(decimal32, 59, -101, 0x00000059);
    test(decimal32, 60, -101, 0x00000060);
    test(decimal32, 61, -101, 0x00000061);
    test(decimal32, 62, -101, 0x00000062);
    test(decimal32, 63, -101, 0x00000063);
    test(decimal32, 64, -101, 0x00000064);
    test(decimal32, 65, -101, 0x00000065);
    test(decimal32, 66, -101, 0x00000066);
    test(decimal32, 67, -101, 0x00000067);
    test(decimal32, 68, -101, 0x00000068);
    test(decimal32, 69, -101, 0x00000069);
    test(decimal32, 70, -101, 0x00000070);
    test(decimal32, 71, -101, 0x00000071);
    test(decimal32, 72, -101, 0x00000072);
    test(decimal32, 73, -101, 0x00000073);
    test(decimal32, 74, -101, 0x00000074);
    test(decimal32, 75, -101, 0x00000075);
    test(decimal32, 76, -101, 0x00000076);
    test(decimal32, 77, -101, 0x00000077);
    test(decimal32, 78, -101, 0x00000078);
    test(decimal32, 79, -101, 0x00000079);
    test(decimal32, 80, -101, 0x0000000a);
    test(decimal32, 81, -101, 0x0000000b);
    test(decimal32, 82, -101, 0x0000002a);
    test(decimal32, 83, -101, 0x0000002b);
    test(decimal32, 84, -101, 0x0000004a);
    test(decimal32, 85, -101, 0x0000004b);
    test(decimal32, 86, -101, 0x0000006a);
    test(decimal32, 87, -101, 0x0000006b);
    test(decimal32, 88, -101, 0x0000004e);
    test(decimal32, 89, -101, 0x0000004f);
    test(decimal32, 90, -101, 0x0000001a);
    test(decimal32, 91, -101, 0x0000001b);
    test(decimal32, 92, -101, 0x0000003a);
    test(decimal32, 93, -101, 0x0000003b);
    test(decimal32, 94, -101, 0x0000005a);
    test(decimal32, 95, -101, 0x0000005b);
    test(decimal32, 96, -101, 0x0000007a);
    test(decimal32, 97, -101, 0x0000007b);
    test(decimal32, 98, -101, 0x0000005e);
    test(decimal32, 99, -101, 0x0000005f);
    test(decimal32, 100, -101, 0x00000080);
    test(decimal32, 101, -101, 0x00000081);
    test(decimal32, 102, -101, 0x00000082);
    test(decimal32, 103, -101, 0x00000083);
    test(decimal32, 104, -101, 0x00000084);
    test(decimal32, 105, -101, 0x00000085);
    test(decimal32, 106, -101, 0x00000086);
    test(decimal32, 107, -101, 0x00000087);
    test(decimal32, 108, -101, 0x00000088);
    test(decimal32, 109, -101, 0x00000089);
    test(decimal32, 110, -101, 0x00000090);
    test(decimal32, 111, -101, 0x00000091);
    test(decimal32, 112, -101, 0x00000092);
    test(decimal32, 113, -101, 0x00000093);
    test(decimal32, 114, -101, 0x00000094);
    test(decimal32, 115, -101, 0x00000095);
    test(decimal32, 116, -101, 0x00000096);
    test(decimal32, 117, -101, 0x00000097);
    test(decimal32, 118, -101, 0x00000098);
    test(decimal32, 119, -101, 0x00000099);
    test(decimal32, 120, -101, 0x000000a0);
    test(decimal32, 121, -101, 0x000000a1);
    test(decimal32, 122, -101, 0x000000a2);
    test(decimal32, 123, -101, 0x000000a3);
    test(decimal32, 124, -101, 0x000000a4);
    test(decimal32, 125, -101, 0x000000a5);
    test(decimal32, 126, -101, 0x000000a6);
    test(decimal32, 127, -101, 0x000000a7);
    test(decimal32, 128, -101, 0x000000a8);
    test(decimal32, 129, -101, 0x000000a9);
    test(decimal32, 130, -101, 0x000000b0);
    test(decimal32, 131, -101, 0x000000b1);
    test(decimal32, 132, -101, 0x000000b2);
    test(decimal32, 133, -101, 0x000000b3);
    test(decimal32, 134, -101, 0x000000b4);
    test(decimal32, 135, -101, 0x000000b5);
    test(decimal32, 136, -101, 0x000000b6);
    test(decimal32, 137, -101, 0x000000b7);
    test(decimal32, 138, -101, 0x000000b8);
    test(decimal32, 139, -101, 0x000000b9);
    test(decimal32, 140, -101, 0x000000c0);
    test(decimal32, 141, -101, 0x000000c1);
    test(decimal32, 142, -101, 0x000000c2);
    test(decimal32, 143, -101, 0x000000c3);
    test(decimal32, 144, -101, 0x000000c4);
    test(decimal32, 145, -101, 0x000000c5);
    test(decimal32, 146, -101, 0x000000c6);
    test(decimal32, 147, -101, 0x000000c7);
    test(decimal32, 148, -101, 0x000000c8);
    test(decimal32, 149, -101, 0x000000c9);
    test(decimal32, 150, -101, 0x000000d0);
    test(decimal32, 151, -101, 0x000000d1);
    test(decimal32, 152, -101, 0x000000d2);
    test(decimal32, 153, -101, 0x000000d3);
    test(decimal32, 154, -101, 0x000000d4);
    test(decimal32, 155, -101, 0x000000d5);
    test(decimal32, 156, -101, 0x000000d6);
    test(decimal32, 157, -101, 0x000000d7);
    test(decimal32, 158, -101, 0x000000d8);
    test(decimal32, 159, -101, 0x000000d9);
    test(decimal32, 160, -101, 0x000000e0);
    test(decimal32, 161, -101, 0x000000e1);
    test(decimal32, 162, -101, 0x000000e2);
    test(decimal32, 163, -101, 0x000000e3);
    test(decimal32, 164, -101, 0x000000e4);
    test(decimal32, 165, -101, 0x000000e5);
    test(decimal32, 166, -101, 0x000000e6);
    test(decimal32, 167, -101, 0x000000e7);
    test(decimal32, 168, -101, 0x000000e8);
    test(decimal32, 169, -101, 0x000000e9);
    test(decimal32, 170, -101, 0x000000f0);
    test(decimal32, 171, -101, 0x000000f1);
    test(decimal32, 172, -101, 0x000000f2);
    test(decimal32, 173, -101, 0x000000f3);
    test(decimal32, 174, -101, 0x000000f4);
    test(decimal32, 175, -101, 0x000000f5);
    test(decimal32, 176, -101, 0x000000f6);
    test(decimal32, 177, -101, 0x000000f7);
    test(decimal32, 178, -101, 0x000000f8);
    test(decimal32, 179, -101, 0x000000f9);
    test(decimal32, 180, -101, 0x0000008a);
    test(decimal32, 181, -101, 0x0000008b);
    test(decimal32, 182, -101, 0x000000aa);
    test(decimal32, 183, -101, 0x000000ab);
    test(decimal32, 184, -101, 0x000000ca);
    test(decimal32, 185, -101, 0x000000cb);
    test(decimal32, 186, -101, 0x000000ea);
    test(decimal32, 187, -101, 0x000000eb);
    test(decimal32, 188, -101, 0x000000ce);
    test(decimal32, 189, -101, 0x000000cf);
    test(decimal32, 190, -101, 0x0000009a);
    test(decimal32, 191, -101, 0x0000009b);
    test(decimal32, 192, -101, 0x000000ba);
    test(decimal32, 193, -101, 0x000000bb);
    test(decimal32, 194, -101, 0x000000da);
    test(decimal32, 195, -101, 0x000000db);
    test(decimal32, 196, -101, 0x000000fa);
    test(decimal32, 197, -101, 0x000000fb);
    test(decimal32, 198, -101, 0x000000de);
    test(decimal32, 199, -101, 0x000000df);
    test(decimal32, 200, -101, 0x00000100);
    test(decimal32, 201, -101, 0x00000101);
    test(decimal32, 202, -101, 0x00000102);
    test(decimal32, 203, -101, 0x00000103);
    test(decimal32, 204, -101, 0x00000104);
    test(decimal32, 205, -101, 0x00000105);
    test(decimal32, 206, -101, 0x00000106);
    test(decimal32, 207, -101, 0x00000107);
    test(decimal32, 208, -101, 0x00000108);
    test(decimal32, 209, -101, 0x00000109);
    test(decimal32, 210, -101, 0x00000110);
    test(decimal32, 211, -101, 0x00000111);
    test(decimal32, 212, -101, 0x00000112);
    test(decimal32, 213, -101, 0x00000113);
    test(decimal32, 214, -101, 0x00000114);
    test(decimal32, 215, -101, 0x00000115);
    test(decimal32, 216, -101, 0x00000116);
    test(decimal32, 217, -101, 0x00000117);
    test(decimal32, 218, -101, 0x00000118);
    test(decimal32, 219, -101, 0x00000119);
    test(decimal32, 220, -101, 0x00000120);
    test(decimal32, 221, -101, 0x00000121);
    test(decimal32, 222, -101, 0x00000122);
    test(decimal32, 223, -101, 0x00000123);
    test(decimal32, 224, -101, 0x00000124);
    test(decimal32, 225, -101, 0x00000125);
    test(decimal32, 226, -101, 0x00000126);
    test(decimal32, 227, -101, 0x00000127);
    test(decimal32, 228, -101, 0x00000128);
    test(decimal32, 229, -101, 0x00000129);
    test(decimal32, 230, -101, 0x00000130);
    test(decimal32, 231, -101, 0x00000131);
    test(decimal32, 232, -101, 0x00000132);
    test(decimal32, 233, -101, 0x00000133);
    test(decimal32, 234, -101, 0x00000134);
    test(decimal32, 235, -101, 0x00000135);
    test(decimal32, 236, -101, 0x00000136);
    test(decimal32, 237, -101, 0x00000137);
    test(decimal32, 238, -101, 0x00000138);
    test(decimal32, 239, -101, 0x00000139);
    test(decimal32, 240, -101, 0x00000140);
    test(decimal32, 241, -101, 0x00000141);
    test(decimal32, 242, -101, 0x00000142);
    test(decimal32, 243, -101, 0x00000143);
    test(decimal32, 244, -101, 0x00000144);
    test(decimal32, 245, -101, 0x00000145);
    test(decimal32, 246, -101, 0x00000146);
    test(decimal32, 247, -101, 0x00000147);
    test(decimal32, 248, -101, 0x00000148);
    test(decimal32, 249, -101, 0x00000149);
    test(decimal32, 250, -101, 0x00000150);
    test(decimal32, 251, -101, 0x00000151);
    test(decimal32, 252, -101, 0x00000152);
    test(decimal32, 253, -101, 0x00000153);
    test(decimal32, 254, -101, 0x00000154);
    test(decimal32, 255, -101, 0x00000155);
    test(decimal32, 256, -101, 0x00000156);
    test(decimal32, 257, -101, 0x00000157);
    test(decimal32, 258, -101, 0x00000158);
    test(decimal32, 259, -101, 0x00000159);
    test(decimal32, 260, -101, 0x00000160);
    test(decimal32, 261, -101, 0x00000161);
    test(decimal32, 262, -101, 0x00000162);
    test(decimal32, 263, -101, 0x00000163);
    test(decimal32, 264, -101, 0x00000164);
    test(decimal32, 265, -101, 0x00000165);
    test(decimal32, 266, -101, 0x00000166);
    test(decimal32, 267, -101, 0x00000167);
    test(decimal32, 268, -101, 0x00000168);
    test(decimal32, 269, -101, 0x00000169);
    test(decimal32, 270, -101, 0x00000170);
    test(decimal32, 271, -101, 0x00000171);
    test(decimal32, 272, -101, 0x00000172);
    test(decimal32, 273, -101, 0x00000173);
    test(decimal32, 274, -101, 0x00000174);
    test(decimal32, 275, -101, 0x00000175);
    test(decimal32, 276, -101, 0x00000176);
    test(decimal32, 277, -101, 0x00000177);
    test(decimal32, 278, -101, 0x00000178);
    test(decimal32, 279, -101, 0x00000179);
    test(decimal32, 280, -101, 0x0000010a);
    test(decimal32, 281, -101, 0x0000010b);
    test(decimal32, 282, -101, 0x0000012a);
    test(decimal32, 283, -101, 0x0000012b);
    test(decimal32, 284, -101, 0x0000014a);
    test(decimal32, 285, -101, 0x0000014b);
    test(decimal32, 286, -101, 0x0000016a);
    test(decimal32, 287, -101, 0x0000016b);
    test(decimal32, 288, -101, 0x0000014e);
    test(decimal32, 289, -101, 0x0000014f);
    test(decimal32, 290, -101, 0x0000011a);
    test(decimal32, 291, -101, 0x0000011b);
    test(decimal32, 292, -101, 0x0000013a);
    test(decimal32, 293, -101, 0x0000013b);
    test(decimal32, 294, -101, 0x0000015a);
    test(decimal32, 295, -101, 0x0000015b);
    test(decimal32, 296, -101, 0x0000017a);
    test(decimal32, 297, -101, 0x0000017b);
    test(decimal32, 298, -101, 0x0000015e);
    test(decimal32, 299, -101, 0x0000015f);
    test(decimal32, 300, -101, 0x00000180);
    test(decimal32, 301, -101, 0x00000181);
    test(decimal32, 302, -101, 0x00000182);
    test(decimal32, 303, -101, 0x00000183);
    test(decimal32, 304, -101, 0x00000184);
    test(decimal32, 305, -101, 0x00000185);
    test(decimal32, 306, -101, 0x00000186);
    test(decimal32, 307, -101, 0x00000187);
    test(decimal32, 308, -101, 0x00000188);
    test(decimal32, 309, -101, 0x00000189);
    test(decimal32, 310, -101, 0x00000190);
    test(decimal32, 311, -101, 0x00000191);
    test(decimal32, 312, -101, 0x00000192);
    test(decimal32, 313, -101, 0x00000193);
    test(decimal32, 314, -101, 0x00000194);
    test(decimal32, 315, -101, 0x00000195);
    test(decimal32, 316, -101, 0x00000196);
    test(decimal32, 317, -101, 0x00000197);
    test(decimal32, 318, -101, 0x00000198);
    test(decimal32, 319, -101, 0x00000199);
    test(decimal32, 320, -101, 0x000001a0);
    test(decimal32, 321, -101, 0x000001a1);
    test(decimal32, 322, -101, 0x000001a2);
    test(decimal32, 323, -101, 0x000001a3);
    test(decimal32, 324, -101, 0x000001a4);
    test(decimal32, 325, -101, 0x000001a5);
    test(decimal32, 326, -101, 0x000001a6);
    test(decimal32, 327, -101, 0x000001a7);
    test(decimal32, 328, -101, 0x000001a8);
    test(decimal32, 329, -101, 0x000001a9);
    test(decimal32, 330, -101, 0x000001b0);
    test(decimal32, 331, -101, 0x000001b1);
    test(decimal32, 332, -101, 0x000001b2);
    test(decimal32, 333, -101, 0x000001b3);
    test(decimal32, 334, -101, 0x000001b4);
    test(decimal32, 335, -101, 0x000001b5);
    test(decimal32, 336, -101, 0x000001b6);
    test(decimal32, 337, -101, 0x000001b7);
    test(decimal32, 338, -101, 0x000001b8);
    test(decimal32, 339, -101, 0x000001b9);
    test(decimal32, 340, -101, 0x000001c0);
    test(decimal32, 341, -101, 0x000001c1);
    test(decimal32, 342, -101, 0x000001c2);
    test(decimal32, 343, -101, 0x000001c3);
    test(decimal32, 344, -101, 0x000001c4);
    test(decimal32, 345, -101, 0x000001c5);
    test(decimal32, 346, -101, 0x000001c6);
    test(decimal32, 347, -101, 0x000001c7);
    test(decimal32, 348, -101, 0x000001c8);
    test(decimal32, 349, -101, 0x000001c9);
    test(decimal32, 350, -101, 0x000001d0);
    test(decimal32, 351, -101, 0x000001d1);
    test(decimal32, 352, -101, 0x000001d2);
    test(decimal32, 353, -101, 0x000001d3);
    test(decimal32, 354, -101, 0x000001d4);
    test(decimal32, 355, -101, 0x000001d5);
    test(decimal32, 356, -101, 0x000001d6);
    test(decimal32, 357, -101, 0x000001d7);
    test(decimal32, 358, -101, 0x000001d8);
    test(decimal32, 359, -101, 0x000001d9);
    test(decimal32, 360, -101, 0x000001e0);
    test(decimal32, 361, -101, 0x000001e1);
    test(decimal32, 362, -101, 0x000001e2);
    test(decimal32, 363, -101, 0x000001e3);
    test(decimal32, 364, -101, 0x000001e4);
    test(decimal32, 365, -101, 0x000001e5);
    test(decimal32, 366, -101, 0x000001e6);
    test(decimal32, 367, -101, 0x000001e7);
    test(decimal32, 368, -101, 0x000001e8);
    test(decimal32, 369, -101, 0x000001e9);
    test(decimal32, 370, -101, 0x000001f0);
    test(decimal32, 371, -101, 0x000001f1);
    test(decimal32, 372, -101, 0x000001f2);
    test(decimal32, 373, -101, 0x000001f3);
    test(decimal32, 374, -101, 0x000001f4);
    test(decimal32, 375, -101, 0x000001f5);
    test(decimal32, 376, -101, 0x000001f6);
    test(decimal32, 377, -101, 0x000001f7);
    test(decimal32, 378, -101, 0x000001f8);
    test(decimal32, 379, -101, 0x000001f9);
    test(decimal32, 380, -101, 0x0000018a);
    test(decimal32, 381, -101, 0x0000018b);
    test(decimal32, 382, -101, 0x000001aa);
    test(decimal32, 383, -101, 0x000001ab);
    test(decimal32, 384, -101, 0x000001ca);
    test(decimal32, 385, -101, 0x000001cb);
    test(decimal32, 386, -101, 0x000001ea);
    test(decimal32, 387, -101, 0x000001eb);
    test(decimal32, 388, -101, 0x000001ce);
    test(decimal32, 389, -101, 0x000001cf);
    test(decimal32, 390, -101, 0x0000019a);
    test(decimal32, 391, -101, 0x0000019b);
    test(decimal32, 392, -101, 0x000001ba);
    test(decimal32, 393, -101, 0x000001bb);
    test(decimal32, 394, -101, 0x000001da);
    test(decimal32, 395, -101, 0x000001db);
    test(decimal32, 396, -101, 0x000001fa);
    test(decimal32, 397, -101, 0x000001fb);
    test(decimal32, 398, -101, 0x000001de);
    test(decimal32, 399, -101, 0x000001df);
    test(decimal32, 400, -101, 0x00000200);
    test(decimal32, 401, -101, 0x00000201);
    test(decimal32, 402, -101, 0x00000202);
    test(decimal32, 403, -101, 0x00000203);
    test(decimal32, 404, -101, 0x00000204);
    test(decimal32, 405, -101, 0x00000205);
    test(decimal32, 406, -101, 0x00000206);
    test(decimal32, 407, -101, 0x00000207);
    test(decimal32, 408, -101, 0x00000208);
    test(decimal32, 409, -101, 0x00000209);
    test(decimal32, 410, -101, 0x00000210);
    test(decimal32, 411, -101, 0x00000211);
    test(decimal32, 412, -101, 0x00000212);
    test(decimal32, 413, -101, 0x00000213);
    test(decimal32, 414, -101, 0x00000214);
    test(decimal32, 415, -101, 0x00000215);
    test(decimal32, 416, -101, 0x00000216);
    test(decimal32, 417, -101, 0x00000217);
    test(decimal32, 418, -101, 0x00000218);
    test(decimal32, 419, -101, 0x00000219);
    test(decimal32, 420, -101, 0x00000220);
    test(decimal32, 421, -101, 0x00000221);
    test(decimal32, 422, -101, 0x00000222);
    test(decimal32, 423, -101, 0x00000223);
    test(decimal32, 424, -101, 0x00000224);
    test(decimal32, 425, -101, 0x00000225);
    test(decimal32, 426, -101, 0x00000226);
    test(decimal32, 427, -101, 0x00000227);
    test(decimal32, 428, -101, 0x00000228);
    test(decimal32, 429, -101, 0x00000229);
    test(decimal32, 430, -101, 0x00000230);
    test(decimal32, 431, -101, 0x00000231);
    test(decimal32, 432, -101, 0x00000232);
    test(decimal32, 433, -101, 0x00000233);
    test(decimal32, 434, -101, 0x00000234);
    test(decimal32, 435, -101, 0x00000235);
    test(decimal32, 436, -101, 0x00000236);
    test(decimal32, 437, -101, 0x00000237);
    test(decimal32, 438, -101, 0x00000238);
    test(decimal32, 439, -101, 0x00000239);
    test(decimal32, 440, -101, 0x00000240);
    test(decimal32, 441, -101, 0x00000241);
    test(decimal32, 442, -101, 0x00000242);
    test(decimal32, 443, -101, 0x00000243);
    test(decimal32, 444, -101, 0x00000244);
    test(decimal32, 445, -101, 0x00000245);
    test(decimal32, 446, -101, 0x00000246);
    test(decimal32, 447, -101, 0x00000247);
    test(decimal32, 448, -101, 0x00000248);
    test(decimal32, 449, -101, 0x00000249);
    test(decimal32, 450, -101, 0x00000250);
    test(decimal32, 451, -101, 0x00000251);
    test(decimal32, 452, -101, 0x00000252);
    test(decimal32, 453, -101, 0x00000253);
    test(decimal32, 454, -101, 0x00000254);
    test(decimal32, 455, -101, 0x00000255);
    test(decimal32, 456, -101, 0x00000256);
    test(decimal32, 457, -101, 0x00000257);
    test(decimal32, 458, -101, 0x00000258);
    test(decimal32, 459, -101, 0x00000259);
    test(decimal32, 460, -101, 0x00000260);
    test(decimal32, 461, -101, 0x00000261);
    test(decimal32, 462, -101, 0x00000262);
    test(decimal32, 463, -101, 0x00000263);
    test(decimal32, 464, -101, 0x00000264);
    test(decimal32, 465, -101, 0x00000265);
    test(decimal32, 466, -101, 0x00000266);
    test(decimal32, 467, -101, 0x00000267);
    test(decimal32, 468, -101, 0x00000268);
    test(decimal32, 469, -101, 0x00000269);
    test(decimal32, 470, -101, 0x00000270);
    test(decimal32, 471, -101, 0x00000271);
    test(decimal32, 472, -101, 0x00000272);
    test(decimal32, 473, -101, 0x00000273);
    test(decimal32, 474, -101, 0x00000274);
    test(decimal32, 475, -101, 0x00000275);
    test(decimal32, 476, -101, 0x00000276);
    test(decimal32, 477, -101, 0x00000277);
    test(decimal32, 478, -101, 0x00000278);
    test(decimal32, 479, -101, 0x00000279);
    test(decimal32, 480, -101, 0x0000020a);
    test(decimal32, 481, -101, 0x0000020b);
    test(decimal32, 482, -101, 0x0000022a);
    test(decimal32, 483, -101, 0x0000022b);
    test(decimal32, 484, -101, 0x0000024a);
    test(decimal32, 485, -101, 0x0000024b);
    test(decimal32, 486, -101, 0x0000026a);
    test(decimal32, 487, -101, 0x0000026b);
    test(decimal32, 488, -101, 0x0000024e);
    test(decimal32, 489, -101, 0x0000024f);
    test(decimal32, 490, -101, 0x0000021a);
    test(decimal32, 491, -101, 0x0000021b);
    test(decimal32, 492, -101, 0x0000023a);
    test(decimal32, 493, -101, 0x0000023b);
    test(decimal32, 494, -101, 0x0000025a);
    test(decimal32, 495, -101, 0x0000025b);
    test(decimal32, 496, -101, 0x0000027a);
    test(decimal32, 497, -101, 0x0000027b);
    test(decimal32, 498, -101, 0x0000025e);
    test(decimal32, 499, -101, 0x0000025f);
    test(decimal32, 500, -101, 0x00000280);
    test(decimal32, 501, -101, 0x00000281);
    test(decimal32, 502, -101, 0x00000282);
    test(decimal32, 503, -101, 0x00000283);
    test(decimal32, 504, -101, 0x00000284);
    test(decimal32, 505, -101, 0x00000285);
    test(decimal32, 506, -101, 0x00000286);
    test(decimal32, 507, -101, 0x00000287);
    test(decimal32, 508, -101, 0x00000288);
    test(decimal32, 509, -101, 0x00000289);
    test(decimal32, 510, -101, 0x00000290);
    test(decimal32, 511, -101, 0x00000291);
    test(decimal32, 512, -101, 0x00000292);
    test(decimal32, 513, -101, 0x00000293);
    test(decimal32, 514, -101, 0x00000294);
    test(decimal32, 515, -101, 0x00000295);
    test(decimal32, 516, -101, 0x00000296);
    test(decimal32, 517, -101, 0x00000297);
    test(decimal32, 518, -101, 0x00000298);
    test(decimal32, 519, -101, 0x00000299);
    test(decimal32, 520, -101, 0x000002a0);
    test(decimal32, 521, -101, 0x000002a1);
    test(decimal32, 522, -101, 0x000002a2);
    test(decimal32, 523, -101, 0x000002a3);
    test(decimal32, 524, -101, 0x000002a4);
    test(decimal32, 525, -101, 0x000002a5);
    test(decimal32, 526, -101, 0x000002a6);
    test(decimal32, 527, -101, 0x000002a7);
    test(decimal32, 528, -101, 0x000002a8);
    test(decimal32, 529, -101, 0x000002a9);
    test(decimal32, 530, -101, 0x000002b0);
    test(decimal32, 531, -101, 0x000002b1);
    test(decimal32, 532, -101, 0x000002b2);
    test(decimal32, 533, -101, 0x000002b3);
    test(decimal32, 534, -101, 0x000002b4);
    test(decimal32, 535, -101, 0x000002b5);
    test(decimal32, 536, -101, 0x000002b6);
    test(decimal32, 537, -101, 0x000002b7);
    test(decimal32, 538, -101, 0x000002b8);
    test(decimal32, 539, -101, 0x000002b9);
    test(decimal32, 540, -101, 0x000002c0);
    test(decimal32, 541, -101, 0x000002c1);
    test(decimal32, 542, -101, 0x000002c2);
    test(decimal32, 543, -101, 0x000002c3);
    test(decimal32, 544, -101, 0x000002c4);
    test(decimal32, 545, -101, 0x000002c5);
    test(decimal32, 546, -101, 0x000002c6);
    test(decimal32, 547, -101, 0x000002c7);
    test(decimal32, 548, -101, 0x000002c8);
    test(decimal32, 549, -101, 0x000002c9);
    test(decimal32, 550, -101, 0x000002d0);
    test(decimal32, 551, -101, 0x000002d1);
    test(decimal32, 552, -101, 0x000002d2);
    test(decimal32, 553, -101, 0x000002d3);
    test(decimal32, 554, -101, 0x000002d4);
    test(decimal32, 555, -101, 0x000002d5);
    test(decimal32, 556, -101, 0x000002d6);
    test(decimal32, 557, -101, 0x000002d7);
    test(decimal32, 558, -101, 0x000002d8);
    test(decimal32, 559, -101, 0x000002d9);
    test(decimal32, 560, -101, 0x000002e0);
    test(decimal32, 561, -101, 0x000002e1);
    test(decimal32, 562, -101, 0x000002e2);
    test(decimal32, 563, -101, 0x000002e3);
    test(decimal32, 564, -101, 0x000002e4);
    test(decimal32, 565, -101, 0x000002e5);
    test(decimal32, 566, -101, 0x000002e6);
    test(decimal32, 567, -101, 0x000002e7);
    test(decimal32, 568, -101, 0x000002e8);
    test(decimal32, 569, -101, 0x000002e9);
    test(decimal32, 570, -101, 0x000002f0);
    test(decimal32, 571, -101, 0x000002f1);
    test(decimal32, 572, -101, 0x000002f2);
    test(decimal32, 573, -101, 0x000002f3);
    test(decimal32, 574, -101, 0x000002f4);
    test(decimal32, 575, -101, 0x000002f5);
    test(decimal32, 576, -101, 0x000002f6);
    test(decimal32, 577, -101, 0x000002f7);
    test(decimal32, 578, -101, 0x000002f8);
    test(decimal32, 579, -101, 0x000002f9);
    test(decimal32, 580, -101, 0x0000028a);
    test(decimal32, 581, -101, 0x0000028b);
    test(decimal32, 582, -101, 0x000002aa);
    test(decimal32, 583, -101, 0x000002ab);
    test(decimal32, 584, -101, 0x000002ca);
    test(decimal32, 585, -101, 0x000002cb);
    test(decimal32, 586, -101, 0x000002ea);
    test(decimal32, 587, -101, 0x000002eb);
    test(decimal32, 588, -101, 0x000002ce);
    test(decimal32, 589, -101, 0x000002cf);
    test(decimal32, 590, -101, 0x0000029a);
    test(decimal32, 591, -101, 0x0000029b);
    test(decimal32, 592, -101, 0x000002ba);
    test(decimal32, 593, -101, 0x000002bb);
    test(decimal32, 594, -101, 0x000002da);
    test(decimal32, 595, -101, 0x000002db);
    test(decimal32, 596, -101, 0x000002fa);
    test(decimal32, 597, -101, 0x000002fb);
    test(decimal32, 598, -101, 0x000002de);
    test(decimal32, 599, -101, 0x000002df);
    test(decimal32, 600, -101, 0x00000300);
    test(decimal32, 601, -101, 0x00000301);
    test(decimal32, 602, -101, 0x00000302);
    test(decimal32, 603, -101, 0x00000303);
    test(decimal32, 604, -101, 0x00000304);
    test(decimal32, 605, -101, 0x00000305);
    test(decimal32, 606, -101, 0x00000306);
    test(decimal32, 607, -101, 0x00000307);
    test(decimal32, 608, -101, 0x00000308);
    test(decimal32, 609, -101, 0x00000309);
    test(decimal32, 610, -101, 0x00000310);
    test(decimal32, 611, -101, 0x00000311);
    test(decimal32, 612, -101, 0x00000312);
    test(decimal32, 613, -101, 0x00000313);
    test(decimal32, 614, -101, 0x00000314);
    test(decimal32, 615, -101, 0x00000315);
    test(decimal32, 616, -101, 0x00000316);
    test(decimal32, 617, -101, 0x00000317);
    test(decimal32, 618, -101, 0x00000318);
    test(decimal32, 619, -101, 0x00000319);
    test(decimal32, 620, -101, 0x00000320);
    test(decimal32, 621, -101, 0x00000321);
    test(decimal32, 622, -101, 0x00000322);
    test(decimal32, 623, -101, 0x00000323);
    test(decimal32, 624, -101, 0x00000324);
    test(decimal32, 625, -101, 0x00000325);
    test(decimal32, 626, -101, 0x00000326);
    test(decimal32, 627, -101, 0x00000327);
    test(decimal32, 628, -101, 0x00000328);
    test(decimal32, 629, -101, 0x00000329);
    test(decimal32, 630, -101, 0x00000330);
    test(decimal32, 631, -101, 0x00000331);
    test(decimal32, 632, -101, 0x00000332);
    test(decimal32, 633, -101, 0x00000333);
    test(decimal32, 634, -101, 0x00000334);
    test(decimal32, 635, -101, 0x00000335);
    test(decimal32, 636, -101, 0x00000336);
    test(decimal32, 637, -101, 0x00000337);
    test(decimal32, 638, -101, 0x00000338);
    test(decimal32, 639, -101, 0x00000339);
    test(decimal32, 640, -101, 0x00000340);
    test(decimal32, 641, -101, 0x00000341);
    test(decimal32, 642, -101, 0x00000342);
    test(decimal32, 643, -101, 0x00000343);
    test(decimal32, 644, -101, 0x00000344);
    test(decimal32, 645, -101, 0x00000345);
    test(decimal32, 646, -101, 0x00000346);
    test(decimal32, 647, -101, 0x00000347);
    test(decimal32, 648, -101, 0x00000348);
    test(decimal32, 649, -101, 0x00000349);
    test(decimal32, 650, -101, 0x00000350);
    test(decimal32, 651, -101, 0x00000351);
    test(decimal32, 652, -101, 0x00000352);
    test(decimal32, 653, -101, 0x00000353);
    test(decimal32, 654, -101, 0x00000354);
    test(decimal32, 655, -101, 0x00000355);
    test(decimal32, 656, -101, 0x00000356);
    test(decimal32, 657, -101, 0x00000357);
    test(decimal32, 658, -101, 0x00000358);
    test(decimal32, 659, -101, 0x00000359);
    test(decimal32, 660, -101, 0x00000360);
    test(decimal32, 661, -101, 0x00000361);
    test(decimal32, 662, -101, 0x00000362);
    test(decimal32, 663, -101, 0x00000363);
    test(decimal32, 664, -101, 0x00000364);
    test(decimal32, 665, -101, 0x00000365);
    test(decimal32, 666, -101, 0x00000366);
    test(decimal32, 667, -101, 0x00000367);
    test(decimal32, 668, -101, 0x00000368);
    test(decimal32, 669, -101, 0x00000369);
    test(decimal32, 670, -101, 0x00000370);
    test(decimal32, 671, -101, 0x00000371);
    test(decimal32, 672, -101, 0x00000372);
    test(decimal32, 673, -101, 0x00000373);
    test(decimal32, 674, -101, 0x00000374);
    test(decimal32, 675, -101, 0x00000375);
    test(decimal32, 676, -101, 0x00000376);
    test(decimal32, 677, -101, 0x00000377);
    test(decimal32, 678, -101, 0x00000378);
    test(decimal32, 679, -101, 0x00000379);
    test(decimal32, 680, -101, 0x0000030a);
    test(decimal32, 681, -101, 0x0000030b);
    test(decimal32, 682, -101, 0x0000032a);
    test(decimal32, 683, -101, 0x0000032b);
    test(decimal32, 684, -101, 0x0000034a);
    test(decimal32, 685, -101, 0x0000034b);
    test(decimal32, 686, -101, 0x0000036a);
    test(decimal32, 687, -101, 0x0000036b);
    test(decimal32, 688, -101, 0x0000034e);
    test(decimal32, 689, -101, 0x0000034f);
    test(decimal32, 690, -101, 0x0000031a);
    test(decimal32, 691, -101, 0x0000031b);
    test(decimal32, 692, -101, 0x0000033a);
    test(decimal32, 693, -101, 0x0000033b);
    test(decimal32, 694, -101, 0x0000035a);
    test(decimal32, 695, -101, 0x0000035b);
    test(decimal32, 696, -101, 0x0000037a);
    test(decimal32, 697, -101, 0x0000037b);
    test(decimal32, 698, -101, 0x0000035e);
    test(decimal32, 699, -101, 0x0000035f);
    test(decimal32, 700, -101, 0x00000380);
    test(decimal32, 701, -101, 0x00000381);
    test(decimal32, 702, -101, 0x00000382);
    test(decimal32, 703, -101, 0x00000383);
    test(decimal32, 704, -101, 0x00000384);
    test(decimal32, 705, -101, 0x00000385);
    test(decimal32, 706, -101, 0x00000386);
    test(decimal32, 707, -101, 0x00000387);
    test(decimal32, 708, -101, 0x00000388);
    test(decimal32, 709, -101, 0x00000389);
    test(decimal32, 710, -101, 0x00000390);
    test(decimal32, 711, -101, 0x00000391);
    test(decimal32, 712, -101, 0x00000392);
    test(decimal32, 713, -101, 0x00000393);
    test(decimal32, 714, -101, 0x00000394);
    test(decimal32, 715, -101, 0x00000395);
    test(decimal32, 716, -101, 0x00000396);
    test(decimal32, 717, -101, 0x00000397);
    test(decimal32, 718, -101, 0x00000398);
    test(decimal32, 719, -101, 0x00000399);
    test(decimal32, 720, -101, 0x000003a0);
    test(decimal32, 721, -101, 0x000003a1);
    test(decimal32, 722, -101, 0x000003a2);
    test(decimal32, 723, -101, 0x000003a3);
    test(decimal32, 724, -101, 0x000003a4);
    test(decimal32, 725, -101, 0x000003a5);
    test(decimal32, 726, -101, 0x000003a6);
    test(decimal32, 727, -101, 0x000003a7);
    test(decimal32, 728, -101, 0x000003a8);
    test(decimal32, 729, -101, 0x000003a9);
    test(decimal32, 730, -101, 0x000003b0);
    test(decimal32, 731, -101, 0x000003b1);
    test(decimal32, 732, -101, 0x000003b2);
    test(decimal32, 733, -101, 0x000003b3);
    test(decimal32, 734, -101, 0x000003b4);
    test(decimal32, 735, -101, 0x000003b5);
    test(decimal32, 736, -101, 0x000003b6);
    test(decimal32, 737, -101, 0x000003b7);
    test(decimal32, 738, -101, 0x000003b8);
    test(decimal32, 739, -101, 0x000003b9);
    test(decimal32, 740, -101, 0x000003c0);
    test(decimal32, 741, -101, 0x000003c1);
    test(decimal32, 742, -101, 0x000003c2);
    test(decimal32, 743, -101, 0x000003c3);
    test(decimal32, 744, -101, 0x000003c4);
    test(decimal32, 745, -101, 0x000003c5);
    test(decimal32, 746, -101, 0x000003c6);
    test(decimal32, 747, -101, 0x000003c7);
    test(decimal32, 748, -101, 0x000003c8);
    test(decimal32, 749, -101, 0x000003c9);
    test(decimal32, 750, -101, 0x000003d0);
    test(decimal32, 751, -101, 0x000003d1);
    test(decimal32, 752, -101, 0x000003d2);
    test(decimal32, 753, -101, 0x000003d3);
    test(decimal32, 754, -101, 0x000003d4);
    test(decimal32, 755, -101, 0x000003d5);
    test(decimal32, 756, -101, 0x000003d6);
    test(decimal32, 757, -101, 0x000003d7);
    test(decimal32, 758, -101, 0x000003d8);
    test(decimal32, 759, -101, 0x000003d9);
    test(decimal32, 760, -101, 0x000003e0);
    test(decimal32, 761, -101, 0x000003e1);
    test(decimal32, 762, -101, 0x000003e2);
    test(decimal32, 763, -101, 0x000003e3);
    test(decimal32, 764, -101, 0x000003e4);
    test(decimal32, 765, -101, 0x000003e5);
    test(decimal32, 766, -101, 0x000003e6);
    test(decimal32, 767, -101, 0x000003e7);
    test(decimal32, 768, -101, 0x000003e8);
    test(decimal32, 769, -101, 0x000003e9);
    test(decimal32, 770, -101, 0x000003f0);
    test(decimal32, 771, -101, 0x000003f1);
    test(decimal32, 772, -101, 0x000003f2);
    test(decimal32, 773, -101, 0x000003f3);
    test(decimal32, 774, -101, 0x000003f4);
    test(decimal32, 775, -101, 0x000003f5);
    test(decimal32, 776, -101, 0x000003f6);
    test(decimal32, 777, -101, 0x000003f7);
    test(decimal32, 778, -101, 0x000003f8);
    test(decimal32, 779, -101, 0x000003f9);
    test(decimal32, 780, -101, 0x0000038a);
    test(decimal32, 781, -101, 0x0000038b);
    test(decimal32, 782, -101, 0x000003aa);
    test(decimal32, 783, -101, 0x000003ab);
    test(decimal32, 784, -101, 0x000003ca);
    test(decimal32, 785, -101, 0x000003cb);
    test(decimal32, 786, -101, 0x000003ea);
    test(decimal32, 787, -101, 0x000003eb);
    test(decimal32, 788, -101, 0x000003ce);
    test(decimal32, 789, -101, 0x000003cf);
    test(decimal32, 790, -101, 0x0000039a);
    test(decimal32, 791, -101, 0x0000039b);
    test(decimal32, 792, -101, 0x000003ba);
    test(decimal32, 793, -101, 0x000003bb);
    test(decimal32, 794, -101, 0x000003da);
    test(decimal32, 795, -101, 0x000003db);
    test(decimal32, 796, -101, 0x000003fa);
    test(decimal32, 797, -101, 0x000003fb);
    test(decimal32, 798, -101, 0x000003de);
    test(decimal32, 799, -101, 0x000003df);
    test(decimal32, 800, -101, 0x0000000c);
    test(decimal32, 801, -101, 0x0000000d);
    test(decimal32, 802, -101, 0x0000010c);
    test(decimal32, 803, -101, 0x0000010d);
    test(decimal32, 804, -101, 0x0000020c);
    test(decimal32, 805, -101, 0x0000020d);
    test(decimal32, 806, -101, 0x0000030c);
    test(decimal32, 807, -101, 0x0000030d);
    test(decimal32, 808, -101, 0x0000002e);
    test(decimal32, 809, -101, 0x0000002f);
    test(decimal32, 810, -101, 0x0000001c);
    test(decimal32, 811, -101, 0x0000001d);
    test(decimal32, 812, -101, 0x0000011c);
    test(decimal32, 813, -101, 0x0000011d);
    test(decimal32, 814, -101, 0x0000021c);
    test(decimal32, 815, -101, 0x0000021d);
    test(decimal32, 816, -101, 0x0000031c);
    test(decimal32, 817, -101, 0x0000031d);
    test(decimal32, 818, -101, 0x0000003e);
    test(decimal32, 819, -101, 0x0000003f);
    test(decimal32, 820, -101, 0x0000002c);
    test(decimal32, 821, -101, 0x0000002d);
    test(decimal32, 822, -101, 0x0000012c);
    test(decimal32, 823, -101, 0x0000012d);
    test(decimal32, 824, -101, 0x0000022c);
    test(decimal32, 825, -101, 0x0000022d);
    test(decimal32, 826, -101, 0x0000032c);
    test(decimal32, 827, -101, 0x0000032d);
    test(decimal32, 828, -101, 0x0000012e);
    test(decimal32, 829, -101, 0x0000012f);
    test(decimal32, 830, -101, 0x0000003c);
    test(decimal32, 831, -101, 0x0000003d);
    test(decimal32, 832, -101, 0x0000013c);
    test(decimal32, 833, -101, 0x0000013d);
    test(decimal32, 834, -101, 0x0000023c);
    test(decimal32, 835, -101, 0x0000023d);
    test(decimal32, 836, -101, 0x0000033c);
    test(decimal32, 837, -101, 0x0000033d);
    test(decimal32, 838, -101, 0x0000013e);
    test(decimal32, 839, -101, 0x0000013f);
    test(decimal32, 840, -101, 0x0000004c);
    test(decimal32, 841, -101, 0x0000004d);
    test(decimal32, 842, -101, 0x0000014c);
    test(decimal32, 843, -101, 0x0000014d);
    test(decimal32, 844, -101, 0x0000024c);
    test(decimal32, 845, -101, 0x0000024d);
    test(decimal32, 846, -101, 0x0000034c);
    test(decimal32, 847, -101, 0x0000034d);
    test(decimal32, 848, -101, 0x0000022e);
    test(decimal32, 849, -101, 0x0000022f);
    test(decimal32, 850, -101, 0x0000005c);
    test(decimal32, 851, -101, 0x0000005d);
    test(decimal32, 852, -101, 0x0000015c);
    test(decimal32, 853, -101, 0x0000015d);
    test(decimal32, 854, -101, 0x0000025c);
    test(decimal32, 855, -101, 0x0000025d);
    test(decimal32, 856, -101, 0x0000035c);
    test(decimal32, 857, -101, 0x0000035d);
    test(decimal32, 858, -101, 0x0000023e);
    test(decimal32, 859, -101, 0x0000023f);
    test(decimal32, 860, -101, 0x0000006c);
    test(decimal32, 861, -101, 0x0000006d);
    test(decimal32, 862, -101, 0x0000016c);
    test(decimal32, 863, -101, 0x0000016d);
    test(decimal32, 864, -101, 0x0000026c);
    test(decimal32, 865, -101, 0x0000026d);
    test(decimal32, 866, -101, 0x0000036c);
    test(decimal32, 867, -101, 0x0000036d);
    test(decimal32, 868, -101, 0x0000032e);
    test(decimal32, 869, -101, 0x0000032f);
    test(decimal32, 870, -101, 0x0000007c);
    test(decimal32, 871, -101, 0x0000007d);
    test(decimal32, 872, -101, 0x0000017c);
    test(decimal32, 873, -101, 0x0000017d);
    test(decimal32, 874, -101, 0x0000027c);
    test(decimal32, 875, -101, 0x0000027d);
    test(decimal32, 876, -101, 0x0000037c);
    test(decimal32, 877, -101, 0x0000037d);
    test(decimal32, 878, -101, 0x0000033e);
    test(decimal32, 879, -101, 0x0000033f);
    test(decimal32, 880, -101, 0x0000000e);
    test(decimal32, 881, -101, 0x0000000f);
    test(decimal32, 882, -101, 0x0000010e);
    test(decimal32, 883, -101, 0x0000010f);
    test(decimal32, 884, -101, 0x0000020e);
    test(decimal32, 885, -101, 0x0000020f);
    test(decimal32, 886, -101, 0x0000030e);
    test(decimal32, 887, -101, 0x0000030f);
    test(decimal32, 888, -101, 0x0000006e);
    test(decimal32, 889, -101, 0x0000006f);
    test(decimal32, 890, -101, 0x0000001e);
    test(decimal32, 891, -101, 0x0000001f);
    test(decimal32, 892, -101, 0x0000011e);
    test(decimal32, 893, -101, 0x0000011f);
    test(decimal32, 894, -101, 0x0000021e);
    test(decimal32, 895, -101, 0x0000021f);
    test(decimal32, 896, -101, 0x0000031e);
    test(decimal32, 897, -101, 0x0000031f);
    test(decimal32, 898, -101, 0x0000007e);
    test(decimal32, 899, -101, 0x0000007f);
    test(decimal32, 900, -101, 0x0000008c);
    test(decimal32, 901, -101, 0x0000008d);
    test(decimal32, 902, -101, 0x0000018c);
    test(decimal32, 903, -101, 0x0000018d);
    test(decimal32, 904, -101, 0x0000028c);
    test(decimal32, 905, -101, 0x0000028d);
    test(decimal32, 906, -101, 0x0000038c);
    test(decimal32, 907, -101, 0x0000038d);
    test(decimal32, 908, -101, 0x000000ae);
    test(decimal32, 909, -101, 0x000000af);
    test(decimal32, 910, -101, 0x0000009c);
    test(decimal32, 911, -101, 0x0000009d);
    test(decimal32, 912, -101, 0x0000019c);
    test(decimal32, 913, -101, 0x0000019d);
    test(decimal32, 914, -101, 0x0000029c);
    test(decimal32, 915, -101, 0x0000029d);
    test(decimal32, 916, -101, 0x0000039c);
    test(decimal32, 917, -101, 0x0000039d);
    test(decimal32, 918, -101, 0x000000be);
    test(decimal32, 919, -101, 0x000000bf);
    test(decimal32, 920, -101, 0x000000ac);
    test(decimal32, 921, -101, 0x000000ad);
    test(decimal32, 922, -101, 0x000001ac);
    test(decimal32, 923, -101, 0x000001ad);
    test(decimal32, 924, -101, 0x000002ac);
    test(decimal32, 925, -101, 0x000002ad);
    test(decimal32, 926, -101, 0x000003ac);
    test(decimal32, 927, -101, 0x000003ad);
    test(decimal32, 928, -101, 0x000001ae);
    test(decimal32, 929, -101, 0x000001af);
    test(decimal32, 930, -101, 0x000000bc);
    test(decimal32, 931, -101, 0x000000bd);
    test(decimal32, 932, -101, 0x000001bc);
    test(decimal32, 933, -101, 0x000001bd);
    test(decimal32, 934, -101, 0x000002bc);
    test(decimal32, 935, -101, 0x000002bd);
    test(decimal32, 936, -101, 0x000003bc);
    test(decimal32, 937, -101, 0x000003bd);
    test(decimal32, 938, -101, 0x000001be);
    test(decimal32, 939, -101, 0x000001bf);
    test(decimal32, 940, -101, 0x000000cc);
    test(decimal32, 941, -101, 0x000000cd);
    test(decimal32, 942, -101, 0x000001cc);
    test(decimal32, 943, -101, 0x000001cd);
    test(decimal32, 944, -101, 0x000002cc);
    test(decimal32, 945, -101, 0x000002cd);
    test(decimal32, 946, -101, 0x000003cc);
    test(decimal32, 947, -101, 0x000003cd);
    test(decimal32, 948, -101, 0x000002ae);
    test(decimal32, 949, -101, 0x000002af);
    test(decimal32, 950, -101, 0x000000dc);
    test(decimal32, 951, -101, 0x000000dd);
    test(decimal32, 952, -101, 0x000001dc);
    test(decimal32, 953, -101, 0x000001dd);
    test(decimal32, 954, -101, 0x000002dc);
    test(decimal32, 955, -101, 0x000002dd);
    test(decimal32, 956, -101, 0x000003dc);
    test(decimal32, 957, -101, 0x000003dd);
    test(decimal32, 958, -101, 0x000002be);
    test(decimal32, 959, -101, 0x000002bf);
    test(decimal32, 960, -101, 0x000000ec);
    test(decimal32, 961, -101, 0x000000ed);
    test(decimal32, 962, -101, 0x000001ec);
    test(decimal32, 963, -101, 0x000001ed);
    test(decimal32, 964, -101, 0x000002ec);
    test(decimal32, 965, -101, 0x000002ed);
    test(decimal32, 966, -101, 0x000003ec);
    test(decimal32, 967, -101, 0x000003ed);
    test(decimal32, 968, -101, 0x000003ae);
    test(decimal32, 969, -101, 0x000003af);
    test(decimal32, 970, -101, 0x000000fc);
    test(decimal32, 971, -101, 0x000000fd);
    test(decimal32, 972, -101, 0x000001fc);
    test(decimal32, 973, -101, 0x000001fd);
    test(decimal32, 974, -101, 0x000002fc);
    test(decimal32, 975, -101, 0x000002fd);
    test(decimal32, 976, -101, 0x000003fc);
    test(decimal32, 977, -101, 0x000003fd);
    test(decimal32, 978, -101, 0x000003be);
    test(decimal32, 979, -101, 0x000003bf);
    test(decimal32, 980, -101, 0x0000008e);
    test(decimal32, 981, -101, 0x0000008f);
    test(decimal32, 982, -101, 0x0000018e);
    test(decimal32, 983, -101, 0x0000018f);
    test(decimal32, 984, -101, 0x0000028e);
    test(decimal32, 985, -101, 0x0000028f);
    test(decimal32, 986, -101, 0x0000038e);
    test(decimal32, 987, -101, 0x0000038f);
    test(decimal32, 988, -101, 0x000000ee);
    test(decimal32, 989, -101, 0x000000ef);
    test(decimal32, 990, -101, 0x0000009e);
    test(decimal32, 991, -101, 0x0000009f);
    test(decimal32, 992, -101, 0x0000019e);
    test(decimal32, 993, -101, 0x0000019f);
    test(decimal32, 994, -101, 0x0000029e);
    test(decimal32, 995, -101, 0x0000029f);
    test(decimal32, 996, -101, 0x0000039e);
    test(decimal32, 997, -101, 0x0000039f);
    test(decimal32, 998, -101, 0x000000fe);
    test(decimal32, 999, -101, 0x000000ff);

    /* Next, we'll test the decoding of the 24 non-canonical declets. */
    test(decimal32, 888, -101, 0x0000016e);
    test(decimal32, 889, -101, 0x0000016f);
    test(decimal32, 898, -101, 0x0000017e);
    test(decimal32, 899, -101, 0x0000017f);
    test(decimal32, 988, -101, 0x000001ee);
    test(decimal32, 989, -101, 0x000001ef);
    test(decimal32, 998, -101, 0x000001fe);
    test(decimal32, 999, -101, 0x000001ff);
    test(decimal32, 888, -101, 0x0000026e);
    test(decimal32, 889, -101, 0x0000026f);
    test(decimal32, 898, -101, 0x0000027e);
    test(decimal32, 899, -101, 0x0000027f);
    test(decimal32, 988, -101, 0x000002ee);
    test(decimal32, 989, -101, 0x000002ef);
    test(decimal32, 998, -101, 0x000002fe);
    test(decimal32, 999, -101, 0x000002ff);
    test(decimal32, 888, -101, 0x0000036e);
    test(decimal32, 889, -101, 0x0000036f);
    test(decimal32, 898, -101, 0x0000037e);
    test(decimal32, 899, -101, 0x0000037f);
    test(decimal32, 988, -101, 0x000003ee);
    test(decimal32, 989, -101, 0x000003ef);
    test(decimal32, 998, -101, 0x000003fe);
    test(decimal32, 999, -101, 0x000003ff);

    test(decimal32, 1000, -101, 0x00000400);
    test(decimal32, 1000000, -101, 0x04000000);
    test(decimal32, 2000000, -101, 0x08000000);
    test(decimal32, 3000000, -101, 0x0c000000);
    test(decimal32, 4000000, -101, 0x10000000);
    test(decimal32, 5000000, -101, 0x14000000);
    test(decimal32, 6000000, -101, 0x18000000);
    test(decimal32, 7000000, -101, 0x1c000000);
    test(decimal32, 8000000, -101, 0x60000000);
    test(decimal32, 9000000, -101, 0x64000000);
    test(decimal32, 1000000, -102, 0x00020000);
    test(decimal32, 1000000, -100, 0x04100000);
    test(decimal32, 1000000, -99, 0x04200000);
    test(decimal32, 1000000, -98, 0x04300000);
    test(decimal32, 1000000, -97, 0x04400000);
    test(decimal32, 1000000, -93, 0x04800000);
    test(decimal32, 1000000, -85, 0x05000000);
    test(decimal32, 1000000, -69, 0x06000000);
    test(decimal32, 1000000, -37, 0x24000000);
    test(decimal32, 1000000, 27, 0x44000000);
    test(decimal32, 1000000, 89, 0x47e00000);
    test(decimal32, 1000000, 90, 0x47f00000);
    test(decimal32, 8000000, -102, 0x00003000);
    test(decimal32, 8000000, -100, 0x60100000);
    test(decimal32, 8000000, -99, 0x60200000);
    test(decimal32, 8000000, -98, 0x60300000);
    test(decimal32, 8000000, -97, 0x60400000);
    test(decimal32, 8000000, -93, 0x60800000);
    test(decimal32, 8000000, -85, 0x61000000);
    test(decimal32, 8000000, -69, 0x62000000);
    test(decimal32, 8000000, -37, 0x68000000);
    test(decimal32, 8000000, 27, 0x70000000);
    test(decimal32, 8000000, 89, 0x73e00000);
    test(decimal32, 8000000, 90, 0x73f00000);
    test(decimal32, +oo, 0, 0x78000000);
    test(decimal32, -oo, 0, 0xf8000000);
    test(decimal32, +oo, 0, 0x7bffffff);
    test(decimal32, -oo, 0, 0xfbffffff);
    test(decimal32, 0/0, 0, 0x7c000000);
    test(decimal32, negative_zero_zero, 0, 0xfc000000);
    test(decimal32, signalling_zero_zero, 0, 0x7e000000);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfe000000);
    test(decimal32, 0/0, 0, 0x7df00000);
    test(decimal32, negative_zero_zero, 0, 0xfdf00000);
    test(decimal32, signalling_zero_zero, 0, 0x7ff00000);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfff00000);
    test(decimal32, 0/0, 0, 0x7c000001, payload := 1);
    test(decimal32, negative_zero_zero, 0, 0xfc000001, payload := 1);
    test(decimal32, 0/0, 0, 0x7c03fcff, payload := 999999);
    test(decimal32, negative_zero_zero, 0, 0xfc03fcff, payload := 999999);
    test(decimal32, signalling_zero_zero, 0, 0x7e03fcff, payload := 999999);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfe03fcff,
         payload := 999999);

    "    Decimal using binary encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(true);

    test(decimal32, 0, -101, 0x00000000);
    test(decimal32, 0, -102, 0x00000000);
    test(decimal32, 0, -100, 0x00800000);
    test(decimal32, 0, -99, 0x01000000);
    test(decimal32, 0, -98, 0x01800000);
    test(decimal32, 0, -97, 0x02000000);
    test(decimal32, 0, -93, 0x04000000);
    test(decimal32, 0, -85, 0x08000000);
    test(decimal32, 0, -69, 0x10000000);
    test(decimal32, 0, -37, 0x20000000);
    test(decimal32, 0, 27, 0x40000000);
    test(decimal32, 0, 89, 0x5f000000);
    test(decimal32, 0, 90, 0x5f800000);
    test(decimal32, 0, 91, 0x5f800000);
    test(decimal32, negative_zero, -101, 0x80000000);
    test(decimal32, negative_zero, -102, 0x80000000);
    test(decimal32, negative_zero, -100, 0x80800000);
    test(decimal32, negative_zero, -99, 0x81000000);
    test(decimal32, negative_zero, -98, 0x81800000);
    test(decimal32, negative_zero, -97, 0x82000000);
    test(decimal32, negative_zero, -93, 0x84000000);
    test(decimal32, negative_zero, -85, 0x88000000);
    test(decimal32, negative_zero, -69, 0x90000000);
    test(decimal32, negative_zero, -37, 0xa0000000);
    test(decimal32, negative_zero, 27, 0xc0000000);
    test(decimal32, negative_zero, 89, 0xdf000000);
    test(decimal32, negative_zero, 90, 0xdf800000);
    test(decimal32, negative_zero, 91, 0xdf800000);
    test(decimal32, 1, -101, 0x00000001);
    test(decimal32, -1, -101, 0x80000001);
    test(decimal32, 2, -101, 0x00000002);
    test(decimal32, -2, -101, 0x80000002);
    test(decimal32, 1, -100, 0x00800001);
    test(decimal32, -1, -100, 0x80800001);
    test(decimal32, 3, -101, 0x00000003);
    test(decimal32, -3, -101, 0x80000003);
    test(decimal32, 4, -101, 0x00000004);
    test(decimal32, 8, -101, 0x00000008);
    test(decimal32, 16, -101, 0x00000010);
    test(decimal32, 32, -101, 0x00000020);
    test(decimal32, 64, -101, 0x00000040);
    test(decimal32, 128, -101, 0x00000080);
    test(decimal32, 256, -101, 0x00000100);
    test(decimal32, 512, -101, 0x00000200);
    test(decimal32, 1024, -101, 0x00000400);
    test(decimal32, 2048, -101, 0x00000800);
    test(decimal32, 4096, -101, 0x00001000);
    test(decimal32, 8192, -101, 0x00002000);
    test(decimal32, 16384, -101, 0x00004000);
    test(decimal32, 32768, -101, 0x00008000);
    test(decimal32, 65536, -101, 0x00010000);
    test(decimal32, 131072, -101, 0x00020000);
    test(decimal32, 262144, -101, 0x00040000);
    test(decimal32, 524288, -101, 0x00080000);
    test(decimal32, 1048576, -101, 0x00100000);
    test(decimal32, 2097152, -101, 0x00200000);
    test(decimal32, 4194304, -101, 0x00400000);
    test(decimal32, 8388607, -101, 0x007fffff);
    test(decimal32, 8388608, -101, 0x60000000);
    test(decimal32, 8388609, -101, 0x60000001);
    test(decimal32, 9999999, -101, 0x6018967f);
    test(decimal32, 0, -101, 0x60189680);
    test(decimal32, 0, -100, 0x60389680);
    test(decimal32, 0, -101, 0x601fffff);
    test(decimal32, 4194304, -100, 0x00c00000);
    test(decimal32, 4194304, -99, 0x01400000);
    test(decimal32, 4194304, -98, 0x01c00000);
    test(decimal32, 4194304, -97, 0x02400000);
    test(decimal32, 4194304, -93, 0x04400000);
    test(decimal32, 4194304, -85, 0x08400000);
    test(decimal32, 4194304, -69, 0x10400000);
    test(decimal32, 4194304, -37, 0x20400000);
    test(decimal32, 4194304, 27, 0x40400000);
    test(decimal32, 4194304, 89, 0x5f400000);
    test(decimal32, 4194304, 90, 0x5fc00000);
    test(decimal32, 8388608, -100, 0x60200000);
    test(decimal32, 8388608, -99, 0x60400000);
    test(decimal32, 8388608, -98, 0x60600000);
    test(decimal32, 8388608, -97, 0x60800000);
    test(decimal32, 8388608, -93, 0x61000000);
    test(decimal32, 8388608, -85, 0x62000000);
    test(decimal32, 8388608, -69, 0x64000000);
    test(decimal32, 8388608, -37, 0x68000000);
    test(decimal32, 8388608, 27, 0x70000000);
    test(decimal32, 8388608, 89, 0x77c00000);
    test(decimal32, 8388608, 90, 0x77e00000);
    test(decimal32, +oo, 0, 0x78000000);
    test(decimal32, -oo, 0, 0xf8000000);
    test(decimal32, +oo, 0, 0x7bffffff);
    test(decimal32, -oo, 0, 0xfbffffff);
    test(decimal32, 0/0, 0, 0x7c000000);
    test(decimal32, negative_zero_zero, 0, 0xfc000000);
    test(decimal32, signalling_zero_zero, 0, 0x7e000000);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfe000000);
    test(decimal32, 0/0, 0, 0x7df00000);
    test(decimal32, negative_zero_zero, 0, 0xfdf00000);
    test(decimal32, signalling_zero_zero, 0, 0x7ff00000);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfff00000);
    test(decimal32, 0/0, 0, 0x7c000001, payload := 1);
    test(decimal32, negative_zero_zero, 0, 0xfc000001, payload := 1);
    test(decimal32, 0/0, 0, 0x7c0f423f, payload := 999999);
    test(decimal32, negative_zero_zero, 0, 0xfc0f423f, payload := 999999);
    test(decimal32, signalling_zero_zero, 0, 0x7e0f423f, payload := 999999);
    test(decimal32, negative_signalling_zero_zero, 0, 0xfe0f423f,
         payload := 999999);

    "    Decimal using packed decimal encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(false);

    test(decimal64, 0, -398, 0x0000000000000000);
    test(decimal64, 0, -399, 0x0000000000000000);
    test(decimal64, 0, -397, 0x0004000000000000);
    test(decimal64, 0, -396, 0x0008000000000000);
    test(decimal64, 0, -394, 0x0010000000000000);
    test(decimal64, 0, -390, 0x0020000000000000);
    test(decimal64, 0, -382, 0x0040000000000000);
    test(decimal64, 0, -366, 0x0080000000000000);
    test(decimal64, 0, -334, 0x0100000000000000);
    test(decimal64, 0, -270, 0x0200000000000000);
    test(decimal64, 0, -142, 0x2000000000000000);
    test(decimal64, 0, 114, 0x4000000000000000);
    test(decimal64, 0, 368, 0x43f8000000000000);
    test(decimal64, 0, 369, 0x43fc000000000000);
    test(decimal64, 0, 370, 0x43fc000000000000);
    test(decimal64, negative_zero, -398, 0x8000000000000000);
    test(decimal64, negative_zero, -399, 0x8000000000000000);
    test(decimal64, negative_zero, -397, 0x8004000000000000);
    test(decimal64, negative_zero, -396, 0x8008000000000000);
    test(decimal64, negative_zero, -394, 0x8010000000000000);
    test(decimal64, negative_zero, -390, 0x8020000000000000);
    test(decimal64, negative_zero, -382, 0x8040000000000000);
    test(decimal64, negative_zero, -366, 0x8080000000000000);
    test(decimal64, negative_zero, -334, 0x8100000000000000);
    test(decimal64, negative_zero, -270, 0x8200000000000000);
    test(decimal64, negative_zero, -142, 0xa000000000000000);
    test(decimal64, negative_zero, 114, 0xc000000000000000);
    test(decimal64, negative_zero, 368, 0xc3f8000000000000);
    test(decimal64, negative_zero, 369, 0xc3fc000000000000);
    test(decimal64, negative_zero, 370, 0xc3fc000000000000);
    test(decimal64, 1, -398, 0x0000000000000001);
    test(decimal64, -1, -398, 0x8000000000000001);
    test(decimal64, 2, -398, 0x0000000000000002);
    test(decimal64, -2, -398, 0x8000000000000002);
    test(decimal64, 1, -397, 0x0004000000000001);
    test(decimal64, -1, -397, 0x8004000000000001);
    test(decimal64, 3, -398, 0x0000000000000003);
    test(decimal64, -3, -398, 0x8000000000000003);
    test(decimal64, 1e3, -398, 0x0000000000000400);
    test(decimal64, 1e6, -398, 0x0000000000100000);
    test(decimal64, 1e9, -398, 0x0000000040000000);
    test(decimal64, 1e12, -398, 0x0000010000000000);
    test(decimal64, 1e15, -398, 0x0400000000000000);
    test(decimal64, 2e15, -398, 0x0800000000000000);
    test(decimal64, 3e15, -398, 0x0c00000000000000);
    test(decimal64, 4e15, -398, 0x1000000000000000);
    test(decimal64, 5e15, -398, 0x1400000000000000);
    test(decimal64, 6e15, -398, 0x1800000000000000);
    test(decimal64, 7e15, -398, 0x1c00000000000000);
    test(decimal64, 8e15, -398, 0x6000000000000000);
    test(decimal64, 9e15, -398, 0x6400000000000000);
    test(decimal64, 1e15, -399, 0x0000800000000000);
    test(decimal64, 1e15, -397, 0x0404000000000000);
    test(decimal64, 1e15, -396, 0x0408000000000000);
    test(decimal64, 1e15, -395, 0x040c000000000000);
    test(decimal64, 1e15, -394, 0x0410000000000000);
    test(decimal64, 1e15, -390, 0x0420000000000000);
    test(decimal64, 1e15, -382, 0x0440000000000000);
    test(decimal64, 1e15, -366, 0x0480000000000000);
    test(decimal64, 1e15, -334, 0x0500000000000000);
    test(decimal64, 1e15, -270, 0x0600000000000000);
    test(decimal64, 1e15, -142, 0x2400000000000000);
    test(decimal64, 1e15, 114, 0x4400000000000000);
    test(decimal64, 1e15, 368, 0x47f8000000000000);
    test(decimal64, 1e15, 369, 0x47fc000000000000);
    test(decimal64, 8e15, -399, 0x00000c0000000000);
    test(decimal64, 8e15, -397, 0x6004000000000000);
    test(decimal64, 8e15, -396, 0x6008000000000000);
    test(decimal64, 8e15, -395, 0x600c000000000000);
    test(decimal64, 8e15, -394, 0x6010000000000000);
    test(decimal64, 8e15, -390, 0x6020000000000000);
    test(decimal64, 8e15, -382, 0x6040000000000000);
    test(decimal64, 8e15, -366, 0x6080000000000000);
    test(decimal64, 8e15, -334, 0x6100000000000000);
    test(decimal64, 8e15, -270, 0x6200000000000000);
    test(decimal64, 8e15, -142, 0x6800000000000000);
    test(decimal64, 8e15, 114, 0x7000000000000000);
    test(decimal64, 8e15, 368, 0x73f8000000000000);
    test(decimal64, 8e15, 369, 0x73fc000000000000);
    test(decimal64, +oo, 0, 0x7800000000000000);
    test(decimal64, -oo, 0, 0xf800000000000000);
    test(decimal64, +oo, 0, 0x7bffffffffffffff);
    test(decimal64, -oo, 0, 0xfbffffffffffffff);
    test(decimal64, 0/0, 0, 0x7c00000000000000);
    test(decimal64, negative_zero_zero, 0, 0xfc00000000000000);
    test(decimal64, signalling_zero_zero, 0, 0x7e00000000000000);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfe00000000000000);
    test(decimal64, 0/0, 0, 0x7dfc000000000000);
    test(decimal64, negative_zero_zero, 0, 0xfdfc000000000000);
    test(decimal64, signalling_zero_zero, 0, 0x7ffc000000000000);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfffc000000000000);
    test(decimal64, 0/0, 0, 0x7c00000000000001, payload := 1);
    test(decimal64, negative_zero_zero, 0, 0xfc00000000000001, payload := 1);
    test(decimal64, 0/0, 0, 0x7c00ff3fcff3fcff, payload := 999999999999999);
    test(decimal64, negative_zero_zero, 0, 0xfc00ff3fcff3fcff,
         payload := 999999999999999);
    test(decimal64, signalling_zero_zero, 0, 0x7e00ff3fcff3fcff,
         payload := 999999999999999);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfe00ff3fcff3fcff,
         payload := 999999999999999);

    "    Decimal using binary encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(true);

    test(decimal64, 0, -398, 0x0000000000000000);
    test(decimal64, 0, -399, 0x0000000000000000);
    test(decimal64, 0, -397, 0x0020000000000000);
    test(decimal64, 0, -396, 0x0040000000000000);
    test(decimal64, 0, -394, 0x0080000000000000);
    test(decimal64, 0, -390, 0x0100000000000000);
    test(decimal64, 0, -382, 0x0200000000000000);
    test(decimal64, 0, -366, 0x0400000000000000);
    test(decimal64, 0, -334, 0x0800000000000000);
    test(decimal64, 0, -270, 0x1000000000000000);
    test(decimal64, 0, -142, 0x2000000000000000);
    test(decimal64, 0, 114, 0x4000000000000000);
    test(decimal64, 0, 368, 0x5fc0000000000000);
    test(decimal64, 0, 369, 0x5fe0000000000000);
    test(decimal64, 0, 370, 0x5fe0000000000000);
    test(decimal64, negative_zero, -398, 0x8000000000000000);
    test(decimal64, negative_zero, -399, 0x8000000000000000);
    test(decimal64, negative_zero, -397, 0x8020000000000000);
    test(decimal64, negative_zero, -396, 0x8040000000000000);
    test(decimal64, negative_zero, -394, 0x8080000000000000);
    test(decimal64, negative_zero, -390, 0x8100000000000000);
    test(decimal64, negative_zero, -382, 0x8200000000000000);
    test(decimal64, negative_zero, -366, 0x8400000000000000);
    test(decimal64, negative_zero, -334, 0x8800000000000000);
    test(decimal64, negative_zero, -270, 0x9000000000000000);
    test(decimal64, negative_zero, -142, 0xa000000000000000);
    test(decimal64, negative_zero, 114, 0xc000000000000000);
    test(decimal64, negative_zero, 368, 0xdfc0000000000000);
    test(decimal64, negative_zero, 369, 0xdfe0000000000000);
    test(decimal64, negative_zero, 370, 0xdfe0000000000000);
    test(decimal64, 1, -398, 0x0000000000000001);
    test(decimal64, -1, -398, 0x8000000000000001);
    test(decimal64, 2, -398, 0x0000000000000002);
    test(decimal64, -2, -398, 0x8000000000000002);
    test(decimal64, 1, -397, 0x0020000000000001);
    test(decimal64, -1, -397, 0x8020000000000001);
    test(decimal64, 3, -398, 0x0000000000000003);
    test(decimal64, -3, -398, 0x8000000000000003);
    test(decimal64, 4, -398, 0x0000000000000004);
    test(decimal64, 8, -398, 0x0000000000000008);
    test(decimal64, 16, -398, 0x0000000000000010);
    test(decimal64, 32, -398, 0x0000000000000020);
    test(decimal64, 64, -398, 0x0000000000000040);
    test(decimal64, 128, -398, 0x0000000000000080);
    test(decimal64, 256, -398, 0x0000000000000100);
    test(decimal64, 512, -398, 0x0000000000000200);
    test(decimal64, 1024, -398, 0x0000000000000400);
    test(decimal64, 2048, -398, 0x0000000000000800);
    test(decimal64, 4096, -398, 0x0000000000001000);
    test(decimal64, 8192, -398, 0x0000000000002000);
    test(decimal64, 16384, -398, 0x0000000000004000);
    test(decimal64, 32768, -398, 0x0000000000008000);
    test(decimal64, 65536, -398, 0x0000000000010000);
    test(decimal64, 131072, -398, 0x0000000000020000);
    test(decimal64, 262144, -398, 0x0000000000040000);
    test(decimal64, 524288, -398, 0x0000000000080000);
    test(decimal64, 1048576, -398, 0x0000000000100000);
    test(decimal64, 2097152, -398, 0x0000000000200000);
    test(decimal64, 4194304, -398, 0x0000000000400000);
    test(decimal64, 8388608, -398, 0x0000000000800000);
    test(decimal64, 16777216, -398, 0x0000000001000000);
    test(decimal64, 33554432, -398, 0x0000000002000000);
    test(decimal64, 67108864, -398, 0x0000000004000000);
    test(decimal64, 134217728, -398, 0x0000000008000000);
    test(decimal64, 268435456, -398, 0x0000000010000000);
    test(decimal64, 536870912, -398, 0x0000000020000000);
    test(decimal64, 1073741824, -398, 0x0000000040000000);
    test(decimal64, 2147483648, -398, 0x0000000080000000);
    test(decimal64, 4294967296, -398, 0x0000000100000000);
    test(decimal64, 8589934592, -398, 0x0000000200000000);
    test(decimal64, 17179869184, -398, 0x0000000400000000);
    test(decimal64, 34359738368, -398, 0x0000000800000000);
    test(decimal64, 68719476736, -398, 0x0000001000000000);
    test(decimal64, 137438953472, -398, 0x0000002000000000);
    test(decimal64, 274877906944, -398, 0x0000004000000000);
    test(decimal64, 549755813888, -398, 0x0000008000000000);
    test(decimal64, 1099511627776, -398, 0x0000010000000000);
    test(decimal64, 2199023255552, -398, 0x0000020000000000);
    test(decimal64, 4398046511104, -398, 0x0000040000000000);
    test(decimal64, 8796093022208, -398, 0x0000080000000000);
    test(decimal64, 17592186044416, -398, 0x0000100000000000);
    test(decimal64, 35184372088832, -398, 0x0000200000000000);
    test(decimal64, 70368744177664, -398, 0x0000400000000000);
    test(decimal64, 140737488355328, -398, 0x0000800000000000);
    test(decimal64, 281474976710656, -398, 0x0001000000000000);
    test(decimal64, 562949953421312, -398, 0x0002000000000000);
    test(decimal64, 1125899906842624, -398, 0x0004000000000000);
    test(decimal64, 2251799813685248, -398, 0x0008000000000000);
    test(decimal64, 4503599627370496, -398, 0x0010000000000000);
    test(decimal64, 9007199254740991, -398, 0x001fffffffffffff);
    test(decimal64, 9007199254740992, -398, 0x6000000000000000);
    test(decimal64, 9007199254740993, -398, 0x6000000000000001);
    test(decimal64, 9999999999999999, -398, 0x600386f26fc0ffff);
    test(decimal64, 0, -398, 0x600386f26fc10000);
    test(decimal64, 0, -397, 0x600b86f26fc10000);
    test(decimal64, 0, -398, 0x6007ffffffffffff);
    test(decimal64, 4503599627370496, -397, 0x0030000000000000);
    test(decimal64, 4503599627370496, -396, 0x0050000000000000);
    test(decimal64, 4503599627370496, -395, 0x0070000000000000);
    test(decimal64, 4503599627370496, -394, 0x0090000000000000);
    test(decimal64, 4503599627370496, -390, 0x0110000000000000);
    test(decimal64, 4503599627370496, -382, 0x0210000000000000);
    test(decimal64, 4503599627370496, -366, 0x0410000000000000);
    test(decimal64, 4503599627370496, -334, 0x0810000000000000);
    test(decimal64, 4503599627370496, -270, 0x1010000000000000);
    test(decimal64, 4503599627370496, -142, 0x2010000000000000);
    test(decimal64, 4503599627370496, 114, 0x4010000000000000);
    test(decimal64, 4503599627370496, 368, 0x5fd0000000000000);
    test(decimal64, 4503599627370496, 369, 0x5ff0000000000000);
    test(decimal64, 9007199254740992, -397, 0x6008000000000000);
    test(decimal64, 9007199254740992, -396, 0x6010000000000000);
    test(decimal64, 9007199254740992, -395, 0x6018000000000000);
    test(decimal64, 9007199254740992, -394, 0x6020000000000000);
    test(decimal64, 9007199254740992, -390, 0x6040000000000000);
    test(decimal64, 9007199254740992, -382, 0x6080000000000000);
    test(decimal64, 9007199254740992, -366, 0x6100000000000000);
    test(decimal64, 9007199254740992, -334, 0x6200000000000000);
    test(decimal64, 9007199254740992, -270, 0x6400000000000000);
    test(decimal64, 9007199254740992, -142, 0x6800000000000000);
    test(decimal64, 9007199254740992, 114, 0x7000000000000000);
    test(decimal64, 9007199254740992, 368, 0x77f0000000000000);
    test(decimal64, 9007199254740992, 369, 0x77f8000000000000);
    test(decimal64, +oo, 0, 0x7800000000000000);
    test(decimal64, -oo, 0, 0xf800000000000000);
    test(decimal64, +oo, 0, 0x7bffffffffffffff);
    test(decimal64, -oo, 0, 0xfbffffffffffffff);
    test(decimal64, 0/0, 0, 0x7c00000000000000);
    test(decimal64, negative_zero_zero, 0, 0xfc00000000000000);
    test(decimal64, signalling_zero_zero, 0, 0x7e00000000000000);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfe00000000000000);
    test(decimal64, 0/0, 0, 0x7df0000000000000);
    test(decimal64, negative_zero_zero, 0, 0xfdf0000000000000);
    test(decimal64, signalling_zero_zero, 0, 0x7ff0000000000000);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfff0000000000000);
    test(decimal64, 0/0, 0, 0x7c00000000000001, payload := 1);
    test(decimal64, negative_zero_zero, 0, 0xfc00000000000001, payload := 1);
    test(decimal64, 0/0, 0, 0x7c038d7ea4c67fff, payload := 999999999999999);
    test(decimal64, negative_zero_zero, 0, 0xfc038d7ea4c67fff,
         payload := 999999999999999);
    test(decimal64, signalling_zero_zero, 0, 0x7e038d7ea4c67fff,
         payload := 999999999999999);
    test(decimal64, negative_signalling_zero_zero, 0, 0xfe038d7ea4c67fff,
         payload := 999999999999999);

    "    Decimal using packed decimal encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(false);

    test(decimal128, 0, -6176, 0x00000000000000000000000000000000);
    test(decimal128, 0, -6177, 0x00000000000000000000000000000000);
    test(decimal128, 0, -6175, 0x00004000000000000000000000000000);
    test(decimal128, 0, -6174, 0x00008000000000000000000000000000);
    test(decimal128, 0, -6172, 0x00010000000000000000000000000000);
    test(decimal128, 0, -6168, 0x00020000000000000000000000000000);
    test(decimal128, 0, -6160, 0x00040000000000000000000000000000);
    test(decimal128, 0, -6144, 0x00080000000000000000000000000000);
    test(decimal128, 0, -6112, 0x00100000000000000000000000000000);
    test(decimal128, 0, -6048, 0x00200000000000000000000000000000);
    test(decimal128, 0, -5920, 0x00400000000000000000000000000000);
    test(decimal128, 0, -5664, 0x00800000000000000000000000000000);
    test(decimal128, 0, -5152, 0x01000000000000000000000000000000);
    test(decimal128, 0, -4128, 0x02000000000000000000000000000000);
    test(decimal128, 0, -2080, 0x20000000000000000000000000000000);
    test(decimal128, 0, 2016, 0x40000000000000000000000000000000);
    test(decimal128, 0, 6110, 0x43ff8000000000000000000000000000);
    test(decimal128, 0, 6111, 0x43ffc000000000000000000000000000);
    test(decimal128, 0, 6112, 0x43ffc000000000000000000000000000);
    test(decimal128, negative_zero, -6176, 0x80000000000000000000000000000000);
    test(decimal128, negative_zero, -6177, 0x80000000000000000000000000000000);
    test(decimal128, negative_zero, -6175, 0x80004000000000000000000000000000);
    test(decimal128, negative_zero, -6174, 0x80008000000000000000000000000000);
    test(decimal128, negative_zero, -6172, 0x80010000000000000000000000000000);
    test(decimal128, negative_zero, -6168, 0x80020000000000000000000000000000);
    test(decimal128, negative_zero, -6160, 0x80040000000000000000000000000000);
    test(decimal128, negative_zero, -6144, 0x80080000000000000000000000000000);
    test(decimal128, negative_zero, -6112, 0x80100000000000000000000000000000);
    test(decimal128, negative_zero, -6048, 0x80200000000000000000000000000000);
    test(decimal128, negative_zero, -5920, 0x80400000000000000000000000000000);
    test(decimal128, negative_zero, -5664, 0x80800000000000000000000000000000);
    test(decimal128, negative_zero, -5152, 0x81000000000000000000000000000000);
    test(decimal128, negative_zero, -4128, 0x82000000000000000000000000000000);
    test(decimal128, negative_zero, -2080, 0xa0000000000000000000000000000000);
    test(decimal128, negative_zero, 2016, 0xc0000000000000000000000000000000);
    test(decimal128, negative_zero, 6110, 0xc3ff8000000000000000000000000000);
    test(decimal128, negative_zero, 6111, 0xc3ffc000000000000000000000000000);
    test(decimal128, negative_zero, 6112, 0xc3ffc000000000000000000000000000);
    test(decimal128, 1, -6176, 0x00000000000000000000000000000001);
    test(decimal128, -1, -6176, 0x80000000000000000000000000000001);
    test(decimal128, 2, -6176, 0x00000000000000000000000000000002);
    test(decimal128, -2, -6176, 0x80000000000000000000000000000002);
    test(decimal128, 1, -6175, 0x00004000000000000000000000000001);
    test(decimal128, -1, -6175, 0x80004000000000000000000000000001);
    test(decimal128, 3, -6176, 0x00000000000000000000000000000003);
    test(decimal128, -3, -6176, 0x80000000000000000000000000000003);
    test(decimal128, 1e3, -6176, 0x00000000000000000000000000000400);
    test(decimal128, 1e6, -6176, 0x00000000000000000000000000100000);
    test(decimal128, 1e9, -6176, 0x00000000000000000000000040000000);
    test(decimal128, 1e12, -6176, 0x00000000000000000000010000000000);
    test(decimal128, 1e15, -6176, 0x00000000000000000004000000000000);
    test(decimal128, 1e18, -6176, 0x00000000000000001000000000000000);
    test(decimal128, 1e21, -6176, 0x00000000000000400000000000000000);
    test(decimal128, 1e24, -6176, 0x00000000000100000000000000000000);
    test(decimal128, 1e27, -6176, 0x00000000040000000000000000000000);
    test(decimal128, 1e30, -6176, 0x00000010000000000000000000000000);
    test(decimal128, 1e33, -6176, 0x04000000000000000000000000000000);
    test(decimal128, 2e33, -6176, 0x08000000000000000000000000000000);
    test(decimal128, 3e33, -6176, 0x0c000000000000000000000000000000);
    test(decimal128, 4e33, -6176, 0x10000000000000000000000000000000);
    test(decimal128, 5e33, -6176, 0x14000000000000000000000000000000);
    test(decimal128, 6e33, -6176, 0x18000000000000000000000000000000);
    test(decimal128, 7e33, -6176, 0x1c000000000000000000000000000000);
    test(decimal128, 8e33, -6176, 0x60000000000000000000000000000000);
    test(decimal128, 9e33, -6176, 0x64000000000000000000000000000000);
    test(decimal128, 1e33, -6177, 0x00000800000000000000000000000000);
    test(decimal128, 1e33, -6175, 0x04004000000000000000000000000000);
    test(decimal128, 1e33, -6174, 0x04008000000000000000000000000000);
    test(decimal128, 1e33, -6173, 0x0400c000000000000000000000000000);
    test(decimal128, 1e33, -6172, 0x04010000000000000000000000000000);
    test(decimal128, 1e33, -6168, 0x04020000000000000000000000000000);
    test(decimal128, 1e33, -6160, 0x04040000000000000000000000000000);
    test(decimal128, 1e33, -6144, 0x04080000000000000000000000000000);
    test(decimal128, 1e33, -6112, 0x04100000000000000000000000000000);
    test(decimal128, 1e33, -6048, 0x04200000000000000000000000000000);
    test(decimal128, 1e33, -5920, 0x04400000000000000000000000000000);
    test(decimal128, 1e33, -5664, 0x04800000000000000000000000000000);
    test(decimal128, 1e33, -5152, 0x05000000000000000000000000000000);
    test(decimal128, 1e33, -4128, 0x06000000000000000000000000000000);
    test(decimal128, 1e33, -2080, 0x24000000000000000000000000000000);
    test(decimal128, 1e33, 2016, 0x44000000000000000000000000000000);
    test(decimal128, 1e33, 6110, 0x47ff8000000000000000000000000000);
    test(decimal128, 1e33, 6111, 0x47ffc000000000000000000000000000);
    test(decimal128, 8e33, -6177, 0x000000c0000000000000000000000000);
    test(decimal128, 8e33, -6175, 0x60004000000000000000000000000000);
    test(decimal128, 8e33, -6174, 0x60008000000000000000000000000000);
    test(decimal128, 8e33, -6173, 0x6000c000000000000000000000000000);
    test(decimal128, 8e33, -6172, 0x60010000000000000000000000000000);
    test(decimal128, 8e33, -6168, 0x60020000000000000000000000000000);
    test(decimal128, 8e33, -6160, 0x60040000000000000000000000000000);
    test(decimal128, 8e33, -6144, 0x60080000000000000000000000000000);
    test(decimal128, 8e33, -6112, 0x60100000000000000000000000000000);
    test(decimal128, 8e33, -6048, 0x60200000000000000000000000000000);
    test(decimal128, 8e33, -5920, 0x60400000000000000000000000000000);
    test(decimal128, 8e33, -5664, 0x60800000000000000000000000000000);
    test(decimal128, 8e33, -5152, 0x61000000000000000000000000000000);
    test(decimal128, 8e33, -4128, 0x62000000000000000000000000000000);
    test(decimal128, 8e33, -2080, 0x68000000000000000000000000000000);
    test(decimal128, 8e33, 2016, 0x70000000000000000000000000000000);
    test(decimal128, 8e33, 6110, 0x73ff8000000000000000000000000000);
    test(decimal128, 8e33, 6111, 0x73ffc000000000000000000000000000);
    test(decimal128, +oo, 0, 0x78000000000000000000000000000000);
    test(decimal128, -oo, 0, 0xf8000000000000000000000000000000);
    test(decimal128, +oo, 0, 0x7bffffffffffffffffffffffffffffff);
    test(decimal128, -oo, 0, 0xfbffffffffffffffffffffffffffffff);
    test(decimal128, 0/0, 0, 0x7c000000000000000000000000000000);
    test(decimal128, negative_zero_zero, 0,
         0xfc000000000000000000000000000000);
    test(decimal128, signalling_zero_zero, 0,
         0x7e000000000000000000000000000000);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xfe000000000000000000000000000000);
    test(decimal128, 0/0, 0, 0x7dffc000000000000000000000000000);
    test(decimal128, negative_zero_zero, 0,
         0xfdffc000000000000000000000000000);
    test(decimal128, signalling_zero_zero, 0,
         0x7fffc000000000000000000000000000);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xffffc000000000000000000000000000);
    test(decimal128, 0/0, 0, 0x7c000000000000000000000000000001, payload := 1);
    test(decimal128, negative_zero_zero, 0, 0xfc000000000000000000000000000001,
         payload := 1);
    test(decimal128, 0/0, 0, 0x7c000ff3fcff3fcff3fcff3fcff3fcff,
         payload := 999999999999999999999999999999999);
    test(decimal128, negative_zero_zero, 0, 0xfc000ff3fcff3fcff3fcff3fcff3fcff,
         payload := 999999999999999999999999999999999);
    test(decimal128, signalling_zero_zero, 0,
         0x7e000ff3fcff3fcff3fcff3fcff3fcff,
         payload := 999999999999999999999999999999999);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xfe000ff3fcff3fcff3fcff3fcff3fcff,
         payload := 999999999999999999999999999999999);

    "    Decimal using binary encoding:"!
    default_fp_controller.set_decimal_use_binary_encoding(true);

    test(decimal128, 0, -6176, 0x00000000000000000000000000000000);
    test(decimal128, 0, -6177, 0x00000000000000000000000000000000);
    test(decimal128, 0, -6175, 0x00020000000000000000000000000000);
    test(decimal128, 0, -6174, 0x00040000000000000000000000000000);
    test(decimal128, 0, -6172, 0x00080000000000000000000000000000);
    test(decimal128, 0, -6168, 0x00100000000000000000000000000000);
    test(decimal128, 0, -6160, 0x00200000000000000000000000000000);
    test(decimal128, 0, -6144, 0x00400000000000000000000000000000);
    test(decimal128, 0, -6112, 0x00800000000000000000000000000000);
    test(decimal128, 0, -6048, 0x01000000000000000000000000000000);
    test(decimal128, 0, -5920, 0x02000000000000000000000000000000);
    test(decimal128, 0, -5664, 0x04000000000000000000000000000000);
    test(decimal128, 0, -5152, 0x08000000000000000000000000000000);
    test(decimal128, 0, -4128, 0x10000000000000000000000000000000);
    test(decimal128, 0, -2080, 0x20000000000000000000000000000000);
    test(decimal128, 0, 2016, 0x40000000000000000000000000000000);
    test(decimal128, 0, 6110, 0x5ffc0000000000000000000000000000);
    test(decimal128, 0, 6111, 0x5ffe0000000000000000000000000000);
    test(decimal128, 0, 6112, 0x5ffe0000000000000000000000000000);
    test(decimal128, negative_zero, -6176, 0x80000000000000000000000000000000);
    test(decimal128, negative_zero, -6177, 0x80000000000000000000000000000000);
    test(decimal128, negative_zero, -6175, 0x80020000000000000000000000000000);
    test(decimal128, negative_zero, -6174, 0x80040000000000000000000000000000);
    test(decimal128, negative_zero, -6172, 0x80080000000000000000000000000000);
    test(decimal128, negative_zero, -6168, 0x80100000000000000000000000000000);
    test(decimal128, negative_zero, -6160, 0x80200000000000000000000000000000);
    test(decimal128, negative_zero, -6144, 0x80400000000000000000000000000000);
    test(decimal128, negative_zero, -6112, 0x80800000000000000000000000000000);
    test(decimal128, negative_zero, -6048, 0x81000000000000000000000000000000);
    test(decimal128, negative_zero, -5920, 0x82000000000000000000000000000000);
    test(decimal128, negative_zero, -5664, 0x84000000000000000000000000000000);
    test(decimal128, negative_zero, -5152, 0x88000000000000000000000000000000);
    test(decimal128, negative_zero, -4128, 0x90000000000000000000000000000000);
    test(decimal128, negative_zero, -2080, 0xa0000000000000000000000000000000);
    test(decimal128, negative_zero, 2016, 0xc0000000000000000000000000000000);
    test(decimal128, negative_zero, 6110, 0xdffc0000000000000000000000000000);
    test(decimal128, negative_zero, 6111, 0xdffe0000000000000000000000000000);
    test(decimal128, negative_zero, 6112, 0xdffe0000000000000000000000000000);
    test(decimal128, 1, -6176, 0x00000000000000000000000000000001);
    test(decimal128, -1, -6176, 0x80000000000000000000000000000001);
    test(decimal128, 2, -6176, 0x00000000000000000000000000000002);
    test(decimal128, -2, -6176, 0x80000000000000000000000000000002);
    test(decimal128, 1, -6175, 0x00020000000000000000000000000001);
    test(decimal128, -1, -6175, 0x80020000000000000000000000000001);
    test(decimal128, 3, -6176, 0x00000000000000000000000000000003);
    test(decimal128, -3, -6176, 0x80000000000000000000000000000003);
    test(decimal128, 4, -6176, 0x00000000000000000000000000000004);
    test(decimal128, 8, -6176, 0x00000000000000000000000000000008);
    test(decimal128, 16, -6176, 0x00000000000000000000000000000010);
    test(decimal128, 32, -6176, 0x00000000000000000000000000000020);
    test(decimal128, 64, -6176, 0x00000000000000000000000000000040);
    test(decimal128, 128, -6176, 0x00000000000000000000000000000080);
    test(decimal128, 256, -6176, 0x00000000000000000000000000000100);
    test(decimal128, 512, -6176, 0x00000000000000000000000000000200);
    test(decimal128, 1024, -6176, 0x00000000000000000000000000000400);
    test(decimal128, 2048, -6176, 0x00000000000000000000000000000800);
    test(decimal128, 4096, -6176, 0x00000000000000000000000000001000);
    test(decimal128, 8192, -6176, 0x00000000000000000000000000002000);
    test(decimal128, 16384, -6176, 0x00000000000000000000000000004000);
    test(decimal128, 32768, -6176, 0x00000000000000000000000000008000);
    test(decimal128, 65536, -6176, 0x00000000000000000000000000010000);
    test(decimal128, 131072, -6176, 0x00000000000000000000000000020000);
    test(decimal128, 262144, -6176, 0x00000000000000000000000000040000);
    test(decimal128, 524288, -6176, 0x00000000000000000000000000080000);
    test(decimal128, 1048576, -6176, 0x00000000000000000000000000100000);
    test(decimal128, 2097152, -6176, 0x00000000000000000000000000200000);
    test(decimal128, 4194304, -6176, 0x00000000000000000000000000400000);
    test(decimal128, 8388608, -6176, 0x00000000000000000000000000800000);
    test(decimal128, 16777216, -6176, 0x00000000000000000000000001000000);
    test(decimal128, 33554432, -6176, 0x00000000000000000000000002000000);
    test(decimal128, 67108864, -6176, 0x00000000000000000000000004000000);
    test(decimal128, 134217728, -6176, 0x00000000000000000000000008000000);
    test(decimal128, 268435456, -6176, 0x00000000000000000000000010000000);
    test(decimal128, 536870912, -6176, 0x00000000000000000000000020000000);
    test(decimal128, 1073741824, -6176, 0x00000000000000000000000040000000);
    test(decimal128, 2147483648, -6176, 0x00000000000000000000000080000000);
    test(decimal128, 4294967296, -6176, 0x00000000000000000000000100000000);
    test(decimal128, 8589934592, -6176, 0x00000000000000000000000200000000);
    test(decimal128, 17179869184, -6176, 0x00000000000000000000000400000000);
    test(decimal128, 34359738368, -6176, 0x00000000000000000000000800000000);
    test(decimal128, 68719476736, -6176, 0x00000000000000000000001000000000);
    test(decimal128, 137438953472, -6176, 0x00000000000000000000002000000000);
    test(decimal128, 274877906944, -6176, 0x00000000000000000000004000000000);
    test(decimal128, 549755813888, -6176, 0x00000000000000000000008000000000);
    test(decimal128, 1099511627776, -6176, 0x00000000000000000000010000000000);
    test(decimal128, 2199023255552, -6176, 0x00000000000000000000020000000000);
    test(decimal128, 4398046511104, -6176, 0x00000000000000000000040000000000);
    test(decimal128, 8796093022208, -6176, 0x00000000000000000000080000000000);
    test(decimal128, 17592186044416, -6176,
         0x00000000000000000000100000000000);
    test(decimal128, 35184372088832, -6176,
         0x00000000000000000000200000000000);
    test(decimal128, 70368744177664, -6176,
         0x00000000000000000000400000000000);
    test(decimal128, 140737488355328, -6176,
         0x00000000000000000000800000000000);
    test(decimal128, 281474976710656, -6176,
         0x00000000000000000001000000000000);
    test(decimal128, 562949953421312, -6176,
         0x00000000000000000002000000000000);
    test(decimal128, 1125899906842624, -6176,
         0x00000000000000000004000000000000);
    test(decimal128, 2251799813685248, -6176,
         0x00000000000000000008000000000000);
    test(decimal128, 4503599627370496, -6176,
         0x00000000000000000010000000000000);
    test(decimal128, 9007199254740992, -6176,
         0x00000000000000000020000000000000);
    test(decimal128, 18014398509481984, -6176,
         0x00000000000000000040000000000000);
    test(decimal128, 36028797018963968, -6176,
         0x00000000000000000080000000000000);
    test(decimal128, 72057594037927936, -6176,
         0x00000000000000000100000000000000);
    test(decimal128, 144115188075855872, -6176,
         0x00000000000000000200000000000000);
    test(decimal128, 288230376151711744, -6176,
         0x00000000000000000400000000000000);
    test(decimal128, 576460752303423488, -6176,
         0x00000000000000000800000000000000);
    test(decimal128, 1152921504606846976, -6176,
         0x00000000000000001000000000000000);
    test(decimal128, 2305843009213693952, -6176,
         0x00000000000000002000000000000000);
    test(decimal128, 4611686018427387904, -6176,
         0x00000000000000004000000000000000);
    test(decimal128, 9223372036854775808, -6176,
         0x00000000000000008000000000000000);
    test(decimal128, 18446744073709551616, -6176,
         0x00000000000000010000000000000000);
    test(decimal128, 36893488147419103232, -6176,
         0x00000000000000020000000000000000);
    test(decimal128, 73786976294838206464, -6176,
         0x00000000000000040000000000000000);
    test(decimal128, 147573952589676412928, -6176,
         0x00000000000000080000000000000000);
    test(decimal128, 295147905179352825856, -6176,
         0x00000000000000100000000000000000);
    test(decimal128, 590295810358705651712, -6176,
         0x00000000000000200000000000000000);
    test(decimal128, 1180591620717411303424, -6176,
         0x00000000000000400000000000000000);
    test(decimal128, 2361183241434822606848, -6176,
         0x00000000000000800000000000000000);
    test(decimal128, 4722366482869645213696, -6176,
         0x00000000000001000000000000000000);
    test(decimal128, 9444732965739290427392, -6176,
         0x00000000000002000000000000000000);
    test(decimal128, 18889465931478580854784, -6176,
         0x00000000000004000000000000000000);
    test(decimal128, 37778931862957161709568, -6176,
         0x00000000000008000000000000000000);
    test(decimal128, 75557863725914323419136, -6176,
         0x00000000000010000000000000000000);
    test(decimal128, 151115727451828646838272, -6176,
         0x00000000000020000000000000000000);
    test(decimal128, 302231454903657293676544, -6176,
         0x00000000000040000000000000000000);
    test(decimal128, 604462909807314587353088, -6176,
         0x00000000000080000000000000000000);
    test(decimal128, 1208925819614629174706176, -6176,
         0x00000000000100000000000000000000);
    test(decimal128, 2417851639229258349412352, -6176,
         0x00000000000200000000000000000000);
    test(decimal128, 4835703278458516698824704, -6176,
         0x00000000000400000000000000000000);
    test(decimal128, 9671406556917033397649408, -6176,
         0x00000000000800000000000000000000);
    test(decimal128, 19342813113834066795298816, -6176,
         0x00000000001000000000000000000000);
    test(decimal128, 38685626227668133590597632, -6176,
         0x00000000002000000000000000000000);
    test(decimal128, 77371252455336267181195264, -6176,
         0x00000000004000000000000000000000);
    test(decimal128, 154742504910672534362390528, -6176,
         0x00000000008000000000000000000000);
    test(decimal128, 309485009821345068724781056, -6176,
         0x00000000010000000000000000000000);
    test(decimal128, 618970019642690137449562112, -6176,
         0x00000000020000000000000000000000);
    test(decimal128, 1237940039285380274899124224, -6176,
         0x00000000040000000000000000000000);
    test(decimal128, 2475880078570760549798248448, -6176,
         0x00000000080000000000000000000000);
    test(decimal128, 4951760157141521099596496896, -6176,
         0x00000000100000000000000000000000);
    test(decimal128, 9903520314283042199192993792, -6176,
         0x00000000200000000000000000000000);
    test(decimal128, 19807040628566084398385987584, -6176,
         0x00000000400000000000000000000000);
    test(decimal128, 39614081257132168796771975168, -6176,
         0x00000000800000000000000000000000);
    test(decimal128, 79228162514264337593543950336, -6176,
         0x00000001000000000000000000000000);
    test(decimal128, 158456325028528675187087900672, -6176,
         0x00000002000000000000000000000000);
    test(decimal128, 316912650057057350374175801344, -6176,
         0x00000004000000000000000000000000);
    test(decimal128, 633825300114114700748351602688, -6176,
         0x00000008000000000000000000000000);
    test(decimal128, 1267650600228229401496703205376, -6176,
         0x00000010000000000000000000000000);
    test(decimal128, 2535301200456458802993406410752, -6176,
         0x00000020000000000000000000000000);
    test(decimal128, 5070602400912917605986812821504, -6176,
         0x00000040000000000000000000000000);
    test(decimal128, 10141204801825835211973625643008, -6176,
         0x00000080000000000000000000000000);
    test(decimal128, 20282409603651670423947251286016, -6176,
         0x00000100000000000000000000000000);
    test(decimal128, 40564819207303340847894502572032, -6176,
         0x00000200000000000000000000000000);
    test(decimal128, 81129638414606681695789005144064, -6176,
         0x00000400000000000000000000000000);
    test(decimal128, 162259276829213363391578010288128, -6176,
         0x00000800000000000000000000000000);
    test(decimal128, 324518553658426726783156020576256, -6176,
         0x00001000000000000000000000000000);
    test(decimal128, 649037107316853453566312041152512, -6176,
         0x00002000000000000000000000000000);
    test(decimal128, 1298074214633706907132624082305024, -6176,
         0x00004000000000000000000000000000);
    test(decimal128, 2596148429267413814265248164610048, -6176,
         0x00008000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6176,
         0x00010000000000000000000000000000);
    test(decimal128, 9999999999999999999999999999999999, -6176,
         0x0001ed09bead87c0378d8e63ffffffff);
    test(decimal128, 0, -6176, 0x0001ed09bead87c0378d8e6400000000);
    test(decimal128, 0, -6175, 0x0003ed09bead87c0378d8e6400000000);
    test(decimal128, 0, -6176, 0x0001ffffffffffffffffffffffffffff);
    test(decimal128, 0, -6176, 0x60000000000000000000000000000000);
    test(decimal128, 0, -6176, 0x60007fffffffffffffffffffffffffff);
    test(decimal128, 5192296858534827628530496329220096, -6175,
         0x00030000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6174,
         0x00050000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6173,
         0x00070000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6172,
         0x00090000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6168,
         0x00110000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6160,
         0x00210000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6144,
         0x00410000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6112,
         0x00810000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -6048,
         0x01010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -5920,
         0x02010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -5664,
         0x04010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -5152,
         0x08010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -4128,
         0x10010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, -2080,
         0x20010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, 2016,
         0x40010000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, 6110,
         0x5ffd0000000000000000000000000000);
    test(decimal128, 5192296858534827628530496329220096, 6111,
         0x5fff0000000000000000000000000000);
    test(decimal128, +oo, 0, 0x78000000000000000000000000000000);
    test(decimal128, -oo, 0, 0xf8000000000000000000000000000000);
    test(decimal128, +oo, 0, 0x7bffffffffffffffffffffffffffffff);
    test(decimal128, -oo, 0, 0xfbffffffffffffffffffffffffffffff);
    test(decimal128, 0/0, 0, 0x7c000000000000000000000000000000);
    test(decimal128, negative_zero_zero, 0,
         0xfc000000000000000000000000000000);
    test(decimal128, signalling_zero_zero, 0,
         0x7e000000000000000000000000000000);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xfe000000000000000000000000000000);
    test(decimal128, 0/0, 0, 0x7dff0000000000000000000000000000);
    test(decimal128, negative_zero_zero, 0,
         0xfdff0000000000000000000000000000);
    test(decimal128, signalling_zero_zero, 0,
         0x7fff0000000000000000000000000000);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xffff0000000000000000000000000000);
    test(decimal128, 0/0, 0, 0x7c000000000000000000000000000001, payload := 1);
    test(decimal128, negative_zero_zero, 0, 0xfc000000000000000000000000000001,
         payload := 1);
    test(decimal128, 0/0, 0, 0x7c00314dc6448d9338c15b09ffffffff,
         payload := 999999999999999999999999999999999);
    test(decimal128, negative_zero_zero, 0, 0xfc00314dc6448d9338c15b09ffffffff,
         payload := 999999999999999999999999999999999);
    test(decimal128, signalling_zero_zero, 0,
         0x7e00314dc6448d9338c15b09ffffffff,
         payload := 999999999999999999999999999999999);
    test(decimal128, negative_signalling_zero_zero, 0,
         0xfe00314dc6448d9338c15b09ffffffff,
         payload := 999999999999999999999999999999999);
  };


  {
    print("decimal32(1, 0): ", decimal32(1, 0), ".\n");
    print("decimal32(1/2, 0): ", decimal32(1/2, 0), ".\n");
    print("decimal32(1/3, 0): ", decimal32(1/3, 0), ".\n");
    print("decimal32(2/3, 0): ", decimal32(2/3, 0), ".\n");
    print("decimal32(9, 0): ", decimal32(9, 0), ".\n");
    print("decimal32(10, 0): ", decimal32(10, 0), ".\n");
    print("decimal32(1/3, 0) + decimal32(1/3, 0) + decimal32(1/3, 0): ",
          decimal32(1/3, 0) + decimal32(1/3, 0) + decimal32(1/3, 0), ".\n");

    immutable i1 : decimal32 ::= 87.3e-14;
    printf("i1: %.6g%.\n", i1);
  };

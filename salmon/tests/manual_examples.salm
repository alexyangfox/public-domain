/* file "manual_examples.salm" */

/*
 *  This file runs various example fragments of code from the Salmon Reference
 *  Manual.
 *
 *  Written by Chris Wilson.
 *
 *  This file is hearby placed in the public domain by its author.
 */


procedure example(section_tag : string, section_title : string,
                  body : {} <-- ())
  {
    print("Example for Section ", section_tag, ": ", section_title, ":\n");
    print("\n");
    body();
    print("\n");
  };

example("5.1", "Expressions", procedure()
  {
    3 * 4 - 7 < 5!
    3 * 4 - 7!
  });

example("5.1", "Expressions", procedure()
  {
    16 / 4 / 2!
    ((16 / 4) / 2)!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x := ["zero", "one", "two", "three", "four", "five", "six"];
    x[5]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      <<("spring" --> "summer"), ("summer" --> "fall"), ("fall" --> "winter"),
        ("winter" --> "spring")>>;
    x["winter"]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    x[5, 7]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x := [1, 2, 3];
    x[*]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    x[*, 7]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    x[5, *]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    immutable a := 3;
    immutable b := 6;
    x[a][b]!
    x[a, b]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    immutable a := 3;
    immutable b := 6;
    x[a, *][b]!
    x[a, b]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    immutable a := 3;
    immutable b := 6;
    x[*, a][b]!
    x[b, a]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    x[5...7]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    x[5...7][1]!
    x[6]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    immutable x :=
      [
        [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19,  20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29,  30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39,  40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49,  50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59,  60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69,  70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79,  80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89,  90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      ];
    x[5...5, 7]!
    x[5, 7]!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    (["a", "b", "c", "d", "e"][2...3])!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    (["a", "b", "c", "d", "e"][* : [2...3]])!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    (["a", bb := "b", "c"][*])!
  });

example("5.1.3", "Lookup Expressions", procedure()
  {
    function operator[](...)
      {
        return [arguments];
      };
    "telephone"[5]!
    "telephone"[*]!
    "telephone"[* : integer]!
    "telephone"[5...7]!
    "telephone"[5...7, 8...9]!
  });

example("5.1.6", "Pointer Field Reference Expressions", procedure()
  {
    variable x := [a := 5, b := 6];
    (&x)->a!
  });

example("5.1.6", "Pointer Field Reference Expressions", procedure()
  {
    function operator->(...) (arguments);
    "tulip"->pedal!
  });

example("5.1.8", "Statement Block Expressions", procedure()
  {
    print(
      {
        variable x := 2;
        for (i; 0; i < 5)
            x *= x;;
        return x;
      });
    ""!
  });

example("5.1.9", "New Expressions", procedure()
  {
    immutable i1 := (variable : integer);
    *i1 := 12;
    *i1!
    *i1 := 13;
    *i1!
  });

example("5.1.9", "New Expressions", procedure()
  {
    *(immutable := 17)!
  });

example("5.1.10", "Routine Expressions", procedure()
  {
    function apply(process, input)
      {
        variable result := [];
        iterate(x; input)
            result ~= [process(x)];;
        return result;
      };
    apply(function(y) (y + y), [1, 2, 3])!
    apply(function(y) (y * y), [1, 2, 3])!
  });

example("5.1.11", "Tagalong Expressions", procedure()
  {
    immutable i2 := tagalong : integer := 5 on string;
    variable v2 := "hello";
    v2..i2!
    v2..i2 := 157;
    v2..i2!
  });

example("5.1.12", "Lepton Key Expressions", procedure()
  {
    immutable i3 := lepton[a : integer, b : string];
    immutable i4 := i3[a := 5, b := "five"];
    i4.b!
  });

example("5.1.13", "Quark Expressions", procedure()
  {
    variable v1 : any_quark[0...5];
    for (i; 0; i <= 5)
        v1[i] := quark;;
    v1[2] == v1[3]!
    v1[2] == v1[2]!
  });

example("5.1.14", "Lock Expressions", procedure()
  {
    single(lock) procedure p1()
      { "p1()"! };
    p1();
    p1();
  });

example("5.1.15", "Construct Expressions", procedure()
  {
    class c1(xx, yy)
      {
        immutable x := xx, y := yy;
      };
    immutable i5 := construct c1(5, 7);
    i5->y!
  });

example("5.1.16", "Type Value Expressions", procedure()
  {
    immutable i6 := type integer --> string;
    (["hello", "goodbye"] in i6)!
    <<("blue" --> "red")>> in i6!
  });

example("5.1.17", "Map List Expressions", procedure()
  {
    immutable i1 :=
      <<(* --> "default"), (* : integer --> "integer"), (15 --> "fifteen"),
        ("blue" --> "red")>>;
    i1["blue"]!
    i1["red"]!
    i1[15]!
    i1[16]!
  });

example("5.1.18", "Semi-Labeled Expression List Expressions", procedure()
  {
    immutable i1 := [5 + 10, bbb := "taxi" ~ "cab"];
    i1[0]!
    i1[1]!
    i1.bbb!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    function f1(x) (x + 12);
    f1(8)!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    (function(x) (x + 12))(18)!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    immutable i1 := [operator() := function(...) (arguments)];
    i1()!
    i1(12, "beach")!
    i1(12, c := "beach")!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    class c1()
      {
        function operator()(...) (arguments);
      };
    immutable i1 := c1();
    i1(18, tree := "oak")!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    function operator()(...) (arguments);
    "soap"(23, car := "Sentra")!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    function show(...) (arguments);
    show(23, car := "Sentra")!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    function show(a : integer, car : string) (arguments);
    show(23, car := "Sentra")!
  });

example("5.1.19", "Call Expressions", procedure()
  {
    function show(a : integer, car : string) (arguments);
    show(car := "Sentra", a := 23)!
  });

example("5.1.21", "Unary Expressions", procedure()
  {
    immutable i1 := [operator+ := function(...) (arguments)];
    +i1!
  });

example("5.1.21", "Unary Expressions", procedure()
  {
    function operator+(...) (arguments);
    +15!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable x := &y;
    immutable i1 := &*x;
    variable y;
    y := 5;
    *i1!
    y := 7;
    *i1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 := &(x.y);
    variable x;
    x := [y := 15];
    *i1!
    x.y := 17;
    *i1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 := &(x[3]);
    variable x;
    x := [10, 20, 30, 40, 50];
    *i1!
    x := <<(* : integer --> 47)>>;
    *i1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable x := "yesterday";
    variable i1 :=
      {
        ageless function operator*(...) (arguments);
        return &*x;
      };
    *i1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable x := "yesterday";
    variable i1 :=
      {
        ageless procedure operator*(...)
          { print("operator* arguments: ", arguments, "\n"); };
        return &*x;
      };
    *i1 := 15;
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 := [operator* := function(...) (arguments)];
    immutable i2 := &*i1;
    *i2!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 :=
      [
        operator* := procedure(...)
          { print("operator* arguments: ", arguments, "\n"); }
      ];
    immutable i2 := &*i1;
    *i2 := 17;
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable v1 := [b := 2, a := 1];
    v1!
    v1[0]!
    v1.b := 3;
    v1!
    v1[0]!
    v1.c := 4;
    v1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable x := "yesterday";
    variable i1 :=
      {
        ageless function operator->(...) (arguments);
        return &x->a;
      };
    *i1!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    variable x := "yesterday";
    variable i1 :=
      {
        ageless procedure operator->(...)
          { print("operator-> arguments: ", arguments, "\n"); };
        return &x->a;
      };
    *i1 := 15;
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 := [operator-> := function(...) (arguments)];
    immutable i2 := &i1->a;
    *i2!
  });

example("5.1.21.2", "Location-Of Expressions", procedure()
  {
    immutable i1 :=
      [
        operator-> := procedure(...)
          { print("operator-> arguments: ", arguments, "\n"); }
      ];
    immutable i2 := &i1->a;
    *i2 := 17;
  });

example("5.1.22", "Binary Expressions", procedure()
  {
    immutable i1 := [operator+ := function(...)
      (arguments == [12, reversed := false])];
    i1 + 12!
  });

example("5.1.22", "Binary Expressions", procedure()
  {
    function operator+(...) (arguments);
    15 + 16!
  });

example("5.1.22.1", "Add Expressions", procedure()
  {
    15 + 16!
  });

example("5.1.22.1", "Add Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[2];
    *i2!
    *(i2 + 2)!
  });

example("5.1.22.1", "Add Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[1...2];
    *i2!
    *(i2 + 2)!
  });

example("5.1.22.2", "Subtract Expressions", procedure()
  {
    15 - 16!
  });

example("5.1.22.2", "Subtract Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[4];
    *i2!
    *(i2 - 2)!
  });

example("5.1.22.2", "Subtract Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[3...4];
    *i2!
    *(i2 - 2)!
  });

example("5.1.22.2", "Subtract Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[3];
    immutable i3 := &i1[0];
    (i2 - i3)!
  });

example("5.1.22.2", "Subtract Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[3...4];
    immutable i3 := &i1[1...2];
    (i2 - i3)!
  });

example("5.1.22.3", "Multiply Expressions", procedure()
  {
    8 * 8!
  });

example("5.1.22.4", "Divide Expressions", procedure()
  {
    18 / 3!
  });

example("5.1.22.4", "Divide Expressions", procedure()
  {
    17 / 3!
  });

example("5.1.22.5", "Divide-Force Expressions", procedure()
  {
    18 /:: 3!
  });

example("5.1.22.5", "Divide-Force Expressions", procedure()
  {
    17 /:: 3!
  });

example("5.1.22.5", "Divide-Force Expressions", procedure()
  {
    (-17) /:: 3!
  });

example("5.1.22.6", "Remainder Expressions", procedure()
  {
    18 % 3!
  });

example("5.1.22.6", "Remainder Expressions", procedure()
  {
    17 % 3!
  });

example("5.1.22.6", "Remainder Expressions", procedure()
  {
    (-17) % 3!
  });

example("5.1.22.7", "Left Shift Expressions", procedure()
  {
    3 << 2!
  });

example("5.1.22.7", "Left Shift Expressions", procedure()
  {
    (-3) << 2!
  });

example("5.1.22.7", "Left Shift Expressions", procedure()
  {
    3 << -1!
  });

example("5.1.22.7", "Left Shift Expressions", procedure()
  {
    (-3) << -1!
  });

example("5.1.22.8", "Right Shift Expressions", procedure()
  {
    3 >> -2!
  });

example("5.1.22.8", "Right Shift Expressions", procedure()
  {
    (-3) >> -2!
  });

example("5.1.22.8", "Right Shift Expressions", procedure()
  {
    3 >> 1!
  });

example("5.1.22.8", "Right Shift Expressions", procedure()
  {
    (-3) >> 1!
  });

example("5.1.22.9", "Less-Than Expressions", procedure()
  {
    3 < 4!
  });

example("5.1.22.9", "Less-Than Expressions", procedure()
  {
    4 < 4!
  });

example("5.1.22.9", "Less-Than Expressions", procedure()
  {
    5 < 4!
  });

example("5.1.22.9", "Less-Than Expressions", procedure()
  {
    immutable i1 := ["a", "b", "c", "d", "e"];
    immutable i2 := &i1[3];
    immutable i3 := &i1[0];
    (i2 < i3)!
    (i3 < i2)!
  });

example("5.1.22.10", "Greater-Than Expressions", procedure()
  {
    3 > 4!
  });

example("5.1.22.10", "Greater-Than Expressions", procedure()
  {
    4 > 4!
  });

example("5.1.22.10", "Greater-Than Expressions", procedure()
  {
    5 > 4!
  });

example("5.1.22.11", "Less-Than-Or-Equal Expressions", procedure()
  {
    3 <= 4!
  });

example("5.1.22.11", "Less-Than-Or-Equal Expressions", procedure()
  {
    4 <= 4!
  });

example("5.1.22.11", "Less-Than-Or-Equal Expressions", procedure()
  {
    5 <= 4!
  });

example("5.1.22.12", "Greater-Than-Or-Equal Expressions", procedure()
  {
    3 >= 4!
  });

example("5.1.22.12", "Greater-Than-Or-Equal Expressions", procedure()
  {
    4 >= 4!
  });

example("5.1.22.12", "Greater-Than-Or-Equal Expressions", procedure()
  {
    5 >= 4!
  });

example("5.1.22.13", "Equal Expressions", procedure()
  {
    ([17, 18] == [17, 18])!
  });

example("5.1.22.13", "Equal Expressions", procedure()
  {
    ([17, 18] == "blue")!
  });

example("5.1.22.14", "Not-Equal Expressions", procedure()
  {
    ([17, 18] != [17, 18])!
  });

example("5.1.22.14", "Not-Equal Expressions", procedure()
  {
    ([17, 18] != "blue")!
  });

example("5.1.22.15", "Bitwise And Expressions", procedure()
  {
    0x3f & 0xf3!
  });

example("5.1.22.15", "Bitwise And Expressions", procedure()
  {
    (-1) & (-4)!
  });

example("5.1.22.16", "Bitwise Or Expressions", procedure()
  {
    0x3f | 0xf3!
  });

example("5.1.22.16", "Bitwise Or Expressions", procedure()
  {
    (-1) | (-4)!
  });

example("5.1.22.17", "Bitwise Xor Expressions", procedure()
  {
    0x3f ^ 0xf3!
  });

example("5.1.22.17", "Bitwise Xor Expressions", procedure()
  {
    (-1) ^ (-4)!
  });

example("5.1.22.18", "Logical-And Expressions", procedure()
  {
    function f1()  { "f1()"!; return true; };
    function f2()  { "f2()"!; return false; };
    (f1() && f1())!
    (f1() && f2())!
    (f2() && f1())!
    (f2() && f2())!
  });

example("5.1.22.19", "Logical-Or Expressions", procedure()
  {
    function f1()  { "f1()"!; return true; };
    function f2()  { "f2()"!; return false; };
    (f1() || f1())!
    (f1() || f2())!
    (f2() || f1())!
    (f2() || f2())!
  });

example("5.1.22.20", "Concatenate Expressions", procedure()
  {
    'a' ~ 'b'!
    'a' ~ "bc"!
    "ab" ~ 'c'!
    "ab" ~ "cd"!
  });

example("5.1.22.20", "Concatenate Expressions", procedure()
  {
    ([1, 2, 3] ~ [4, 5, 6])!
    ([a := 1, 2, 3] ~ [4, 5, 6])!
    ([a := 1, 2, 3] ~ [b := 4, 5, 6])!
    ([a := 1, 2, 3] ~ <<(0 --> 4), (1 --> 5), (2 --> 6)>>)!
    ([a := 1, 2, 3] ~ <<(* : [0...2] --> 4)>>)!
  });

example("5.1.23", "Arguments Expressions", procedure()
  {
    procedure p1(...)  { arguments! };
    p1();
    p1(13, "purple");
    p1(a := 13, "purple");
  });

example("5.1.23", "Arguments Expressions", procedure()
  {
    procedure p1(...)
      {
        procedure p2(...)  { arguments of p1! arguments of p2! };
        p2("gold");
      };
    p1(a := 13, "purple");
  });

example("5.1.24", "This Expressions", procedure()
  {
    class c1(xx)
      {
        immutable x := xx;
        this.x!
      };
    [] := [c1(12)];
    [] := [c1("swallow")];
  });

example("5.1.24", "This Expressions", procedure()
  {
    class c1(xx)
      {
        immutable x := xx;
        class c2(yy)
          {
            immutable x := yy;
            this of c1.x!
            this of c2.x!
          };
        [] := [c2(xx + 12)];
      };
    [] := [c1(50)];
  });

example("5.1.25", "In Expressions", procedure()
  {
    5 in integer!
    5.5 in integer!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    15.5 :: integer!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    -15.5 :: integer!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    5 :: [0...4]!
    6 :: [0...4]!
    6.5 :: [0...4]!
    -1 :: [0...4]!
    5 :: [2...4]!
    6 :: [2...4]!
    6.5 :: [2...4]!
    -1 :: [2...4]!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    <<(* --> "blue")>> :: string[5]!
    <<(1 --> "blue"), (2 --> "red"), ("pole" --> "white")>> :: string[5]!
    (["a", 5, "b", "c", "d", "e"] :: string[5])!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    "green" :: string[5]!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    <<(* --> "blue")>> :: integer --> string!
    <<(1 --> "blue"), (2 --> "red"),
      ("pole" --> "white")>> :: integer --> string!
    (["a", 5, "b", "c", "d", "e"] :: {1, 2, 4} --> string)!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    9 :: integer --> [0...5]!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    (<<(5 --> [a := 9])>> :: {5} --> fields[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello"])>> ::
     {5} --> fields[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := 17])>> :: {5} --> fields[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> fields[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> fields[a : [0...5], b : string, ...])!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    (<<(5 --> [a := 9])>> :: {5} --> interface[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello"])>> ::
     {5} --> interface[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := 17])>> ::
     {5} --> interface[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> interface[a : [0...5], b : string])!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    lepton l1;
    (<<(5 --> [a := 9])>> :: {5} --> lepton l1[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello"])>> ::
     {5} --> lepton l1[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := 17])>> ::
     {5} --> lepton l1[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> lepton l1[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> lepton l1[a : [0...5], b : string, ...])!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    (<<(5 --> [a := 9])>> :: {5} --> multiset[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello"])>> ::
     {5} --> multiset[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := 17])>> ::
     {5} --> multiset[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> multiset[a : [0...5], b : string])!
    (<<(5 --> [a := 9, b := "hello", c := 17])>> ::
     {5} --> multiset[a : [0...5], b : string, ...])!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    ([1, 2, 3] :: [integer, integer])!
    ([1, 2, c := 3] :: [integer, integer])!
    ([11, 2, 3] :: [[0...9], integer, ...])!
    ([11, 2, c := 3] :: [[0...9], integer, ...])!
    ([11, 2, 3] :: [[0...9], integer, integer])!
    ([11, b := 2, 3] :: [[0...9], integer, integer])!
    ([11, 2, 3] :: [[0...9], b : integer, integer])!
    <<(* --> 11)>> :: [[0...9], b : integer, integer]!
    ([11, b := 2, 3] :: [[0...9], integer, integer, b : integer])!
    lepton l1;
    l1[a := 1, b := 2, c := 3] :: [b : integer, c : integer]!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    immutable i1 := [operator:: := function(...) (arguments)];
    i1 :: integer!
  });

example("5.1.26", "Force Expressions", procedure()
  {
    function operator::(...) (arguments);
    15.5 :: integer!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
    for (i; 0; i < 10)
        result ~= sprint(i);;
    result!

    result := "";
    for (i; 0; i < 10)
      {
        if (i == 5)
            goto break;;
        result ~= sprint(i);
      };
    result!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
    procedure p1(i, target)
      {
        if (i == 7)
            goto target;;
      };
    for (i; 0; i < 10)
      {
        p1(i, break);
        result ~= sprint(i);
      };
    result!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
  outer:
    for (i; 0; i < 4)
      {
        for (j; 0; j < 4)
          {
            if ((i == 1) && (j == 2))
                goto break from outer;;
            result ~= sprint([i, j]);
          };
      };
    result!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
    iterate (x; ["a", "b", "c", "d"])
      { result ~= x; };
    result!

    result := "";
    iterate (x; ["a", "b", "c", "d"])
      {
        if (x == "c")
            goto break;;
        result ~= x;
      };
    result!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
    variable i := 0;
    while (i < 10)
      { result ~= sprint(i); }
    step
      { ++i; };
    result!

    result := "";
    i := 0;
    while (i < 10)
      {
        if (i == 5)
            goto break;;
        result ~= sprint(i);
      }
    step
      { ++i; };
    result!
  });

example("5.1.27", "Break Expressions", procedure()
  {
    variable result := "";
    variable i := 0;
    do
      { result ~= sprint(i); }
    while (i < 10)
    step
      { ++i; };
    result!

    result := "";
    i := 0;
    do
      {
        if (i == 5)
            goto break;;
        result ~= sprint(i);
      }
    while (i < 10)
    step
      { ++i; };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
    for (i; 0; i < 10)
        result ~= sprint(i);;
    result!

    result := "";
    for (i; 0; i < 10)
      {
        if (i == 5)
            goto continue;;
        result ~= sprint(i);
      };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
    procedure p1(i, target)
      {
        if (i == 7)
            goto target;;
      };
    for (i; 0; i < 10)
      {
        p1(i, continue);
        result ~= sprint(i);
      };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
  outer:
    for (i; 0; i < 4)
      {
        for (j; 0; j < 4)
          {
            if (j == 2)
                goto continue with outer;;
            result ~= sprint([i, j]);
          };
      };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
    iterate (x; ["a", "b", "c", "d"])
      { result ~= x; };
    result!

    result := "";
    iterate (x; ["a", "b", "c", "d"])
      {
        if (x == "c")
            goto continue;;
        result ~= x;
      };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
    variable i := 0;
    while (i < 10)
      { result ~= sprint(i); }
    step
      { ++i; };
    result!

    result := "";
    i := 0;
    while (i < 10)
      {
        if (i == 5)
            goto continue;;
        result ~= sprint(i);
      }
    step
      { ++i; };
    result!
  });

example("5.1.28", "Continue Expressions", procedure()
  {
    variable result := "";
    variable i := 0;
    do
      { result ~= sprint(i); }
    while (i < 10)
    step
      { ++i; };
    result!

    result := "";
    i := 0;
    do
      {
        if (i == 5)
            goto continue;;
        result ~= sprint(i);
      }
    while (i < 10)
    step
      { ++i; };
    result!
  });

example("5.1.29", "Comprehend Expressions", procedure()
  {
    immutable through_ten := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    comprehend(x; through_ten) (x * x)!
    comprehend(x; through_ten; x % 3 == 0) (x * x)!
    comprehend(x; through_ten; x % 2 == 0)
      {
        if (x == 4)
            continue;;
        if (x == 8)
            break;;
        return x * x;
      }!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5;
    x!
    x := 17;
    x!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5;
    x!
    x += 17;
    x!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x : [0...9] := 5;
    x!
    x ::= 17;
    x!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [x, y] := [17, 18];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [x, y] := [y, x];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [x, y] := [a := 17, b := 18, c := 19];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [x := b, y] := [a := 17, b := 18, c := 19];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [x := b, y := a] := [a := 17, b := 18, c := 19];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    variable x := 5, y := 6;
    x!
    y!
    [:= b, y] := [a := 17, b := 18, c := 19];
    x!
    y!
  });

example("5.2.1", "Assign Statements", procedure()
  {
    function f1(x)  { x! return x + 17; };
    [] := [f1(18)];
  });

example("5.2.1", "Assign Statements", procedure()
  {
    function operator+(...) (arguments);
    variable x := 5;
    x += 17;
    x!
  });

example("5.2.2", "Increment Statements", procedure()
  {
    variable x := 5;
    x!
    ++x;
    x!
  });

example("5.2.2", "Increment Statements", procedure()
  {
    function operator+(...) (arguments);
    variable x := 5;
    x!
    ++x;
    x!
  });

example("5.2.3", "Decrement Statements", procedure()
  {
    variable x := 5;
    x!
    --x;
    x!
  });

example("5.2.3", "Decrement Statements", procedure()
  {
    function operator-(...) (arguments);
    variable x := 5;
    x!
    --x;
    x!
  });

example("5.2.4", "Call Statements", procedure()
  {
    procedure p1(...) { arguments! };
    p1();
    p1(13);
    p1(13, 15);
    p1(13, b := 15);
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
      {
        "yes"!
      };
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 != 4)
      {
        "yes"!
      };
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
      {
        "yes"!
      }
    else
      {
        "no"!
      };
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 != 4)
      {
        "yes"!
      }
    else
      {
        "no"!
      };
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 != 4)
        "yes"!
    else
        "no"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 != 4)
        "yes"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
        "yes"!
    else if (5 == 7)
        "maybe"!
    else
        "no"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 != 4)
        "yes"!
    else if (5 == 7)
        "maybe"!
    else
        "no"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
        "yes"!
    else if (5 != 7)
        "maybe"!
    else
        "no"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
        "yes"!
    else if (5 != 7)
        "maybe"!;
    "done"!
  });

example("5.2.11", "If Statements", procedure()
  {
    if (3 == 4)
        "yes"!
    else if (5 == 7)
        "maybe"!;
    "done"!
  });

example("5.2.12", "Switch Statements", procedure()
  {
    procedure p1(x)
      {
        pure function positive_odd(y) returns boolean
            ((y in integer) && (y > 0) && ((y % 2) == 1));
        print(x, ": ");
        switch (x)
        case ({0})
          { "zero"! }
        case ({1})
          { "one"! }
        case ({2, 3})
          { "two or three"! }
        case ([0...5])
          { "zero through 5"! }
        case (positive_odd)
          { "positive_odd"! }
        case (integer)
          { "integer"! }
        case (!{})
          { "something else"! };
      };
    p1(0);
    p1(1);
    p1(2);
    p1(3);
    p1(4);
    p1(5);
    p1(6);
    p1(7);
    p1(8);
    p1(9);
    p1(10);
    p1(-1);
    p1(-2);
    p1(5.3);
    p1([5.3]);
  });

example("5.2.15", "For Statements", procedure()
  {
    for (i; 17; i < 25; 3)
        i!;
  });

example("5.2.16", "Iterate Statements", procedure()
  {
    iterate (x; ["a", q := "b", "c"])
      { x! };
  });

example("5.2.16", "Iterate Statements", procedure()
  {
    iterate (x; <<(-2 --> "a"), (-1 --> "b"), (0 --> "c"), (1 --> "d")>>)
      { x! };
  });

example("5.2.16", "Iterate Statements", procedure()
  {
    class c1()
      {
        function iterator()
          {
            return class()
              {
                variable i := 0;
                function current() (i);
                function is_done() (i > 10);
                procedure step() { i += 3; };
              }();
          };
      };
    iterate (x; c1())
      { x! };
  });

example("5.2.16", "Iterate Statements", procedure()
  {
    iterate (x; [1, 2, 3, 4, 5, 6]; (x % 2) == 1)
      { x! };
  });

example("5.2.17", "While Statements", procedure()
  {
    variable result := "";
    variable i := 0;
    while (i < 10)
      {
        result ~= sprint(i);
        ++i;
      };
    result!
  });

example("5.2.17", "While Statements", procedure()
  {
    variable result := "";
    variable i := 0;
    while (i < 10)
      { result ~= sprint(i); }
    step
      { ++i; };
    result!
  });

example("5.2.17", "While Statements", procedure()
  {
    variable result := "";
    variable i := 0;
    while (i < 10)
    step
      { ++i; }
      { result ~= sprint(i); };
    result!
  });

example("5.2.18", "Do-While Statements", procedure()
  {
    variable result := "";
    variable i := 0;
    do
      {
        result ~= sprint(i);
        ++i;
      }
    while (i < 10);
    result!
  });

example("5.2.18", "Do-While Statements", procedure()
  {
    variable result := "";
    variable i := 0;
    do
      { result ~= sprint(i); }
    while (i < 10)
    step
      { ++i; };
    result!
  });

example("5.2.18", "Do-While Statements", procedure()
  {
    do
      { "yes!"! }
    while (false);
  });

example("5.2.19", "Break Statements", procedure()
  {
    variable result := "";
    for (i; 0; i < 10)
      {
        if (i == 5)
            break;;
        result ~= sprint(i);
      };
    result!
  });

example("5.2.20", "Continue Statements", procedure()
  {
    variable result := "";
    for (i; 0; i < 10)
      {
        if (i == 5)
            continue;;
        result ~= sprint(i);
      };
    result!
  });

example("5.2.21", "Label Statements", procedure()
  {
    variable result := "";
    variable i := 0;
  loop:
    if (i >= 10)
        goto done;;
    result ~= sprint(i);
    ++i;
    goto loop;
  done:
    result!
  });

example("5.2.21", "Label Statements", procedure()
  {
    procedure p1(x, target := null)
      {
        print("Entering p1(", x, ").\n");
        if (target == null)
            p1(x * x, exit);
        else
            goto target;;
      exit:
        print("Leaving p1(", x, ").\n");
      };
    p1(5);
  });

example("5.2.21", "Label Statements", procedure()
  {
    variable result := "";
  my_loop1:
  my_loop2:
    for (i; 0; i < 10)
      {
        if (i == 5)
            continue with my_loop1;;
        if (i == 7)
            continue with my_loop2;;
        result ~= sprint(i);
      };
    result!
  });

example("5.2.26", "Cleanup Statements", procedure()
  {
    "A"!
    cleanup
      { "B"! };
    "C"!
  });

example("5.2.26", "Cleanup Statements", procedure()
  {
    "A"!
    variable done := false;
  repeat:
    cleanup
      { "B"! };
    if (!done)
      {
        done := true;
        goto repeat;
      };
    "C"!
  });

example("5.2.26", "Cleanup Statements", procedure()
  {
    class c1()
      {
        cleanup
          { "B"! };
      };
    "A"!
    immutable i1 := c1();
    "C"!
    delete(i1);
    "D"!
  });

example("5.2.30", "Include Statements", procedure()
  {
    include "other.salm";
  });

example("5.5.3", "Tagalong Declarations", procedure()
  {
    class c1() { };
    tagalong t1 : integer := 2 on c1;
    tagalong t2 : integer := 2 on object c1;
    variable v1 := c1();
    ([t1 := v1..t1, t2 := v1..t2])!
    v1..t1 := 3;
    v1..t2 := 4;
    ([t1 := v1..t1, t2 := v1..t2])!
    variable v2 := v1;
    ([t1 := v2..t1, t2 := v2..t2])!
    v2..t1 := 5;
    v2..t2 := 6;
    ([t1 := v1..t1, t2 := v1..t2])!
    ([t1 := v2..t1, t2 := v2..t2])!
  });

example("6.1", "Core", procedure()
  {
    numerator(-4/10)!
  });

example("6.1", "Core", procedure()
  {
    denominator(-4/10)!
  });

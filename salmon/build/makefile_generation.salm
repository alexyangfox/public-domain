/* file "makefile_generation.salm" */

/*
 *  This file contains the implementation of a module to assist in the
 *  generation of Makefiles.
 *
 *  Written by Chris Wilson.
 *
 *  This file is hearby placed in the public domain by its author.
 */


/*
 *      History
 *
 *  This code was written by me, Chris Wilson, in 2008 and placed in the public
 *  domain at that time.  I first created the code in this file within the
 *  "generate_makefile.c" file for use within that file, but with the idea that
 *  if I found it useful I might pull it out into a header file to be used
 *  elsewhere in the future, and that's exactly what happened.
 *
 *  In September, 2009, I translated this code from C to Salmon.
 *
 *
 *      Legal Issues
 *
 *  I've written this code from scratch, without using or refering to any other
 *  code.  I've written it on my own equipment and not for hire for anyone
 *  else, so I have full legal rights to place it in the public domain.
 *
 *  I've chosen to put this software in the public domain rather than
 *  copyrighting it and using the FSF's GPL or a Berkeley-style ``vanity''
 *  license because my personal opinion is that making it public domain
 *  maximizes its potential usefulness to others.  Anyone can feel free to use
 *  it for any purpose, including with their own proprietary code or with GPL
 *  code, without fear of intellectual property issues.  I have no desire to
 *  stop anyone else from making money on this code or getting any other
 *  advantages they can from it.
 *
 *  I do request that anyone who finds this software useful let me know about
 *  it.  You can drop me e-mail at "Chris Wilson" <chris@chriswilson.info> to
 *  let me know how you are using it and what is good and bad about it for you.
 *  Bug reports are also appreciated.  Also, if you release a product or
 *  software package of some sort that includes this software, I would like you
 *  to give me credit in the documentation as appropriate for the importance of
 *  my code in your product.  These are requests, not requirements, so you are
 *  not legally bound to do them, they're just a nice way to show appreciation.
 *
 *  Note that even though this software is public domain and there are no
 *  copyright laws that limit what you can do with it, other laws may apply.
 *  For example, if you lie and claim that you wrote this code when you did
 *  not, or you claim that I endorse a product of yours when I do not, that
 *  could be fraud and you could be legally liable.
 *
 *  There is absolutely no warranty for this software!  I am warning you now
 *  that it may or may not work.  It may have bugs that cause you a lot of
 *  problems.  I disclaim any implied warranties for merchantability or fitness
 *  for a particular purpose.  The fact that I have written some documentation
 *  on what I intended this software for should not be taken as any kind of
 *  warranty that it will actually behave that way.  I am providing this
 *  software as-is in the hope that it will be useful.
 *
 *          Chris Wilson, 2003-2004, 2008, 2009
 */


quark enumeration target_kind { TK_CONCRETE, TK_VIRTUAL };


variable is_initialized : boolean := false;
variable concrete_targets : array[string] := [];
variable virtual_targets : array[string] := [];
variable all_sources : array[string] := [];
variable all_sources_index : !{} --> boolean := <<(* --> false)>>;
variable have_target_index : !{} --> boolean := <<(* --> false)>>;
variable module_directory_index : !{} --> boolean := <<(* --> false)>>;
variable module_directories : array[string] := [];
variable extra_clean_commands : array[string] := [];


procedure init_makefile_generation()
  {
    assert(!is_initialized);

    is_initialized := true;
  };

procedure deinit_makefile_generation()
  {
    assert(is_initialized);
    is_initialized := false;
    is_initialized := false;
    concrete_targets := [];
    virtual_targets := [];
    all_sources := [];
    all_sources_index := <<(* --> false)>>;
    have_target_index := <<(* --> false)>>;
    module_directory_index := <<(* --> false)>>;
    module_directories := [];
    extra_clean_commands := [];
  };

procedure rule(target : string, dependences : array[string] := [],
        command : string | {null} := null, kind : target_kind,
        extra_targets : array[string] := [],
        extra_kinds : array[target_kind] := [])
  {
    assert(is_initialized);

    ""!
    print(target);

    have_target_index[target] := true;

    iterate (target; extra_targets)
      {
        print(" ", target);
        have_target_index[target] := true;
      };
    print(":");

    iterate (name; dependences)
      {
        print(" ", name);

        if (!(all_sources_index[name]))
          {
            all_sources ~= [name];
            all_sources_index[name] := true;
          };
      };
    print("\n");

    static immutable outer_command := command;
    if (command != null)
        outer_command(command);;

    if (kind == TK_CONCRETE)
        concrete_targets ~= [target];
    else
        virtual_targets ~= [target];;

    assert(length(extra_targets) == length(extra_kinds));
    for (target_num; 0; target_num < length(extra_targets); 1)
      {
        if (extra_kinds[target_num] == TK_CONCRETE)
            concrete_targets ~= [extra_targets[target_num]];
        else
            virtual_targets ~= [extra_targets[target_num]];;
      };
  };

procedure command(command : string)
  {
    assert(is_initialized);
    print("\t", command, "\n");
  };

procedure register_extra_files_to_clean(extra_file_names : array[string])
  {
    assert(is_initialized);
    concrete_targets ~= extra_file_names;
  };

procedure register_extra_clean_command(command : string)
  {
    extra_clean_commands ~= [command];
  };

procedure generate_clean_rule()
  {
    assert(is_initialized);

    variable commands : array[string] := extra_clean_commands;

    if (length(concrete_targets) > 0)
      {
        variable rm_command : string := "rm -f";

        iterate (file_name; concrete_targets)
          {
            rm_command ~= ' ';
            rm_command ~= file_name;
          };

        commands ~= [rm_command];
      };

    iterate (module_directory; module_directories)
        commands ~= ["cd " ~ module_directory ~ "; make clean"];;

    rule("clean", [], ((length(commands) > 0) ? commands[0] : null),
         TK_VIRTUAL);
    iterate (the_command; commands[1...+oo])
        command(the_command);;
  };

procedure generate_phony_rule()
  {
    assert(is_initialized);
    rule(".PHONY", virtual_targets, null, TK_VIRTUAL);
  };

procedure generate_list_sources_rule()
  {
    rule("list_sources", [], kind := TK_VIRTUAL);

    procedure handle_name(name : string)
      {
        immutable directory := substitute(@/.*@, name, "");
        if (directory != name)
          {
            if (module_directory_index[directory])
              {
                if (!(all_sources_index[directory]))
                  {
                    all_sources ~= [directory];
                    all_sources_index[directory] := true;
                  };

                return;
              };
          };

        if (have_target_index[name])
            return;;

        if (name == "-lc")
            return;;

        if (name == "-lm")
            return;;

        command("@echo " ~ name);
      };

    while (all_sources != [])
      {
        immutable current_generation : array[string] := all_sources;
        all_sources := [];
        iterate (name; current_generation)
            handle_name(name);;
      };
  };

procedure mark_directory_as_module(directory_name : string)
  {
    if (!(module_directory_index[directory_name]))
      {
        module_directory_index[directory_name] := true;
        module_directories ~= [directory_name];
      };
  };

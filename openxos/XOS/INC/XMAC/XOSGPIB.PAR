	.SBTTL	Parameter file XOSGPIB.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  XOSGPIB.PAR - User-mode include file for General Purpose Interface Bus (GPIB)
;                parameters
;
;  Edit history:
;  -------------
;  18Apr95 (fpj) - Added edit history block.
;
;-------------------------------------------------------------------------------

	.SBTTL	GPIB interface hardware definitions

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

;Define offsets for GPIB interface registers (divided by 100h)

GPIB_DATA=!00h		;(both)  Data register
GPIB_ISR1=!04h		;(read)  Interrupt status register 1
GPIB_IMR1=!04h		;(write) Interrupt mask register 1
GPIB_ISR2=!08h		;(read)  Interrupt status register 2
GPIB_IMR2=!08h		;(write) Interrupt mask register 2
GPIB_SPR =!0Ch		;(both)  Serial poll register
GPIB_ADSR=!10h		;(read)  Address status register
GPIB_ADMR=!10h		;(write) Address mode register
GPIB_CPTR=!14h		;(read)  Command pass through register
GPIB_AUXR=!14h		;(write) Auxilliary mode register
GPIB_ADR0=!18h		;(read)  Address register 0
GPIB_ADR =!18h		;(write) Address register
GPIB_ADR1=!1Ch		;(read)  Address register 1
GPIB_EOSR=!1Ch		;(write) End of string register

;Define bits for ISR1

ISR1$CPT  =!80h		;Command pass through
  ISR1%CPT  =!7t
ISR1$APT  =!40h		;Address pass through
  ISR1%APT  =!6t
ISR1$DET  =!20h		;Device execute trigger
  ISR1%DET  =!5t
ISR1$ENDRX=!10h		;End received
  ISR1%ENDRX=!4t
ISR1$DEC  =!08h		;Device clear
  ISR1%DEC  =!3t
ISR1$ERR  =!04h		;Error
  ISR1%ERR  =!2t
ISR1$DO   =!02h		;Data out
  ISR1%DO   =!1t
ISR1$DI   =!01h		;Data in
  ISR1%DI   =!0t

;Define bits for ISR2

ISR2$INT  =!80h		;Interrupt requested
  ISR2%INT  =!7t
ISR2$SRQI =!40h		;Service request in
  ISR2%SRQI =!6t
ISR2$LOK  =!20h		;Lockout
  ISR2%LOK  =!5t
ISR2$REM  =!10h		;Remote
  ISR2%REM  =!4t
ISR2$CO   =!08h		;Command output
  ISR2%CO   =!3t
ISR2$LOKC =!04h		;Lockout change
  ISR2%LOKC =!2t
ISR2$REMC =!02h		;Remote change
  ISR2%REMC =!1t
ISR2$ADSC =!01h		;Address status change
  ISR2%ADSC =!0t

;Define bits for ADSR (address status register)

ADSR$CIC  =!80h		;Device is controller in charge
ADSR$ATN  =!40h		;Attention
ADSR$SPMS =!20h		;Serial poll mode state
ADSR$LPAS =!10h		;Listener primary addressed state
ADSR$TPAS =!08h		;Talker primary addressed state
ADSR$LA   =!04h		;Listener addressed
ADSR$TA   =!02h		;Talker addressed
ADSR$MJMN =!01h		;1 = a major address has been received, 0 = a minor
			;  address has been received

;Define bits for ADR0 (address register 0)

ADR0$DT0  =!40h		;Disable talker 0
ADR0$DL0  =!20h		;Disable listener 0
ADR0$MJADR=!1Fh		;Major address

;Define bits for ADR1 (address register 1)

ADR1$EOI  =!80h		;End or identify
ADR1$DT1  =!40h		;Disable talker 1
ADR1$DL1  =!20h		;Disable listener 1
ADR1$MNADR=!1Fh		;Minor address

;Define bits for IMR1 (interrupt mask register 1)

IMR1$CPTIE=!80h		;Command pass through interupt enable
IMR1$APTIE=!40h		;Address pass through interrupt enable
IMR1$DETIE=!20h		;Device trigger interrupt enable
IMR1$ENDIE=!10h		;END or EOS message received interrupt enable
IMR1$DECIE=!08h		;Device clear interrupt enable
IMR1$ERRIE=!04h		;Error interrupt enable
IMR1$DOIE =!02h		;Data out interrupt enable
IMR1$DIIE =!01h		;Data in interrupt enable

;Define bits for IMR2 (interrupt mask register 2)

IMR2$SRQIE=!40h		;Service request in interrupt enable
IMR2$DMAOE=!20h		;DMA output enable
IMR2$DMAIE=!10h		;DMA input enable
IMR2$COIE =!08h		;Command outputinterrupt enable
IMR2$LOKIE=!04h		;Lockout change interrupt enable
IMR2$REMIE=!02h		;Remote change interrupt enable
IMR2$ADSIE=!01h		;Address status change interrupt enable

;Define bits for AUXMR (auxilliary mode register)

AUXR$IEPON=!000h	;Immediate execute pon
AUXR$CPPFG=!001h	;Clear parallel poll flag
AUXR$RESET=!002h	;Chip reset
AUXR$FINHS=!003h	;Finish handshake
AUXR$TRIGR=!004h	;Trigger
AUXR$RTLOC=!005h	;Return to local
AUXR$SNEOI=!006h	;Send EOI
AUXR$NVSCA=!007h	;Non-valid secondary command or address
AUXR$SPPFG=!009h	;Set parallel poll flag
AUXR$VSCA =!00FH	;Valid secondary command or address
AUXR$STDBY=!010h	;Go to standby
AUXR$TCAS =!011h	;Take control asynchronously
AUXR$TCS  =!012h	;Take control synchronously
AUXR$LISTN=!013h	;Listen
AUXR$DSSC =!014h	;Disable system control
AUXR$CIFC =!016h	;Clear IFC
AUXR$TCSOE=!01Ah	;Take control synchronously on end
AUXR$LCONT=!01Bh	;Listen in continuous mode
AUXR$LUNLS=!01Ch	;Local unlisten
AUXR$EPP  =!01Dh	;Execute parallel poll
AUXR$SIFC =!01Eh	;Set IFC
AUXR$SREN =!01Fh	;Set REN
AUXR$ICR  =!020h	;Load ICR
AUXR$PPR  =!060h	;Load PPR
AUXR$AUXRA=!080h	;Load AUXRA
AUXR$AUXRB=!0A0h	;Load AUXRB
AUXR$AUXRE=!0C0h	;Load AUXRE

;Define bits for the PPR (parallel poll register)

PPR$PPU   =!10h		;Parallel poll unconfigure
PPR$SBP   =!08h		;Status bit polarity

;Define bits for the AUXRA

AUXA$8BIT =!10h		;0 = 7 bit EOS, 1 = 8 bit EOS
AUXA$XEOS =!08h		;Transmit EOS automatically
AUXA$REOS =!04h		;Receive EOS
AUXA$HLDE =!02h		;Ready for data hold-off on all data mode
AUXA$HLDE =!01h		;Ready for data hold-off on end mode

;Define bits for the AUXRB

AUXB$ISS  =!10h		;0 = individual status = parallel poll flag, 1 =
			;  individual status = SRQS
AUXB$INV  =!08h		;Active level of INT pin
AUXB$TRI  =!04h		;High speed as T(1) after transmission of 2nd byte
AUXB$SPEOI=!02h		;Permit transmission of END message in serial poll
			;  address state
AUXB$CPTEN=!01h		;Permit the setting of the CPT bit on receipt of
			;  and undefined command

;Define bits for the AUXRE

AUXE$DHDC =!02h		;Enable DAC hold-off by initiating device clear active
			;  state
AUXE$DHDT =!01h		;Enable DAC hold-off by initiating device trigger
			;  active state

;Define bits for the ADR (address register)

ADR$ADSEL=!80h		;Address register select
ADR$DT   =!40h		;Prohibit talk address detection
ADR$DL   =!20h		;Prohibit listen address detection
ADR$ADR  =!1Fh		;Device address

	.SBTTL	Parameter file XOSDPMI.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  XOSDPMI.PAR - User-mode include file for DPMI parameters
;
;  Edit history:
;  -------------
;  18Apr95 (fpj) - Added edit history block.
;
;-------------------------------------------------------------------------------

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

;Define DPMI error codes

DPMIER_BADFUNC =!8001h		;Illegal or unsupported function specified
DPMIER_BADSTATE=!8002h		;Some object is in the worng state for the
				;  requested operation
DPMIER_SYSINTEG=!8003h		;The requested operation would endanger system
				;  integirity
DPMIER_DEADLOCK=!8004h		;A deadlock situation was detected
DPMIER_CANCEL  =!8005h		;Pending serialization request was cancelled
DPMIER_RESOURCE=!8010h		;Required internal resource is not available
DPMIER_NODESC  =!8011h		;Cannot allocate a descriptor
DPMIER_NOLINMEM=!8012h		;Cannot allocate linear memory
DPMIER_NOPHYMEM=!8013h		;Cannot allocate physical memory
DPMIER_NOBACK  =!8014h		;Cannot allocate backing store space
DPMIER_NOCALLBK=!8015h		;Cannot allocate a callback address
DPMIER_NOHNDL  =!8016h		;Cannot allocate a handle
DPMIER_TMLOCKA =!8017h		;Too many locks
DPMIER_EXCLUS  =!8018h		;Serialization request failed because of
				;  exclusive ownership of shared memory
DPMIER_SHARED  =!8019h		;Serialization request failed because of shared
				;  ownership of shared memory
DPMIER_BADVALUE=!8021h		;Invalid value specified
DPMIER_BADSEL  =!8022h		;Invalid selector specified
DPMIER_BADHNDL =!8023h		;Invalid handle specified
DPMIER_BADCBK  =!8024h		;Invalid callback address specified
DPMIER_BADLADDR=!8025h		;Invalid linear address specified
DPMIER_BADREQ  =!8026h		;The requested operation is not supported by
				;  the underlying hardware

DPMIISTKSZ=!256t

;Define offsets in the register data structure used when switching modes

$$$=!0
BLK rds_EDI, 4t
BLK rds_ESI, 4t
BLK rds_EBP, 4t
BLK rds_xxx, 4t
BLK rds_EBX, 4t
BLK rds_EDX, 4t
BLK rds_ECX, 4t
BLK rds_EAX, 4t
BLK rds_FR , 2t
BLK rds_ES , 2t
BLK rds_DS , 2t
BLK rds_FS , 2t
BLK rds_GS , 2t
BLK rds_IP , 2t
BLK rds_CS , 2t
BLK rds_SP , 2t
BLK rds_SS , 2t

;Define offsets in the data block used to store information about real mode
;  callbacks (note: the length of this block MUST be an even number of
;  paragraphs)

$$$=!0
BLK rcb_code, 16t		;Code for the callback entry routine
BLK rcb_addr, 6t		;Address of protected mode routine to call
BLK rcb_SS  , 2t		;Protected mode selector which maps the real
				;  mode stack
BLK rcb_regs, 6t		;Address of the real mode register value block
BLK          , 2t
rcb_SIZE=!$$$

RCBNUM=!20t			;Number of real mode callbacks

;Define low memory offsets

cbda_GS   =!dda_temp+0t
cbda_FS   =!dda_temp+2t
cbda_DS   =!dda_temp+4t
cbda_ES   =!dda_temp+6t
cbda_SS   =!dda_temp+8t
cbda_SP   =!dda_temp+10t
cbda_FR   =!dda_temp+12t
cbda_data =!dda_temp+14t
cbda_EDI  =!dda_temp+16t
cbda_EDX  =!dda_temp+20t
cbda_EAX  =!dda_temp+24t
cbda_stack=!dda_temp+128t

;Define offsets in the DPMI host data area

$$$=!0
BLK hda_magic  , 4t		;Magic number

				;Following item are copied to the DPMI area in
				;  the DOS data area (DDA) for the current DPMI
				;  client and MUST be defined in the same order
				;  as the corresponding DDA items!
BLK hda_num     , 1t		;DPMI client number
BLK hda_type    , 1t		;DPMI client type
BLK hda_virt    , 1t		;Non-zero if virtual memory support enabled
BLK             , 1t
BLK hda_lckpsflg, 1t		;Non-zero if using locked protected mode stack
BLK hda_lckrsflg, 1t		;Non-zero if using locked real mode stack
BLK             , 6
BLK hda_lckpESP , 4t		;DPMI locked protected mode stack base ESP
BLK hda_lckpSS  , 4t		;DPMI locked protected mode stack base SS
BLK hda_curpESP , 4t		;DPMI current protected mode stack ESP
BLK hda_curpSS  , 4t		;DPMI current protected mode stack SS
BLK hda_lckrSSSP, 4t		;DPMI locked real mode stack base SS:SP
BLK hda_currSSSP, 4t		;DPMI current real mode stack SS:SP
				;End of items copied to the DDA

BLK hda_prev    , 4t		;Real mode selector for previous HDA
BLK hda_isp     , 4t		;Internal stack pointer
BLK             , 8t

$$$=!{$$$+0Fh}&~0Fh		;Force paragraph allignment!
BLK hda_rcbdat , RCBNUM*rcb_SIZE;Real mode callback data
BLK hda_rguard , 4t		;Real mode stack guard value
BLK            , 768t		;Real mode stack
BLK hda_rstk   , 0t
BLK hda_iguard , 4t		;Internal stack guard value
BLK hda_istkbgn, DPMIISTKSZ	;Internal stack
BLK hda_istk   , 0t
hda_SIZE=!$$$

.IF NE hda_rcbdat&0Fh
	.IRP	q, >hda_rcbdat
	.ERROR	hda_rcbdat (q'h)is not paragraph alligned!
	.ENDR
.ENDC

;Define offsets in the DPMI internal stack items

$$$=!0
BLK dis_pESP   , 4t		;ESP (protected mode)
BLK dis_pSS    , 2t		;SS (protected mode)
BLK dis_type   , 1t		;Item type bits
BLK            , 1t
BLK dis_rSSSP  , 4t		;SS:SP (real mode)
BLK dis_EIP    , 4t		;Return {E}IP
BLK dis_CS     , 2t		;Return CS
BLX dis_dataofs, 4t		;Data offset (protected mode)
BLK dis_datasel, 2t		;Data selector (protected mode)
dis_SIZE=!$$$

;Define bits for the dis_type byte

DISIT$PROT =!80h		;Set if returning to protected mode
DISIT$DATA =!40h		;Set if should store registers using data
				;  pointer
DISIT$CLSTK=!20h		;Set if should clear locked stack state

	.SBTTL	Parameter file XOSXNET.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  XOSXNET.PAR - Kernel-mode include file for network class devices
;
;  Edit history:
;  -------------
;  18-Apr-95 (FPJ) - Added edit history block.
;
;-------------------------------------------------------------------------------

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

;Define general parameters

SBFRSIZE  =!128t		;Size of a small network buffer
LBFRSIZE  =!1540t		;Size of a large network buffer

;Define timeout values

TIMEOUT_OUT =!30t*XT_SECOND	;Packet output timeout value
TIMEOUT_FRAG=!40t		;Fragmented packet input timeout value

;Define network device functions - these are indexes to the function dispatch
;  table pointed to by idb_disp

ndf_makedcb =!00h		;Create DCB for interface level (NETn:) device
ndf_protocol=!04h
ndf_close1  =!08h
ndf_setpkt  =!0Ch		;Set up hardware part of packet
ndf_setecho =!10h		;Set up packet for echo
ndf_sendpkt =!14h		;Send output packet
ndf_rcvpkt  =!18h		;Receive a packet
ndf_getetype=!1Ch		;Get ethertype
ndf_sethwa  =!20h		;Set hardware address
ndf_gethwa  =!24h		;Get hardware address
ndf_linkctl =!28h		;Link control function
ndf_icmpecho=!2Ch

;Define network service access point functions - these are indexes to the
;  function dispatch table pointerd to by sdb_disp

nsf_abort   =!00h		;Abort output
nsf_receive =!04h		;Packet receive

;Define network protocol functions - these are indexes to the function dispatch
;  table pointed to by pdb_disp

npf_linkup   =!00h		;Link up
npf_linkdown =!04h		;Link down
npf_abort    =!08h		;Abort output
npf_getaddr  =!0Ch		;getaddr subroutine for protocol
npf_receive  =!10h		;Receive routine
npf_procarp  =!14h		;Routine to process ARP packet

;Define offsets in network packet buffer initial blocks

npb_mSIZE=!48t
$$$=!-npb_mSIZE			;Following three items must be in this order and
				;  must be the first three items in the NPB
BLK npb_sts    , 1t		;Status bits
BLK npb_sizex  , 1t		;Size index for this buffer
BLK npb_magic  , 2t		;Magic number
BLK npb_next   , 4t		;Offset of next buffer in list
BLK npb_fragnxt, 0t		;Next fragment for packet
BLK npb_nextsnd, 4t		;Offset of next buffer to output (reserved for
				;  use of the hardware level driver and routing
				;  table routines only - -1 here means packet
				;  not being output)
BLK npb_fragtmr, 0t		;Fragmented packet timer counter
BLK npb_holdrt , 4t		;Offset of routing table entry holding this
				;  packet (0 means packet is not being held)
BLK npb_fragid , 0t		;Fragmented packet ID value
BLK npb_outdone, 4t		;Offset of output done routine
BLK npb_fragipa, 0t		;Fragmented packet source IP address
BLK npb_timesnd, 4t		;Time packet was output
BLK npb_count  , 4t		;Number of bytes used in this buffer
BLK npb_fragcnt, 0t		;Fragmented packet byte count
BLK npb_apcnt  , 4t		;Number of data bytes in application part
BLK npb_fragofs, 0t		;Fragmented packet offset
BLK npb_seqnum , 4t		;Transport level sequence number (stored in 386
				;  byte order)
				;Following 4 items must stay in this order!
BLK npb_lpofs  , 1t		;Link level (LLC) header offset
BLK npb_npofs  , 1t		;Network level (IP) header offset
BLK npb_tpofs  , 1t		;Transport level (RDP, TCP, UDP) header offset
BLK npb_apofs  , 1t		;Application level (TNP, XFP, TELNET) data
				;  offset
BLK npb_dcb    , 4t		;Offset of DCB associated with buffer (may be 0)
BLK npb_xxx    , 4t		;Reserved
BLK npb_data   , 0t		;First data byte
.IF NE npb_data
	.IRP	q, >npb_data
	.ERROR	NPB starting offset is wrong, npb_data = q'h
	.ENDR
.ENDC

NPB_MAGIC=!75C3h		;Value for npb_magic or (used to verify that
				;  this is really a network buffer initial
				;  block)
NPC_MAGIC=!75C2h		;Value for npc_magic or (used to verify that
				;  this is really a network buffer continuation
				;  block)

;Define bits for npb_sts

NPS$SELF   =!80h		;Packet is being sent to self
NPS$NANA   =!40h		;Network address is not available
NPS$USEDARP=!20h		;Used ARP to obtain address for packet
NPS$POLL   =!20h		;This packet is a poll (half-duplex links only)
NPS$XMITD  =!10h		;Packet has been transmitted
  NPS%XMITD  =!4t
NPS$REXMITD=!08h		;Packet has been retransmitted
NPS$REXREQ =!04h		;Retransmit request (RCP and LAPB only)
NPS$PUSHED =!04h		;Packet has been pushed (TCP only)
NPS$XMITING=!01h		;Packet is being transfmitted

;Define offsets in the IDB (Interface Data Block)

idb_mSIZE=!84t
$$$=!-idb_mSIZE
BLK idb_hwaddr     , 8t		;Physical network address
BLK idb_sdbhead    , 4t		;SDB list head pointer
BLK idb_sdbtail    , 4t		;SDB list tail pointer
BLK idb_dftsdb     , 4t		;Pointer to SDB for default SAP
BLK idb_outhead    , 4t		;Packet output list head pointer
BLK idb_outtail    , 4t		;Packet output list tail pointer
BLK idb_lnkctldcb  , 4t		;Offset of link control mode DCB
BLK idb_devchar    , 4t		;Offset of device characteristics table for
				;  NET: device
BLK idb_disp       , 4t		;Offset of network driver function dispatch
				;  table

;;BLK idb_icmpecho   , 4t		;Offset of ICMP echo packet subroutine for
;;				;  interface
;;BLK idb_lnkctl     , 4t		;Offset of link control subroutine for interface
;;BLK idb_addunit    , 4t		;Offset of addunit subroutine for interface
;;BLK idb_makedcb    , 4t		;Offset of subroutine to make DCB for device
;;BLK idb_netclose1  , 4t		;Offset of fork level routine for closing
;;				;  network level devices
;;BLK idb_iopprotocol, 4t		;Offset of subroutine to process
;;				;  IOPAR_NETPROTOCOL device parameter
;;BLK idb_setpkt     , 4t		;Offset of setpkt subroutine for interface
;;BLK idb_setecho    , 4t		;Offset of setecho subroutine for interface
;;BLK idb_sendpkt    , 4t		;Offset of sendpkt subroutine for interface
;;BLK idb_rcvpkt     , 4t		;Offset of rcvpkt subroutine for interface
;;BLK idb_getetype   , 4t		;Offset of getetype subroutine for interface
;;BLK idb_sethwa     , 4t		;Offset of sethwa subroutine for interface
;;BLK idb_gethwa     , 4t		;Offset of gethwa subroutine for interface

BLK idb_bioreg     , 4t		;Base IO register for interface
BLK idb_cntoffset  , 1t		;Offset of count field in packet
BLK idb_iftype     , 1t		;Interface type
BLK idb_state      , 1t		;Link state
BLK                , 1t
BLK idb_xmtavail   , 4t		;Output available count
BLK idb_hwhdrsz    , 4t		;Size of the hardware packet header
BLK idb_hwpktsz    , 4t		;Maximum packet size for the hardware (does not
				;  include hardware header)
BLK idb_typname    , 4t		;Type name
BLK idb_config     , 4t		;Configuration bits
BLK idb_sts        , 1t		;Status bits
BLK idb_hlen       , 1t		;Length of hardware address (in bytes)
BLK idb_outtimer   , 1t		;Output time-out counter
BLK idb_intlvl     , 1t		;Interrupt level
				;WARNING:  Next 3 offsets MUST match
				;	   corresponding offsets in DCBs!
BLK idb_fdisp      , 4t		;Offset of fork routine
BLK idb_fnext      , 4t		;Offset of next block in fork request list
BLK idb_magic      , 4t		;Magic number ("IDB")
BLK idb_next       , 4t		;Offset of next IDB
.IF NE idb_next
	.IRP	q, >idb_next
	.ERROR	IDB starting offset is wrong, idb_next = q'h
	.ENDR
.ENDC
BLK idb_nextd      , 4t		;Offset of next IDB for same driver
BLK idb_unit       , 4t		;Unit number
BLK idb_name       , 16t	;Name of interface (ASCII)
BLK idb_ccb        , 4t		;Offset of CCB
BLK idb_sffdisp    , 4t		;Send self fork routine offset
BLK idb_sffnext    , 4t		;Send self next block in fork request list
BLK idb_sfmagic    , 4t
BLK idb_sfidb      , 0t		;Label for send self fake IDB (uses previous
				;  12 locations)
BLK idb_sfhead     , 4t		;Send self list head pointer
BLK idb_sftail     , 4t		;Send self list tail pointer
BLK idb_hwtype     , 4t		;Hardware type
BLK idb_cntint     , 4t		;Total number of interrupts
BLK idb_cntpktin   , 4t		;Total number of input packets
BLK idb_cntpktout  , 4t		;Total number of output packets
BLK idb_cntbytein  , 4t		;Total number of input bytes
BLK idb_cntbyteout , 4t		;Total number of output bytes
BLK idb_cntbcpktin , 4t		;Total number of broadcast input packets
BLK idb_cntmcpktin , 4t		;Total number of multicast input packets
BLK idb_cntdown    , 4t		;Number of discarded input packets - link down
BLK idb_cntnosap   , 4t		;Number of discarded input packets - no
				;  matching service access point
BLK idb_cntbadsize , 4t		;Number of discarded input packets - bad size
BLK idb_cnttoobig  , 4t		;Number of discarded input packets - too big
BLK idb_cntbadpnt  , 4t		;Number of discarded input packets - bad
				;  pointer
BLK idb_cntublxcd  , 4t		;Number of discarded input packets - user buffer
				;  limit exceeded
BLK idb_cntnosbfr  , 4t		;Number of discarded input packets - no system
				;  buffer available
BLK idb_cntnoibfr  , 4t		;Number of discarded input packets - no
				;  interface buffer space available
BLK idb_cntfixedcnt, 4t		;Number of bad packet byte counts fixed
BLK idb_cntrover   , 4t		;Number of receive buffer overflows detected
BLK idb_cntrunt    , 4t		;Number of runt packets discarded
BLK idb_cntcrc     , 4t		;Number of CRC errors detected
BLK idb_cntfa      , 4t		;Number of frame alignment/input abort errors
				;  detected
BLK idb_cntabort   , 4t		;Number of output aborts
BLK idb_cntcsense  , 4t		;Number of times carrier sense lost
BLK idb_cntxunder  , 4t		;Number of transmit underruns
BLK idb_cntxhung   , 4t		;Number of hung output errors
BLK idb_cnthrtbt   , 4t		;Number of heartbeat errors
BLK idb_cntjabber  , 4t		;Number of jabber errors
BLK idb_cntowcol   , 4t		;Number of out of window collisions
BLK idb_cntnumcol  , 4t		;Number of transmit collisions
BLK idb_cntsyserr  , 4t		;Number of system errors reported by interface
idb_SIZE=!{$$$+3}&0FFFCh

;Define bits for idb_config

IC$ALLMC   =!00008000h		;Receive all multi-cast frames
  IC%ALLMC   =!15t
IC$LOWTHRES=!00004000h		;Using low squelch threshold
  IC%LOWTHRES=!14t
IC$ACTHIGH1=!00002000h
  IC%ACTHIGH1=!13t
IC$FULLSTEP=!00001000h		;Uses full step signaling
  IC%FULLSTEP=!12t
IC$LINKTEST=!00000800h		;Link test functions are enabled
  IC%LINKTEST=!11t
IC$CHKCAR  =!00000400h		;Stop transmission if carrier not detected
  IC%CHKCAR  =!10t
IC$CHKSQET =!00000200h		;Stop transmission if SQET error detected
  IC%CHKSQET =!9t
IC$FULLDUP =!00000100h		;Full duplex operation
  IC%FULLDUP =!8t
IC$PRM     =!00000080h		;Interface is operating in promiscuous receive
  IC%PRM     =!7t		;  mode
IC$AUTOIFS =!00000040h		;Use automatic interface selection
  IC%AUTOIFS =!6t
IC$SHIELDED=!00000020h		;Twisted-pari cable (if used) is shielded
  IC%SHIELDED=!5t
IC$TP      =!00000010h		;Interface uses twisted-pair cable
  IC%TP      =!4t
IC$THIN    =!00000008h		;Interface uses thin-wire cable
  IC%THIN    =!3t
IC$FASTBFR =!00000004h		;Interface uses fast buffer memory
  IC%FASTBFR =!2t
IC$16BITBFR=!00000002h		;Internal buffer is 16 bits wide
  IC%16BITBFR=!1t
IC$16BITBUS=!00000001h		;16 bit interface
  IC%16BITBUS=!0t

;Define bits for the idb_sts byte

IS$OVERFLW=!40h			;Receive overflow pending
  IS%OVERFLW=!6t
IS$RESET  =!20h			;Interface is being reset
  IS%RESET  =!5t
IS$REXMIT =!10h			;Doing forced retransmit at frame level
  IS%RESMIT =!4t

;Define values for idb_iftype

IFT_SIMPLE=!0t			;Simple point-to-point link
IFT_MULTI =!1t			;Multi-point link

;Define values for idb_state

LNKS_DISABLED=!0t	;Disabled
LNKS_DISCNCTD=!1t	;Disconnected
LNKS_CNCTD   =!2t	;Connected, password not received
LNKS_ESTAB   =!3t	;Established

;Define function values for the link control mode subroutine (passed in EAX)

LNKCTL_CLEAR =!0t		;Clear link control mode
LNKCTL_SET   =!1t		;Set link control mode
LNKCTL_INPUT =!2t		;Input
LNKCTL_OUTPUT=!3t		;Output
LNKCTL_GETMC =!4t		;Get modem control bits
LNKCTL_SETMC =!5t		;Set modem control bits

;Define offsets in the service access point data block (SDB)

sdb_mSIZE=!52t
$$$=!-sdb_mSIZE
BLK sdb_hdrsz     , 4t		;Size of the packet header
BLK sdb_maxpktsz  , 4t		;Maximum data size
BLK sdb_pdbhead   , 4t		;PDB list head pointer
BLK sdb_pdbtail   , 4t		;PDB list tail pointer
BLK sdb_dftpdb    , 4t		;PDB for default protocol
BLK sdb_frcrexmit , 4t		;Offset of routine to handle forced retransmit
				;  condition
BLK sdb_disp      , 4t

;;;BLK sdb_abort     , 4t		;Offset of abort output routine
;;;BLK sdb_receive   , 4t		;Offset of packet receive routine


BLK sdb_idb       , 4t		;Offset of IDB


BLK sdb_sapvalue  , 4t		;SAP value
BLK sdb_sapnext   , 4t		;Next SDB in the SAP list
BLK sdb_sapprev   , 4t		;Previous SDB in the SAP list
BLK sdb_fdcb      , 4t		;Offset of first DCB
BLK sdb_magic     , 4t		;Magic number ("SDB")
BLK sdb_nexti     , 4t		;Offset of next SDB for same IDB
.IF NE sdb_nexti
	.IRP	q, >sdb_nexti
	.ERROR	SDB starting offset is wrong, sdb_nexti = q'h
	.ENDR
.ENDC
BLK sdb_nextd     , 4t		;Offset of next SDB for same device
BLK sdb_unit      , 4t		;Unit number
BLK sdb_name      , 16t		;Name
BLK sdb_ccb       , 4t		;Offset of CCB
BLK sdb_cntpktin  , 4t		;Total number of input packets
BLK sdb_cntpktout , 4t		;Total number of output packets
BLK sdb_cntbytein , 4t		;Total number of input bytes
BLK sdb_cntbyteout, 4t		;Total number of output bytes
BLK sdb_cntbcpktin, 4t		;Total number of broadcast input packets
BLK sdb_cntnodst  , 4t		;Number of discarded input packets - no
				;  destination
BLK sdb_cntbadpdu , 4t		;Number of PDUs with illegal types
sdb_SIZE=!$$$

;Define offsets in the NET device SDB (note that the sdb_cntxxxx items are
;  not used here and are overlayed)

$$$=!4t
BLK sdb_ndvqqq    , 4t
sdb_ndvSIZE=!$$$

;Define offsets in the common part of the PDB (Protocol Data Block)

pdb_mSIZE=!28t
$$$=!-pdb_mSIZE
BLK pdb_idb       , 4t		;Offset of IDB
BLK pdb_sdb       , 4t		;Offset of SDB

BLK pdb_disp      , 4t		;Offset of protocol function dispatch table
BLK               , 2t
BLK pdb_plen      , 1t		;Protocol address length
BLK               , 1t
BLK pdb_etypevalue, 4t		;Ethertype value
BLK pdb_fdcb      , 4t		;Offset of first DCB
BLK pdb_magic     , 4t		;Magic number ("PDB*")
BLK pdb_nexti     , 4t		;Offset of next PDB for interface
.IF NE pdb_nexti
	.IRP	q, >pdb_nexti
	.ERROR	PDB starting offset is wrong, pdb_nexti = q'h
	.ENDR
.ENDC
BLK pdb_nextd     , 4t		;Offset of next PDB for same device
BLK pdb_unit      , 1t		;Unit number
BLK pdb_netnum    , 1t		;Network number
BLK               , 2t
BLK pdb_name      , 16t		;Name of this protocol
BLK pdb_ccb       , 4t		;Offset of CCB
BLK pdb_pdb       , 4t		;Offset of this block (needed so ipsFindDev
				;  can handle PDBs)
BLK pdb_dcbsizex  , 4t		;Size index for DCB
pdb_dependent=!$$$

;Define offsets in the common part of the TPDBs (first 7 items must correspond
;  to the equivilant items in the DPDBs)

tpdb_mSIZE=!8t
$$$=!-tpdb_mSIZE
BLK tpdb_fdcb    , 4t		;Offset of first DCB
BLK tpdb_magic   , 4t		;Magic number ("TPDB")
BLK tpdb_nexti   , 4t		;Offset of next TPDB for same PDB
.IF NE tpdb_nexti
	.IRP	q, >tpdb_nexti
	.ERROR	PDB starting offset is wrong, tpdb_nexti = q'h
	.ENDR
.ENDC
BLK tpdb_nextd   , 4t		;Offset of next TPDB for same device
BLK tpdb_unit    , 1t		;Unit number
BLK tpdb_netnum  , 1t		;Network number
BLK              , 2t
BLK tpdb_name    , 16t		;Name of protocol
BLK tpdb_ccb     , 4t		;Offset of CCB
BLK tpdb_pdb     , 4t		;Offset of PDB
BLK tpdb_dcbsizex, 4t		;Size index for DCB
BLK tpdb_tpdb    , 4t		;Offset of next lower level TPDB
BLK tpdb_ftpdb   , 4t		;Offset of TPDB for first network for unit
BLK tpdb_ipprot  , 4t
BLK tpdb_rcvdisp , 4t		;Offset of transport level receive routine
BLK tpdb_dstunr  , 4t		;Offset of destination unreachable routine
BLK tpdb_fport   , 4t		;Offset of first DCB in the port list
tpdb_dependent=!$$$

;Define offsets in the common part of the DPDBs (first 6 items must correspond
;  to the equivilant items in the TPDBs)

dpdb_mSIZE=!8t
$$$=!-dpdb_mSIZE
BLK dpdb_fdcb    , 4t		;Offset of first DCB
BLK dpdb_magic   , 4t		;Magic number ("DPDB")
BLK dpdb_nexti   , 4t		;Offset of next DPDB for same PDB
.IF NE dpdb_nexti
	.IRP	q, >dpdb_nexti
	.ERROR	PDB starting offset is wrong, dpdb_nexti = q'h
	.ENDR
.ENDC
BLK dpdb_nextd   , 4t
BLK dpdb_unit    , 1t		;Unit number
BLK dpdb_netnum  , 1t		;Network number
BLK              , 2t
BLK dpdb_name    , 16t		;Name
BLK dpdb_ccb     , 4t		;Offset of CCB
BLK dpdb_pdb     , 4t		;Offset of PDB
BLK dpdb_dcbsizex, 4t		;Size index for DCB
BLK dpdb_tpdb    , 4t		;Offset of TPDB
BLK dpdb_fdpdb   , 4t		;Offset of DPDB for first network for unit
BLK dpdb_rmtport , 4t		;Remote port
dpdb_dependent=!$$$

;Define offsets in the routing table entries - each entry is stored in a QEL

$$$=!0
BLK rt_hashnext , 4t		;Pointer to next block in hash list
BLK rt_next     , 4t		;Pointer to next block in entry list
BLK rt_prev     , 4t		;Pointer to previous block in entry list
BLK rt_type     , 1t		;Entry type
BLK rt_sts      , 1t		;Status bits
BLK rt_retry    , 1t		;Retry count (used for RTT_LPENDING entries)
BLK rt_t2lval   , 1t		;Time-to-live value
BLK rt_pdbx     , 1t		;Index for PDB
BLK             , 3t
BLK rt_timeout  , 4t		;Offset of routine to call on time-out
BLK rt_t2lcnt   , 4t		;Time-to-live counter
BLK rt_usecnt   , 4t		;Use count
BLK rt_data     , 0t		;Data item (non-routing entries only)
BLK rt_timestamp, 4t		;Time-stamp of last use of the entry
BLK rt_ipaddr   , 4t		;IP address
BLK rt_router   , 4t		;Offset of routing table entry for router (used
				;  if type is RTT_FPENDING, RTT_DPENDING, or
				;  RTT_FOREIGN)
BLK rt_hwaddr   , 0t		;Hardware address (8 bytes, shared with the
				;  following two pointers which are never used
				;  at the same time)
BLK rt_holdhead , 4t		;Pending ARP packet list head pointer (used
				;  if type is RTT_LPENDING, RTT_FPENDING, or
				;  RTT_DPENDING)
BLK rt_holdtail , 4t		;Pending ARP packet list tail pointer (used
				;  if type is RTT_LPENDING, RTT_FPENDING, or
				;  RTT_DPENDING))
				;Following two pointers share the same 4 bytes
BLK rt_rtnhead  , 0t		;Router node list head pointer (used if type is
				;  RTT_LOCAL)
BLK rt_rtnnext  , 4t		;Router node list next node pointer (used if
				;  type is RTT_FPENDING, RTT_DPENDING, or
				;  RTT_FOREIGN)
				;Following two pointers share the same 4 bytes
BLK rt_rtntail  , 0t		;Router node list tail pointer (used if type is
				;  RTT_FPENDING, RTT_DPENDING, or RTT_LOCAL)
BLK rt_rtnprev  , 4t		;Router node list previous node pointer (used
				;  if type is RTT_FPENDING, RTT_DPENDING, or
				;  RTT_FOREIGN)
BLK rt_pkt      , 4t		;Offset of packet buffer being output

;Define values for rt_type

RTT_TEMP     =!1t		;Temporary entry
RTT_MANUAL   =!2t		;Manual entry (reserved for future use)
RTT_LOCAL    =!3t		;Entry for local address
RTT_ROUTER   =!4t		;Entry for router address
RTT_FOREIGN  =!5t		;Entry for foreign address using router (always
				;  linked to an RTT_ROUTER entry)
RTT_PERM     =!8t		;Perminate entry (reserved for future use)
RTT_LPENDING =!9t		;Pending local entry waiting for ARP response
RTT_FPENDING =!10t		;Pending foreign entry waiting for specific
				;  RTT_LPENDING entry (always linked to an
				;  RTT_LPENDING entry)
RTT_DPENDING =!11t		;Foreign entry searching for default router,
				;  waiting for a sequence of RTT_LPENDING
				;  entries (always linked to an RTT_LPENDING
				;  entry)
RTT_PING     =!16t		;Ping request

;Define values for rt_sts

RTS$DATASEEN =!40h		;Valid data has been received

;Define initial values for rt_t2lcnt

RTT2L_LOCAL   =!2000t		;Used for type RTT_LOCAL entries
RTT2L_FOREIGN =!10t		;Used for initial type RTT_FOREIGN entries
RTT2L_LPENDING=!2t		;Used for type RTT_LPENDING entries
RTT2L_REDIR   =!2000t		;Used for type RTT_REDIRECT entries

;Define initial values for rt_retry

RTRETRY_PENDING=!2t		;Used for type RTT_ARPPEND entries

;Define offsets in the network DCB

$$$=!4
BLK dcb_netidb     , 4t		;Offset of IDB for network interface
BLK dcb_netsdb     , 4t		;Offset of SDB
BLK dcb_netpdb     , 4t		;Offset of PDB for link level protocol
BLK dcb_netmode    , 4t		;Network mode bits
BLK dcb_netoutnext , 4t		;Next network DCB with output ready
BLK dcb_netsts1    , 1t		;Status bytes
BLK dcb_netsts2    , 1t
BLK dcb_netdcbsizex, 1t		;Size index for this DCB
BLK                , 1t
BLK dcb_netcommon  , 0t		;End of common part of network DCB

;Define offsets in the NET device part of a network DCB

$$$=!dcb_netcommon
BLK dcb_ndvrcvpkt  , 4t		;Offset of received packet
BLK 		   , sdb_mSIZE	;SDB for SAP for device
BLK dcb_ndvsdb     , sdb_ndvSIZE
dcb_ndvSIZE=!$$$
XMBINDEX dcb_ndvINDEX, dcb_cSIZE+dcb_ndvSIZE

;Define bits for dcb_netsts1

NS1$OFWOUT =!20h		;Output fork is waiting for output done
NS1$OFWSND =!10h		;Output fork is waiting for output window
NS1$OFWRSP =!08h		;Output fork is waiting for response
NS1$IFWOUT =!04h		;Input fork is waiting for output done
NS1$IFWSND =!02h		;Input fork is waiting for output window
NS1$IFWRSP =!01h		;Input fork is waiting for response

	.SBTTL	Parameter file XOSXTRM.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  XOSXTRM.PAR - Kernel-mode include file for terminal class devices
;
;  Edit history:
;  -------------
;  18Apr95 (fpj) - Added edit history block.
;
;-------------------------------------------------------------------------------

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

VDSPMAX=!32t			;Maximum number of virtual screens
IIRSIZE=!100t			;Default size of terminal interrupt input
				;  ring buffer
IBSIZE =!120t			;Default size of terminal input line buffer
IRSIZE =!120t			;Default size of terminal input ring buffer
ORSIZE =!100t			;Default size of terminal output ring buffer
IKSIZE =!32t			;Size of the interrupt level ring buffer for
				;  console display input
FKSIZE =!32t			;Size of the fork level ring buffer for
				;  console display input

;Define values for disptype

DISP$COLOR   =!00000001h	;Color display
DISP$FLAT    =!00000002h	;Flat panel display

DISP_SERIAL  =!0		;Serial terminal

DISP_MDA     =!01010000h	;Monochrome display adapter
DISP_MGA     =!01020000h	;Monochrome graphics adapter (Hercules)
DISP_EGA     =!02000000h	;Standard EGA
DISP_VGA     =!03000000h	;Standard VGA (no extensions)
DISP_LCD     =!04000000h	;Custom LCD display

DISP_ATI     =!03010000h
DISP_ATI188  =!03010100h	;ATI 18800
DISP_ATI288  =!03010200h	;ATI 28800
DISP_CHIP    =!03020000h
DISP_CHIP1   =!03020100h	;Chips and Technologies 82c451
DISP_CHIP2   =!03020200h	;Chips and Technologies 82c452
DISP_CHIP3   =!03020300h	;Chips and Technologies 82c453
DISP_CHIP5   =!03020400h	;Chips and Technologies 82c455
DISP_CHIP6   =!03020500h	;Chips and Technologies 82c456
DISP_GENOA   =!03030000h
DISP_GENOA5  =!03030100h	;Genoa 5000 sersies
DISP_GENOAA  =!03030200h	;Genoa GVGA
DISP_PARA    =!03040000h
DISP_PARAPV  =!03040100h	;Paradise PVGA1a
DISP_PARA00  =!03040200h	;Paradise WD90C00
DISP_PARA10  =!03040300h	;Paradise WD90C10
DISP_PARA11  =!03040400h	;Paradise WD90C11
DISP_TRID    =!03050000h
DISP_TRID8800=!03050100h	;Trident 8800
DISP_TRID8900=!03050200h	;Trident 8900
DISP_TSENG   =!03060000h
DISP_TSENG3  =!03060100h	;Tseng Labs ET3000
DISP_TSENG4  =!03060200h	;Tseng Labs ET4000
DISP_VID7    =!03070000h
DISP_VID7VEGA=!03070100h	;Video7 VEGA VGA
DISP_VID7V7  =!03070200h	;Video7 V7VGA
DISP_AHEAD   =!03080000h
DISP_AHEAD5A =!03080100h	;Ahead V5000A
DISP_AHEAD5B =!03080200h	;Ahead V5000B
DISP_CIRRUS  =!03090000h
DISP_CIRRUS5 =!03090100h	;Cirrus Logic 510/520
DISP_CIRRUS6 =!03090200h	;Cirrus Logic 610/620

;Define bits for tdb_stsout for terminals

TSO$FLOUT  =!00004000h		;Flush output buffer
TSO$FRCXON =!00002000h		;Output XON immediately
TSO$FRCXOFF=!00001000h		;Output XOFF immediately
TSO$ESCOUT =!00000800h		;Are processing output escape sequence
TSO$QOWAIT =!00000400h		;Waiting for queued output to complete
TSO$NOWRAP =!00000200h		;Line wrap is disabled
TSO$OUTD   =!00000100h		;Output is done
TSO$OUTA   =!00000080h		;Output is active
  TSO%OUTA   =!7t
TSO$JUNKX  =!00000010h		;Discard output because of ^C
  TSO%JUNKX  =!4t
TSO$JUNK   =!00000008h		;Discard output because of ^O
  TSO%JUNK   =!3t
TSO$HOLDS  =!00000004h		;Hold output (^S or hardware flow-control)
  TSO%HOLDS  =!2t
TSO$HOLDP  =!00000002h		;Hold output (pause key)
  TSO%HOLDP  =!1t

;Define bits for tdb_stsinp for terminals

TSI$CARDET =!00002000h		;Have carrier detect
TSI$INTHELD=!00000800h		;Input has been held off because the interrupt
				;  buffer is almost full
TSI$IRBHELD=!00000400h		;Input has been held off because the input ring
				;  buffer is almost full
TSI$JUNKLF =!00000200h		;Discard next input character if LF
TSI$NORSM  =!00000100h		;Do not try to resume queued input
TSI$INAVL  =!00000080h
TSI$ICWAIT =!00000040h		;Waiting for image character
TSI$INACT  =!00000020h		;Input is active
TSI$OVER   =!00000010h		;Input edit overstrike mode
TSI$INSERT =!00000008h		;Insert mode
TSI$PASTEND=!00000004h		;At end of line, should wrap on next character

;Define bits for tdb_stsdsp for terminals

TSD$ACTDSP =!00000400h		;Display is active
TSD$FCURSOR=!00000200h		;Freeze cursor position on screen
TSD$MCURSOR=!00000100h		;Cursor position has been changed

;Define bits for tdb_stsmisc for terminals

TSM$IMSG   =!00000010h		;Have sent idle terminal message
TSM$SESSION=!00000008h		;Should start session on terminal
TSM$MAPPED =!00000004h		;Terminal is a memory mapped display
TSM$CNTMAP =!00000002h		;Terminal is a memory mapped display and is
				;  controlling terminal for a session
TSMISC$CNTTRM =!00000001h	;Terminal is controlling terminal for a session

;Define bits for the tdb_stsansi byte for terminals

TSA$ESCMOD =!40h		;ESC sequence function modifier seen
TSA$KPAMOD =!20h		;Keypad is in application mode
TSA$DELMOD =!10h		;Delete key is in BS mode

;Define bits for tdb_modem

TMC$MODEM  =!80h		;Modem control line
TMC$DETACH =!40h		;Detatch line on carrier loss

;Define bits for tdb_flow

TFC$OREV    =!80h		;Reverse sense of output flow control signal
  TFC%OREV    =!7t
TFC$ODSR    =!40h		;DSR output flow control enabled
  TFC%ODSR    =!6t
TFC$OCTS    =!20h		;CTS output flow control enabled
  TFC%OCTS    =!5t
TFC$OXONXOFF=!10h		;X-on/X-off output flow control enabled
  TFC%OXONXOFF=!4t
TFC$IREV    =!08h		;Reverse sense of input flow control signal
  TFC%IREV    =!3t
TFC$IDTR    =!04h		;DTR input flow control enabled
  TFC%IDTR    =!2t
TFC$IRTS    =!02h		;RTS input flow control enabled
  TFC%IRTS    =!1t
TFC$IXONXOFF=!01h		;X-on/X-off input flow control enabled
  TFC%IXONXOFF=!0t

tbl_font      =!00h
tbl_miscoutput=!01h

tbl_pgsize    =!04h
tbl_horiz     =!08h
tbl_vert      =!0Ch
tbl_columns   =!10h
tbl_rows      =!14h
tbl_crtregs   =!18h
tbl_seqregs   =!31h
tbl_gcregs    =!36h
tbl_atrregs   =!3Fh

;Define offsets in the terminal driver function dispatch table

$$$=!-72t
BLK tf_ggetcurpos, 4t		;Get graphics cursor postion
BLK tf_gsetcurpos, 4t		;Set graphics cursor positon
BLK tf_gsetcurcol, 4t		;Set graphics cursor colors
BLK tf_gsetcurpat, 4t		;Set graphics cursor pattern
BLK tf_setgvf    , 4t		;Set graphics mode vertical frequency
BLK tf_getgvf    , 4t		;Get graphics mode vertical frequency
BLK tf_loadfont  , 4t		;Load font
BLK tf_selfont   , 4t		;Select font table and mode
BLK tf_enable    , 4t		;Enable video
BLK tf_disable   , 4t		;Disable video
BLK tf_curtype   , 4t		;Get and set cursor type (INT 10, function 01)
BLK tf_curpos    , 4t		;Get and set cursor position (INT 10, function
				;  02)
BLK tf_dsppage   , 4t		;Get and set display page (INT 10, function 05)
BLK tf_scroll    , 4t		;Scroll window (INT 10, functions 06 and 07)
BLK tf_getatc    , 4t		;Get attribute and character (INT 10, function
				;  08)
BLK tf_setatc    , 4t		;Set attribute and character (INT 10, function
				;  09)
BLK tf_setchr    , 4t		;Set character only (INT 10, function 0A)
BLK tf_attrib    , 4t		;Get or set screen attributes
BLK tf_transfer  , 4t
.IF NE tf_transfer
	.IRP	q, >tf_transfer
	.ERROR	Offset error for tf_xxxxxx definitions, tf_transfer = q'h
	.ENDR
.ENDC
BLK tf_opena    , 4t		;Open device additional
BLK tf_open1    , 4t		;Open device first
BLK tf_stop     , 4t		;Stop output immediately
BLK tf_clrout   , 4t		;Clear output buffer
BLK tf_echchr   , 4t		;Echo character from fork level
BLK tf_doutchr  , 4t		;Direct output single character
BLK tf_doutblk  , 4t		;Direct output block of characters
BLK tf_doutstr  , 4t		;Direct output string of characters
BLK tf_qoutchr  , 4t		;Queued output single character
BLK tf_qoutblk  , 4t		;Queued output block of characters
BLK tf_qoutstr  , 4t		;Queued output string of characters
BLK tf_idle     , 4t		;Set terminal to idle state
BLK tf_resume   , 4t		;Resume output
BLK tf_mapscn   , 4t		;Map screen buffer
BLK tf_dosset   , 4t		;Update DOS screen mapping & interrupt handling
BLK tf_dosupd   , 4t		;Update DOS page 0 terminal data only
BLK tf_dosuse   , 4t		;Use DOS page 0 terminal data
BLK tf_dspmode  , 4t		;Set or get display mode
BLK tf_addunit  , 4t		;Add unit
BLK tf_sstrans  , 4t		;Screen symbiont transfer function
BLK tf_ssmaskwrt, 4t		;Screen symbiont masked write function
BLK tf_ssmapbufr, 4t		;Screen symbiont map screen buffer function
BLK tf_sspageflt, 4t		;Display page page fault
BLK tf_ssstatus , 4t		;Send screen status to screen symbiont
BLK tf_ssutil   , 4t		;Screen symbiont utility functions
BLK             , 4t		;Reserved
BLK tf_vdinb    , 4t		;INB executed in virtual-86 mode
BLK tf_vdoutb   , 4t		;OUTB executed in virtual-86 mode
BLK tf_dspcur   , 4t		;Low level display cursor routine
BLK             , 4t		;Reserved
BLK tf_setdtr   , 4t		;Set or clear DTR output
BLK tf_setrts   , 4t		;Set or clear RTS output
BLK tf_getdsb   , 4t		;Get data set bits
BLK tf_finout   , 4t		;Ensure that output is finished
BLK tf_imodechng, 4t		;Input mode value changed
BLK tf_omodechng, 4t		;Output mode value changed
BLK tf_mapphys  , 4t

;Define offsets in the keyboard driver function dispatch table

$$$=!0
BLK kf_open   , 4t		;Open
BLK kf_vkinb  , 4t		;V86 INB instruction to keyboard controller
				;  port
BLK kf_vkoutb , 4t		;V86 OUTB instruction to keyboard controller
				;  port
BLK kf_keyint , 4t		;V86 attempt to execute keyboard interrupt
				;  routine
BLK kf_clrkeyi, 4t		;Clear keyboard interrupt for KIB
BLK kf_tolites, 4t		;Update keyboard lites
BLK kf_process, 4t		;Process held scan codes
BLK kf_beep   , 4t		;Beep
BLK kf_enable , 4t		;Enable keyboard

;Define offsets in screen symbiont message which reports system shift character

$$$=!0
BLK sss_func   , 1t		;Function
BLK            , 1t		;Not used
BLK sss_pnum   , 1t		;Physical screen number (primary unit number)
BLK sss_snum   , 1t		;Virtual screen number (secondary unit number)
BLK sss_xtdb   , 4t		;Exec offset of terminal TDB
BLK sss_dspmode, 4t		;Mode bits and value
BLK sss_char   , 2t		;Character
BLK sss_bits   , 2t		;Keyboard state bits (low 16 bits from
				;  tdb_keysts0)
sss_cSIZE=!$$$

;Define offsets in screen symbiont message which reports page fault on a
;  display page

$$$=!0
BLK sss_func   , 1t		;Function
BLK            , 1t		;Not used
BLK sss_pnum   , 1t		;Physical screen number (primary unit number)
BLK sss_snum   , 1t		;Virtual screen number (secondary unit number)
BLK sss_xtdb   , 4t		;Exec offset of terminal TDB
BLK sss_dspmode, 4t		;Mode bits and value
BLK sss_offset , 4t		;Offset in display of page fault access
sss_pSIZE=!$$$

;Define offsets in screen symbiont message which reports virtual screen status

$$$=!0
BLK sss_func   , 1t		;Function
BLK            , 1t
BLK sss_pnum   , 1t		;Physical screen number (primary unit number)
BLK sss_snum   , 1t		;Virtual screen number (secondary unit number)
BLK sss_xtdb   , 4t		;Exec offset of terminal TDB
BLK sss_dspmode, 4t		;Mode bits and value
BLK sss_status , 1t		;Status: 0 = Idle, 1 = In use
sss_sSIZE=!$$$

;Define offsets in screen symbiont message used to register a program to
;  handle screen switches

$$$=!0
BLK sss_func, 1t		;Function = MT_SSREGPRG
BLK         , 1t
BLK sss_pnum, 1t		;Physical screen number (primary unit number)
BLK sss_snum, 1t		;Virtual screen number (secondary unit numer)
BLK sss_save, 1t		;Non-zero if screen symbiont should save
				;  screen when switching

;Define offsets in screen symbiont message sent to a register program by the
;  screen symbiont to report an action

$$$=!0
BLK sss_func , 1t		;Function = MT_SSACTION
BLK          , 1t
BLK sss_pnum , 1t		;Physical screen number (primary unit number)
BLK sss_snum , 1t		;Virtual screen number (secondary unit numer)
BLK sss_achar, 2t		;Character (0 means this is a registration
				;  acknowlegement)
BLK sss_abits, 2t		;Keyboard state bits (low 16 bits from
				;  tdb_keysts0)

;Define offsets in screen symbiont message which is sent by a registered
;  program to report an action

$$$=!0
BLK sss_func  , 1t		;Function = MT_SSREPORT
BLK           , 1t
BLK sss_pnum  , 1t		;Physical screen number (primary unit number)
BLK sss_snum  , 1t		;Virtual screen number (secondary unit numer)
BLK sss_action, 1t		;Action (0 means clear system shift state,
				;  non-zero is virtual screen number to
				;  switch to)

;Define offsets in the terminal DHDB (device hardware block)

dhdb_mSIZE=!96t
$$$=!-dhdb_mSIZE
BLK dhdb_num     , 4t		;Current number of virtual displays
BLK dhdb_nummax  , 4t		;Maximum number of virtual displays
BLK dhdb_dispname, 4t		;Display adapter type name (offset of string)
BLK dhdb_disptype, 4t		;Display type (same values as stored in
				;  disptype)
BLK dhdb_unit    , 1t		;Unit number
BLK dhdb_enhanced, 1t
BLK dhdb_keysts  , 1t		;Keyboard status
BLK dhdb_pciaddr , 1t		;PCI device address (device/function number)
BLK              , 2t
BLK dhdb_spkcnt  , 2t		;Speaker current timer count
BLK dhdb_pciid   , 4t		;PCI vendor/device ID
BLK dhdb_curtdb  , 4t		;Offset of TDB for current virtual screen
BLK dhdb_keysta  , 4t		;Keyboard state dispatch offset
BLK dhdb_xddb    , 4t		;Offset of extended display data block
BLK dhdb_bioreg  , 4t		;Base IO register for display controller
BLK dhdb_vtaddr  , 4t		;Virtual address of text mode buffer
BLK dhdb_vgaddr  , 4t		;Virtual address of graphics mode buffer
BLK dhdb_vraddr  , 4t		;Virtual address of register memory window
BLK dhdb_ptaddr  , 4t		;Physical address of text mode buffer
BLK dhdb_pgaddr  , 4t		;Physical address of graphics mode buffer
BLK dhdb_praddr  , 4t		;Physical address of register memory window
BLK dhdb_xioreg  , 4t		;Base extended IO register
BLK dhdb_npages  , 4t		;Number of pages of display memory available
BLK dhdb_gbfrsize, 4t		;Size of the graphic mode display buffer
BLK              , 1t
BLK dhdb_keydata , 1t		;Data byte to send to keyboard
BLK dhdb_spkstate, 1t		;Speaker state (bit 0 = enabled, bit 1 =
				;  generating tone)
BLK dhdb_fulldrv , 1t		;Non-zero if full console driver loaded
				;WARNING:  Next 2 offsets MUST match
				;	   corresponding offsets in DCBs!
BLK dhdb_fdisp   , 4t		;Offset of keyboard fork routine
BLK dhdb_fnext   , 4t		;Offset of next item in fork request list
BLK dhdb_magic   , 4t		;Magic number for DHDBs = 'DHDB'
BLK dhdb_next    , 4t		;Offset of next DHDB in system
.IF NE dhdb_next
	.IRP	q, >dhdb_next
	.ERROR	DHDB starting offset is wrong, dhdb_next = q'h
	.ENDR
.ENDC
BLK dhdb_nexts   , 4t		;Offset of next DHDB of same type
BLK dhdb_kbioreg , 4t		;Keyboard base IO register
BLK dhdb_kbint   , 4t		;Keyboard interrupt request number
BLK dhdb_kdisp   , 4t		;Keyboard function dispatch table offset
BLK dhdb_kbtype  , 4t		;Keyboard driver type name
BLK dhdb_contype , 4t		;Type name for console driver
BLK dhdb_kbtchar , 4t		;Total keyboard characters
BLK dhdb_scsvtime, 4t		;Screen saver value
BLK dhdb_scsvcnt , 4t		;Screen saver counter
BLK dhdb_scsvtype, 1t		;Screen saver type
BLK dhdb_kblast  , 1t		;Last keyboard character (polled keyboards)
BLK dhdb_kbthis  , 1t		;Current keyboard character (polled keyboards)
BLK dhdb_kbcount , 1t		;Keyboard release count (polled keyboards)
BLK dhdb_kbmouse , 4t		;Offset of associated mouse device DCB
BLK dhdb_ircnt   , 1t		;Interrupt level ring buffer item count
BLK dhdb_irtak   , 1t		;Interrupt level ring buffer taker pointer
BLK dhdb_irput   , 1t		;Interrupt level ring buffer putter pointer
BLK dhdb_hwmode  , 1t		;Current hardware mode
BLK dhdb_kbvals  , 0t
BLK dhdb_frcnt   , 1t		;Fork level ring buffer item count
BLK dhdb_kbcnts  , 0t
BLK dhdb_frtak   , 1t		;Fork level ring buffer taker pointer
BLK dhdb_kbcntx  , 0t
BLK dhdb_frput   , 1t		;Fork level ring buffer putter pointer
BLK              , 1t
BLK dhdb_irng    , IKSIZE	;The interrupt level ring buffer
BLK dhdb_frng    , FKSIZE*2	;The fork level ring buffer
$$$={$$$+3}&0FFFCh
BLK dhdb_tdbtbl  , VDSPMAX*4t	;TDB table (one entry for each possible virtual
dhdb_SIZE=!$$$			;  display)

;Display offsets in the standard part of the XDDB (extended display data block)

$$$=!0
BLK xddb_version, 16t		;Version number string
BLK xddb_desc   , 64t		;Description string
BLK xddb_devdep , 0		;Start of device dependent part
xddb_SIZE=$$$

;Define offsets in the keyboard data block (this block is used only to keep
;  track of the keyboard drivers - actual data for installed keyboards is
;  kept in the associated DHDB

$$$=!0
BLK kbdb_next   , 4t		;Offset of next DHDB
BLK kbdb_kbtype , 4t		;Type name for the keyboard driver
BLK kbdb_addunit, 4t		;Offset of keyboard add unit routine
kbdb_SIZE=!$$$

;Define offsets in the terminal DCB

$$$=!4
BLK dcb_trtdb    , 4t		;Offset of attached TDB
BLK dcb_trkib    , 4t		;Offset of first KIB for terminal
BLK dcb_trccstcnt, 4t		;Total cntl-C signal count for group
BLK dcb_trccsvect, 2t		;Vector number for control-C signal
BLK dcb_trccshndl, 2t
BLK dcb_trccspda , 2t		;PDA selector for control-C signal
BLK              , 2t
BLK dcb_trccsdata, 4t		;Data for control-C signal
BLK dcb_trcpsvect, 2t		;Vector number for control-P signal
BLK dcb_trcpshndl, 2t
BLK dcb_trcpspda , 2t		;PDA selector for control-P interupt
BLK              , 2t
BLK dcb_trcpsdata, 4t		;Data for control-P signal
BLK dcb_trhusvect, 2t		;Vector number for hang-up signal
BLK dcb_trhushndl, 2t
BLK dcb_trhuspda , 2t		;PDA selector for hang-up interupt
BLK              , 2t
BLK dcb_trhusdata, 4t		;Data for hang-up signal
dcb_trSIZE=!$$$
XMBINDEX dcb_trINDEX, dcb_cSIZE+dcb_trSIZE

;Define offsets in the TDB

tdb_mSIZE=!300t
$$$=!-tdb_mSIZE
BLK tdb_msgdst  , 16t		;Destination for initial message
BLK tdb_program , 16t		;Name of initial program to run
BLK tdb_password, 12t		;Password string
BLK tdb_access  , 4t		;Access label
BLK tdb_dfctbl  , 32t		;Data forwarding character table
BLK tdb_outtov  , 1t		;Output time-out value (seconds)
BLK tdb_outtoc  , 1t		;Output time-out counter
BLK tdb_closval , 1t		;Carrier loss time-out value (1/10 seconds)
BLK             , 1t
BLK tdb_kbchar  , 4t		;Number of keyboard characters input
BLK tdb_iring   , 4t		;Offset of input ring
BLK tdb_irsize  , 4t		;Size of the input ring
BLK tdb_ibufr   , 4t		;Offset of input buffer (also first location
				;  above the input ring!)
BLK tdb_ibsize  , 4t		;Size of the input buffer
BLK tdb_pbi     , 4t		;Position of beginning of input
BLK tdb_ibpos   , 4t		;Input buffer current position
BLK tdb_ibcnt   , 4t		;Number of characters available for input from
				;  the input line buffer
BLK tdb_iblen   , 4t		;Length of input buffer
BLK tdb_ibpnt   , 4t		;Input line buffer pointer
BLK tdb_irtak   , 4t		;Input ring buffer taker pointer
BLK tdb_irput   , 4t		;Input ring buffer putter pointer
BLK tdb_ircnt   , 4t		;Input ring buffer total character count
BLK tdb_irbsl   , 4t		;Input ring buffer stop level
BLK tdb_irbpl   , 4t		;Input ring buffer panic level
BLK tdb_irheld  , 4t		;Input ring buffer held character count
BLK tdb_irlost  , 4t		;Input ring buffer lost character count
BLK tdb_outrcnt , 4t		;Output ring buffer item count
BLK tdb_charin  , 4t		;Number of characters input
BLK tdb_charout , 4t		;Number of characters output
BLK tdb_bioreg  , 4t		;Base IO register number for interface

BLK tdb_iinpr   , 4t		;Idle input baud rate
BLK tdb_ioutr   , 4t		;Idle output baud rate
BLK tdb_inpr    , 4t		;Input baud rate
BLK tdb_outr    , 4t		;Output baud rate
BLK tdb_spkfreq , 2t		;Speaker tone frequency
BLK tdb_spklen  , 2t		;Speaker tone length
BLK tdb_response, 4t		;ANSI Primary DA response values
BLK tdb_devchar , 4t		;Offset of device characteristics table for
				;  terminal
BLK tdb_imode   , 4t		;Active input mode bits
BLK tdb_imodec  , 4t		;Current value for input mode bits
BLK tdb_omode   , 4t		;Active output mode bits
BLK tdb_omodec  , 4t		;Current value for output mode bits
BLK tdb_escseq  , 4t		;Data for input ESC sequences
BLK tdb_pnum    , 1t		;Primary unit number (binary)
BLK tdb_snum    , 1t		;Secondary unit number (binary)
BLK tdb_svstsinp, 1t
BLK tdb_stsansi , 1t
BLK tdb_stsout  , 4t		;Status bits for output
BLK tdb_stsinp  , 4t		;Status bits for input
BLK tdb_stsdsp  , 4t		;Display status bits
BLK tdb_stsmisc , 4t		;Misc. status bits

BLK tdb_flow    , 1t		;Flow control and data set control enable bits
BLK tdb_iflow   , 1t		;Initial flow control value
BLK tdb_clos    , 1t		;Carrier loss timer count
BLK tdb_fill    , 1t		;Fill timer count

BLK tdb_csize   , 1t		;Current value of character size and number of
				;  stop bits
BLK tdb_icsize  , 1t		;Initial value of character size and number of
				;  stop bits
BLK tdb_par     , 1t		;Current value of parity handling
BLK tdb_ipar    , 1t		;Initial value of parity handling

BLK tdb_owkv    , 1t		;Output wake value
BLK tdb_twidth  , 1t		;Terminal line width
BLK tdb_modem   , 1t		;Modem control bits
BLK tdb_imodem  , 1t		;Initial modem control bits

BLK tdb_scstate , 1t		;ESC sequence input state
BLK             , 3t
BLK tdb_curpos  , 16t		;Cursor position values (2 bytes/page,
				;  horizontal first)
BLK tdb_kpcval  , 1t		;Keypad code value
BLK tdb_sistate , 1t		;Serial input state
BLK tdb_ifdsp   , 1t		;Interface description bits
BLK tdb_intlvl  , 1t		;Interrupt level used

BLK tdb_disptype, 4t		;Display type (same values as stored in disptype)
BLK tdb_ddisp   , 4t		;Offset of display driver dispatch table
BLK tdb_kdisp   , 4t		;Offset of keyboard driver dispatch table
BLK tdb_dhdb    , 4t		;Offset of DHDB for display hardware
				;WARNING:  Next 2 offsets MUST match
				;	   corresponding offsets in DCBs!
BLK tdb_fdisp   , 4t		;Offset of fork routine
BLK tdb_fnext   , 4t		;Offset of next DCB in fork request list
BLK tdb_magic   , 4t		;Magic number for TDBs = 'TDB'
BLK tdb_dcb     , 4t		;Offset of attached DCB
.IF NE tdb_dcb
	.IRP	q, >tdb_dcb
	.ERROR	TDB starting offset is wrong, tdb_dcb = q'h
	.ENDR
.ENDC
BLK tdb_next    , 4t		;Offset of next TDB
BLK tdb_nexts   , 4t		;Offset of next TDB for same driver
BLK tdb_name    , 16t		;Name of terminal (ASCII)
BLK tdb_typname , 4t		;Type name
tdb_SIZE=!{$$$+3}&0FFFCh

;Define offsets for device dependent part of the TDB for the console - these
;  overwrite the output ring since the console does not use it! (These offsets
;  are also used by the LCDA display devices)

$$$=!tdb_SIZE
BLK tdb_dspchr  , 4t		;Offset of subroutine to display character
BLK tdb_escarg  , 4t		;ESC sequence argument values
BLK tdb_escdsp  , 4t		;ESC sequence dispatch address
BLK tdb_keytbl  , 4t		;Address of translation table for keyboard
BLK tdb_mdb     , 4t		;Offset of first MDB which maps display
BLK tdb_vtaddr  , 4t		;Virtual address for text mode buffer
BLK tdb_vgaddr  , 4t		;Virtual address for graphics mode buffer
BLK tdb_vraddr  , 4t		;Virtual address for the register memory window
BLK tdb_xioreg  , 4t		;Base extended IO register
BLK tdb_keysts0 , 4t		;Keyboard status bits
BLK tdb_keysts1 , 4t		;Keyboard status bits (pre-interrupt values)
BLK tdb_lcmap   , 8t		;Address of low half of graphics mode character
				;  table
BLK tdb_hcmap   , 8t		;Address of high half of graphics mode character
				;  table
BLK tdb_holdkib , 4t		;Offset of KIB which is holding keyboard input
				;  chain
BLK tdb_xcode   , 2t		;Main program level scan code value
BLK tdb_vertfreq, 1t		;Graphics mode vertical frequency (index)
BLK             , 1t

BLK tdb_escpnt  , 1t		;ESC sequence argument pointer
BLK tdb_keysts2 , 1t		;Keyboard status 2
BLK tdb_chrsetGL, 1t		;ANSI character set GL definition
BLK tdb_chrsetGR, 1t		;ANSI character set GR definition

BLK tdb_chrsetG0, 1t		;ANSI character set G0 definition
BLK tdb_chrsetG1, 1t		;ANSI character set G1 definition
BLK tdb_chrsetG2, 1t		;ANSI character set G2 definition
BLK tdb_chrsetG3, 1t		;ANSI character set G3 definition

BLK tdb_battrval, 1t		;Base attribute value for text modes
BLK tdb_battrfil, 1t		;Base attribute fill value for text modes
BLK tdb_tattrval, 1t		;Attribute value for text modes
BLK tdb_tattrfil, 1t		;Attribute fill value for text modes

BLK tdb_scntop  , 1t		;Top of scrolling region
BLK tdb_scnbtm  , 1t		;Bottom of scrolling region (must be tdb_scntop
				;  + 1)
BLK tdb_montype , 1t		;Monitor type
BLK tdb_crtcregn, 1t		;CRTC register number from virtual-86 mode
				;Following three items are used to implement				;  the ANSI state save function
BLK tdb_sattrval, 1t		;Saved attribute value for text modes
BLK tdb_sattrfil, 1t		;Saved attribute fill value for text modes
BLK tdb_scurpos , 2t		;Saved cursor position
BLK tdb_table   , 4t

BLK tdb_bcolumns, 2t
BLK tdb_brows   , 1t
BLK tdb_dfontsel, 1t		;Display font select value
BLK tdb_mode    , 1t		;Current internal screen mode
BLK tdb_bmode   , 1t
BLK tdb_hmode   , 1t		;Current hardware mode
BLK tdb_pixsize , 1t		;Graphics pixel size (bytes)
BLK             , 2t
BLK tdb_dsppage , 1t		;Current display page
BLK tdb_bdsppage, 1t
BLK tdb_curmode , 2t		;Cursor mode values
BLK tdb_bcurmode, 2t
BLK tdb_rows    , 1t		;Screen height (text rows)
BLK tdb_charch  , 1t		;Character cell height (scan lines)
BLK tdb_dcurmode, 2t		;Display cursor mode (start and end values)
BLK tdb_dcurpos , 2t		;Display cursor position
BLK tdb_dvertend, 2t		;Display vertical end register value
BLK tdb_dstart  , 4t		;Display start display position
BLK tdb_gbfrsize, 4t		;Size of the graphics mode display buffer
BLK tdb_pgsize  , 4t		;Current display logical page size
BLK tdb_horiz   , 4t		;Screen width (graphics pixels)
BLK tdb_vert    , 4t		;Screen height (graphics pixels)
BLK tdb_columns , 4t		;Screen width (text columns)
tdb_lcdaSIZE=!$$$
BLK tdb_gcxpos  , 4t
BLK tdb_gcypos  , 4t
BLK tdb_gcxhot  , 4t
BLK tdb_gcyhot  , 4t
BLK tdb_gcenable, 1t
BLK             , 3t
BLK tdb_pglist  , 32t*4		;Page list
BLK tdb_dacdata , 256t*3	;DAC register values
tdb_vgaSIZE =!$$$

;Define offsets for device dependent part of the TDB for Telnet ports - these
;  offsets are used by TLNCLS

$$$=!tdb_SIZE
BLK tdb_tlnoutrtak , 4t		;Output ring buffer taker pointer
BLK tdb_tlnoutrput , 4t		;Output ring buffer putter pointer
BLK tdb_tlnoutrsize, 4t		;Size of the output ring buffer
BLK tdb_tlnoutring , 0t		;Start of output ring buffer
tdb_tlnSIZE=!{$$$+3}&0FFFCh

;Define offsets for device dependent part of the TDB for PCN devices - these
;  offsets are used by PCNCLS

PCNPAGES =!8t			;Maximum number of display pages to map
PCNIRSIZE=!120t			;Default input ring size
PCNIBSIZE=!120t			;Default input line buffer size

$$$=!tdb_vgaSIZE
BLK tdb_pcniring  , 0
tdb_pcnSIZE=!{$$$+3}&0FFFCh

;Define values for tdb_scstate

SCS_NORM=!0t			;Normal
SCS_SC1 =!1t			;2st character of special code
SCS_SC2 =!2t			;3rd character of special code
SCS_SC3 =!3t			;4th character of special code
SCS_ESCF=!4t			;ESC function character next
SCS_ESC1=!5t			;1st ESC sequence character next
SCS_ESC2=!6t			;2nd ESC sequence character next
SCS_ESC3=!7t			;3rd ESC sequence character next

;Define bits for tdb_ifdsp (interface description bits)

TID$QOUT  =!01h			;Terminal can do queued output
  TID%QOUT  =!0t

;Define values for the tdb_par byte (parity handling)

TRMP_NONE =!1t			;No parity bit
TRMP_MARK =!2t			;Mark parity
TRMP_SPACE=!3t			;Space parity
TRMP_ODD  =!4t			;Odd parity
TRMP_EVEN =!5t			;Even parity

;Define bit values for tdb_pglist items

PL$MODIFIED=!80000000h		;Page has been modified
  PL%MODIFIED=!31t
PL$VIRTUAL =!40000000h		;Page has been virtualized
  PL%VIRTUAL =!30t
PL$BLOCKED =!20000000h		;Access to page is blocked
  PL%BLOCKED =!29t
PL$INCMOD  =!10000000h		;Page has been modified since last check
  PL%INCMOD  =!28t

;Define initial defaults for serial ports

TRMR_init=!9600t
TRMD_init=!8t
TRMS_init=!1t
TRMP_init=!TRMP_NONE

;Define offsets in the PCN DCB (must be defined after the PCN TDB since it
;  needs the size of the PCN TDB!)  Note that there are two kinds of PCN
;  DCBs; partial (which have a secondary unit number of 0) and full (which
;  have a non-zero secondary unit number).

$$$=!4
BLK dcb_pcnsts1    , 1t		;Status bits
BLK                , 3t
$$$full=!$$$			;The following four items only exist in the
				;  sub-unit 0 PCN DCBs
BLK dcb_pcn0irsize , 2t		;Input ring buffer size
BLK dcb_pcn0ibsize , 2t		;Input line buffer size
BLK dcb_pcn0pswrd  , 12t	;Password
BLK dcb_pcn0access , 4t		;Access label
BLK dcb_pcn0program, 16t	;Initial program to run
BLK dcb_pcn0msgdst , 16t	;Destination name for initial login message
dcb_pcnxSIZE=!$$$

$$$=!$$$full			;The following items only exist in full PCN DCBs
BLK dcb_pcnintdata , 4t		;Interrupt data value
BLK dcb_pcnhuvect  , 2t		;Interrupt vector for hang up interrupt
BLK dcb_pcnhupda   , 2t		;PDA selector for hang up interrupt (must
				;  immediately follow dcb_pcnhuvect)
BLK dcb_pcnmmdvect , 2t		;Interrupt vector for memory access interrupt
				;  (must follow immediately dcb_pcnmmdvect)
BLK dcb_pcnmmdpda  , 2t		;PDA selector for memory access interrupt
BLK dcb_pcnbufsel  , 2t		;Selector for display buffers
BLK dcb_pcnbufslot , 1t		;Process slot number for display buffers
BLK dcb_pcndcbsizex, 1t		;Size index for the DCB
BLK dcb_pcnpgchngd , 1t		;Page changed bits (must be long aligned)
BLK dcb_pcndsppage , 1t		;Remote display page number
BLK dcb_pcncurmode , 2t		;Remote cursor mode
BLK dcb_pcnkidxff  , 2t		;Selector for XFF to wake up when keyboard
				;  interrupt processing is done
BLK                , 2t
BLK dcb_pcnmapwake , 4t		;Offset of mapped mode wake block
BLK dcb_pcnbufshdw , 4t		;Offset of start of shadow buffer
BLK dcb_pcnbufmdb  , 4t		;Offset of MDB for buffer memory
BLK dcb_pcnbufxmap , 4t		;Offset of first exec buffer memory page table
				;  entry
BLK dcb_pcnbufumap , 4t		;Offset of first user buffer memory page table
				;  entry
BLK dcb_pcnbufpte  , 4t*PCNPAGES;Page table entries for display buffer pages
BLK dcb_pcnoatnext , 4t		;Offset of next DCB in once-a-tick list
BLK dcb_pcnoatprev , 4t		;Offset of previous DCB in once-a-tick list
BLK dcb_pcndspput  , 4t		;Display list putter pointer
BLK dcb_pcndsptak  , 4t		;Display list taker pointer
BLK dcb_pcndspcnt  , 4t		;Display list byte count
BLK dcb_pcncurpos  , 2t*8t	;Remote cursor position values
BLK                , tdb_mSIZE
BLK dcb_pcntdb     , tdb_pcnSIZE
dcb_pcnSIZE=!$$$
XMBINDEX dcb_pcnxINDEX, dcb_cSIZE+dcb_pcnxSIZE
XMBINDEX dcb_pcnINDEX, dcb_cSIZE+dcb_pcnSIZE

;Define bits for dcb_sts2 for terminals (top four bits are common to all
;  devices)

T2$WTDB  =!04h			;Waiting for TDB to be attached

;Define bits for dcb_pcnsts1 for PCN devices

PCNS1$SESSION=!40h		;Should start session on client side device
PCNS1$MAPPED =!08h		;Client device is in mapped mode
PCNS1$LCLSCR =!04h		;Scroll functions should be local
PCNS1$FONTWT =!02h		;Waiting for font set response
PCNS1$MODEWT =!01h		;Waiting for mode set response

;Define bits for the keyboard state data in locations tdb_keysts0 and
;  tdb_keysts1

KS0$CAPKY =!00004000h		;Caps-lock key is pressed
  KS0%CAPKY =!14t
KS0$NUMKY =!00002000h		;Num-lock key is pressed
  KS0%NUMKY =!13t
KS0$SCLKY =!00001000h		;Scroll-lock key is pressed
  KS0%SCLKY =!12t

KS0$CAPLK =!00000400h		;Caps-lock state
  KS0%CAPLK =!10t
KS0$NUMLK =!00000200h		;Num-lock state
  KS0%NUMLK =!9t
KS0$SCLLK =!00000100h		;Scroll-lock state
  KS0%SCLLK =!8t

KS0$LALT  =!00000040h		;Left ALT key is pressed
  KS0%LALT  =!6t
KS0$LCTRL =!00000020h		;Left control key is pressed
  KS0%LCTRL =!5t
KS0$LSHFT =!00000010h		;Left shift key is pressed
  KS0%LSHFT =!4t

KS0$RALT  =!00000004h		;Right ALT key is pressed
  KS0%RALT  =!2t
KS0$RCTRL =!00000002h		;Right control key is pressed
  KS0%RCTRL =!1t
KS0$RSHFT =!00000001h		;Right shift key is pressed
  KS0%RSHFT =!0t

;Define bits for the keyboard state byte in location dhdb_keysts

KS$SYSSHFT=!02h			;System state is active
KS$VOFF   =!01h			;Associated video display has been disabled

;Define values for the keyboard state (stored in dhdb_keysta)

KS_CHR =!0t			;Normal character
KS_E0  =!4t			;Character after E0
KS_E1  =!8t			;Character after E1
KS_E11D=!12t			;Character after E1-1D
KS_E19D=!16t			;Character after E1-9D

;Define bits for the keyboard state byte in location tdb_keysts2

KS2$KEYINT =!80h		;Keyboard interrupt(s) being processed
KS2$KEYREAD=!40h		;Keyboard input has been read
KS2$KEYDIS =!20h		;Keyboard has been disabled
KS2$HVSCN  =!10h		;Have keyboard scan-code available

;Define bits stored in the keyboard input buffers

KB$IMAGE  =!80000000h		;Image data
  KB%IMAGE =!31t
KB$CAPKEY =!40000000h		;Caps-lock key pressed for character
  KB%CAPKEY =!30t
KB$NUMKEY =!20000000h		;Num-lock key pressed for chacacter
  KB%NUMKEY =!29t
KB$SCLKEY =!10000000h		;Scroll-lock key pressed for character
  KB%SCLKEY =!28t
KB$CARDET =!08000000h		;Carrier detect state (serial ports only)
  KB%CARDET =!27t
KB$CAPLCK =!04000000h		;Caps-lock state true for character
  KB%CAPLCK =!26t
KB$NUMLCK =!02000000h		;Num-lock state true for chacacter
  KB%NUMLCK =!25t
KB$SCLLCK =!01000000h		;Scroll-lock state true for character
  KB%SCLLCK =!24t
KB$LFTALT =!00400000h		;Left ALT key pressed for character
  KB%LFTALT =!22t
KB$LFTCTL =!00200000h		;Left control key pressed for character
  KB%LFTCTL =!21t
KB$LFTSHF =!00100000h		;Left shift key pressed for character
  KB%LFTSHF =!20t
KB$RHTALT =!00040000h		;Right ALT key pressed for character
  KB%RHTALT =!18t
KB$RHTCTL =!00020000h		;Right control key pressed for character
  KB%RHTCTL =!17t
KB$RHTSHF =!00010000h		;Right shift key pressed for character
  KB%RHTSHF =!16t
KB$RELEASE=!00008000h		;Break code
  KB%RELEASE=!15t
KB$INTERN =!00004000h		;Internal value
  KB%INTERN =!14t

;Define bits for the first virtual DOS segment BIOS keyboard status byte
;  (bda_vkeysts0 = 417h)

KV0$INSLK =!80h			;Insert state
KV0$CAPLK =!40h			;Caps-lock state
KV0$NUMLK =!20h			;NUM-lock state
KV0$SCLLK =!10h			;Scroll-lock state
KV0$ALT   =!08h			;Either ALT key pressed
KV0$CTRL  =!04h			;Either control key pressed
KV0$LSHFT =!02h			;Left shift key pressed
KV0$RSHFT =!01h			;Right shift key pressed

;Define bits for the second virtual DOS segment BIOS keyboard status byte
;  (bda_vkeysts1 = 418h)

KV1$INSKY =!80h			;Insert key pressed
KV1$CAPKY =!40h			;Caps-lock key pressed
KV1$NUMKY =!20h			;NUM-lock key pressed
KV1$SCLKY =!10h			;Scroll-lock key pressed
KV1$CNUMLK=!08h			;Control-NUM-lock state (???)
KV1$SYSREQ=!04h			;SYSREQ key pressed
KV1$LALT  =!02h			;Left ALT key pressed
KV1$LCTRL =!01h			;Left control key pressed

;Define bits for the third virtual DOS segment BIOS keyboard status byte
;  (bda_vkeysts2 = 496h)

KV2$RALT  =!04h			;Right ALT key pressed
KV2$RCTRL =!02h			;Right control key pressed

;Define bits for the fourth virtual DOS segment BIOS keyboard status byte
;  (bda_vkeysts3 = 496h)

KV3$CLLED =!04h			;Caps-lock LED is on
KV3$NLLED =!02h			;NUM-lock LED is on
KV3$SLLED =!01h			;Scroll-lock LED is on

;Define offsets in the keyboard interrupt control block (KIB)

$$$=!0
BLK ki_next  , 4t		;Offset of next KIB for keyboard
BLK ki_ddisp , 4t		;Offset of driver dispatch table (same as
				;  tdb_ddisp)
BLK ki_kdisp , 4t		;Offset of keyboard dispatch table (same as
				;  tdb_kdisp)
BLK ki_tdb   , 4t		;Offset of TDB for keyboard
BLK ki_handle, 4t		;Device handle used to setup this keyboard
				;  interrupt
BLK ki_pda   , 4t		;Selector of PDA for process for software
				;  interrupt

;Define indexes for the chrxtbl table

CHRX_SGS=!4t			;DEC special graphics character set

;Define values for the text font index (stored in tdb_fntindx)
;  Low 2 bits give height of character cell:
;	01 = 8 bits
;	02 = 14 bits
;	03 = 16 bits
;  High 5 bits give width of character cell:
;	00 = 8 bits
;	04 = 9 bits

TF_8X8 =!01h
TF_8X14=!02h
TF_8X16=!03h
TF_9X8 =!05h
TF_9X14=!06h
TF_9X16=!07h

;Define values for monitor type (stored in tdb_montype)

MT_MSYNC=!0t			;Multi-sync monitor (supports all modes)
MT_EGA  =!1t			;EGA style monitor (supports CGA and EGA modes
				;  only)
MT_PS2  =!2t			;PS2 style monitor (supports VGA modes only)
MT_XPS2 =!3t			;Extended PS2 sytle monitor (supports VGA and
				;  super-VGA modes)
MT_8514 =!4t			;8514 monitor (supports VGA modes and 8514A
				;  modes)

;Define stack frame offsets for vgadspmode

$$$=!0
FRM adm_bits   , 4t
FRM adm_dataadr, 8t	;Address of data block
FRM adm_dv     , 20t	;Data values
dm_SIZE=!$$$

;Define function bits for the scree symbiont read function

SSR$READ     =!00000000h
SSR$FCURSOR  =!00000010h	;Freeze cursor position on screen
SSR$BLKVIRT  =!00000002h	;Block access to virtualized pages
SSR$VIRTALL  =!00000001h	;Virtualize all pages

;Define function bits for the screen symbiont swrite function

SSW$WRITE    =!80000000h
SSW$SWITCH   =!00000008h	;Make screen pointed to by ESI the current screen
SSW$UNBLKONLY=!00000004h	;Unblock pages only
SSW$CLRSSS   =!00000002h	;Clear keyboard system-shift state when done

	.SBTTL	Parameter file PROCARG.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  PROCARG.PAR - Parameter file for procarg() function
;
;  Edit history:
;  -------------
;  18Apr95 (fpj) - Added edit history block.
;
;-------------------------------------------------------------------------------


	.NLBEX
.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

;Define bits for flags (argument to PROCARG)

PAF$PATOM    =!8000	;Treat plus sign as an atom
  PAF%PATOM    =!15t	;  Note: Use of both PAF$PATOM and PAF$PSWITCH
			;    not allowed, PAF$PSWITCH has priority
PAF$EATQUOTE =!4000	;Strip quotes from the strings
  PAF%EATQUOTE =!14t
PAF$PSWITCH  =!1000	;Allow plus sign as a switch character
  PAF%PSWITCH  =!12t
PAF$INDIRECT =!0800	;Allow indirect files
  PAF%INDIRECT =!11t
PAF$ECHOINDIR=!0400	;Echo indirect input to stdout
  PAF%ECHOINDIR=!10t
PAF$PARMODE  =!0200	;Allow parentheses mode in string values
  PAF%PARMODE  =!9t

;Define structure which describes argument values

$$$=!0
BLK argdata_name  , 4t	;Pointer to name of option or keyword
BLK argdata_value , 4t	;Value of option or keyword
BLK argdata_data  , 4t	;Data from option or keyword definition
BLK argdata_flags , 4t	;Value description bits
BLK argdata_length, 4t	;Length of long string value
argdata_SIZE=!$$$

;Define values for argdata.flags

ADF$NVAL =!4000		;Numeric value present
  ADF%NVAL =!14t
ADF$SSVAL=!2000		;Short string value present
  ADF%SSVAL=!13t
ADF$LSVAL=!1000		;Long string value present
  ADF%LSVAL=!12t
ADF$XSVAL=!0800		;String table index value present
  ADF%XSVAL=!11t
ADF$NONE =!0400		;No = after option or keyword
  ADF%NONE =!10t
ADF$NULL =!0200		;No value after =
  ADF%NULL =!9t

;Define structure which specifies options and keywords

$$$=!0
BLK argspec_name   , 4t		;Name of option or keyword
BLK argspec_flags  , 4t		;Flag bits
BLK argspec_svalues, 4t		;Pointer to string value table
BLK argspec_func   , 4t		;Pointer to function
BLK argspec_data   , 4t		;Data to pass to function
argspec_SIZE=!$$$

;Values for argspec.flags

ASF$VALREQ=!8000	;A value is required
  ASF%VALREQ=!15t
ASF$NVAL  =!4000	;Value may be numeric
  ASF%NVAL  =!14t
ASF$SSVAL =!2000	;Value may be a short string
  ASF%SSVAL =!13t
ASF$LSVAL =!1000	;Value may be a long string
  ASF%LSVAL =!12t
ASF$PLUS  =!0100	;Restrict switch character to '+' only
  ASF%PLUS  =!8t
ASF$MINUS =!0080	;Restrict switch character to '-' only
  ASF%MINUS =!7t

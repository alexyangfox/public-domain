	.SBTTL	Parameter file XOSXDFS.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;-------------------------------------------------------------------------------
;
;  XOSXDFS.PAR - Kernel-mode include file for DOS file system
;
;  Edit history:
;  -------------
;  18Apr95 (fpj) - Added edit history block.
;
;-------------------------------------------------------------------------------

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

;Define offsets in the DOS format disk boot block

$$$=!0
BLX db_jump   , 3t	;Jump instruction to start of bootstrap code
BLX db_oemname, 8t	;OEM name and version
BLX db_secsize, 2t	;Sector size in bytes
BLX db_secpcls, 1t	;Sectors per cluster
BLX db_ressec , 2t	;Total number of reserved sectors
BLX db_numfats, 1t	;Number of FATs
BLX db_rdirent, 2t	;Number of root directory entries
BLX db_sectors, 2t	;Total number of sectors on disk (16 bit value)
BLX db_media  , 1t	;Media description byte
BLX db_secpfat, 2t	;Number of sectors per FAT table
BLX db_secptrk, 2t	;Number of sectors per track
BLX db_heads  , 2t	;Number of heads
BLX db_hidsec , 4t	;Number of hidden sectors
BLX db_ttlsec , 4t	;Total number of sectors on disk (32 bit value)

;Following offsets are defined for the DOS extended boot block which does
;  not seem to be used in DOS 7!

bbdos7=!$$$
BLX db_drvnum , 1t	;Physical drive number
BLX           , 1t	;Reserved
BLX db_ebbsig , 1t	;Extended boot block signature (always = 29)
BLX db_volid  , 4t	;Volume ID
BLX db_label  , 11t	;Volume label
BLX           , 8t	;Reserved
BLX db_btcode , 448t	;Bootstrap code
BLX db_bootsig, 2t	;Boot block signature bytes (always = 0AA55)

;Following offsets of used by DOS 7 for 32 bit FAT disks

$$$=bbdos7
BLX db_ttlsecpfat, 4t	;Sectors per FAT (32 bit value)
BLX db_extflags  , 2t	;Flags
BLX db_version   , 2t	;File system version
BLX db_rootcls   , 4t	;Number of first cluster in root directory
BLX db_fsinfo    , 2t	;Sector number of the file system intormation sector
BLX db_backboot  , 2t	;Sector number of the backup boot sector (0FFFFh if
			;  no backup boot sector)

;Define offsets in a DOS base directory entry

$$$=!0
BLX de_name  , 8t	;Name
BLX de_ext   , 3t	;Extension
BLX de_attrib, 1t	;Attribute byte
BLX de_lcase , 1t	;Case for base and extension(?)
BLX de_ctms  , 1t	;Creation time, milliseconds
BLX de_ctime , 2t	;Creation time
BLX de_cdate , 2t	;Creation date
BLX de_adate , 2t	;Access date
BLX de_pntrhi, 2t	;High 16 bits of number of first cluster
BLX de_time  , 2t	;Creation time
BLX de_date  , 2t	;Creation date
BLX de_pntr  , 2t	;Number of first cluster
BLX de_size  , 4t	;File size

;Define offsets in a DOS long file name directory slot entry

$$$=!0
BLX xe_id    , 1t	;Sequence number for slot
BLX xe_name0 , 10t	;First 5 characters
BLX xe_attrib, 1t	;Attribute byte (always 0Fh)
BLX xe_resrvd, 1t	;Reserved (always 0)
BLX xe_chksum, 1t	;Checksum of short name
BLX xe_name5 , 12t	;Next 6 characters
BLX xe_pntr  , 2t	;Number of first cluster (not used, must be 0)
BLX xe_name11, 4t	;Next 2 characters

;Define device dependent offsets in the DOS file system DCB

$$$=!dcb_dkdevdep
BLK dcb_dkcfib   , 4t	;Offset of cache buffer containing current file FIB
BLK dcb_dkshrrty , 2t	;Sharing retry count
BLK dcb_dkshrdly , 2t	;Sharing delay value

;Define offsets in the fake file index block built in a disk buffer for all
;  open DOS files.  These blocks are given "block numbers" above the end
;  of the actual physical disk.  Pointers all consist of a 1 byte cluster
;  count and a 4 byte cluster number.  WARNING: Offsets through ff_dirpos
;  MUST match the corresponding fb_* offsets!
;Following offsets are used in all FIB's

$$$=!0
BLK ff_magic   , 4t	;Magic number
BLK ff_label   , 4t	;FIB block label ("FIB ")
BLK ff_self    , 4t	;"Number" of this block
BLK ff_floor   , 4t	;Cluster number for first file pointer in this
			;  block
BLK ff_roof    , 4t	;Cluster number for first file pointer above this
			;  block
BLK ff_fpofs   , 1t	;Offset of first pointer in this block
BLK            , 3t	;Not used
BLK ff_next    , 4t	;Cluster for next FIB for file
BLK ff_fxpnt   , 0t	;First file pointer in extended FIBs
ff_NXPNT=!{512t-ff_fxpnt}/5 ;Number of pointers in extended FIBs

;Following offsets are only used in the base FIB

BLK ff_filename, 16t	;File name (If first 4 bytes are 0, the next 4 bytes
			;  contain offset of exec buffer containing file name)
BLK ff_filedos , 16t	;Short file name (DOS 8x3 name)
BLK ff_size    , 4t	;Length of file in bytes
BLK ff_mxsz    , 4t	;Maximum length amount written
BLK ff_alloc   , 4t	;Number of clusters allocated
BLK ff_dirpos  , 4t	;Position of entry in directory
BLK ff_dirfib  , 4t	;Cluster number for directory FIB
BLK ff_attrib  , 1t	;Attribute byte
BLK ff_status  , 1t	;Status bits
BLK ff_dirsize , 1t	;Number of directory slots used - 1
BLK            , 1t	;No used
BLK ff_grpsize , 4t	;Group size for file
BLK ff_time    , 2t	;Modification time (WARNING: time and date must be in
BLK ff_date    , 2t	;Modification date   this order!)
BLK ff_lock    , 4t	;Offset of first QEL in lock list
BLK ff_f1pnt   , 0t	;First file pointer in base FIB
ff_N1PNT=!{512t-ff_f1pnt}/5 ;Number of pointers in base FIB

;Define bits for ff_status

FS$MODIFIED=!40h	;File has been modified
FS$DATESET =!20h	;Date/time value has been set

;Define offsets in the file name block

$$$=!0
BLK fn_name   , 8t	;Short name (ASCII)
BLK fn_ext    , 3t	;Short extension (ASCII)
BLK fn_longlen, 1t	;Length of long name (characters)
BLK fn_long   , 0t	;Long name (Unicode)

;Define offsets in the file record lock list.  These are allocated in QEL's

$$$=!0
BLK fl_next , 4		;Offset of next block in lock list
BLK fl_1st  , 10t	;First entry in lock block

;Define offsets in each lock entry

$$$=!0
BLK fle_dcb   , 4	;Handle lock was created under
BLK fle_offset, 4	;Offset in file of beginning of locked region
BLK fle_size  , 4	;Size of locked region
BLK fle_pda   , 2	;Process slot number for process requesting lock
BLK fle_psp   , 2	;PSP offset for V86-mode process (zero if none)
fle_SIZE=!$$$

	.TITLE	IPSSRV - Internet general purpose server for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\AMAC\STDIO.PAR
	.INCLUD	XOSINC:\AMAC\PROCARG.PAR
	.INCLUD	XOSINC:\AMAC\CTYPE.PAR
	.INCLUD	XOSINC:\AMAC\XOS.PAR
	.INCLUD	XOSINC:\AMAC\XOSERR.PAR
	.INCLUD	XOSINC:\AMAC\XOSNET.PAR
	.INCLUD	XOSINC:\AMAC\XOSTIME.PAR
	.INCLUD	IPSSRV.PAR

	.STDSEGS

;This program is the general purpose IP server.  It contains the routines to
;  implement the server functions for the following IP protocols:
;	TCP echo
;	TCP data sink
;	TCP data generator
;	UDP echo 
;	UDP data sink
;	UDP date and time server
;	Domain Name System server
;  It is initialized as a symbiont with the following command:
;	SYMBIONT IPSSRV keyword1=value1 keyword2=value2 ...
;	  Where the valid keywords are:
;		TCPDEV    = Name of the TCP device to use for network
;			      communications (required if any TCP functions
;			      specified)
;		TCPCON    = Maximum number of TCP connections (default = 5)
;		TCPECHON  = Number of TCP echo opens to queue (default = 0)
;		TCPECHOP  = Port number for TCP echo server
;		TCPSINKN  = Number of TCP data sink opens to queue (default = 0)
;		TCPSINKP  = Port number for TCP data sink server
;		TCPGENN   = Number of TCP data generator opens to queue (default
;			      = 0)
;		TCPGENP   = Port number for TCP data generator server
;		UDPDEV    = Name of the UDP device to use for network
;			      communications (required if any UDP functions
;			      specified)
;		UDPECHON  = Number of UDP echo inputs to queue (default = 0)
;		UDPECHOP  = Port number for UDP echo server
;		UDPXECHON = Number of UDP extended echo inputs to queue (default
;			      = 0)
;		UDPXECHOP = Port number for UDP extended echo server
;		UDPXECHOD = Data value for the echo packet (32 bit numeric
;			      value)
;		UDPSINKN  = Number of UDP data sink inputs to queue (default = 0)
;		UDPSINKP  = Port number for UDP data sink server
;		UDPTIMEN  = Number of UDP date and time inputs to queue (default
;			      = 0)
;		UDPTIMEP  = Port number for UDP time server
;		UDPDNSN   = Number of UDP Domain Name System inputs to queue
;			      (default = 0)
;		UDPDNSP   = Port number for UDP Domain Name server
;		LOGLEVEL  = Log level:
;				0 = No local logging (default)
;				1 = Log major events
;				2 = Log all network messages
;		LOGFILE   = Log file name (default is to use DH_STDERR)
.PAGE
	.PSECT	_ODATA_p

argmsect:.LONG	0

kwtcpdev:   .ASCIZ "TCPDEV"
kwtcpcon:   .ASCIZ "TCPCON"
kwtcpechon: .ASCIZ "TCPECHON"
kwtcpechop: .ASCIZ "TCPECHOP"
kwtcpsinkn: .ASCIZ "TCPSINKN"
kwtcpsinkp: .ASCIZ "TCPSINKP"
kwtcpgenn:  .ASCIZ "TCPGENN"
kwtcpgenp:  .ASCIZ "TCPGENP"
kwudpdev:   .ASCIZ "UDPDEV"
kwudpechon: .ASCIZ "UDPECHON"
kwudpechop: .ASCIZ "UDPECHOP"
kwudpxechon:.ASCIZ "UDPXECHON"
kwudpxechop:.ASCIZ "UDPXECHOP"
kwudpxechod:.ASCIZ "UDPXECHOD"
kwudpsinkn: .ASCIZ "UDPSINKN"
kwudpsinkp: .ASCIZ "UDPSINKP"
kwudptimen: .ASCIZ "UDPTIMEN"
kwudptimep: .ASCIZ "UDPTIMEP"
kwudpdnsn:  .ASCIZ "UDPDNSN"
kwudpdnsp:  .ASCIZ "UDPDNSP"
kwloglevel: .ASCIZ "LOGLEVEL"
kwlogfile:  .ASCIZ "LOGFILE"

keyword:.LONG	kwtcpdev   , ASF$VALREQ|ASF$LSVAL, 0, fnctcpdev   , 0
	.LONG	kwtcpcon   , ASF$VALREQ|ASF$NVAL , 0, fnctcpcon   , 0
	.LONG	kwtcpechon , ASF$VALREQ|ASF$NVAL , 0, fnctcpechon , 0
	.LONG	kwtcpechop , ASF$VALREQ|ASF$NVAL , 0, fnctcpechop , 0
	.LONG	kwtcpsinkn , ASF$VALREQ|ASF$NVAL , 0, fnctcpsinkn , 0
	.LONG	kwtcpsinkp , ASF$VALREQ|ASF$NVAL , 0, fnctcpsinkp , 0
	.LONG	kwtcpgenn  , ASF$VALREQ|ASF$NVAL , 0, fnctcpgenn  , 0
	.LONG	kwtcpgenp  , ASF$VALREQ|ASF$NVAL , 0, fnctcpgenp  , 0
	.LONG	kwudpdev   , ASF$VALREQ|ASF$LSVAL, 0, fncudpdev   , 0
	.LONG	kwudpechon , ASF$VALREQ|ASF$NVAL , 0, fncudpechon , 0
	.LONG	kwudpechop , ASF$VALREQ|ASF$NVAL , 0, fncudpechop , 0
	.LONG	kwudpxechon, ASF$VALREQ|ASF$NVAL , 0, fncudpxechon, 0
	.LONG	kwudpxechop, ASF$VALREQ|ASF$NVAL , 0, fncudpxechop, 0
	.LONG	kwudpxechod, ASF$VALREQ|ASF$NVAL , 0, fncudpxechod, 0
	.LONG	kwudpsinkn , ASF$VALREQ|ASF$NVAL , 0, fncudpsinkn , 0
	.LONG	kwudpsinkp , ASF$VALREQ|ASF$NVAL , 0, fncudpsinkp , 0
	.LONG	kwudptimen , ASF$VALREQ|ASF$NVAL , 0, fncudptimen , 0
	.LONG	kwudptimep , ASF$VALREQ|ASF$NVAL , 0, fncudptimep , 0
	.LONG	kwudpdnsn  , ASF$VALREQ|ASF$NVAL , 0, fncudpdnsn  , 0
	.LONG	kwudpdnsp  , ASF$VALREQ|ASF$NVAL , 0, fncudpdnsp  , 0
	.LONG	kwloglevel , ASF$VALREQ|ASF$NVAL , 0, fncloglevel , 0
	.LONG	kwlogfile  , ASF$VALREQ|ASF$LSVAL, 0, fnclogfile  , 0
	.LONG	0

	.SBTTL	Start of program

	.PSECT	_OTEXT_p

mainalt::
	PUSHL	DS			;Change our process name
	PUSHL	#ourname
	CALLF	svcSysSetPName#
	MOVL	ESI, 4.B[ESP]		;Get offset of argument msect
	MOVL	argmsect, ESI
	PUSHL	#reqname
	PUSHL	ESI
	CALL	getreqname#		;Process requestor PID argument
	ADDL	ESP, #8.B
	MOVL	EBX, #badreqmsg
	TESTL	EAX, EAX		;Error?
	JE	gfail1			;Yes
	MOVL	argpntr, EAX		;No - store argument offset for procarg
	PUSHL	#0.B			;No default extension for indirect file
	PUSHL	#0.B			;No next line function
	PUSHL	#argerror		;Error function
	PUSHL	#0.B			;Function called for non-keyword args
	PUSHL	#keyword		;Offset of keyword table
	PUSHL	#0.B			;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#argpntr		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	PUSHL	DS			;Give up the argument data
	PUSHL	argmsect
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange#
	CMPB	logname, #0		;Have a log file specified?
	JE	2$.S			;No - go on
	PUSHL	#O$TRUNCA|O$CREATE|O$OUT ;Yes - open the log file
	PUSHL	DS
	PUSHL	#logname
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen#
	MOVL	loghndl, EAX
	TESTL	EAX, EAX
	MOVL	EBX, #nologmsg
	JS	gfail1
2$:	MOVL	EBX, #sivfmsg
	CMPL	firsttcb, #0.B		;Have any TCP devices?
	JE	16$			;No
	PUSHL	#VECT_TCPOPEN.B		;Yes - set the TCP open done vector
	PUSHL	#84h+{VT_XOSS<8t}
	PUSHL	CS
	PUSHL	#tcpopendone
	CALLF	svcSchSetVector#
	TESTL	EAX, EAX
	JS	4$.S
	PUSHL	#VECT_TCPINPUT.B	;Set the TCP input done vector
	PUSHL	#84h+{VT_XOSS<8t}
	PUSHL	CS
	PUSHL	#tcpoutputdone
	CALLF	svcSchSetVector#
	TESTL	EAX, EAX
	JS	4$.S
	PUSHL	#VECT_TCPOUTPUT.B	;Set the TCP output done vector
	PUSHL	#84h+{VT_XOSS<8t}
	PUSHL	CS
	PUSHL	#tcpoutputdone
	CALLF	svcSchSetVector#
	TESTL	EAX, EAX
4$:	JS	gfail1
	MOVL	EDI, firsttcb		;Point to first TDB
6$:	CMPL	tdb_gennum.B[EDI], #0.B	;Want the data generator server?
	JE	8$.S			;No
	CALL	tcpgensetup#		;Yes - set it up
8$:	CMPL	tdb_sinknum.B[EDI], #0.B ;Want the data sink server?
	JE	10$.S			;No
	CALL	tcpsinksetup#		;Yes - set it up
10$:	CMPL	tdb_timenum.B[EDI], #0.B ;Want the date/time server?
	JE	12$.S			;No
	CALL	tcptimesetup#		;Yes - set it up
12$:	CMPL	tdb_echonum.B[EDI], #0.B ;Want the echo server?
	JE	14$.S			;No
	CALL	tcpechosetup#		;Yes - set it up
14$:	MOVL	EDI, [EDI]		;Advance to next TDB
	TESTL	EDI, EDI
	JNE	6$.S			;Continue if more to set up here
16$:	CMPL	firstucb, #0.B		;Have any UDP devices?
	JE	28$.S			;No
	PUSHL	#VECT_UDPINPUT.B	;Yes - set the UDP input done vector
	PUSHL	#84h+{VT_XOSS<8t}
	PUSHL	CS
	PUSHL	#udpinputdone
	CALLF	svcSchSetVector#
	TESTL	EAX, EAX
	JS	4$.S
	PUSHL	#VECT_UDPOUTPUT.B	;Set the UDP output done vector
	PUSHL	#84h+{VT_XOSS<8t}
	PUSHL	CS
	PUSHL	#udpoutputdone
	CALLF	svcSchSetVector#
	TESTL	EAX, EAX
	JS	4$.S
	MOVL	EDI, firstucb		;Point to first UDB
18$:	CMPL	ucb_sinknum.B[EDI], #0.B ;Want the data sink server?
	JE	20$.S			;No
	CALL	udpsinksetup#		;Yes - set it up
20$:	CMPL	ucb_timenum.B[EDI], #0.B ;Want the date/time server?
	JE	22$.S			;No
	CALL	udptimesetup#		;Yes - set it up
22$:	CMPL	ucb_echonum.B[EDI], #0.B ;Want the echo server?
	JE	24$.S			;No
	CALL	udpechosetup#		;Yes - set it up
24$:	CMPL	ucb_xechonum.B[EDI], #0.B ;Want the extended echo server?
	JE	26$.S			;No
	CALL	udpxechosetup#		;Yes - set it up
26$:	MOVL	EDI, [EDI]		;Advance to next TDB
	TESTL	EDI, EDI
	JNE	18$.S			;Continue if more to set up here
28$:	MOVL	EDI, #finalmsg		;Send the final response message
	MOVL	ECX, #finalsz
	CALL	response
	PUSHL	CS			;Set up arguments to give up the
	PUSHL	#CODEBASE		;  once-only code (the actual call
	PUSHL	#0.B			;  is done at ready since this area
	PUSHL	#mainalt-CODEBASE	;  will be given up!)
	JMP	ready
.PAGE
;Here for failure during initialization of a particular server - message
;  generated is of the format:
;	? IPSSRV: Error initializing xxxx server for _DDDD:
;	          message text line
;	          {ECODE} error text
;	? IPSSRV: Terminating
;  where:
;	c{EAX} = Error code (2nd line is not generated if 0)
;	c{EBX} = Offset of server name string
;	c{EDX} = Offset of message text string (may be 0)
;	c{EDI} = Offset of TCB or UCB

sfail::	PUSHL	EAX			;Save the error code
	PUSHL	EDX
	ADDL	EDI, #tdb_name.B
	PUSHL	EDI
	PUSHL	EBX
	PUSHL	#ffmt1
	MOVL	EDI, #msgbfr
	PUSHL	EDI
	CALL	sprintf#
	ADDL	ESP, #16t.B
	JMP	2$.S

;Here for general failure during initialization - message generated is of the
;  format:
;	? IPSSRV: first message text line
;	          second message text line
;	          {ECODE} error text
;	? IPSSRV: Terminating
;  where:
;	c{EAX} = Error code (2nd line is not generated if 0)
;	c{EBX} = Offset of first message text string
;	c{EDX} = Offset of second message text string (may be 0)

gfailz:	CLRL	EAX
gfail1:	CLRL	EDX
gfail2:	PUSHL	EAX			;Save the error code
	PUSHL	EDX			;Save offset of second message string
	MOVL	EDI, #msgbfr
	PUSHL	EBX
	PUSHL	#ffmt2
	PUSHL	EDI
	CALL	sprintf#
	ADDL	ESP, #12t.B
2$:	ADDL	EDI, EAX
	POPL	EDX			;Do we have a second message string?
	TESTL	EDX, EDX
	JE	4$.S			;No
	PUSHL	EDX			;Yes - output it
	PUSHL	#ffmt3
	PUSHL	EDI
	CALL	sprintf#
	ADDL	ESP, #12t.B
	ADDL	EDI, EAX
4$:	POPL	EAX			;Restore error code
	TESTL	EAX, EAX		;Do we have an error code?
	JE	6$.S			;No
	SUBL	ESP, #100t.B		;Yes - allocate a buffer
	MOVL	ESI, ESP
	PUSHL	EAX			;Get error message text
	PUSHL	#3.B
	PUSHL	DS
	PUSHL	ESI
	CALLF	svcSysErrMsg#
	PUSHL	ESI
	PUSHL	#ffmt3
	PUSHL	EDI
	CALL	sprintf#
	ADDL	EDI, EAX
6$:	MOVL	ECX, EDI
	MOVL	EDI, #msgbfr
	SUBL	ECX, EDI
	CALL	response
	MOVL	EDI, #ffinal
	MOVL	ECX, #FFINSZ
	CALL	response
	PUSHL	#1.B
	CALLF	svcSchExit#
.PAGE
	.SBTTL	ireport - Subroutine to report server initialized

;Subroutine to report that a server is initialized
;	c{EBX} = Offset of name string
;	CALL	ireport

ireport::
	CMPB	[EBX], #'a'		;Is the first letter lower case?
	JB	4$.S			;No
	ADDB	[EBX], #'A'-'a'		;Yes - change to upper case
4$:	PUSHL	EDI
	ADDL	EDI, #tdb_name.B
	PUSHL	EDI
	PUSHL	EBX
	PUSHL	#ifmt
	MOVL	EDI, #msgbfr
	PUSHL	EDI
	CALL	sprintf#
	ADDL	ESP, #16t.B
	LEAL	ECX, 1.B[EAX]
	MOVL	EDI, #msgbfr
	CALL	response	
	POPL	EDI
	RET
.PAGE
	.SBTTL	fnctcpdev - Function to process TCPDEV keyword

;Function to process the TCPDEV keyword - this specifies the name of the TCP
;  device

fnctcpdev:
	PUSHL	ESI
	PUSHL	EDI
	MOVL	ECX, #tdb_SIZE		;Allocate a TCB
	CALL	getmem
	MOVL	EAX, lasttcb
	MOVL	[EAX], ESI
	MOVL	lasttcb, ESI
	MOVL	tdb_genport.B[ESI], #TCPP_CHARGEN ;Initialize the port numbers
	MOVL	tdb_sinkport.B[ESI], #TCPP_DISCARD
	MOVL	tdb_timeport.B[ESI], #TCPP_TIME
	MOVL	tdb_echoport.B[ESI], #TCPP_ECHO
	LEAL	EAX, tdb_name.B[ESI]	;Get the device name
	CALL	copydev
	PUSHL	#O$PHYS			;Check the TCP device to make sure it
	PUSHL	DS			;  really is a TCP device
	PUSHL	#namebfr
	PUSHL	DS
	PUSHL	#openparms
	CALLF	svcIoDevParm#
	MOVL	EBX, #tcperrmsg
	TESTL	EAX, EAX
	JS	gfail1
	MOVL	EBX, #nottcpmsg
	CMPL	devclass+0, #'TCP'	;Is this really a TCP device?
	JNE	gfailz			;No
	MOVB	tdb_name+0.B[ESI], #'_'	;Yes - fix up the name
	MOVZWL	EAX, phynamel
	MOVL	tdb_name.B[EDI+EAX], #'*::' ;Indicate want passive open
	JMP	rtn1p2

	.SBTTL	fncudpdev - Function to process the UDPDEV keyword

;Function to process the UDPDEV keyword - this specifies the name of the UDP
;  device

fncudpdev:
	PUSHL	ESI
	PUSHL	EDI
	MOVL	ECX, #ucb_SIZE		;Allocate a UCB
	CALL	getmem
	JC	gfail1
	MOVL	EAX, lastucb
	MOVL	[EAX], ESI
	MOVL	lastucb, ESI
	MOVL	ucb_sinkport.B[ESI], #UDPP_DISCARD ;Initialize the port numbers
	MOVL	ucb_timeport.B[ESI], #UDPP_TIME
	MOVL	ucb_echoport.B[ESI], #UDPP_ECHO
	MOVL	ucb_xechoport.B[ESI], #UDPP_XECHO
	MOVL	ucb_dnsport.B[ESI], #UDPP_DOMAIN
	LEAL	EAX, ucb_name.B[ESI]	;Get the device name
	CALL	copydev
	PUSHL	#O$IN|O$OUT.B		;Open the UDP device and check to make
	PUSHL	DS			;  sure it really is a UDP device
	PUSHL	#namebfr
	PUSHL	DS
	PUSHL	#openparms
	CALLF	svcIoDevParm#
	MOVL	EBX, #udperrmsg
	TESTL	EAX, EAX
	JS	gfail1
	MOVL	EBX, #notudpmsg
	CMPL	devclass+0, #'UDP'	;Is this really a UDP device?
	JNE	gfailz			;No
	MOVB	ucb_name+0.B[ESI], #'_'	;Yes - fix up the name
rtn1p2:	POPL	EDI
	JMP	rtn1p1.S
.PAGE
	.SBTTL	fnclogfile - Function to process the LOGFILE keyword

;Function to process the LOGFILE keyword - this specifies the logging file

fnclogfile:
	PUSHL	EDI
	MOVL	EDI, #logname
	MOVL	ECX, #128t		;Get maximum length
	HLT
.PAGE
	.SBTTL	fnctcpcon - Function to process TCPCON keyword

;Function to process the TCPCON keyword - this specifies the maximum number of
;  TCP connections allowed

fnctcpcon:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_connum.B[ESI], EAX
	JMP	rtnone.S

	.SBTTL	fnctcpechop - Function to process the TCPECHON keyword

;Function to process the TCPECHON keyword - this specifies the number of opens
;  to queue for the TCP echo server

fnctcpechon:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_echonum.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fnctcpechp - Function to process the TCPECHOP keyword

;Function to process the TCPECHOP keyword - this specifies the port number for
;  the TCP echo server

fnctcpechop:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_echoport.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fnctcpsinkn - Function to process the TCPSINKN keyword

;Function to process the TCPSINKN keyword - this specifies the number of opens
;  to queue for the TCP data sink server

fnctcpsinkn:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_sinknum.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fnctcpsinkp - Function to process the TCPSINKP keyword

;Function to process the TCPSINKP keyword - this specifies the port number for
;  the TCP data sink server

fnctcpsinkp:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_sinkport.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fnctcpgenn - Function to process the TCPGENN keyword

;Function to process the TCPGENN keyword - this specifies the number of opens
;  to queue for the TCP data generator server

fnctcpgenn:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_gennum.B[ESI], EAX
rtn1p1:	POPL	ESI
rtnone:	MOVL	EAX, #1
	RET

	.SBTTL	fnctcpgenp - Function to process the TCPGENP keyword

;Function to process the TCPGENP keyword - this specifies the port number for
;  the TCP data generator server

fnctcpgenp:
	PUSHL	ESI
	CALL	gettdb
	MOVL	EAX, 8.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	tdb_genport.B[ESI], EAX
	JMP	rtn1p1.S
.PAGE
	.SBTTL	fncudpechon - Function to process the UDPECHON keyword

;Function to process the UDPECHON keyword - this specifies the number of inputs
;  to queue for the UDP echo server

fncudpechon:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_echonum.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fncudpechop - Function to process the UDPECHOP keyword

;Function to process the UDPECHOP keyword - this specifies the port number for
;  the UDP echo server

fncudpechop:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_echoport.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fncudpxechon - Function to process the UDPXECHON keyword

;Function to process the UDPXECHON keyword - this specifies the number of inputs
;  to queue for the UDP extended echo server

fncudpxechon:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_xechonum.B[ESI], EAX
	JMP	rtn1p1.S

	.SBTTL	fncudpxechop - Function to process the UDPXECHOP keyword

;Function to process the UDPXECHOP keyword - this specifies the port number for
;  the UDP extended echo server

fncudpxechop:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_xechoport.B[ESI], EAX
	JMP	rtn1p1.S

;Function to process the UDPXECHOD keyword - this specifies the data value used
;  by the UDP extended echo server

fncudpxechod:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_xechodata.B[ESI], EAX
	JMP	rtn1p1.S
.PAGE
	.SBTTL	fncudpsinkn - Function to process the UDPSINKN keyword

;Function to process the UDPSINKN keyword - this specifies the number of inputs
;  to queue for the UDP data sink server

fncudpsinkn:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_sinknum.B[ESI], EAX
	JMP	4$.S

	.SBTTL	fncudpsinkp - Function to process the UDPSINKP keyword

;Function to process the UDPSINKP keyword - this specifies the port number for
;  the UDP data sink server

fncudpsinkp:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_sinkport.B[ESI], EAX
	JMP	4$.S

	.SBTTL	fncudptimen - Function to process the UDPTIMEN keyword

;Function to process the UDPTIMEN keyword - this specifies the number of inputs
;  to queue for the UDP time of day server

fncudptimen:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_timenum.B[ESI], EAX
	JMP	4$.S

	.SBTTL	fncudptimep - Function to process the UDPTIMEP keyword

;Function to process the UDPTIMEP keyword - this specifies the port number for
;  the UDP time of day server

fncudptimep:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_timeport.B[ESI], EAX
4$:	POPL	ESI
6$:	MOVL	EAX, #1
	RET

	.SBTTL	fncudpdnsn - Function to process the UDPDNSN keyword

;Function to process the UDPDNSN keyword - this specifies the number of inputs
;  to queue for the UDP domain name system server

fncudpdnsn:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_dnsnum.B[ESI], EAX
	JMP	4$.S

	.SBTTL	fncudpdnsp - Function to process the UDPDNSP keyword

;Function to process the UDPDNSP keyword - this specifies the port number for
;  the UDP domain name system server

fncudpdnsp:
	PUSHL	ESI
	CALL	getudb
	MOVL	EAX, 8t.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	ucb_dnsport.B[ESI], EAX
	JMP	4$.S

	.SBTTL	fncloglevel - Function to process the LOGLEVEL keyword

;Function to process the LOGLEVEL keyword - this specifies the number logging
;  level

fncloglevel:
	MOVL	EAX, 4.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	loglevel, EAX
	JMP	6$.S
.PAGE
copydev:MOVL	phynamep, EAX
	MOVL	ECX, #18t		;Get maximum length
	PUSHL	ESI
	MOVL	ESI, 20t.B[ESP]		;Get offset of name to copy
	MOVL	ESI, argdata_value.B[ESI]
	MOVL	EDI, #namebfr
	PUSHL	DS
	POPL	ES
	CLD
	MOVB	AH, #0
2$:	LODSB	[ESI]			;Get character
	CMPB	AL, #0
	JE	6$.S
	STOSB	[EDI]			;Store character
	CMPB	AL, #':'
	JNE	4$.S
	MOVB	AH, #1
4$:	LOOPNE	ECX, 2$			;Loop if not end and room for more
	MOVL	EBX, #toolngmsg
	JMP	gfail1

6$:	CMPB	AH, #0
	JNE	8$.S
	MOVB	AL, #':'
	STOSB	[EDI]
8$:	MOVB	[EDI], #0
	POPL	ESI
	RET				;Return with Z clear
.PAGE
;Subroutine to create a UDB and to open the UDP device
;	c{EAX} = Port number for the device
;	c{EDI} = Offset of the UCB
;	CALL	makeudb
;	C:clr = Normal
;	  c{ESI} = Offset of the UDB
;	C:set = Error
;	  c{EAX} = Error code
;	  c{EDX} = Offset of message string

makeudb::
	MOVL	udpoport, EAX
	PUSHL	#O$IN|O$OUT.B
	PUSHL	DS
	LEAL	EAX, ucb_name.B[EDI]
	PUSHL	EAX
	PUSHL	DS
	PUSHL	#udpoparms
	CALLF	svcIoOpen#
	TESTL	EAX, EAX
	JS	4$.S			;If error
	PUSHL	EAX			;OK - save the handle
	MOVL	ECX, #udb_SIZE
	CALL	getmem			;Get memory for the UDB
	POPL	udb_handle.B[ESI]	;Store the handle
	RET
	
;Here if error opening the UDP device

4$:	MOVL	EDX, #udperrmsg
	STC
	RET

;Subroutine to create an IDB and queue an initial UDP input
;	c{EBX} = Offset of the output done routine
;	c{EDX} = Offset of the input available routine
;	c{ECX} = Size of the IDB
;	c{EDI} = Offset of the UDB
;	CALL	makeidb
;	C:clr = Normal
;	  c{ESI} = Offset of the IDB
;	C:set = Error
;	  c{EAX} = Error code
;	  c{EDX} = Offset of message string

makeidb::
	PUSHL	EBX
	PUSHL	EDX
	PUSHL	ECX
	CALL	getmem			;Allocate memory for the IDB
	POPL	ECX
	ADDL	ESI, #idb_mSIZE.B	;Point to "start" of block
	POPL	idb_inpdone[ESI]	;Store input done offset
	POPL	idb_outdone[ESI]	;Store output done offset
	MOVL	idb_udb.B[ESI], EDI	;Store offset of the UDB in the IDB
	MOVL	EAX, udb_idb.B[EDI]	;Link the IDB into the UDB's list of
	MOVL	[ESI], EAX		;  IDBs
	MOVL	udb_idb.B[EDI], ESI

;Set up the input QAB

	MOVL	EAX, udb_handle.B[EDI]	;Store handle in both QABs
	MOVL	idb_inpqab+qab_handle.B[ESI], EAX
	MOVL	idb_outqab+qab_handle.B[ESI], EAX
	MOVW	idb_inpqab+qab_func.B[ESI], #QFNC_INBLOCK
	MOVW	idb_inpqab+qab_vector.B[ESI], #VECT_UDPINPUT
	SUBL	ECX, #idb_buffer+idb_mSIZE
	MOVL	idb_inpqab+qab_count.B[ESI], ECX
	LEAL	EAX, idb_buffer.B[ESI]
	MOVL	idb_inpqab+qab_buffer1+0.B[ESI], EAX
	MOVL	idb_inpqab+qab_buffer1+4.B[ESI], DS
	MOVL	idb_outqab+qab_buffer1+0.B[ESI], EAX
	MOVL	idb_outqab+qab_buffer1+4.B[ESI], DS
	LEAL	EAX, idb_inpparms.B[ESI]
	MOVL	idb_inpqab+qab_parm+0.B[ESI], EAX
	MOVL	idb_inpqab+qab_parm+4.B[ESI], DS

;Set up the input parameter list

	MOVL	idb_inpparms+0.B[ESI], #PAR$GET|REP_HEXV+{4<8}+{IOPAR_NETRMTNETAR<16t}
	MOVL	idb_inpparms+8.B[ESI], #PAR$GET|REP_HEXV+{4<8}+{IOPAR_NETRMTPORTR<16t}

;Set up the output QAB

	MOVW	idb_outqab+qab_func.B[ESI], #QFNC_OUTBLOCK
	MOVW	idb_outqab+qab_vector.B[ESI], #VECT_UDPOUTPUT
	LEAL	EAX, idb_outparms.B[ESI]
	MOVL	idb_outqab+qab_parm+0.B[ESI], EAX
	MOVL	idb_outqab+qab_parm+4.B[ESI], DS

;Set up the output parameter list

	MOVL	idb_outparms+0t.B[ESI], #PAR$SET|REP_HEXV+{4<8}+{IOPAR_NETRMTNETAS<16t}
	MOVL	idb_outparms+8t.B[ESI], #PAR$SET|REP_HEXV+{4<8}+{IOPAR_NETRMTPORTS<16t}
	MOVL	idb_outparms+16t.B[ESI], #PAR$SET|REP_HEXV+{4<8}+{IOPAR_TIMEOUT<16t}
	MOVL	idb_outparms+20t.B[ESI], #XT_SECOND*2

	PUSHL	DS
	LEAL	EAX, idb_inpqab.B[ESI]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX
	JS	8$.S
	RET

;Here if cannot queue the initial UDP input

8$:	MOVL	EDX, #cnquimsg
	STC
ret004:	RET
.PAGE
;Function called by procarg on errors

argerror:
	MOVL	EBX, 4t.B[ESP]		;Get offset of first message line
	MOVL	EDX, 8t.B[ESP]		;Get offset of second message line
	CLRL	EAX			;No error code
	JMP	gfail2			;Go fail
.PAGE
;Subroutine to get offset of current TDB when processing command arguments

gettdb:	MOVL	ESI, lasttcb		;Get offset of current TDB
	CMPL	ESI, #firsttcb		;Is there one?
	JNE	ret004.S		;Yes - return with it
	MOVL	EBX, #notcpmsg
	JMP	4$.S

;Subroutine to get offset of current UDB when processing command arguments

getudb:	MOVL	ESI, lastucb		;Get offset of current UDB
	CMPL	ESI, #firstucb		;Is there one?
	JNE	ret004.S		;Yes - return with it
	MOVL	EBX, #noudpmsg
4$:	JMP	gfailz
.PAGE
;Subroutine to allocate memory
;	c{ECX} = Amount of memory needed
;	CALL	getmem
;	c{ESI} = Offset of memory obtained

getmem:	PUSHL	ECX			;Get the memory
	CALL	sbrk#
	POPL	ECX
	TESTL	EAX, EAX		;Did it work?
	JE	4$.S			;No
	MOVL	ESI, EAX		;Yes - get offset in right register
	RET

;Here if error

4$:	MOVL	EAX, errno#		;Get error code
	MOVL	EBX, #nomemmsg		;Get offset of message
	JMP	gfail1
.PAGE
	.SBTTL	response - Subroutine to generate response message

;Subroutine to generate response message
;	c{EDI} = Offset of message
;	c{ECX} = Length of message
;	CALL	response

response:
	CMPB	reqname, #0		;Running from a terminal?
	JNE	2$.S			;No - go on
	INCL	EDI			;Yes - output message to the terminal
	PUSHL	#DH_STDERR.B
	PUSHL	DS
	PUSHL	EDI
	PUSHL	ECX
	CALLF	svcIoOutString#
	PUSHL	#DH_STDERR.B
	PUSHL	DS
	PUSHL	#crlfmsg
	PUSHL	#0.B
	CALLF	svcIoOutString#
	RET

;Here if running from a terminal - send response message to requester

2$:	MOVL	EAX, msghandle		;Is the message device open?
	TESTL	EAX, EAX
	JNE	4$.S			;Yes - us it
	PUSHL	#O$IN|O$OUT		;No - must open it now
	PUSHL	DS
	PUSHL	#msgname
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen#
	TESTL	EAX, EAX
	JS	ret010.S
	MOVL	msghandle, EAX
4$:	PUSHL	EAX
	PUSHL	DS
	PUSHL	EDI
	PUSHL	ECX
	PUSHL	DS
	pUSHL	#msgparms
	CALLF	svcIoOutBlockP#
ret010:	RET
.PAGE
	.SBTTL	Main program loop

	.PSECT	_TEXT_p

;Here with all initialization complete

ready:	CALLF	svcMemChange#		;Give up the once-only code
	PUSHL	#0.B			;Set software interrupt level to 0
	CALLF	svcSchSetLevel#	;  to allow interrupts

;CODE GOES HERE TO START SOME OPENS

mainloop:
	PUSHL	#0.B			;Wait for interrupt
	PUSHL	#0.B
	PUSHL	#-1.B
	CALLF	svcSchSuspend#
.PAGE
	.SBTTL	qtcpinput - Subroutine to queue TCP input

;Subroutine to queue TCP input
;	c{EAX} = Offset for input
;	c{ECX} = Maximum amount to input
;	c{EDI} = Offset of CDB
;	CALL	qtcpinput

qtcpinput::
	MOVW	cdb_tcpqab+qab_func.B[EDI], #QFNC_INBLOCK ;Set up the QAB
	MOVB	AL, cdb_inpint.B[EDI]
	MOVB	cdb_tcpqab+qab_vector.B[EDI], AL
	LEAL	EAX, cdb_buffer[EDI+EAX]
	MOVL	cdb_tcpqab+qab_buffer1.B[EDI], EAX
	MOVL	cdb_tcpqab+qab_count.B[EDI], ECX
	PUSHL	DS			;Queue an input
	PUSHL	EDI
	CALLF	svcIoQueue#
	TESTL	EAX, EAX
	JS	4$.S			;If error
;;;;;;;	INCL	cntopens		;OK - count it
	RET				;Thats all

;Here if error queueing input

4$:	MOVL	EBX, #qtcpimsg
	JMP	logsyslog
.PAGE
;Here if error on TCP input - all errors reported here indicate a serious
;  problem with the network connection - an ER_NCCLR error is the normal
;  indication of the other end clearing the connection

tcpinperr::
	MOVL	EAX, cdb_tcpqab+qab_error.B[EDI]
tcpinper2::
	CMPL	EAX, #ER_NCCLR		;Normal clearing?
	JE	tcpclrcon.S		;Yes - go on

	NOP				;CODE HERE TO LOG ERRORS

tcpclrcon::
	CMPB	loglevel, #1		;Should we log this?
	JB	10$.S			;No
	MOVL	EBX, #strcrx		;Yes
	CALL	logstr
	MOVL	EAX, cdb_index.B[EDI]
	MOVL	ECX, #2
	MOVB	DL, #' '
	CALL	logdecval
	CALL	logout
10$:	MOVL	cdb_tcpqab+qab_func.B[EDI], #QFNC_CLOSE ;Close the TCP device
	CLRL	EAX
	MOVL	cdb_tcpqab+qab_option.B[EDI], EAX
	MOVL	cdb_tcpqab+qab_parm.B[EDI], EAX
	MOVB	cdb_tcpqab+qab_vector.B[EDI], AL
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcIoQueue#
	CALLF	svcSchDismiss#
.PAGE
	.SBTTL	tcpopendone - Signal routine for TCP open complete

;Signal routine for TCP open complete

tcpopendone::
	PUSHAL				;Save registers
	MOVL	EDI, 64t.B[ESP]		;Get offset of the ODB

	POPAL				;Restore registers
	CALLF	svcSchDismiss#		;And dismiss
.PAGE
	.SBTTL	tcpoutputdone - Software interrupt routine for TCP output complete

;Subroutine software interrupt routine for TCP output complete - all this
;  routine does is queue another TCP input

tcpoutputdone:
	PUSHAL				;Save registers
	MOVL	EDI, 64t.B[ESP]		;Get offset of the CDB
	CALL	qtcpinput
	POPAL				;Restore registers
	CALLF	svcSchDismiss#		;And dismiss
.PAGE
	.SBTTL	udpinputdone - Software interrupt routine for UDP input complete

;Subroutine software interrupt routine for UDP output complete

udpinputdone:
	PUSHAL				;Save registers
	MOVL	ESI, 64t.B[ESP]		;Get offset of the IDB
	SUBL	ESI, #idb_inpqab.B
	CMPB	loglevel, #1		;Should we log this?
	JB	4$.S			;No
	MOVL	EBX, #strudpi		;Display initial string
	CALL	logstr
	MOVL	EAX, ESI		;Display hex address of the IDB
	MOVL	ECX, #8
	MOVB	DL, #'0'
	CALL	loghexval
	CALL	logout
4$:	CALLI	idb_inpdone.B[ESI]	;Call the output done routine
	POPAL				;Restore registers
	CALLF	svcSchDismiss#		;And dismiss
.PAGE
	.SBTTL	udpoutputdone - Software interrupt routine for UDP output complete

;Subroutine software interrupt routine for UDP output complete - all this
;  routine does is queue another UDP input

udpoutputdone:
	PUSHAL				;Save registers
	MOVL	ESI, 64t.B[ESP]		;Get offset of the IDB
	SUBL	ESI, #idb_outqab.B
	CMPB	loglevel, #1		;Should we log this?
	JB	4$.S			;No
	MOVL	EBX, #strudpo		;Display initial string
	CALL	logstr
	MOVL	EAX, ESI		;Display hex address of the IDB
	MOVL	ECX, #8
	MOVB	DL, #'0'
	CALL	loghexval
	CALL	logout
4$:	CALLI	idb_outdone.B[ESI]	;Call the output done routine
	POPAL				;Restore registers
	CALLF	svcSchDismiss#		;And dismiss
.PAGE
;	c{EBX} = Offset of initial string
;	c{EDX} = Offset of function table

logmsg::PUSHL	EDX
	CALL	logstr
	MOVL	EAX, cdb_index.B[EDI]	;Display the index
	MOVL	ECX, #2
	MOVB	DL, #' '
	CALL	logdecval
	POPL	EBX
	MOVL	EAX, cdb_buffer+0[EDI]
	MOVB	AL, AH
	MOVB	AH, #0
	RORL	EAX, #16t
	XCHGB	AL, AH
	MOVL	ECX, #5
	PUSHL	EAX
	PUSHL	EBX
	MOVB	DL, #' '
	CALL	logdecval
	MOVB	AL, #' '
	CALL	logchr
	POPL	EBX			;Restore offset of function table
	MOVZBL	EAX, cdb_buffer+0[EDI]	;Get function byte
	CMPL	EAX, -4.B[EBX]		;Is it in the table?
	JA	2$.S			;No
	LEAL	EBX, [EBX+EAX*8]	;Yes - get offset of message
	CALL	logstr			;Output it
	JMP	4$.S

;Here if function not in the table

2$:	MOVL	ECX, #7
	MOVB	DL, #' '
	CALL	logdecval
4$:	POPL	EAX
	LEAL	EBX, cdb_buffer+4[EDI]
	MOVL	ECX, #16t
	CMPL	ECX, EAX
	JB	6$.S
	MOVL	ECX, EAX
6$:	MOVB	AL, #' '
	CALL	logchr
	MOVZBL	EAX, [EBX]
	INCL	EBX
	PUSHL	EBX
	PUSHL	ECX
	MOVL	ECX, #2
	MOVB	DL, #'0'
	CALL	loghexval
	POPL	ECX
	POPL	EBX
	LOOP	ECX, 6$
	JMP	logout
.PAGE
	.SBTTL	logout - Subroutine to output a log record

;Subroutine to output a log record
;	CALL	logout

logout::MOVL	EAX, logpnt
	MOVB	[EAX], #CR
	MOVB	1.B[EAX], #LF
	SUBL	EAX, #msgbfr-2
	PUSHL	loghndl
	PUSHL	DS
	PUSHL	#msgbfr
	PUSHL	EAX
	CALLF	svcIoOutBlock#
	MOVL	logpnt, #msgbfr
	RET
.PAGE
	.SBTTL	logstr - Subroutine to put string in a log record

;Subroutine to put string in a log record
;	c{EBX} = Offset of string
;	CALL	logstr

logstr::PUSHL	EDI			;Save register we need
	PUSHL	ESI
	MOVL	EDI, logpnt		;Get log message pointer
	MOVL	ESI, EBX
2$:	LODSB	[ESI]			;Get character
	CMPB	AL, #0			;End?
	JE	4$.S			;Yes
	STOSB	[EDI]			;No - store character
	JMP	2$.S			;Continue

;Here at end of string

4$:	MOVL	logpnt, EDI		;Save log message pointer
	POPL	ESI			;Restore registers
	POPL	EDI
	RET				;Finished

;Subroutine to store single character into a log message
;	c(AL) = Character
;	CALL	logchr

logchr::PUSHL	EDI			;Save register we need
	MOVL	EDI, logpnt		;Get log message pointer
	STOSB	[EDI]			;Store character
	MOVL	logpnt, EDI		;Update pointer
	POPL	EDI
	RET
.PAGE
	.SBTTL	loghexval - Subroutine to put hex value in a log record

;Subroutine to put hex value in a log record
;	c{EAX} = Value
;	c{ECX} = Field width
;	CALL	loghexval		;Enter at loghexvalv for minimum field
;					;  width

loghexvalv::
	CLRL	ECX
loghexval::
	MOVL	radix, #16t
	JMP	2$.S

	.SBTTL	logdecval - Subroutine to put decimal value in a log record

;Subroutine to put decimal value in a log record
;	c{EAX} = Value
;	c{ECX} = Field width
;	c(DL)  = Fill character
;	c(DL)  = Fill character
;	CALL	logdecval		;Enter at logdecvalv for minimum field
;					;  width

logdecvalv::
	CLRL	ECX
logdecval::
	MOVL	radix, #10t
2$:	PUSHL	EDI			;Save register we need
	PUSHL	ESI
	MOVL	ESI, EDX		;Save fill character
	MOVL	EDI, logpnt		;Get log message pointer
	MOVL	digits, #0		;Clear digit counter
4$:	CLRL	EDX			;Get next digit
	IDIVL	radix
	PUSHL	EDX			;Save it
	INCL	digits			;Count it
	TESTL	EAX, EAX		;More?
	JNE	4$.S			;Yes - continue
	MOVL	EAX, ESI		;Get fill character
	SUBL	ECX, digits		;Calculate number of leading characters
	JLE	6$.S			;If none
	RSTOSB	[EDI]
6$:	POPL	EAX			;Get digit value
	CMPB	AL, #9
	JBE	8$.S
	ADDB	AL, #'A'-'0'-10t
8$:	ADDB	AL, #'0'		;Change to digit
	STOSB	[EDI]			;Store it
	DECL	digits			;Continue if more
	JNE	6$.S
	MOVL	logpnt, EDI		;Restore log message pointer
	POPL	ESI			;Restore registers
	POPL	EDI
	RET				;Finished
.PAGE
	.SBTTL	logsyslog - Subroutine to put message in the system log

;Subroutine to put message in the system log
;	c{EAX} = Error code
;	c{ESI} = Message
;	CALL	logsyslog

logsyslog::
	PUSHL	EDI
	MOVL	EDI, #msgbfr
	TESTL	EAX, EAX
	JE	2$.S
	PUSHL	EAX
	PUSHL	#2.B
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcSysErrMsg#
	ADDL	EDI, EAX
2$:	PUSHL	DS
	POPL	ES
	CLD
4$:	LODSB	[ESI]
	STOSB	[EDI]
	CMPB	AL, #0
	JNE	4$.S
	PUSHL	DS
	PUSHL	#logmsgbfr
	SUBL	EDI, #logmsgbfr
	DECL	EDI
	PUSHL	EDI
	CALLF	svcSysLog#
	POPL	EDI
	RET
.PAGE
	.SBTTL	Data

	.PSECT	_DATA_p

	  .MOD	4

firsttcb: .LONG  0		;Offset of first TCB
lasttcb:  .LONG  firsttcb	;Offset of last TCB

firstucb: .LONG  0		;Offset of first UCB
lastucb:  .LONG  firstucb	;Offset of last UCB

logpnt:  .LONG  msgbfr		;Log routine pointer
radix:	 .LONG	10t
digits:	 .LONG	0
loghndl: .LONG	DH_STDERR
logname: .BLKB	132t		;Log file specification
loglevel::.BYTE	0		;Logging level
prgname::.ASCIZ "IPSSRV"
strcnx:	 .ASCIZ "CON:"
strcrx:	 .ASCIZ "CLR:"
opnemsg:  .ASCIZ "Error queueing TCP open"
qtcpimsg: .ASCIZ "Error queueing TCP input"
qudpimsg: .ASCIZ "Error queueing UDP input"
sudpomsg::.ASCIZ "Error starting UDP output"
strudpi:  .ASCIZ "UDP input: "
strudpo:  .ASCIZ "UDP output: "

	  .MOD   4
msghandle:.LONG  0
namebfr:  .BLKB  16t

udpoparms:.BYTE  PAR$SET|REP_HEXV, 4t	;Parameter list used when opening
	  .WORD  IOPAR_NETLCLPORT	;  UDP devices
udpoport: .LONG  0
	  .BYTE  0

	  .MOD   4
msgparms: .BYTE  PAR$SET|REP_STR, 0FFh
	  .WORD  IOPAR_DGRMTADDRS
	  .LONG  reqname, !reqname
	  .WORD  64t, 64t
	  .BYTE  0

logmsgbfr:.BYTE  0, 0, '#', 0
	  .ASCII "IPSSRV: "
msgbfr::  .BLKB  150t
MSGBFRSIZE=!$-msgbfr

	.PSECT	_ODATA_p

	 .MOD	4
membegin:

;Following data is used during initialization only (this area is overlayed
;   when memory is allocated during operation

ourname:  .ASCIZ "IPS_Server"


ifmt:	  .ASCIZ {MT_INTRMDMSG}"IPSSRV: %s server initialized for %s"
ffmt1:    .ASCIZ {MT_INTRMDERR}"? IPSSRV: Error initializing %s server for %s"
ffmt2:    .ASCIZ {MT_INTRMDERR}"? IPSSRV: %s"
ffmt3:    .ASCIZ {CR,LF}"          %s"
ffinal:   .ASCII {MT_FINALERR}"? IPSSRV: Terminating"
FFINSZ=!$-ffinal
crlfmsg:  .BYTE  CR, LF, 0
badreqmsg:.ASCIZ "Bad requestor name"
toolngmsg:.ASCIZ "Device or file name is too long"
nottcpmsg:.ASCIZ "Device specified for TCPDEV is not a TCP device"
notudpmsg:.ASCIZ "Device specified for UDPDEV is not a UDP device"
notcpmsg: .ASCIZ "No TCP device specified"
noudpmsg: .ASCIZ "No UDP device specified"
nomemmsg: .ASCIZ "Cannot allocate memory"
nologmsg: .ASCIZ "Cannot open local log file"
sivfmsg:  .ASCIZ "Cannot initialize interrupt vector"
tcperrmsg:.ASCIZ "Cannot open TCP device"
udperrmsg:.ASCIZ "Cannot open UDP device"
cnquimsg: .ASCIZ "Cannot queue initial UDP input request"
finalmsg: .ASCIZ {MT_FINALMSG}"IPSSRV: v1.0 - Initialization complete"
finalsz=!$-finalmsg
msgname:  .ASCIZ "IPM:"
phyname:  .BLKB  12t

reqname:  .BLKB  64t		;Name of requestor
argpntr:  .LONG  0, 0

	  .MOD   4
openparms:.BYTE	 PAR$GET|REP_TEXT, 8 ;Parameters for initial check of TCP device
	  .WORD	 IOPAR_CLASS
devclass: .BLKB  8t
	  .BYTE  PAR$SET|REP_HEXV, 4
	  .WORD	 IOPAR_FILOPTN
	  .LONG  FO$XOSNAME
	  .BYTE  PAR$GET|REP_STR, 0
	  .WORD  IOPAR_FILSPEC
phynamep: .LONG  phyname
	  .LONG  !phyname
	  .WORD  12t
phynamel: .WORD  0
	  .BYTE  0

	.END

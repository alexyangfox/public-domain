	.TITLE	BOOTSRV - Internet boot server for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSNET.PAR
	.INCLUD	BOOTSRV.PAR

	.STDSEGS

;This program is the IP boot server.  It contains the routines to implement
;  the server functions for the RARP, BOOTP, and TFTP protocols.

;  It is initialized as a symbiont with the following command:
;	SYMBIONT BOOTSRV keyword1=value1 keyword2=value2 ...
;	  Where the valid keywords are:
;		RARPDATA  = File name for RARP data file (device is always
;			      SYSTEM:, extension is always .DAT), default is
;			      SYSTEM:RARP.DAT.
;		RARPDEV   = Name of network interface device for RARP.
;		BOOTPDATA = File specification for BOOTP data file, (device is
;			      always SYSTEM:, extesnsion is always .DAT),
;			      default is SYSTEM:BOOTP.DAT.
;		BOOTPDEV  = Name of UDP device for BOOTP.
;		TFTPNUM   = Maximum number of TFTP open files, default is 4.
;		TFTPDEV   = Name of UDP device for TFTP.
;		LOGLEVEL  = Log level:
;				0 = No local logging (default)
;				1 = Log major events
;				2 = Log all network messages
;		LOGFILE   = Log file specification (default is to use DH_STDERR)
;Note that this program will support any number of different devices.  Each
;  occurence of the xxxDEV command line keywords causes another device stream
;  to be created.  Each stream is set up using the most recently specfied
;  data file (RARPDATA or BOOTPDATA) or the most recently specified maximum
;  number of open files (TFTPNUM).  If no xxxDEV keywords are specified, nothing
;  will be done.  The device specified for RARPDEV must be a raw network
;  interface or SNAP level protocol device (such as NET0: or SNAP0:).  The
;  device specified for BOOTPDEV or TFTPDEV must be a UDP device (such as
;  UDP0:).  Only a single server stream of a given type should be specified
;  for each device.  This is also true when multiple copies of this program
;  are used.
.PAGE
	.PSECT	_ODATA_p

argmsect:.LONG	0

kwrarpdata: .ASCIZ "RARPDATA"
kwrarpdev:  .ASCIZ "RARPDEV"
kwbootpdata:.ASCIZ "BOOTPDATA"
kwbootpdev: .ASCIZ "BOOTPDEV"
kwtftpnum:  .ASCIZ "TFTPNUM"
kwtftpdev:  .ASCIZ "TFTPDEV"
kwloglevel: .ASCIZ "LOGLEVEL"
kwlogfile:  .ASCIZ "LOGFILE"

keyword:.LONG	kwrarpdata , ASF$VALREQ|ASF$LSVAL, 0, fncrarpdata , 0
	.LONG	kwrarpdev  , ASF$VALREQ|ASF$LSVAL, 0, fncrarpdev# , 0
	.LONG	kwbootpdata, ASF$VALREQ|ASF$LSVAL, 0, fncbootpdata, 0
	.LONG	kwbootpdev , ASF$VALREQ|ASF$LSVAL, 0, fncbootpdev#, 0
	.LONG	kwtftpnum  , ASF$VALREQ|ASF$LSVAL, 0, fnctftpnum  , 0
	.LONG	kwtftpdev  , ASF$VALREQ|ASF$LSVAL, 0, fnctftpdev# , 0
	.LONG	kwloglevel , ASF$VALREQ|ASF$NVAL , 0, fncloglevel , 0
	.LONG	kwlogfile  , ASF$VALREQ|ASF$LSVAL, 0, fnclogfile  , 0
	.LONG	0

	.SBTTL	Start of program

	.PSECT	_OTEXT_p

mainalt::
	PUSHL	DS			;Change our process name
	PUSHL	#ourname
	CALLF	svcSysSetPName#
	MOVL	ESI, 4.B[ESP]		;Get offset of argument msect
	MOVL	argmsect, ESI
	PUSHL	#reqname
	PUSHL	ESI
	CALL	getreqname#		;Process requestor PID argument
	ADDL	ESP, #8.B
	MOVL	EBX, #badpidmsg
	TESTL	EAX, EAX		;Error?
	JE	fail1			;Yes
	MOVL	argpntr, EAX		;No - store argument offset for procarg
	PUSHL	#0.B			;No default extension for indirect file
	PUSHL	#0.B			;No next line function
	PUSHL	#argerr			;Error function
	PUSHL	#0.B			;Function called for non-keyword args
	PUSHL	#keyword		;Offset of keyword table
	PUSHL	#0.B			;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#argpntr		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	PUSHL	DS			;Give up the argument data
	PUSHL	argmsect
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange#
	MOVL	EBX, #no2domsg
	MOVL	EAX, rarpcnt		;Was at least one function requested?
	ORL	EAX, bootpcnt
	ORL	EAX, tftpcnt
	JE	10$.S			;No - fail!
	CMPB	logname, #0		;Have a log file specified?
	JE	cmddone.S		;No - go on
	PUSHL	#O$TRUNCA|O$CREATE|O$OUT ;Yes - open the log file
	PUSHL	DS
	PUSHL	#logname
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen#
	MOVL	loghndl, EAX		;Store handle
	MOVL	EBX, #nologmsg
	TESTL	EAX, EAX		;Error?
10$:	JS	fail1			;Yes
					;No - fall into cmddone on next page
.PAGE
;Here with all command line processing done

cmddone:PUSHL	#0			;Give up the argument msect
	PUSHL	#0
	PUSHL	argmsect
	PUSHL	DS
	CALLF	svcMemChange#
6$:	MOVL	EDI, #finmsg1		;Send final response message
	MOVL	ECX, #finsz1
	CALL	response
	PUSHL	DS
	PUSHL	#_ODATABASE		;Give up the once-only data msect
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange#
	PUSHL	CS			;Set up arguments to give up the
	PUSHL	#_CODEBASE		;  once-only code (the actual call
	PUSHL	#0.B			;  is done at ready since this area
	PUSHL	#mainalt-_CODEBASE 	;  will be given up!)
	JMP	ready
.PAGE
;Here if have fatal error during set up
;	c{EBX} = Offset of first message string
;	c{EAX} = Offset of second message string or negative error code

fail1::	CLRL	EAX
fail2::	SUBL	ESP, #500t		;Allocate a buffer
	PUSHL	DS
	POPL	ES
	MOVL	EDI, ESP
	PUSHL	EAX			;Save second item
	MOVL	ESI, #failmsg1
	MOVL	ECX, #failsz1
	CLD
	RMOVSB	[EDI], [ESI]
	MOVL	ESI, EBX
2$:	LODSB	[ESI]
	STOSB	[EDI]
	TESTB	AL, AL
	JNE	2$.S
	DECL	EDI
	POPL	EAX
	TESTL	EAX, EAX		;Have a second message line?
	JE	8$.S			;No
	MOVL	ESI, #failmsg2		;Yes
	MOVL	ECX, #failsz2
	RMOVSB	[EDI], [ESI]
	TESTL	EAX, EAX		;Is second line a string?
	JNS	4$.S			;Yes - go on
	PUSHL	EAX			;No - its an error code - get message
	PUSHL	#3.B
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcSysErrMsg#
	ADDL	EDI, EAX
	JMP	8$.S

;Here if second line specified as a string

4$:	MOVL	ESI, EAX
6$:	LODSB	[ESI]
	STOSB	[EDI]
	TESTB	AL, AL
	JNE	6$.S
	DECL	EDI
8$:	MOVL	ESI, #failmsg3
	MOVL	ECX, #failsz3
	RMOVSB	[EDI], [ESI]
	MOVL	ECX, EDI
	SUBL	ECX, ESP
	MOVL	EDI, ESP
	CALL	response
	PUSHL	#1.B
	CALLF	svcSchExit#

;Here if can't get memory during set up

nema:	MOVL	EBX, #nemamsg
	JMP	fail1.S
.PAGE
	.SBTTL	argerr - Function called by procarg on errors

;Function called by procarg on errors

argerr:	POPL	EAX			;Discard return address
	POPL	EBX			;Get offset of first message string
	POPL	EAX			;Get offset of second message string
	JMP	fail2.S
.PAGE
	.SBTTL	fncrarpdata - Function to process RARPDATA keyword

;Function to process the RARPDATA keyword - this specifies the file containing
;  the RARP data base

fncrarpdata:
	PUSHL	EDI
	MOVL	EBX, #rarptlmsg
	MOVL	EDI, #rarpdata
	JMP	4$.S

	.SBTTL	fncbootpdata - Function to process the BOOTPDATA keyword

;Function to process the BOOTPDATA keyword - this specifies the file containing
;  the BOOTP data base

fncbootpdata:
	PUSHL	EDI
	MOVL	EBX, #btptlmsg
	MOVL	EDI, #bootpdata
4$:	CMPL	argdata_length.B[ESI], #34t.B ;Is it too long?
	JBE	strit.S			;No - continue
	JMP	fail1
.PAGE
	.SBTTL	fnctftpnum - Function to process the TFTPNUM keyword

;Function to process the TFTPNUM keyword - this specifies the number of TFTP
;  open files allowed

fnctftpnum:
	MOVL	EAX, 4.B[ESP]		;Get offset of the argument data
	MOVL	EAX, argdata_value.B[EAX] ;Get value
	TESTL	EAX, EAX		;Is it 0?
	JNE	4$.S			;No
	MOVB	AL, #4			;Yes - use default
4$:	MOVL	tftpnum, EAX		;Store value
	JMP	rtnone.S
.PAGE
	.SBTTL	fnclogfile - Function to process the LOGFILE keyword

;Function to process the LOGFILE keyword - this specifies the logging file

fnclogfile:
	PUSHL	EDI
	MOVL	EDI, #logname
	PUSHL	ESI
	MOVL	ESI, 12t.B[ESP]
	MOVL	EAX, argdata_length.B[ESI]
	ADDL	EAX, #4t.B		;Allocate enough memory to hold the
	PUSHL	EAX			;  string plus a little more to hold
	CALL	sbrk#			;  any characters we append to it
	POPL	ECX
	CMPL	EAX, #-1.B
	JE	nema			;If can't allocate the memory
	MOVL	[EDI], EAX		;OK - store offset of memory allocated
	MOVL	EDI, EAX
strit:	MOVL	ECX, argdata_length.B[ESI] ;Get length of string
	MOVL	ESI, argdata_value.B[ESI] ;Get offset of string
	PUSHL	DS
	POPL	ES
	CLD
	INCL	ECX			;Include the final null
	RMOVSB	[EDI], [ESI]		;Copy the string
	MOVL	EAX, #1
10$:	POPL	ESI
	POPL	EDI
	RET
.PAGE
	.SBTTL	fncloglevel - Function to process the LOGLEVEL keyword

;Function to process the LOGLEVEL keyword - this specifies the number logging
;  level

fncloglevel:
	MOVL	EAX, 4.B[ESP]
	MOVL	EAX, argdata_value.B[EAX]
	MOVL	loglevel, EAX
rtnone:	MOVL	EAX, #1
	RET
.PAGE
	.SBTTL	getimem - Subroutine to allocate memory during set up

;Subroutine to allocate memory during set up
;	c{EAX} = Amount needed
;	CALL	getimem
;	c{EDI} = Offset of memory obtained

getimem::
	PUSHL	EAX
	CALL	sbrk#
	POPL	EDI
	CMPL	EAX, #-1.B
	JE	4$.S
	MOVL	EDI, EAX
	RET

4$:	MOVL	EBX, #nemamsg
	JMP	fail1
.PAGE
	.SBTTL	response - Subroutine to generate response message

;Subroutine to generate response message
;	c{EDI} = Offset of message
;	c{ECX} = Length of message
;	CALL	response

response::
	CMPB	reqname, #0		;Running from a terminal?
	JNE	2$.S			;No - go on
	INCL	EDI			;Yes - output message to the terminal
	DECL	ECX
	PUSHL	#DH_STDERR.B
	PUSHL	DS
	PUSHL	EDI
	PUSHL	ECX
	CALLF	svcIoOutBlock#
	PUSHL	#DH_STDERR.B
	PUSHL	DS
	PUSHL	#crlfmsg
	PUSHL	#0.B
	CALLF	svcIoOutString#
	RET

;Here if not running from a terminal - send response message to requestor

2$:	CMPL	msgqab+qab_handle, #0.B	;Is the message device open?
	JNE	4$.S			;Yes - us it
	PUSHL	#O$IN|O$OUT		;No - must open it now
	PUSHL	DS
	PUSHL	#msgname
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen#
	TESTL	EAX, EAX
	JS	ret010.S
	MOVL	msgqab+qab_handle, EAX
4$:	MOVL	msgqab+qab_buffer1, EDI	;Store offset of message
	MOVL	msgqab+qab_count, ECX	;Store length of message
	PUSHL	DS
	PUSHL	#msgqab
	CALLF	svcIoQueue#
ret010:	RET
.PAGE
	.SBTTL	Main program loop

	.PSECT	_TEXT_p

;Here with all initialization complete

ready:	CALLF	svcMemChange#		;Give up the once-only code
	PUSHL	#0.B			;Set software interrupt level to 0
	CALLF	svcSchSetLevel#	;  to allow interrupts
mainloop:
	PUSHL	#0.B			;Wait for interrupt
	PUSHL	#0.B
	PUSHL	#-1.B
	CALLF	svcSchSuspend#
.PAGE
	.SBTTL	opendev - Subroutine to open device during command parsing

;Subroutine to open device during command parsing
;	c{ESI} = Offset of procarg argument data structure
;	c{EBX} = Offset of parameter list for open
;	CALL	opendev
;  Does not return if error

opendev::
	PUSHL	#O$IN|O$OUT		;Push arguments for the svcIoOpen
	PUSHL	DS			;  call
	PUSHL	#devname
	PUSHL	DS
	PUSHL	EBX
	MOVL	EDX, argdata_value.B[ESI] ;Get offset of name string
	MOVL	EBX, #devname
	MOVL	ECX, #8t
2$:	MOVB	AL, [EDX]		;Get name character
	CMPB	AL, #0			;End?
	JE	10$.S			;Yes
	INCL	EDX			;No
	CMPB	AL, #'a'		;Lower case?
	JB	4$.S			;No
	ADDB	AL, #'A'-'a'		;Yes - change to upper case
4$:	MOVB	[EBX], AL		;Store in buffer
	INCL	EBX
	CMPB	AL, #':'		;Colon?
	JE	8$.S			;Yes
	LOOP	ECX, 2$			;No - loop if can take more
6$:	MOVL	EAX, #ER_BDSPC		;Bad name
	JMP	14$.S

;Here with colon in name

8$:	CMPB	[EDX], #0		;Is it the last character?
	JNE	6$.S			;No - bad name
	JMP	12$.S			;Yes

;Here with end of name (no colon seen)

10$:	MOVB	[EBX], #':'		;Store colon
	INCL	EBX
12$:	MOVB	[EBX], #0		;Store 0 at end
	CALLF	svcIoOpen#		;Open the device (arguments pushed
14$:	MOVL	EBX, #opnemsg		;  above!)
	BTL	EAX, #31t		;Set C if error
	JC	fail2
	RET
.PAGE
	.SBTTL	opendata - Subroutine to open the data file

;Subroutine to open the data file
;	c{ESI} = Offset of file name string
;	CALL	opendata
;	C:set = Error
;	  c{EBX} = Offset of 1st message string
;	  c{EAX} = Error code or offset of 2nd message string
;	C:clr = Normal

opendata::
	MOVL	EBX, #dataname+7
	CLD
2$:	LODSB	[ESI]
	CMPB	AL, #0
	JE	4$.S
	MOVB	[EBX], AL
	INCL	EBX
	JMP	2$.S

4$:	MOVL	[EBX], #'.DAT'
	MOVB	4.B[EBX], #0
	PUSHL	#openstr		;Open the data file
	PUSHL	#dataname
	CALL	fopen#
	ADDL	ESP, #8t.B
	TESTL	EAX, EAX
	JNE	ret014.S
	MOVL	EBX, #codfmsg
fmtemsg:PUSHL	errno#
	PUSHL	#dataname
	PUSHL	EBX
	PUSHL	#msgbfr
	CALL	sprintf#
	ADDL	ESP, #12t.B
	POPL	EAX
	MOVL	EBX, #msgbfr
	STC
ret014:	RET
.PAGE
	.SBTTL	readdata - Subroutine to read the RARP or BOOTP data file

;Subroutine to read the RARP or BOOTP data file
;	c{EAX} = Offset of subroutine to call for each A line
;	c{EDX} = Offset of subroutine to call for each D line
;	c{ECX} = Offset of subroutine to call for each N line
;	c{EBX} = Offset of packet buffer
;	c{ESI} = Offset of name of our device
;	CALL	readdata
;	C:set = Error
;	  c{EBX} = Offset of 1st message string
;	  c{EAX} = Error code or offset of 2nd message string
;	C:clr = Normal

readdata::
	MOVL	read_afunc.B[EBP], EAX	;Save offset of the A line function
	MOVL	read_dfunc.B[EBP], EDX	;Save offset of the D line function
	MOVL	read_nfunc.B[EBP], ECX	;Save offset of the N line function
	MOVL	read_devname.B[EBP], ESI ;Save offset of our device name
	MOVL	read_buffer.B[EBP], EBX	;Save offset of the packet buffer
2$:	CALL	getline			;Read a line
4$:	MOVL	EBX, #errdfmsg
	JC	fmtemsg.S		;If error
	JE	ret014.S		;If finished
	MOVL	ESI, read_buffer.B[EBP]
	CLD
	CALL	skipws
	CMPB	AL, #'D'		;Is this a device line?
	JNE	2$.S			;No - continue
6$:	INCL	ESI			;Yes
	CALL	skipws			;Skip whitespace
	LEAL	EBX, read_name.B[EBP]
8$:	LODSB	[ESI]			;Copy the name
	CMPB	AL, #LF
	JE	9$.S
	CMPB	AL, #' '
	JE	9$.S
	CMPB	AL, #HT
	JNE	10$.S
9$:	MOVB	AL, #0
10$:	MOVB	[EBX], AL
	INCL	EBX
	CMPB	AL, #0
	JNE	8$.S
	CMPB	-2.B[EBX], #':'		;Did it end with a colon?
	JE	12$.S			;Yes
	MOVW	-1.B[EBX], #':'		;No - add one
12$:	LEAL	EAX, read_name.B[EBP]	;Compare with our device name
	PUSHL	EAX
	PUSHL	read_devname.B[EBP]
	CALL	strcmp#
	ADDL	ESP, #8t.B
	TESTL	EAX, EAX
	JNE	2$.S			;If not for this device

;Here with a D line for our interface device - process the protocol value

14$:	CALLI	read_dfunc.B[EBP]	;Call routine for the D line
	JC	rdone.S			;If error

;Now process the following A and N lines

16$:	CALL	getline			;Get a line
	JC	4$.S			;If error
	JE	rdone.S			;If finished
	CMPB	AL, #'D'		;Is this another D line?
	JE	6$			;Yes
	CMPB	AL, #'A'		;Is this an A line?
	JNE	illfmt.S		;No - error
18$:	INCL	ESI			;Yes
	CALLI	read_afunc.B[EBP]	;Call our subroutine
	JC	rdone.S			;If error
20$:	CALL	getline			;Get the next line
	JC	4$.S			;If error
	JE	rdone.S			;If done
	CMPB	AL, #'D'		;Is this another D line?
	JE	6$			;Yes
	CMPB	AL, #'A'		;Is this an A line?
	JE	18$.S			;Yes
	CMPB	AL, #'N'		;Is this an N line?
	JNE	illfmt.S		;No - error
	INCL	ESI			;Yes
	CALLI	read_nfunc.B[EBP]	;Call our subroutine
	JNC	20$.S
rdone:	RET				;Quit if error
.PAGE
	.SBTTL	getline - Subroutine to get next line from file

;	CALL	getline
;	C:set = Error
;	C:clr = Normal
;	  Z:set = EOF
;	  Z:clr = Normal
;	    c{ESI} = Offset of first non-blank character in line


getline:PUSHL	read_stream.B[EBP]	;Read a line
	PUSHL	#DATABFRSIZE
	PUSHL	read_buffer.B[EBP]
	CALL	fgets#
	ADDL	ESP, #12t.B
	TESTL	EAX, EAX
	JE	4$.S			;If error
	MOVL	ESI, read_buffer.B[EBP]
	CMPB	[ESI], #0		;Blank line?
	JE	getline.S		;Yes - ignore it
	CMPB	[ESI], #LF
	JE	getline.S

	.SBTTL	skipws - Subroutine to skip whitespace

;Subroutine to skip whitespace
;	CALL	skipws
;	Z:clr always
;	c(AL) = First non-blank character

skipws::LODSB	[ESI]
	CMPB	AL, #' '		;Skip whitespace
	JE	skipws.S
	CMPB	AL, #HT
	JE	skipws.S
	DECL	ESI
2$:	RET

;Here if have error reading from the file

4$:	CMPL	errno#, #ER_EOF.B	;Really EOF?
	JE	2$.S			;Yes - return with C clear and Z set
	STC				;No - return with C set
	RET
.PAGE
	.SBTTL	checkeol - Subroutine to check for end of line

;Subroutine to check for end of line in data file
;	c{ESI} = Pointer to next character in line buffer
;	CALL	checkeol
;	C:set = Error
;	  c{EAX} = 0
;	  c{EBX} = Offset of error message string
;	C:clr = Nornal
;	  c{EAX} = 0

checkeol::
	CALL	skipws
	CMPB	AL, #';'
	JE	6$.S
	CMPB	AL, #LF
	JE	6$.S
	CMPB	AL, #0
	JE	4$.S
illfmt::PUSHL	#dataname
	PUSHL	#illfmtmsg
	PUSHL	#msgbfr
	CALL	sprintf#
	ADDL	ESP, #12t.B
	CLRL	EAX
	MOVL	EBX, #msgbfr
	STC
4$:	RET

6$:	CLRL	EAX
	RET				;Finished
.PAGE
	.SBTTL	getaddress - Subroutine to get value of an address

;Subroutine to get value of an address specified in hex (nn-nn-...) or decimal
;  (nnn.nnn....)
;	c{ECX} = Length of address wanted in bytes
;	c{ESI} = Offset of first character
;	CALL	getaddress
;	C:set = Error
;	  c{EAX} = Error code or offset of message string
;	  c{EBX} = Offset of 2nd message string
;	C:clr = Normal
;	  c{ESI} = Offset of next character

getaddress::
	PUSHL	EBX
	CLRL	EAX			;Clear value
	LEAL	EBX, read_value.B[EBP]	;Get pointer to first value byte
	MOVL	[EBX], EAX
	MOVL	4.B[EBX], EAX
4$:	LODSB	[ESI]
	CMPB	AL, #' '		;Skip leading whitespace
	JE	4$.S
	CMPB	AL, #HT
	JE	4$.S
	MOVB	CH, #'-'		;Assume hex value
	MOVL	read_radix.B[EBP], #16t
	DECL	ESI			;Save pointer
	PUSHL	ESI			;Scan ahead to first terminator
6$:	LODSB	[ESI]
	CMPB	AL, #0
	JE	28$.S			;Bad value if find end here!
	CMPB	AL, #'-'		;Hex value?
	JE	8$.S			;Yes
	CMPB	AL, #'.'		;Decimal value?
	JNE	6$.S			;No - continue scanning
	MOVB	CH, AL			;Yes
	MOVB	read_radix.B[EBP], #10t
8$:	POPL	ESI
85$:	CLRL	EDX
9$:	LODSB	[ESI]			;Get digit
	CMPB	AL, #'0'		;Digit?
	JB	16$.S			;No
	CMPB	AL, #'9'		;Maybe
	JBE	12$.S			;Yes
	CMPB	AL, #'a'		;Lower case letter?
	JB	10$.S			;No
	ADDB	AL, #'A'-'a'		;Yes - change to upper case
10$:	CMPB	AL, #'A'		;Hex digig A - F?
	JB	16$.S			;No
	CMPB	AL, #'F'		;Mabye
	JA	16$.S			;No
	ADDB	AL, #10t-'A'
12$:	ANDL	EAX, #0Fh.B		;Get value of digit
	CMPL	EAX, read_radix.B[EBP]	;Valid digit?
	JAE	30$.S			;No
	IMULL	EDX, read_radix.B[EBP]	;Yes
	ADDL	EDX, EAX
	JMP	9$.S			;Continue

;Here with non-digit

16$:	CMPB	AL, CH			;Valid terminator?
	JE	18$.S			;Yes
	CMPB	AL, #' '		;Maybe
	JE	18$.S
	CMPB	AL, #HT
	JE	18$.S
	CMPB	AL, #';'
	JE	18$.S
	CMPB	AL, #LF
	JE	18$.S
	CMPB	AL, #0
	JNE	30$.S
18$:	MOVB	[EBX], DL		;Store value
	INCL	EBX
	CMPB	AL, CH			;End of value
	JNE	32$.S			;Yes
	DECB	CL			;No
	JNE	85$.S			;Continue if want more
	JMP	30$.S			;Fail if value too long

28$:	POPL	ESI
30$:	POPL	EBX
	JMP	illfmt

;Here at end of value

32$:	POPL	EBX
	DECL	ESI
	CLRL	EAX
	RET
.PAGE
	.SBTTL	getmem - Subroutine to allocate memory

;Subroutine to allocate memory
;	c{EAX} = Amount to allocate
;	CALL	getmem
;	C:set = Error
;	  c:{EAX} = XOS error code
;	  c:{EBX} = Offset of message string
;	C:clr = Normal
;	  c{EAX} = Offset of area allocated

getmem::PUSHL	EAX
	CALL	malloc#
	POPL	ECX
	TESTL	EAX, EAX
	JNE	4$.S
	MOVL	EBX, #camdmsg
	MOVL	EAX, errno#
	STC
4$:	RET
.PAGE
;	c{EBX} = Offset of initial string
;	c{EDX} = Offset of function table

logmsg::PUSHL	EDX
	CALL	logstr

;;;;;CODE HERE TO DISPLAY INDEX

	POPL	EBX
;;;;;;	MOVL	EAX, cdb_buffer+0[EDI]
	MOVB	AL, AH
	MOVB	AH, #0
	RORL	EAX, #16t
	XCHGB	AL, AH
	MOVL	ECX, #5
	PUSHL	EAX
	PUSHL	EBX
	MOVB	DL, #' '
	CALL	logdecval
	MOVB	AL, #' '
	CALL	logchr
	POPL	EBX			;Restore offset of function table
;;;;;;	MOVZBL	EAX, cdb_buffer+0[EDI]	;Get function byte
	CMPL	EAX, -4.B[EBX]		;Is it in the table?
	JA	2$.S			;No
	LEAL	EBX, [EBX+EAX*8]	;Yes - get offset of message
	CALL	logstr			;Output it
	JMP	4$.S

;Here if function not in the table

2$:	MOVL	ECX, #7
	MOVB	DL, #' '
	CALL	logdecval
4$:	POPL	EAX
;;;;;;	LEAL	EBX, cdb_buffer+4[EDI]
	MOVL	ECX, #16t
	CMPL	ECX, EAX
	JB	6$.S
	MOVL	ECX, EAX
6$:	MOVB	AL, #' '
	CALL	logchr
	MOVZBL	EAX, [EBX]
	INCL	EBX
	PUSHL	EBX
	PUSHL	ECX
	MOVL	ECX, #2
	MOVB	DL, #'0'
	CALL	loghexval
	POPL	ECX
	POPL	EBX
	LOOP	ECX, 6$
	JMP	logout
.PAGE
	.SBTTL	logout - Subroutine to output a log record

;Subroutine to output a log record
;	CALL	logout

logout::MOVL	EAX, logpnt
	MOVB	[EAX], #CR
	MOVB	1.B[EAX], #LF
	SUBL	EAX, #msgbfr-2
	PUSHL	loghndl
	PUSHL	DS
	PUSHL	#msgbfr
	PUSHL	EAX
	CALLF	svcIoOutBlock#
	MOVL	logpnt, #msgbfr
	RET
.PAGE
	.SBTTL	logstr - Subroutine to put string in a log record

;Subroutine to put string in a log record
;	c{EBX} = Offset of string
;	CALL	logstr

logstr::PUSHL	EDI			;Save register we need
	PUSHL	ESI
	MOVL	EDI, logpnt		;Get log message pointer
	MOVL	ESI, EBX
2$:	LODSB	[ESI]			;Get character
	CMPB	AL, #0			;End?
	JE	4$.S			;Yes
	STOSB	[EDI]			;No - store character
	JMP	2$.S			;Continue

;Here at end of string

4$:	MOVL	logpnt, EDI		;Save log message pointer
	POPL	ESI			;Restore registers
	POPL	EDI
	RET				;Finished

;Subroutine to store single character into a log message
;	c(AL) = Character
;	CALL	logchr

logchr::PUSHL	EDI			;Save register we need
	MOVL	EDI, logpnt		;Get log message pointer
	STOSB	[EDI]			;Store character
	MOVL	logpnt, EDI		;Update pointer
	POPL	EDI
	RET
.PAGE
	.SBTTL	loghexval - Subroutine to put hex value in a log record

;Subroutine to put hex value in a log record
;	c{EAX} = Value
;	c{ECX} = Field width
;	CALL	loghexval		;Enter at loghexvalv for minimum field
;					;  width

loghexvalv::
	CLRL	ECX
loghexval::
	MOVL	radix, #16t
	JMP	2$.S

	.SBTTL	logdecval - Subroutine to put decimal value in a log record

;Subroutine to put decimal value in a log record
;	c{EAX} = Value
;	c{ECX} = Field width
;	c(DL)  = Fill character
;	c(DL)  = Fill character
;	CALL	logdecval		;Enter at logdecvalv for minimum field
;					;  width

logdecvalv::
	CLRL	ECX
logdecval::
	MOVL	radix, #10t
2$:	PUSHL	EDI			;Save register we need
	PUSHL	ESI
	MOVL	ESI, EDX		;Save fill character
	MOVL	EDI, logpnt		;Get log message pointer
	MOVL	digits, #0		;Clear digit counter
4$:	CLRL	EDX			;Get next digit
	IDIVL	radix
	PUSHL	EDX			;Save it
	INCL	digits			;Count it
	TESTL	EAX, EAX		;More?
	JNE	4$.S			;Yes - continue
	MOVL	EAX, ESI		;Get fill character
	SUBL	ECX, digits		;Calculate number of leading characters
	JLE	6$.S			;If none
	RSTOSB	[EDI]
6$:	POPL	EAX			;Get digit value
	CMPB	AL, #9
	JBE	8$.S
	ADDB	AL, #'A'-'0'-10t
8$:	ADDB	AL, #'0'		;Change to digit
	STOSB	[EDI]			;Store it
	DECL	digits			;Continue if more
	JNE	6$.S
	MOVL	logpnt, EDI		;Restore log message pointer
	POPL	ESI			;Restore registers
	POPL	EDI
	RET				;Finished
.PAGE
	.SBTTL	logsyslog - Subroutine to put message in the system log

;Subroutine to put message in the system log
;	c{EAX} = Error code
;	c{ESI} = Message
;	CALL	logsyslog

logsyslog::
	PUSHL	EDI
	MOVL	EDI, #msgbfr
	TESTL	EAX, EAX
	JE	2$.S
	PUSHL	EAX
	PUSHL	#2.B
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcSysErrMsg#
	ADDL	EDI, EAX
2$:	PUSHL	DS
	POPL	ES
	CLD
4$:	LODSB	[ESI]
	STOSB	[EDI]
	CMPB	AL, #0
	JNE	4$.S
	PUSHL	DS
	PUSHL	#logmsgbfr
	SUBL	EDI, #logmsgbfr
	DECL	EDI
	PUSHL	EDI
	CALLF	svcSysLog#
	POPL	EDI
	RET
.PAGE
	.SBTTL	Data

	.PSECT	_DATA_p

	   .MOD   4
logpnt:    .LONG  msgbfr	;Log routine pointer
radix:	   .LONG  10t
digits:	   .LONG  0
loghndl:   .LONG  DH_STDERR

rarpdata:: .ASCII "RARP"	;RARP data base file name
	   .BLKB  36t-{$-rarpdata}
bootpdata::.ASCII "BOOTP"	;BOOTP data base file name
	   .BLKB  36t-{$-bootpdata}
dataname:  .ASCII "XOSSYS:"
	   .BLKB  50t-{$-dataname}
tftpnum::  .LONG  4t		;Number of TFTP open files
rarpcnt:   .LONG  0		;Number of RARP streams set up
bootpcnt:  .LONG  0		;Number of BOOTP streams set up
tftpcnt:   .LONG  0		;Number of TFTP streams set up

logname:   .LONG  0		;Log file specification
loglevel:: .BYTE  0		;Logging level
openstr:   .ASCIZ "r"

codfmsg:   .ASCIZ "Error opening data file %s"

errdfmsg:: .ASCIZ "Error reading data file %s"

illfmtmsg: .ASCIZ "Illegal format in data file %s"

phermsg::  .ASCIZ "Data file changed between first and second passes"

camdmsg:   .ASCIZ "Not enough memory available"
prgname::  .ASCIZ "BOOTSRV"

	   .MOD   4
msgqab:	   .WORD  QFNC_OUTBLOCK	;qab_func    = 0.  - Function
	   .WORD  0		;qab_status  = 2.  - Returned status
	   .LONG  0		;qab_error   = 4.  - Error code
	   .LONG  0		;qab_amount  = 8.  - Amount transfered
	   .LONG  0		;qab_handle  = 12. - Device handle
	   .BYTE  0		;qab_vector  = 16. - Vector for interrupt
	   .BYTE  0, 0, 0	;Reserved
	   .LONG  0		;qab_option  = 20. - Option bits
	   .LONG  MSGBFRSIZE	;qab_count   = 24. - Amount to transfer
	   .LONG  msgbfr	;qab_buffer1 = 28. - Pointer to data buffer
	   .LONG  !msgbfr
	   .LONG  0, 0		;qab_buffer2 = 36. - Not used
	   .LONG  msgparms	;qab_parm    = 44. - Pointer to parameter list
	   .LONG  !msgparms

msgparms:  .BYTE  PAR$SET|REP_STR, 0FFh
	   .WORD  IOPAR_MSGRMTADDRS
	   .LONG  reqname, !reqname
	   .WORD  64t, 64t
	   .BYTE  0

	   .MOD   4
logmsgbfr: .BYTE  0, 0, '#', 0
	   .ASCII "% BOOTSRV: "
msgbfr::   .BLKB  150t
MSGBFRSIZE=!$-msgbfr

	.PSECT	_ODATA_p

	 .MOD	4
membegin:

;Following data is used during initialization only

ourname:  .ASCIZ "Boot_Server"
failmsg1: .ASCII {MT_FINALERR}"? BOOTSRV: "
failsz1=!$-failmsg1
failmsg2: .ASCII {CR,LF}"           "
failsz2=!$-failmsg2
failmsg3: .ASCIZ {CR,LF}"? BOOTSRV: Terminating"
crlfmsg:  .BYTE  CR, LF, 0
failsz3=!$-failmsg3
badpidmsg:.ASCIZ "Bad requestor PID"
nemamsg:: .ASCIZ "Not enough memory available"
no2domsg: .ASCIZ "No functions specified"

rarptlmsg:.ASCII "RARP device name is too long"
btptlmsg: .ASCII "BOOTP device name is too long"
opnemsg:  .ASCII "Error opening device "
devname:  .BLKB  16t
nologmsg: .ASCIZ "Cannot open local log file"
sivfmsg:: .ASCIZ "Cannot initialize interrupt vector"
finmsg1:  .ASCII {MT_FINALMSG}"% BOOTSRV: v1.1 - Initialization complete"
finsz1=!$-finmsg1
msgname:  .ASCIZ "IPM:"
phynudp:: .BLKB  12t

reqname:  .BLKB	 64t		;Name of requesting process
argpntr:  .LONG  0, 0

openparms:.BYTE	 PAR$GET|REP_TEXT, 8 ;Parameters for initial open of devices
	  .WORD	 IOPAR_CLASS
devclass: .BLKB  8t
	  .BYTE  PAR$SET|REP_HEXV, 4
	  .WORD	 IOPAR_FILOPTN
	  .LONG  FO$XOSNAME|FO$NOPREFIX
	  .BYTE  PAR$GET|REP_STR, 0
	  .WORD  IOPAR_FILSPEC
	  .LONG  phynudp
	  .LONG  !phynudp
	  .WORD  12t
	  .WORD  0
	  .BYTE  0

	.END

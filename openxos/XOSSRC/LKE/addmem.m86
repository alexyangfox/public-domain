	.TITLE	ADDMEM - Transient LKE to add additional memory to system

;*--------------------------------------------------------------------------*
;* ADDMEM.M86
;*
;* Written by: John R. Goltz
;*
;* Edit History:
;* 1.0.0  16-Jul-93 JRG - Original version
;*
;*--------------------------------------------------------------------------*

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR

MAJV   =!2t
MINV   =!0t
EDITNUM=!0t

;This LKE is used to add additional memory to the system.

	LKEHEAD	ADDMEM, MAJV, MINV, EDITNUM, LKETYPE_TRANS

	.SBTTL	Initialization routine

	INITSUB	addmeminit

addmeminitblk:					;Characteristics description
 DCHARBGN  2, knlDCharValCom##			;  block for initialization
 DCHARENT  BEGIN , DECV, , 4, 0, 0     , valbegin , 0
 DCHARENT  END   , DECV, , 4, 0, 0     , valend   , 0
 DCHARENT  NOSCAN, DECV, , 4, 0, 0     , valnoscan, 0
 DCHARENT  RESULT, STR , , 0, 0, resstr, 0        , 0
DATASIZE=$-addmeminitblk

XMBINDEX DATAINDEX, DATASIZE

;Initialization subroutine (since this is an init-only LKE, the initialization
;  subroutine contains all the executable code in the LKE)
;	c{FS:EDX] = Address of characteristics list
;	CALL	addmeminit
;	C:set = Error code
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{ECX} = Offset of first code byte to not save
;	  c{EDX} = Offset of first data byte to not save

$$$=!0
FRM am_data   , 4t
FRM am_blklist, 20t
FRM am_begin  , 4t
FRM am_end    , 4t
FRM am_resbfr , 8t
FRM am_rescnt , 4t
FRM am_cntpnt , 8t
FRM am_freeend, 4t
FRM am_numblks, 4t
FRM am_noscan , 4t		;Non-zero if should not scan for memory
am_SIZE=!$$$

addmeminit::
	ENTER	am_SIZE, 0
	CLRL	EAX
	MOVL	am_begin.B[EBP], EAX
	MOVL	am_end.B[EBP], EAX
	MOVL	am_resbfr+4.B[EBP], EAX
	MOVL	am_freeend.B[EBP], EAX
	MOVL	am_numblks.B[EBP], EAX
	MOVL	am_noscan.B[EBP], EAX
	MOVL	ECX, #DATAINDEX
	CALL	knlGetXmb##
	JC	29$.S
	MOVL	am_data.B[EBP], ESI
	MOVL	EBX, ESI
	CLD
	MOVL	EDI, ESI
	PUSHL	DS
	POPL	ES
	MOVL	ESI, #addmeminitblk
	MOVL	ECX, #{DATASIZE+3}/4
	RMOVSL	[EDI], CS:[ESI]
	TESTL	EDX, EDX		;Have a characteristics list?
	JE	2$.S			;No
	CALL	knlAddUnitChar##	;Yes - process the characteristics
	JC	error.S			;If error
2$:	CMPB	am_noscan.B[EBP], #0	;Should we scan memory?
	JE	3$.S			;Yes
	CMPL	am_begin.B[EBP], #0.B	;No - did he give us limits?
	JE	25$.S
	CMPL	am_end.B[EBP], #0.B
	JNE	35$.S			;Yes - go on
25$:	MOVL	EAX, #ER_VALUE		;No - fail
error:	MOVL	ESI, am_data.B[EBP]
	MOVL	ECX, #DATAINDEX
	CALL	knlGiveXmb##
29$:	STC
	LEAVE
	RET

;Here if we are to scan memory - allow defaults for the beginning and ending
;  addresses

3$:	CMPL	am_begin.B[EBP], #0.B
	JNE	33$.S
	MOVL	am_begin.B[EBP], #100000h
33$:	CMPL	am_end.B[EBP], #0.B
	JNE	35$.S
	MOVL	am_end.B[EBP], #4000000h
35$:	MOVL	EDX, am_begin.B[EBP]
4$:	MOVL	EDI, #ramaccess
	CALL	checkmem
	JE	havemem
next:	ADDL	EDX, #1000h		;Bump the address
	JC	done.S
	CMPL	EDX, am_end.B[EBP]	;Finished yet?
	JB	4$.S
done:	CMPL	am_resbfr+4.B[EBP], #0.B
	JE	114$
	LESL	EDI, am_resbfr.B[EBP]
	MOVL	ESI, #msg0
	CALL	putstr
	CMPB	am_numblks.B[EBP], #0	;Did we add any memory blocks?
	JNE	106$.S			;Yes
	MOVL	ESI, #msgno		;No
	CALL	putstr
	JMP	112$

106$:	MOVL	EAX, am_numblks.B[EBP]
	CLRL	ECX
	CALL	putdec
	MOVL	ESI, #msg1
	CALL	putstr
	MOVL	ESI, #msg2
	CMPL	am_numblks.B[EBP], #1
	JE	108$.S
	MOVL	ESI, #msg3
108$:	CALL	putstr
	MOVL	ESI, #msg4
	CALL	putstr
	LEAL	EBX, am_blklist.B[EBP]
110$:	MOVL	ESI, #msgsp
	CALL	putstr
	MOVL	EAX, SS:4.B[EBX]
	SUBL	EAX, SS:[EBX]
	SHRL	EAX, #10t
	MOVL	ECX, #8t
	CALL	putdec
	MOVL	ESI, #msgkb
	CALL	putstr
	MOVL	EAX, SS:[EBX]
	CALL	puthex
	MOVL	ESI, #msgdash
	CALL	putstr
	MOVL	EAX, SS:4.B[EBX]
	DECL	EAX
	CALL	puthex
	MOVB	AL, #CR
	CALL	putchr
	MOVB	AL, #LF
	CALL	putchr
	ADDL	EBX, #8t.B
	DECL	am_numblks.B[EBP]
	JNE	110$.S
112$:	MOVL	EBX, EDI
	SUBL	EBX, am_resbfr+0.B[EBP]
	MOVB	AL, #0
	CALL	putchr
	LESL	EDI, am_cntpnt.B[EBP]
	MOVW	ES:[EDI], BX
114$:	MOVL	ESI, am_data.B[EBP]
	MOVL	ECX, #DATAINDEX
	CALL	knlGiveXmb##
	CLC
	CLRL	EDX
	MOVL	ECX, #codebeginADDMEM
	LEAVE
	RET
.PAGE
;Here with a real memory page - now we continue scanning to see how big
;  the block is

havemem:MOVL	ESI, EDX
2$:	ADDL	EDX, #1000h
	CALL	checkmem
	JNE	atend.S
	CMPL	EDX, am_end.B[EBP]
	JB	2$.S

;Here at the end of a memory block
;	c{ESI} = Address of first page
;	c{EDX} = Address of first page above block

atend:	CLRL	EBX			;Find first free knlMemTable entry
4$:	CMPL	knlMemTable##[EBX*4], #0.B
	JE	addmem.S
	INCL	EBX
	CMPL	EBX, #8			;Is the table full now?
	JB	4$.S			;No - go on
	MOVL	EAX, #ER_TMMBK		;Yes - fail
6$:	CMPL	am_numblks.B[EBP], #0.B	;Did we do anything?
	JNE	done			;Yes - just stop quietly!
	LEAVE
	RET

;Here if have space for another knlMemTable entry

addmem:	MOVL	ECX, am_numblks.B[EBP]
	INCL	am_numblks.B[EBP]
	MOVL	am_blklist+0.B[EBP+ECX*8], ESI
	MOVL	am_blklist+4.B[EBP+ECX*8], EDX
	MOVL	ECX, EDX		;Get number of memory pages
	SUBL	ECX, ESI
	SHRL	ECX, #12t
	PUSHL	ECX
	INCL	ECX			;Get size for the table
	SHLL	ECX, #3
	CALL	knlGetXMem##		;Allocate memory for the table
	POPL	ECX
	JC	6$.S			;If error
	MOVL	4t.B[EDI], ESI		;Store physical address
	MOVL	[EDI], ECX		;Store number of pages
	ADDL	knlMemAvail##, ECX	;Add into pages available
	ADDL	knlMemUser##, ECX	;Add into number of user pages
	ADDL	knlMemTotal##, ECX	;And add into total pages
	ADDL	EDI, #8t.B		;Point to start of table
	MOVL	EAX, knlMemTable##-4[EBX*4] ;Move up the top knlMemTable entry
	MOVL	knlMemTable##[EBX*4], EAX
	MOVL	knlMemTable##-4[EBX*4], EDI ;Store address of this table in
					    ;  knlMemTable
	PUSHL	EBX			;Link all of the new pages into the
	MOVL	EAX, #1			;  memory free list
10$:	MOVL	[EDI], EBX
	MOVL	4.B[EDI], EAX
	INCL	EAX
	ADDL	EDI, #8t.B
	LOOP	ECX, 10$
	MOVL	EBX, am_freeend.B[EBP]
	CLRL	EAX			;Clear the final link
	LEAL	ECX, -8.B[EDI]
	MOVL	[ECX], EAX
	MOVL	am_freeend.B[EBP], ECX
	TESTL	EBX, EBX		;Do we know where the end of the free
					;  list is?
	JNE	14$.S			;Yes
	MOVL	EBX, #knlMemFree##	;No - find the end of the current memory
12$:	CMPL	[EBX], #0.B		;  free list
	JE	14$.S
	MOVL	EAX, 4.B[EBX]
	MOVL	EBX, [EBX]
	MOVL	EBX, knlMemTable##-4[EBX*4]
	LEAL	EBX, [EBX+EAX*8]
	JMP	12$.S

;Here with the end of the memory free list

14$:	POPL	[EBX]			;Link the new pages to the end
	MOVL	4.B[EBX], #0
	SUBL	EDX, #1000h
	JMP	next
.PAGE
;Subroutine to check memory page - determines if page exists and we do not
;  already know about it
;	c{EDX} = Physical address
;	CALL	checkmem
;	Z:set = Page exists and is not known
;	Z:clr = Page does not exist or is already known

checkmem:
	MOVL	EBX, #knlMemTable##
2$:	MOVL	ECX, [EBX]
	CMPL	-4.B[ECX], #0FFFFFFFFh.B
	JE	8$.S
	CMPL	EDX, -4.B[ECX]
	JB	4$.S
	MOVL	EAX, -8.B[ECX]
	SHLL	EAX, #12t
	ADDL	EAX, -4.B[ECX]
	CMPL	EDX, EAX
	JB	10$.S
4$:	ADDL	EBX, #4t.B
	JMP	2$.S

;Here if we don't know about this page - see if it exists

8$:	CMPB	am_noscan.B[EBP], #1	;Are we scanning memory?
	JE	10$.S			;No - just assume page exists
	LEAL	EAX, 67h.B[EDX]		;Yes - must check
	MOVL	pgtable+{{la_data+ramaccess}>10t}.L, EAX
	MOVL	EAX, CR3		;Map it where we can get at it
	MOVL	CR3, EAX		;Clear the page cache
	MOVL	EAX, [EDI]
	MOVL	[EDI], #55773322h
	IOPAUSE
	CMPL	[EDI], #55773322h
	JNE	10$.S
	MOVL	[EDI], #0
	IOPAUSE
	CMPL	[EDI], #0.B
	JNE	10$.S
	MOVL	[EDI], #0FFFFFFFFh
	IOPAUSE
	CMPL	[EDI], #0FFFFFFFFh.B
10$:	RET
.PAGE
valbegin:
	ANDL	EAX, #0FFFFF000h
	CMPL	EAX, #100000h		;Valid address?
	JAE	4$.S			;Yes
	MOVL	EAX, #100000h		;No - fix it up
4$:	MOVL	am_begin.B[EBP], EAX
	CLC
	RET

valend:	INCL	EAX
	ANDL	EAX, #0FFFFF000h
	MOVL	am_end.B[EBP], EAX
	CLC
	RET

valnoscan:
	MOVB	am_noscan.B[EBP], #1
	CLC
	RET

resstr:	MOVL	am_resbfr+0.B[EBP], EBX
	MOVL	am_resbfr+4.B[EBP], ES
	MOVL	am_rescnt.B[EBP], ECX
	MOVL	am_cntpnt+0.B[EBP], EAX
	MOVL	am_cntpnt+4.B[EBP], FS
	CLC
	RET

putstr:	MOVB	AL, CS:[ESI]
	CMPB	AL, #0
	JE	12$.S
	INCL	ESI
	CALL	putchr
	JMP	putstr.S

puthex:	MOVL	ECX, #8t
8$:	ROLL	EAX, #4t
	PUSHL	EAX
	ANDB	AL, #0Fh
	CMPB	AL, #9t
	JBE	10$.S
	ADDB	AL, #'A'-'0'-10t
10$:	ADDB	AL, #'0'
	CALL	putchr
	POPL	EAX
	LOOP	ECX, 8$
12$:	RET

putdec:	CLRL	EDX
	DIVL	CS:lit10
	PUSHL	EDX
	DECL	ECX
	TESTL	EAX, EAX
	JE	14$.S
	CALL	putdec
14$:	TESTL	ECX, ECX
	JLE	15$.S
	MOVB	AL, #' '
145$:	CALL	putchr
	LOOP	ECX, 145$
15$:	POPL	EAX
	ADDB	AL, #'0'

putchr:	DECL	am_rescnt.B[EBP]
	JS	16$.S
	MOVB	ES:[EDI], AL
	INCL	EDI
16$:	RET

	.MOD	4

lit10:	.LONG	10t

msg0:	.ASCIZ	"ADDMEM: "
msgno:	.ASCIZ	"No memory sections were added"{CR,LF}
msg1:	.ASCIZ	" memory section"
msg2:	.ASCIZ	" was"
msg3:	.ASCIZ  "s were"
msg4:	.ASCIZ	" added:"{CR,LF}
msgsp:	.ASCIZ	"        "
msgkb:	.ASCIZ  " KB at 0x"
msgdash:.ASCIZ	" to 0x"

	LKEEND

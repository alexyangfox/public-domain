	.TITLE	IDEATA - Standard IDE ATA interface

;*--------------------------------------------------------------------------*
;* IDEATA.M86
;*
;* Written by: John Goltz
;*
;* Edit History:
;*
;*--------------------------------------------------------------------------*

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSXDISK.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	IDE.PAR

$$$CHKLIST=!1		;Set to 1 to include buffer list checking code

MAJV   =!1t
MINV   =!2t
EDITNUM=!5t

	LKEHEAD	IDEATA, MAJV, MINV, EDITNUM, LKETYPE_DEVICE

;This is the device driver for the standard IDE ATA interface. It supports
;  both traditional IDE devices and ATAPI devices.
;  

;Define offsets in the device dependent part of the ICB

$$$=icb_devdep

BLK icb_atastatus  , 1t		;Status bits
BLK icb_ataboard   , 1t		;Board type
BLK                , 2t
BLK icb_ataspurint , 4t		;Spurious interrupt count
icb_ataSIZE=!$$$

;Define values for icb_atastatus

IS$CMDDONE=!40h			;Expecting command done interrupt

;SCSI interface (Adaptec type A) device characteristics table

	DATA

	.MOD	4
adtachartbl:
 DCHARBGN  1, knlDCharValXff##
 DCHARENT  CLASS   , TEXT, , 8 , knlDcMsgClass##    , knlDcGetClass## , knlDcSetClass## , 0
 DCHARENT  TYPE    , TEXT, , 4 , knlDcMsgType##     , knlDcGet4Byte## , 0               , dcb_type
 DCHARENT  BOARD   , TEXT, , 8 , msgboard           , getboard        , 0               , 0
 DCHARENT  IOREG   , HEXV, , 2 , knlDcMsgIoReg##    , xossciGet4Byte##, 0               , icb_ioreg
 DCHARENT  INT     , DECV, , 2 , knlDcMsgInt##      , xossciGet4Byte##, 0               , icb_int
 DCHARENT  DMA     , DECV, , 2 , knlDcMsgDma##      , xossciGet1Byte##, 0               , icb_dmachnl
 DCHARENT  HOSTID  , DECV, , 1 , xossciMsgHostId##  , xossciGet1Byte##, 0               , icb_hostid
 DCHARENT  FWREV   , TEXT, , 4 , msgfwrev           , xossciGet2Byte##, 0               , icb_adtafwver
 DCHARENT  SPURINT , DECV, , 4 , msgspurint         , xossciGet4Byte##, xossciSet4Byte##, icb_adtaspurint
 DCHARENT  PARITY  , TEXT, , 4 , msgparity          , xossciGetYesNo##, 0               , icb_adtaparity
 DCHARENT  SYNENB  , TEXT, , 4 , msgsynenb          , xossciGetYesNo##, 0               , icb_adtasynenb
 DCHARENT  SELTO   , DECV, , 4 , msgselto           , xossciGet4Byte##, setselto        , icb_adtaselto
 DCHARENT  BONTIME , DECV, , 1 , msgbontime         , xossciGet1Byte##, setbontime      , icb_adtabont
 DCHARENT  BOFFTIME, DECV, , 1 , msgbofftime        , xossciGet1Byte##, setbofftime     , icb_adtabofft
 DCHARENT  RDPULSE , DECV, , 4 , msgrdpulse         , xossciGet4Byte##, setrdpulse      , icb_adtardpulse
 DCHARENT  WRPULSE , DECV, , 4 , msgwrpulse         , xossciGet4Byte##, setwrpulse      , icb_adtawrpulse
 DCHARENT  STRBOT  , DECV, , 4 , msgstrbot          , xossciGet4Byte##, setstrbot       , icb_adtastrbot
 DCHARENT  MAXFRAG , DECV, , 4 , msgmaxfrag         , xossciGet4Byte##, 0               , icb_adtamaxfrag
 DCHARENT  DTHLIMIT, DECV, , 4 , knlDcMsgDTHLimit## , xossciGet4Byte##, 0               , icb_dthlimit
 DCHARENT  TARGET0 , HEXV, , 1 , msgtarget0         , xossciGet1Byte##, 0               , icb_target0
 DCHARENT  TARGET1 , HEXV, , 1 , msgtarget1         , xossciGet1Byte##, 0               , icb_target1
 DCHARENT  TARGET2 , HEXV, , 1 , msgtarget2         , xossciGet1Byte##, 0               , icb_target2
 DCHARENT  TARGET3 , HEXV, , 1 , msgtarget3         , xossciGet1Byte##, 0               , icb_target3
 DCHARENT  TARGET4 , HEXV, , 1 , msgtarget4         , xossciGet1Byte##, 0               , icb_target4
 DCHARENT  TARGET5 , HEXV, , 1 , msgtarget5         , xossciGet1Byte##, 0               , icb_target5
 DCHARENT  TARGET6 , HEXV, , 1 , msgtarget6         , xossciGet1Byte##, 0               , icb_target6
 DCHARENT  TARGET7 , HEXV, , 1 , msgtarget7         , xossciGet1Byte##, 0               , icb_target7

	CODE

msgboard:   DCHARINFO  {Board type}
msgfwrev:   DCHARINFO  {Firmware revision level}
msgspurint: DCHARINFO  {Number of spurious interrupts}
msgparity:  DCHARINFO  {SCSI bus parity checking enabled}
msgsynenb:  DCHARINFO  {SCSI bus synchronous transfers}
msgselto:   DCHARINFO  {SCSI bus selection time-out (msec)}
msgbontime: DCHARINFO  {System bus on time (usec)}
msgbofftime:DCHARINFO  {System bus off time (usec)}
msgrdpulse: DCHARINFO  {SCSI bus read pulse width (nsec)}
msgwrpulse: DCHARINFO  {SCSI bus write pulse width (nsec)}
msgstrbot:  DCHARINFO  {SCSI bus strobe off time (nsec)}
msgmaxfrag: DCHARINFO  {Maximum fragments per transfer}
msgtarget0: DCHARINFO  {Target 0 logical unit mask}
msgtarget1: DCHARINFO  {Target 1 logical unit mask}
msgtarget2: DCHARINFO  {Target 2 logical unit mask}
msgtarget3: DCHARINFO  {Target 3 logical unit mask}
msgtarget4: DCHARINFO  {Target 4 logical unit mask}
msgtarget5: DCHARINFO  {Target 5 logical unit mask}
msgtarget6: DCHARINFO  {Target 6 logical unit mask}
msgtarget7: DCHARINFO  {Target 7 logical unit mask}
.PAGE
	.SBTTL	Initialization

	INITSUB	initadta

initadta::
	PUSHL	FS
	PUSHL	EDX
	MOVL	EBX, #'ADTA'		;Get SCSI interface name
	MOVL	EDX, #adtaaddunit	;Get offset of addunit subroutine
	CALL	xossciNewInterface##	;Register this SCSI driver
	POPL	EDX
	POPL	FS
	JC	6$.S			;If error
	TESTL	EDX, EDX		;Have a characteristics list?
	JE	2$.S			;No
	MOVL	EBX, #adtainitblk	;Yes - point to characteristics table
	CALL	knlAddUnitChar##	;Process characteristics
	JC	10$.S			;If error
2$:	CLRL	EAX			;OK
	CLRL	EDX
	MOVL	ECX, #codetop
	CMPL	CS:itintcode, #-1.B	;Did we set up an interrupt routine?
	JNE	4$.S			;Yes
	SUBL	ECX, #{codetop-itintcode}.B ;No - don't need that space
4$:	CLC
6$:	RET

;Here if error after driver has been registered

10$:	CRASH	ADTA
.PAGE
	 .MOD	4
adtachar:DCHAR	UNIT , SET, DECV, 1
	 .BYTE	0
	 DCHAR	TYPE , SET, TEXT, 4
	 .ASCII	'ADTA'
	 DCHAR	IOREG, SET, HEXV, 2
	 .WORD	330h
	 .BYTE	0
ADTACHARSZ=!{{$-adtachar}+3}&{~3}

;Here for the BOOT characteristic

$$$=!0
FRM iboot_char, ADTACHARSZ
iboot_SIZE=!$$$

initboot:
	ENTER	iboot_SIZE, 0
	LEAL	EDI, iboot_char.B[EBP]	;Copy the characteristics list to our
	PUSHL	SS			;  stack frame
	POPL	ES
	MOVL	ESI, #adtachar
	MOVL	ECX, #ADTACHARSZ/4
	CLD
	RMOVSL	[EDI], CS:[ESI]
	PUSHL	knlXCodePnt##
	MOVL	knlXCodePnt##, #itintcode
	CALL	knlGetQel##
	JC	4$.S
	PUSHL	DS			;Clear the QEL
	POPL	ES
	MOVL	EDI, ESI
	MOVL	ECX, #16t
	CLRL	EAX
	CLD
	STOSL	[EDI]
	LEAL	EAX, iboot_char.B[EBP]
	MOVL	iorb_buffer2+0.B[ESI], EAX
	MOVW	iorb_buffer2+4.B[ESI], SS
	MOVL	EAX, xossciCcb##+ccb_fdsp
	CALLI	CS:CF_ADDUNIT-8.B[EAX]
4$:	FROMFORK
	POPL	knlXCodePnt##
	LEAVE
	BTL	EAX, #31t
	RET

	CODE
.PAGE
	.SBTTL	adtaaddunit - Subroutine to add SCSI ADTA interface unit

;Subroutine to add SCSI ADTA interface unit
;	c{EAX}    = Unit number
;	c{FS:EDX} = Address of characteristics list
;	c{ESI}    = Base IO register
;	CALL	adtaaddunit
;	c{EAX} = Error code
;	c{EBX} = Status bits
;	c{ECX} = Item count (number of units added)

$$$=!0
FRM au_unit   , 4t	;Unit number
FRM au_ioreg  , 4t	;Base IO register number
FRM au_int    , 4t	;Interrupt request number
FRM au_dma    , 4t	;DMA channel
FRM au_hostid , 4t	;Host SCSI ID
FRM au_selto  , 4t	;SCSI bus selection time-out value
FRM au_intcode, 4t	;Offset of our interrupt routine
au_SIZE=!$$$

	DATA

	.MOD	4
adtaaublk:				;Characteristics description block
 DCHARBGN  3, 0				;  for addunit
 DCHARENT  TYPE , TEXT, , 8, 0, 0, knlRtnZero##, 0
 DCHARENT  UNIT , DECV, , 4, 0, 0, knlRtnZero##, 0
 DCHARENT  IOREG, HEXV, , 4, 0, 0, knlRtnZero##, 0
 DCHARENT  SELTO, DECV, , 4, 0, 0, auselto     , 0

	CODE

adtaaddunit:
	ENTER	au_SIZE, 0		;Allocate our stack frame
	MOVL	au_unit.B[EBP], EAX	;Store unit number
	MOVL	au_ioreg.B[EBP], ESI	;Store base IO register
	MOVL	au_selto.B[EBP], #250t	;Store default time-out value
	MOVL	EBX, #adtaaublk		;Point to our addunit table
	MOVB	AL, #0			;Fail on bad names
	CALL	knlAddUnitChar##	;Process characteristics
	JC	6$.S			;If error

;First we must determine if the interface exists - this is somewhat hard to
;  do since the interface has almost no registers and has absolutely no
;  registers which can be both written and read!  We write a hard reset
;  command to the control register and wait for it to finish

	MOVL	EDX, au_ioreg.B[EBP]	;Point to the control/status register
	MOVB	AL, #CON$HRST		;Try a hard reset
	OUTB	[DX]
	MOVL	EAX, #TICKSPERSEC/4	;Wait for 1/4 second
	CALL	knlTimeWait##
2$:	INB	[DX]			;Read the status register
	CMPB	AL, #STS$IDLE|STS$INIT	;Is it right
	JNE	4$.S			;No - say not there
	A2IOP	P_INT-P_STS		;Yes - read the interrupt flag
	INB	[DX]			;  register
	CMPB	AL, #0			;It must be 0
	JE	8$.S			;OK
4$:	MOVL	EAX, #ER_PDNAV
6$:	LEAVE
	MOVL	EBX, #QSTS$DONE
	CLRL	ECX
	TOFORK
	RET

;Here if we think the interface exists - first we try to get the minimum
;  configuration information that we must have from the interface

8$:	MOVL	EDX, au_ioreg.B[EBP]	;Read the configuration information from
	A2IOP	P_DATA			;  the interface (since we just reset it
	MOVB	AL, #CMD_GETCFG		;  here, it must be ready for a command
	OUTB	[DX]			;  now!)
	IOPAUSE
	A2IOP	P_STS-P_DATA
	CALL	aubytein		;Get the DMA channel byte
	JC	4$.S
	ANDL	EAX, #0E1h
	BSFL	ECX, EAX
	JNE	10$.S
	MOVB	CL, #0FFh		;If no DMA channel assigned (possible
10$:	MOVL	au_dma.B[EBP], ECX	;  with PCI or VL cards)
	CALL	aubytein		;Get the interrupt number byte
	JC	4$.S
	ANDB	AL, #6Fh
	BSFL	ECX, EAX
	JE	4$.S
	ADDB	CL, #9
	MOVL	au_int.B[EBP], ECX
	CALL	aubytein		;Get the host ID byte
	JC	4$.S
	MOVL	au_hostid.B[EBP], EAX

;Here with the minimum necessary configuration information - now set up our
;  ICB and interrupt routine

	CALL	knlGetXRes##		;Get the exec memory resource
	MOVL	ECX, au_int.B[EBP]	;Is the interrupt free?
	CALL	knlChkIRqAvl##
	JC	12$.S			;No - fail!
	MOVL	EDX, au_ioreg.B[EBP]	;Are the IO registers free?
	LEAL	ECX, 3.B[EDX]
	CALL	knlChkIORegs##
	JC	12$.S			;No - fail!
	MOVL	EAX, au_unit.B[EBP]
	MOVL	EBX, #'ADTA'
	MOVL	ECX, #icb_mSIZE+icb_adtaSIZE
	MOVL	EDX, #adtachartbl
	MOVL	ESI, au_ioreg.B[EBP]
	CALL	xossciMakeIcb##		;Create the ICB
12$:	JC	30$			;If error
	MOVL	ECX, #icb_nexts
	MOVL	EDX, #firsticb
	CALL	xossciLinkIcb##
	MOVL	icb_doio.B[ESI], #adtadoio ;Store routine offsets
	MOVL	icb_fdisp.B[ESI], #adtafork
	DECL	icb_fnext.B[ESI]
	MOVL	EAX, au_int.B[EBP]	;Store interrupt number in the ICB
	MOVL	icb_int[ESI], EAX
	MOVL	EAX, au_dma.B[EBP]	;Store DMA channel in the ICB
	MOVB	icb_dmachnl.B[ESI], AL
	MOVB	AL, au_hostid.B[EBP]	;Store Host ID value
	MOVB	icb_hostid.B[ESI], AL
	MOVL	EAX, au_selto.B[EBP]	;Store selection time-out value
	MOVL	icb_adtaselto.B[ESI], EAX

;Now allocate space for the interrupt entry routine and set it up

	MOVL	ECX, #ADTAINTSZ		;Get space for interrupt code
	CALL	knlGetXCode##
	JC	42$
	PUSHL	EDI			;Remember where code is going
	PUSHL	ESI
	MOVL	ESI, #adtaint		;Copy prototype interrupt routine
	SHRL	ECX, #2
	MOVB	gdtable+GS_CODEALS+5, #DT_RWDATA+PL_0 ;Enable alaised code space
	PUSHL	#GS_CODEALS.B
	POPL	ES
	CLD
	RMOVSL	[EDI], ES:[ESI]
	POPL	ESI
	POPL	EDI
	MOVL	ES:{fix1-adtaint}+1.B[EDI], ESI
	MOVL	EAX, #adtaint
	SUBL	EAX, EDI
	ADDL	ES:{fix2-adtaint}+1.B[EDI], EAX
	MOVL	au_intcode.B[EBP], EDI
	CLRL	EAX
	MOVL	ES, EAX
	MOVB	gdtable+GS_CODEALS+5, AL

;We now need to set up the CCBs and mailboxes.  We create 8 CCBs and 8 mailbox
;  pairs.  7 of the CCBs include space for a segment list and each is assigned
;  to the  corresponding target ID.  The 8th does not have a segment list and
;  is used for SCSI device operations.  It is scheduled using the usual request
;  list scheme.  The SCSI device is mainly used when initially connecting new
;  devices.  The segment list space in the 8th CCB is used for the
;  mailboxes.

	MOVL	ECX, #5t		;Get a 2K byte exec buffer
	PUSHL	ESI
	CALL	knlGetXmb##
	MOVL	EBX, ESI
	POPL	ESI
	JC	42$			;If error
	MOVL	icb_adtaccbbase.B[ESI], EBX ;OK
	LEAL	EAX, 720h+ccb_seglist[EBX] ;Set output mailbox putter pointer
	MOVL	icb_adtaombpnt.B[ESI], EAX ;Also store limits
	MOVL	icb_adtaombbgn.B[ESI], EAX
	ADDL	EAX, #8t*4t.B		;Set input mailbox taker pointer
	MOVL	icb_adtaimbpnt.B[ESI], EAX
	MOVL	icb_adtaimbbgn.B[ESI], EAX ;Also store limits
	ADDL	EAX, #8t*4t.B
	MOVL	icb_adtaimbend.B[ESI], EAX
	MOVL	EDI, EBX		;Clear the buffer
	PUSHL	DS
	POPL	ES
	MOVL	ECX, #2048t/4
	CLRL	EAX
	CLD
	RSTOSL	[EDI]
	MOVL	ECX, #2048t		;Get physical address of buffer
	CALL	knlGetPhyAddr##
	JC	44$			;This cannot fail!
	MOVL	icb_adtaccbbpa.B[ESI], EAX
	MOVL	EDX, EAX
	ADDL	EAX, #720h+ccb_seglist
	MOVL	icb_adtambpa.B[ESI], EAX
	PUSHL	EBX
	CLRL	ECX

;This code stores the fixed data in each CCB

18$:	MOVL	icb_adtaccbtbl.B[ESI+ECX*4], EBX
	MOVB	ccb_op.B[EBX], #02h	;Store operation code
	MOVB	ccb_rsalen.B[EBX], #20t	;Store length of sense data area
	LEAL	EAX, ccb_seglist.B[EDX]	;Store physical address of start of
	XCHGB	AL, AH			;  segment list
	RORL	EAX, #16t
	XCHGB	AL, AH
	MOVL	ccb_datpnt-1.B[EBX], EAX
	MOVL	EAX, EDX		;Store output mailbox value
	XCHGB	AL, AH			;  segment list
	RORL	EAX, #16t
	MOVB	AH, AL
	MOVB	AL, #01
	MOVL	ccb_ombval.B[EBX], EAX
	ADDL	EBX, #256t		;Bump offset and address
	INCB	DH
	INCL	ECX			;Increment target number
	CMPL	ECX, #8.B		;More to do?
	JL	18$.S			;Yes - continue
	POPL	EBX

;We now have our data base all set up

	CMPB	icb_dmachnl.B[ESI], #0FFh ;Do we need a DMA channel
	JE	20$.S			;No
	MOVL	EDI, ESI		;Yes - get our DMA channel
	CALL	knlDmaGetChn##
	JE	20$.S			;Go on if got it
	MOVL	EAX, #ER_CHNNA
	JMP	42$

20$:	LEAL	EDX, icb_name.B[ESI]
	MOVL	ECX, icb_int.B[ESI]	;Set our interrupt vector
	MOVL	EBX, au_intcode.B[EBP]
	MOVB	CH, #DT_TRAP
	CALL	knlSetIRq##
	JC	6$			;We already checked this!
	LEAL	EBX, icb_name.B[ESI]	;Register the registers
	MOVL	EDX, icb_ioreg.B[ESI]
	LEAL	ECX, 3.B[EDX]
	CALL	knlRegIORegs##
	JC	42$			;If error
	CALL	knlGiveXRes##		;Give up the exec memory resource
	MOVL	EDX, ESI
	CALL	knlGetQel##		;Get an IORB
	JC	40$			;Fail if can't get one
	LEAVE
	MOVL	EDI, ESI
	PUSHL	DS
	POPL	ES
	MOVL	ECX, #16t
	CLRL	EAX
	CLD
	RSTOSL	[EDI]
	MOVL	SS:pdaResponse##, EAX
	MOVL	iorb_count.B[ESI], EDX	;Store ICB offset where we can find it
	MOVL	iorb_finish.B[ESI], #addunitfin
	MOVL	iorb_routine.B[ESI], #addunit1
	MOVL	EAX, SS:pdaArg2##
	MOVL	iorb_qab+0.B[ESI], EAX
	MOVL	EAX, SS:pdaArg1##
	MOVW	iorb_qab+4.B[ESI], AX
	CLRL	EDI
	CALL	knlXfBegin##
22$:	PUSHL	SS			;Set up to wait
	POPL	ES
	MOVB	AL, #knlQX_DW2##
	CALL	knlWRequeue##
	FROMFORK
	CALLF	schedule		;Call the scheduler (this is an
	TOFORK				;  uninterruptable wait!)
	MOVL	EAX, SS:pdaResponse##
	TESTL	EAX, EAX
	JE	22$.S
	JS	34$.S			;If error
	CLRL	ECX
	INCL	ECX
24$:	MOVL	EBX, #QSTS$DONE
	RET

;Here if error while have exec memory resource

30$:	CALL	knlGiveXRes##
32$:	TOFORK
34$:	CLRL	ECX
	JMP	24$.S

;Here if have error after we have allocated and set up the ICB and the CCB
;  buffer

40$:	CRASH	????

;Here if have error after we have allocated and set up the ICB

42$:	CRASH	????

44$:	CRASH	CGPA			;[Can't Get Physical Address]
.PAGE
;Here in extended fork context

addunit1:
	MOVL	ESI, SS:xffCount##
	CALL	xossciGetDcb##		;Get a DCB
	JC	40$			;If can't
	MOVW	dcb_outframe.B[EDI], SS	;OK - store XFF selector
	MOVL	SS:xffDcb##, EDI
	MOVL	icb_curdcb.B[ESI], EDI
	ORB	icb_adtastatus.B[ESI], #IS$CMDDONE
	MOVL	ECX, icb_int.B[ESI]	;Enable our interrupt
	CALL	knlEnableInt##
	MOVL	EAX, #XT_SECOND*5	;Wait for the interrupt which was
	CALL	knlXfWait##		;  pending from the get configuration
					;  command we did before switching to
					;  extended fork context

;The interface is now ready to use - we now get some additional information
;  about the interface and the connected devices which should be available

	MOVW	icb_adtafwver.B[ESI], #'??'
	MOVB	AH, #CMD_AINQ		;Get the version information
	CALL	cmdbyteout
	JC	10$.S
	CALL	cmdbytein		;Get the board ID
	JC	10$.S
	CMPB	AL, #'D'
	JE	2$.S
	CMPB	AL, #'E'
	JNE	4$.S
2$:	MOVB	icb_adtaboard.B[ESI], #BRD_1542C
4$:	CALL	cmdbytein		;Get and discard the options byte
	JC	10$.S
	CALL	cmdbytein		;Get first firmware revision byte
	JC	10$.S
	PUSHL	EAX
	CALL	cmdbytein		;Get second firmware revision byte
	POPL	EDX
	JC	10$.S
	MOVB	AH, AL
	MOVB	AL, DL
	CMPB	AH, #'0'
	JAE	6$.S
	MOVB	AH, #'?'
6$:	CMPB	AL, #'0'
	JAE	8$.S
	MOVB	AH, #'?'
8$:	MOVW	icb_adtafwver.B[ESI], AX
10$:	MOVL	EAX, #XT_SECOND*5	;Wait for command to complete
	CALL	knlXfWait##
	MOVB	AH, #CMD_GETSUP		;Get the set up data
	CALL	cmdbyteout
	JC	18$.S
	MOVB	AH, #4t			;We want 4 bytes
	CALL	cmdbyteout
	JC	18$.S
	CALL	cmdbytein
	JC	18$.S
	TESTB	AL, #02h		;Is parity checking enabled?
	JE	12$.S			;No
	INCB	icb_adtaparity.B[ESI]	;Yes
12$:	TESTB	AL, #01h		;Is synchronous mode enabled
	JE	14$.S			;No
	INCB	icb_adtasynenb.B[ESI]	;Yes
14$:	CALL	cmdbytein
	JC	18$.S
	MOVL	ECX, #100t
	TESTB	AL, #08h
	JE	16$.S
	ADDL	ECX, #50t.B
16$:	MOVL	icb_adtastrbot.B[ESI], ECX
	MOVL	ECX, EAX
	ANDL	ECX, #07h.B
	ADDL	ECX, #2t.B
	IMULL	ECX, #50t.B
	MOVL	icb_adtawrpulse.B[ESI], ECX
	SHRB	AL, #4t
	ANDL	EAX, #07h.B
	ADDL	EAX, #2t.B
	IMULL	EAX, #50t.B
	MOVL	icb_adtardpulse.B[ESI], EAX
	CALL	cmdbytein
	JC	18$.S
	MOVB	icb_adtabont.B[ESI], AL	;Store bus on time
	CALL	cmdbytein
	JC	18$.S
	MOVB	icb_adtabofft.B[ESI], AL ;Store bus off type
	MOVL	EAX, #XT_SECOND*5
	CALL	knlXfWait##

;Now get the extended configuration information

18$:	CMPB	icb_adtaboard.B[ESI], #BRD_1542C ;Is this a 1542C?
	JNE	20$.S			;No
	MOVL	EDX, #255t		;Yes - it supports 255 memory fragments
	JMP	24$.S

;Here if board is not a 1542C - try to do an get extended configuration
;  command - if it works this is a BusLogic 542 and the command returns the
;  number of memory fragments supported

20$:	MOVB	AH, #CMD_GETXCF
	CALL	cmdbyteout
	JC	22$.S			;This is not valid on all interfaces!
	MOVL	EAX, #XT_SECOND/10t
	CALL	knlXfTimeWait##
	MOVB	AH, #4t			;We want 4 bytes
	CALL	cmdbyteout
	JC	22$.S
	CALL	cmdbytein		;Get and discard the first 2 bytes
	JC	22$.S
	CALL	cmdbytein
	JC	22$.S
	CALL	cmdbytein
	JC	22$.S
	PUSHL	EAX
	CALL	cmdbytein
	POPL	EDX
	JC	22$.S
	MOVB	DH, AL

	MOVL	EDX, #16t	;##### TEMP ##### for BT-948

	MOVB	icb_adtaboard.B[ESI], #BRD_542
	MOVL	EAX, #XT_SECOND*5
	CALL	knlXfWait##
	JMP	24$.S

;Here if could not get extended configuration information - assume the
;  interface can only handle 16 memory fragments

22$:	CALL	softreset		;Make sure the controller is OK
	MOVL	EDX, #16t
24$:	MOVL	icb_adtamaxfrag.B[ESI], EDX
	CMPL	EDX, #SEGLISTNUM.B	;Can we use this many?
	JB	26$.S			;Yes
	MOVL	EDX, #SEGLISTNUM.B	;No - get number we can use
26$:	MOVL	icb_dthlimit.B[ESI], EDX ;Store as hardware data transfer limit

;Now set the SCSI bus selection time-out value (must do this before we get
;  info about connected devices)

;;;;;;;	CALL	dosetselto

;Now get information about connected devices

	MOVB	AH, #CMD_GETDEV
	CALL	cmdbyteout
	JC	30$.S
	LEAL	EDX, icb_target0.B[ESI]
	MOVL	ECX, #8
28$:	CALL	cmdbytein
	JC	30$.S
	MOVB	[EDX], AL
	INCL	EDX
	LOOP	ECX, 28$
	MOVL	EAX, #XT_SECOND*5
	CALL	knlXfWait##

;Here with all configuration information - now do the final interface setup

30$:	CMPB	icb_adtaboard.B[ESI], #BRD_1542C ;Do we have a 1542C?
	JNE	34$.S			;No
	MOVB	AH, #CMD_RXBIOSI	;Get extended BIOS information
	CALL	cmdbyteout
	JC	32$.S
	CALL	cmdbytein
	JC	32$.S
	CALL	cmdbytein
	JC	32$.S
	CMPB	AL, #0
	JE	32$.S
	PUSHL	EAX
	CALL	softreset
	POPL	EDX
	MOVB	AH, #CMD_SETMBE
	CALL	cmdbyteout
	JC	32$.S
	MOVB	AH, #0
	CALL	cmdbyteout
	MOVB	AH, DL
	CALL	cmdbyteout
32$:	CALL	softreset
34$:	MOVB	AH, #CMD_MBINIT		;Initialize the mailboxes
	CALL	cmdbyteout
	JC	36$.S
	MOVB	AH, #8			;We use 8 of them
	CALL	cmdbyteout
	JC	36$.S
	MOVB	AH, icb_adtambpa+2.B[ESI]
	CALL	cmdbyteout
	JC	36$.S
	MOVB	AH, icb_adtambpa+1.B[ESI]
	CALL	cmdbyteout
	JC	36$.S
	MOVB	AH, icb_adtambpa+0.B[ESI]
	CALL	cmdbyteout
	JC	36$.S
	MOVL	EAX, #XT_SECOND*5
	CALL	knlXfWait##
36$:	ANDB	icb_adtastatus.B[ESI], #~IS$CMDDONE
	CLRL	EAX
	MOVL	icb_curdcb.B[ESI], EAX
	CALL	xossciCDcb##
	CMPB	icb_dmachnl.B[ESI], #0FFh ;Do we need a DMA channel
	JE	38$.S			;No
	MOVL	EDI, ESI		;Yes - set up our DMA channel for
	CALL	knlDmaCascade##		;  cascade mode
38$:	CLRL	EAX
	MOVL	SS:xffDcb##, EAX
	INCL	EAX
	RET

;Here if have error after we have allocated and set up the ICB

40$:	CRASH	????

;Here when finished with the XFF

addunitfin:
	MOVW	ES, SS:xffPda##
	MOVL	ES:pdaResponse##, EAX
	CALL	knlRRequeue##
	JMP	knlXfFinish##
.PAGE
auselto:CMPL	EAX, #30000t		;Too big?
	JB	2$.S			;No
	MOVL	EAX, #30000t		;Yes
2$:	MOVL	au_selto.B[EBP], EAX	;Store new value
	CLC
	RET

aubytein:
	MOVL	ECX, #100t
	IMULL	ECX, knlDelFactor##
4$:	INB	[DX]			;Get status bits
	IOPAUSE
	TESTB	AL, #STS$DIF|STS$BDCMD	;Ready or error?
	LOOPE	ECX, 4$			;Loop if not
	JE	6$.S			;If its not ready
	TESTB	AL, #STS$BDCMD		;Error?
	JNE	6$.S			;Yes
	A2IOP	P_DATA-P_STS		;No - point to the data register
	CLRL	EAX
	INB	[DX]			;Get the value
	A2IOP	P_STS-P_DATA
	CLC
	RET

;Here if error

6$:	MOVL	EAX, #ER_DEVER
	STC
	RET
.PAGE
;Subroutine to output a command byte
;	c(AH)  = Value to output
;	c{ESI} = Offset of ICB
;	CALL	cmdbyteout
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;  All registers except EAX are preserved

cmdbyteout:
	PUSHL	EDX
	PUSHL	ECX
	MOVL	EDX, icb_ioreg.B[ESI]
	MOVL	ECX, #100h
	IMULL	ECX, knlDelFactor##
2$:	INB	[DX]
	IOPAUSE
	TESTB	AL, #STS$CDOF
	LOOPNE	ECX, 2$
	JNE	8$.S
	TESTB	AL, #STS$BDCMD
	JNE	8$.S
	A2IOP	P_DATA-P_STS
	MOVB	AL, AH
	OUTB	[DX]
	IOPAUSE
	A2IOP	P_STS-P_DATA
	POPL	ECX
	POPL	EDX
	CLC
	RET

;Subroutine to input a command byte
;	c{ESI} = Offset of ICB
;	CALL	cmdbytein
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EAX} = Value intput (0 extended to 32 bits)
;  All registers except EAX are preserved

cmdbytein:
	PUSHL	EDX
	PUSHL	ECX
	MOVL	EDX, icb_ioreg.B[ESI]	;Initially, do a short tight loop
	MOVL	ECX, #30t		;  polling the status bits
	IMULL	ECX, knlDelFactor##
4$:	INB	[DX]			;Get status bits
	IOPAUSE
	TESTB	AL, #STS$DIF|STS$BDCMD	;Ready or error?
	LOOPE	ECX, 4$			;Loop if not
	JNE	12$.S			;If its ready now
	MOVL	ECX, #200t		;Did not come ready quickly - now do a
					;  longer slow loop, sampling the status
					;  every 1/10 second - allow 20 seconds
					;  total before failing
6$:	MOVL	EAX, #XT_SECOND/10t	;Wait for 1/10 second
	CALL	knlXfTimeWait##
	JC	10$.S			;If error while waiting
	INB	[DX]			;Get status bits
	TESTB	AL, #STS$DIF|STS$BDCMD	;Ready or error?
	JNE	12$.S			;Yes
	DECL	ECX			;No - should we wait some more?
	JNE	6$.S			;Yes
8$:	MOVL	EAX, #ER_DEVER		;No - fail
10$:	POPL	ECX
	POPL	EDX
	STC
	RET

;Here with data ready or if error indicated

12$:	TESTB	AL, #STS$BDCMD		;Error?
	JNE	8$.S			;Yes
	A2IOP	P_DATA-P_STS		;No - point to the data register
	CLRL	EAX
	INB	[DX]			;Get the value
	POPL	ECX			;Restore registers and return
	POPL	EDX
	CLC
	RET
.PAGE
;Here to get the value of the BOARD device characteristic

getboard:
	MOVL	ESI, dcb_sciicb.B[EDI]
	MOVZBL	EAX, icb_adtaboard.B[ESI]
	MOVL	EDX, CS:board+4[EAX*8]
	MOVL	EAX, CS:board+0[EAX*8]
	RET

	.MOD	4
board:	.LONG	'1542', 'B'	;BRD_1542B = 0
	.LONG	'542' , 0	;BRD_542   = 1
	.LONG	'1542', 'C'	;BRD_1542C = 2
.PAGE
setselto:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CMPL	EAX, #30000t		;Too big?
	JB	2$.S			;No
	MOVL	EAX, #30000t		;Yes
2$:	MOVL	icb_adtaselto.B[ESI], EAX ;Store new value
	CALL	xossciGetDev##
	JC	6$.S
	ORB	icb_adtastatus.B[ESI], #IS$CMDDONE
	CALL	dosetselto
4$:	ANDB	icb_adtastatus.B[ESI], #~IS$CMDDONE
	CALL	xossciGiveDev##
	BTL	EAX, #31t
6$:	RET

dosetselto:
	MOVB	AH, #CMD_SETSTO
	CALL	cmdbyteout
	JC	6$.S
	MOVB	AH, #0			;Assume time-outs are disabled
	CMPL	icb_adtaselto.B[ESI], #0.B ;Right?
	JE	8$.S			;Yes
	MOVB	AH, #1			;No
8$:	CALL	cmdbyteout
	JC	6$.S
	MOVB	AH, #0
	CALL	cmdbyteout
	JC	6$.S
	MOVB	AH, icb_adtaselto+1.B[ESI]
	CALL	cmdbyteout
	JC	6$.S
	MOVB	AH, icb_adtaselto+0.B[ESI]
	CALL	cmdbyteout
	JC	6$.S
	MOVL	EAX, #XT_SECOND*5
	JMP	knlXfWait##

setbontime:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CMPL	EAX, #2t.B
	JA	10$.S
	MOVB	AL, #2t
10$:	CMPL	EAX, #15t.B
	JB	12$.S
	MOVL	EAX, #15t
12$:	MOVB	icb_adtabont.B[ESI], AL
	MOVB	AH, #CMD_SETBON
14$:	MOVL	EDX, EAX
16$:	CALL	xossciGetDev##
	JC	6$.S
	ORB	icb_adtastatus.B[ESI], #IS$CMDDONE
	CALL	cmdbyteout
	JC	18$.S
	MOVB	AH, DL
	CALL	cmdbyteout
18$:	MOVL	EAX, #XT_SECOND*5
	CALL	knlXfWait##
	JMP	4$

setbofftime:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CMPL	EAX, #1t.B
	JA	20$.S
	MOVB	AL, #1t
20$:	CMPL	EAX, #64t.B
	JB	22$.S
	MOVL	EAX, #64t
22$:	MOVB	icb_adtabofft.B[ESI], AL
	MOVB	AH, #CMD_SETBOF
	JMP	14$.S

setrdpulse:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CALL	fixpulse
	MOVL	icb_adtardpulse.B[ESI], EAX
	JMP	26$.S

setwrpulse:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CALL	fixpulse
	MOVL	icb_adtawrpulse.B[ESI], EAX
	JMP	26$.S

setstrbot:
	MOVL	ESI, dcb_sciicb.B[EDI]
	CMPL	EAX, #100t.B
	MOVL	EAX, #100t
	JBE	24$.S
	ADDL	EAX, #50t.B
24$:	MOVL	icb_adtastrbot.B[ESI], EAX
26$:	MOVL	EAX, icb_adtardpulse.B[ESI]
	CALL	cnvpulse
	PUSHL	EAX
	MOVL	EAX, icb_adtawrpulse.B[ESI]
	CALL	cnvpulse
	POPL	EDX
	SHLB	DL, #4t
	ORB	DL, AL
	CMPL	icb_adtastrbot.B[ESI], #100t.B
	JBE	28$.S
	ORB	DL, #08h
28$:	ORB	DL, #80h
	MOVB	AH, #CMD_SETTS
	JMP	16$

;Subroutine to convert value to valid pulse width value
;	c{EAX} = Initial value
;	CALL	fixpulse
;	c{EAX} = Pulse width value

fixpulse:
	SUBL	EAX, #100t.B
	JG	30$.S
	CLRL	EAX
30$:	CMPL	EAX, #350t
	JL	32$.S
	MOVL	EAX, #350t
32$:	CLRL	EDX
	IDIVL	CS:lit50
	IMULL	EAX, #50t.B
	ADDL	EAX, #100t.B
	RET

;Subroutine to convert pulse width value to value for 3-bit register field
;	c{EAX} = Pulse width value
;	CALL	cnvpulse
;	C{EAX} = Register value

cnvpulse:
	SUBL	EAX, #100t.B
	CLRL	EDX
	IDIVL	CS:lit50
	RET

	.MOD	4
lit50:	.LONG	50t
.PAGE
	.SBTTL	adtadoio - Subroutine to do IO for SCSI device

;Subroutine to do IO for a SCSI device
;	c{SS:EBX} = Address of XDB
;	c{EDI}    = Offset of DCB
;	c{ESI}    = Offset of ICB
;	CALL	adtadoio
;	c{ECX} = Amount transfered
;	C:set  = Error
;	  c{EAX} = Error code
;	C:clr  = Normal

adtadoio:
	MOVL	EDX, SS:xcb_task.B[EBX]	;Get task number
	MOVL	EDX, icb_adtaccbtbl[ESI+EDX*4] ;Get offset of the CCB
	MOVL	ccb_xff.B[EDX], SS
	MOVL	EAX, SS:xcb_target.B[EBX] ;Get target and LUN
	ANDB	AH, #07h
	MOVB	[EDX], #0		;Assume no data
	CMPL	SS:xcb_count.B[EBX], #0.B ;Transfering any data?
	JE	2$.S			;No
	MOVB	[EDX], #2		;Yes
	ORB	AH, #08h		;Assume input
	TESTB	SS:xcb_mode.B[EBX], #MODE$OUTPUT ;Right?
	JE	2$.S			;Yes
	XORB	AH, #18h		;No - its output
2$:	SHLB	AL, #5t			;Get target ID in right place
	ORB	AL, AH
	MOVB	ccb_con.B[EDX], AL	;Store in CCB
	MOVL	ECX, SS:xcb_cdblen.B[EBX] ;Store CDB length in the CCB
	MOVB	ccb_cdblen.B[EDX], CL
	PUSHL	EDI
	PUSHL	ESI
	LEAL	ESI, xcb_cdb.B[EBX]	;Copy the CDB to the CCB
	LEAL	EDI, ccb_cdb.B[EDX]
	PUSHL	DS
	POPL	ES
	ADDL	ECX, #3.B
	SHRL	ECX, #2t
	CLD
	RMOVSL	[EDI], SS:[ESI]
	POPL	ESI
	MOVL	ECX, SS:xcb_count.B[EBX] ;Need to transfer any data?
	TESTL	ECX, ECX
	JE	xferrd2			;No - go on

;Now we are ready to construct the fragment list.  This is done differently,
;  depending of if we have a single buffer or a buffer list.  If we have a
;  single buffer, we allow for it to span as many pages as will fit in the
;  segment list.  If we have a buffer list, we assume that each buffer is
;  512 bytes long and does not span multiple pages.  We also assume that all
;  of the buffers in the list are in the kernel's main data segment.  (Buffer
;  list IO is only used for disk cache buffers, which are in the main data
;  segment and do not span pages.)

	PUSHL	EDX
	PUSHL	EBX
	LEAL	EDI, ccb_seglist.B[EDX]
	TESTB	SS:xcb_mode.B[EBX], #MODE$LIST ;Do we have a buffer list?
	JNE	dolist			;Yes
					;No - fall into dobufr on next page
.PAGE
;Here to set up the fragment list for a user buffer

$$$=!0
FRM bfr_addr , 8t	;Address of user buffer
FRM bfr_left , 4t	;Bytes left to map
FRM bfr_frags, 4t	;Number of fragments
bfr_SIZE=!$$$

dobufr:	ENTER	bfr_SIZE, 0
	LESL	EAX, SS:xcb_buffer.B[EBX]
	MOVL	bfr_addr+0.B[EBP], EAX
	MOVL	bfr_addr+4.B[EBP], ES
	MOVL	EAX, SS:xcb_count.B[EBX]
	MOVL	bfr_left.B[EBP], EAX
	CLRL	EAX
	MOVL	bfr_frags.B[EBP], EAX
2$:	LESL	EBX, bfr_addr.B[EBP]	;Get physical address of buffer
	MOVL	ECX, #1
	MOVL	FS, SS:xffPda##
	CALL	knlGetPhyAddr##
	JC	6$.S			;If error
	XCHGB	AL, AH
	RORL	EAX, #16t
	XCHGB	AL, AH			;Store physical address in the segment
	MOVL	2.B[EDI], EAX		;  list
	MOVL	EAX, bfr_addr.B[EBP]
	ADDL	EAX, #1000h		;Get distance from start of buffer to
	ANDL	EAX, #0FFFFF000h	;  end of page
	SUBL	EAX, bfr_addr.B[EBP]
	CMPL	EAX, bfr_left.B[EBP]	;Do we have this much left?
	JB	4$.S			;Yes
	MOVL	EAX, bfr_left.B[EBP]	;No - just use what we have
4$:	SUBL	bfr_left.B[EBP], EAX	;Reduce amount left
	ADDL	bfr_addr+0.B[EBP], EAX
	XCHGB	AL, AH
	RORL	EAX, #16t
	MOVB	AH, AL			;Store count in the segment list
	MOVB	AL, -1.B[EDI]
	MOVL	-1.B[EDI], EAX
	INCL	bfr_frags.B[EBP]	;Increase size of the fragment list
	CMPL	bfr_left.B[EBP], #0.B	;Anything more to map?
	JE	8$.S			;No - all done
	ADDL	EDI, #6t.B		;Yes - bump fragment list pointer
	MOVL	EAX, bfr_frags.B[EBP]	;Have room for more?
	CMPL	EAX, icb_dthlimit.B[ESI]
	JB	2$.S			;Yes - continue
	MOVL	EAX, #ER_ICDEV		;No - fail
6$:	LEAVE
	POPL	EBX
	POPL	EDX
	POPL	EDI
	CLRL	ECX
	STC
	RET

;Here with segment list completely set u p

8$:	MOVL	ECX, bfr_frags.B[EBP]	;Get number of fragments
	LEAVE
	JMP	xferrdy.S		;Continue
.PAGE
;Here if we have a buffer list - this is actually easier than a single buffer
;  since we know that no buffer in the list spans multiple pages.  Note that
;  we count on the routine in BUFFER which builds the buffer list to not
;  build one longer than we can handle.  This code also assumes that we will
;  always have either a CMD_READ10 or a CMD_WRITE10 function with a buffer
;  list.

dolist:	PUSHL	#0.B			;Initialize the buffer count
	MOVL	EBX, SS:xcb_buffer.B[EBX] ;Get offset of first buffer

.IF NE $$$CHKLIST
	MOVL	buffer, EBX
	MOVL	EAX, cb_block.B[EBX]
	MOVL	block, EAX
	MOVL	count, #0
.ENDC
2$:
.IF NE $$$CHKLIST
	INCL	count
	MOVL	EAX, count
	CMPL	EAX, icb_dthlimit.B[ESI]
	JBE	3$.S
	CRASH	LIST

3$:	MOVL	EAX, cb_block.B[EBX]
	CMPL	EAX, block
	JE	4$.S
	CRASH	LIST

.ENDC
4$:	MOVL	EAX, cb_paddr.B[EBX]	;Get physical address of the buffer
	XCHGB	AL, AH			;Fix up the byte order
	RORL	EAX, #16t		;Store address (note that we are
	XCHGB	AL, AH			;  counting on the high byte of the
	MOVL	2.B[EDI], EAX		;  address being 0 since it is stored
					;  the low byte of the count!)
	MOVW	[EDI], #200h		;Store other two bytes of the count
	ADDL	EDI, #6t.B		;Bump pointer
	INCL	[ESP]			;Count the buffer
.IF NE $$$CHKLIST
	INCL	block
.ENDC
	MOVL	EBX, cb_xnext.B[EBX]	;Get next buffer in the list
	TESTL	EBX, EBX		;Have another one?
	JNE	2$.S			;Yes - continue
	POPL	ECX			;No - get number of buffers

;Here with everything set up for the transfer
;	c{ECX} = Number of memory fragments

xferrdy:IMULL	ECX, #6.B
	POPL	EBX
	POPL	EDX
xferrd2:POPL	EDI
	MOVB	ccb_datlen+2.B[EDX], CL	;Store length of the segment list
	MOVL	ECX, icb_adtaombpnt.B[ESI]
	CMPB	[ECX], #0		;This should not be possible!
	JNE	16$			;Debug!
	MOVL	EAX, ccb_ombval.B[EDX]	;Store pointer and function into
	MOVL	[ECX], EAX		;  the mailbox
	PUSHL	EDX
	MOVL	EDX, icb_ioreg.B[ESI]
	A2IOP	P_DATA
	MOVB	AL, #CMD_START		;Poke the interface
	OUTB	[DX]
	POPL	EDX
	ADDL	ECX, #4.B		;Bump the mailbox pointer
	CMPL	ECX, icb_adtaombend.B[ESI]
	JB	10$.S
	MOVL	ECX, icb_adtaombbgn.B[ESI]
10$:	MOVL	icb_adtaombpnt.B[ESI], ECX
	MOVL	EAX, SS:xffTimeOut##
	CALL	knlXfWait##
	MOVL	ccb_xff.B[EDX], #0
	JC	13$.S			;If error
	CMPB	ccb_ifsts.B[EDX], #0	;Is the interface happy?
	JE	18$.S			;Yes
	MOVZBL	EAX, ccb_ifsts.B[EDX]	;No - get the interface status
	CMPB	AL, #1Ah
	JBE	12$.S
	MOVB	AL, #1
12$:	MOVL	EAX, iferrtbl[EAX*4]	;Get corresponding knl error code
13$:	MOVL	EDX, #-1
14$:	CLRL	ECX
	STC
	RET

16$:	CRASH	SCSI

;Here if interface did not report an error

18$:	MOVZBL	EAX, ccb_sdsts.B[EDX]	;Is the device happy?
	TESTL	EAX, EAX
	JNE	20$.S			;No - go see what's wrong
	MOVL	ECX, SS:xcb_count.B[EBX] ;Yes - get amount transfered
	RET

;Here if device reporred an error

20$:
	PUSHL	SS:xcb_count.B[EBX] 	;Save amount transfered
	MOVZBL	EBX, ccb_cdblen.B[EDX]	;Get offset of the sense data
	ADDL	EBX, EDX
	ADDL	EBX, #ccb_cdb.B
	PUSHL	DS
	POPL	ES
	CALL	xossciMapError##	;Get corresponding knl error code
	POPL	ECX
	CMPL	EDX, #-1.B		;Have a residue?
	JE	14$.S			;No - indicate no data transfered
	STC				;Yes - return total amount transfered
	RET				;  and let the caller figure out what
					;  happened!
.PAGE
	.SBTTL	softreset - Subroutine to do soft controller reset

;Subroutine to do soft controller reset
;	CALL	softreset

softreset:
	MOVL	EDX, icb_ioreg.B[ESI]
	MOVB	AL, #CON$SRST
	OUTB	[DX]
	MOVL	EAX, #XT_SECOND/4t	;Wait for 1/4 second
	JMP	knlXfTimeWait##
.PAGE
	.SBTTL	adtaint - SCSI ADTA interface interrupt routine

adtaint:PUSHAL				;Save all registers
	PUSHL	DS
	PUSHL	ES
	PUSHL	FS
	PUSHL	GS
	PUSHL	#GS_DATA.B
	POPL	DS
fix1:	MOVL	EDI, #0			;Get offset of our ICB
fix2:	JMP	adtaintcom		;Go to common code
ADTAINTSZ=!$-adtaint

;Common interrupt routine
;	c{EDI} = Offset of ICB for interface

adtaintcom:
	MOVL	EDX, icb_ioreg.B[EDI]	;Get the interrupt flags
	A2IOP	P_INT
	INB	[DX]
	ORB	icb_adtaintflags.B[EDI], AL ;Remember them
	A2IOP	P_CON-P_INT
	MOVB	AL, #CON$IRST		;Reset the interrupt flags
	OUTB	[DX]
	CALL	knlReqFork##		;Request fork
	MOVB	AL, #INT_EOI		;Release interrupt controllers
	CMPB	icb_int.B[EDI], #7
	CLI
	JBE	4$.S
	OUTB	P_INC2P0
4$:	OUTB	P_INC1P0
	JMP	knlDismissInt2##	;And dismiss interrupt
.PAGE
4$:	RET

;Fork level routine - get here whenever have an interrupt from the interface.
;  We can get 2 kinds of interrupts:
;	1.  Input mailbox interrupt
;	2.  Command done interrupt

adtafork:
	MOVL	ESI, EDI
	TESTB	icb_adtaintflags.B[ESI], #INT$HACC ;Command complete?
	JE	10$.S			;No
	ANDB	icb_adtaintflags.B[ESI], #~INT$HACC
	TESTB	icb_adtastatus.B[ESI], #IS$CMDDONE ;Are we expecting this?
	JE	20$.S			;No - ignore it
	MOVL	EDI, icb_curdcb.B[ESI]	;Yes - get offset of current DCB
	CLRL	EAX
	CALL	knlResumeOutput##

;Here with command complete interrupt (if any) processed

10$:	TESTB	icb_adtaintflags.B[ESI], #INT$MBIF
	JE	4$.S
	ANDB	icb_adtaintflags.B[ESI], #~INT$MBIF
12$:	MOVL	EDX, icb_adtaimbpnt.B[ESI] ;Get input mailbox taker pointer
	CMPB	[EDX], #0		;Is the next mailbox full?
	JE	4$.S			;No - nothing more to do
	MOVL	EAX, [EDX]		;Yes - get contents
	MOVB	[EDX], #0		;Release the mailbox
	ADDL	EDX, #4.B		;Bump pointer
	CMPL	EDX, icb_adtaimbend.B[ESI]
	JB	18$.S
	MOVL	EDX, icb_adtaimbbgn.B[ESI]
18$:	MOVL	icb_adtaimbpnt.B[EDI], EDX
	SHRL	EAX, #8t
	ANDL	EAX, #700h		;Get corresponding CCB offset
	ADDL	EAX, icb_adtaccbbase.B[ESI]
	MOVL	EAX, ccb_xff.B[EAX]	;Poke the extended fork if we have one
	TESTL	EAX, EAX
	JE	12$.S
	MOVL	ES, EAX
	CLRL	EAX
	CALL	knlResumeXf##
	JMP	12$.S			;Continue

;Here if are ignoring a command interrupt

20$:	INCL	icb_adtaspurint.B[ESI]
	JMP	10$.S

.PAGE
	.SBTTL	adtaoas - Once-a-second routine

;Here once each second

adtaoas:MOVL	EDI, firsticb		;Get first type SCSI ADTA ICB
2$:	CLI
	CMPB	icb_iotimer[EDI], #0	;Is our timer running?
	JE	4$.S			;No - go on
	DECB	icb_iotimer[EDI]	;Yes - count it down
	JE	8$.S
4$:	STI
6$:	MOVL	EDI, icb_nexts.B[EDI]	;Advance to next ICB
	TESTL	EDI, EDI		;Continue if have another
	JNE	2$.S
	RET				;Finished

;Here if have hung SCSI interface

8$:	CRASH	????

	.MOD	4
itintcode:
	.LONG	-1
	.BLKL	{ADTAINTSZ-1}/4

	DATA

	.MOD	4
adtainitblk:					;Characteristics description
 DCHARBGN  2, knlDCharValCom##			;  block for initialization
 DCHARENT  BOOT  , DECV, , 4, 0, 0              , initboot, 0
 DCHARENT  RESULT, STR , , 0, 0, knlGetDcNullS##, 0       , 0
.PAGE
	.SBTTL	Data

	DATA

	.MOD	4

firsticb:.LONG	0		;Offset of first SCSI ADTA ICB
lasticb: .LONG	0		;Offset of last SCSI ADTA ICB
irqname: .LONG  'SCSI'		;For addunit routine
	 .LONG  0, 0, 0

iferrtbl:.LONG	ER_DIFER	;00 - Illegal
	 .LONG	ER_DIFER	;01 - Illegal
	 .LONG	ER_DIFER	;02 - Illegal
	 .LONG	ER_DIFER	;03 - Illegal
	 .LONG	ER_DIFER	;04 - Illegal
	 .LONG	ER_DIFER	;05 - Illegal
	 .LONG	ER_DIFER	;06 - Illegal
	 .LONG	ER_DIFER	;07 - Illegal
	 .LONG	ER_DIFER	;08 - Illegal
	 .LONG	ER_DIFER	;09 - Illegal
	 .LONG	ER_SLKCE	;0A - Linked command complete without error
	 .LONG	ER_SLKCE	;0B - Linked command complete without error,
				;	interrupt requested
	 .LONG	ER_DIFER	;0C - Illegal
	 .LONG	ER_DIFER	;0D - Illegal
	 .LONG	ER_DIFER	;0E - Illegal
	 .LONG	ER_DIFER	;0F - Illegal
	 .LONG	ER_DIFER	;10 - Illegal
	 .LONG	ER_STDNR	;11 - Selection time-out
	 .LONG	ER_SDLNE	;12 - Data length error
	 .LONG	ER_SUXBF	;13 - Unexpected bus free
	 .LONG	ER_STBPS	;14 - Target bus phase sequence failure
	 .LONG	ER_DIFER	;15 - Illegal output mailbox command
	 .LONG	ER_DIFER	;16 - Illegal CCB operation code
	 .LONG	ER_SLKCE	;17 - Linked CCB does not have same LUN
	 .LONG	ER_DIFER	;18 - Invalid target direction
	 .LONG	ER_DIFER	;19 - Duplicate CCB in target mode
	 .LONG	ER_DIFER	;1A - Invalid CCB or segment list parameter

.IF NE $$$CHKLIST
 buffer::.LONG 0
 block:: .LONG 0
 count:: .LONG 0
.ENDC

	LKEEND

XMTFIFOSIZE=!255t		;Size of transmit FIFO
RCVFIFOSIZE=!1023t		;Size of receive FIFO
XMTPBUFSIZE=!32t		;Size of transmit priority buffer

;Define AIOP IO register offsets (direct access)

SERD_DATA0   =!00h		;(W-both)  Channel 0 receive/transmit data
SERD_DATA1   =!02h		;(W-both)  Channel 1 receive/transmit data
SERD_DATA2   =!04h		;(W-both)  Channel 2 receive/transmit data
SERD_DATA3   =!06h		;(W-both)  Channel 3 receive/transmit data
SERD_DATA4   =!08h		;(W-both)  Channel 4 receive/transmit data
SERD_DATA5   =!0Ah		;(W-both)  Channel 5 receive/transmit data
SERD_DATA6   =!0Ch		;(W-both)  Channel 6 receive/transmit data
SERD_DATA7   =!0Eh		;(W-both)  Channel 7 receive/transmit data
SERD_FIFOCNT0=!10h		;(E-read)  Channel 0 FIFO count (byte read
				;	     gives transmit FIFO count, word
				;	     read gives receive FIFO count)
SERD_FIFOCNT1=!12h		;(E-read)  Channel 1 FIFO count
SERD_FIFOCNT2=!14h		;(E-read)  Channel 2 FIFO count
SERD_FIFOCNT3=!16h		;(E-read)  Channel 3 FIFO count
SERD_FIFOCNT4=!18h		;(E-read)  Channel 4 FIFO count
SERD_FIFOCNT5=!1Ah		;(E-read)  Channel 5 FIFO count
SERD_FIFOCNT6=!1Ch		;(E-read)  Channel 6 FIFO count
SERD_FIFOCNT7=!1Eh		;(E-read)  Channel 7 FIFO count
SERD_CHNSTS0 =!20h		;(E-both)  Channel 0 status
				;  NOTE: following bits apply to all channels
  CHNSTS$STATMODE =!8000	;  Status mode enable
  CHNSTS$RCVOVRFLW=!2000	;  Receive FIFO overflow
  CHNSTS$RCV2MATCH=!1000	;  Receive compare byte 2 match
  CHNSTS$RCV1MATCH=!0800	;  Receive compare byte 1 match
  CHNSTS$RCVBREAK =!0400	;  BREAK received
  CHNSTS$RCVFRMERR=!0200	;  Receive framing error
  CHNSTS$RCVPARERR=!0100	;  Receive parity error
  CHNSTS$CTSACT   =!0020	;  CTS input asserted
  CHNSTS$DSRACT   =!0010	;  DSR input asserted
  CHNSTS$CDACT    =!0008	;  CD input asserted
  CHNSTS$XMTFIFOEM=!0004	;  Transmit FIFO is empty
  CHNSTS$XMTSHRGEM=!0002	;  Transmit shift register is empty
  CHNSTS$RCVDATA  =!0001	;  Receive data available

;NOTE: CHNSTS_STATMODE appears to be read/write, all others appear to be
;	 read-only!?

SERD_CHNLSTS1=!22h		;(E-both)  Channel 1 status
SERD_CHNLSTS2=!24h		;(E-both)  Channel 2 status
SERD_CHNLSTS3=!26h		;(E-both)  Channel 3 status
SERD_CHNLSTS4=!28h		;(E-both)  Channel 4 status
SERD_CHNLSTS5=!2Ah		;(E-both)  Channel 5 status
SERD_CHNLSTS6=!2Ch		;(E-both)  Channel 6 status
SERD_CHNLSTS7=!2Eh		;(E-both)  Channel 7 status
SERD_INTID0  =!30h		;(B-read)  Channel 0 interrupt ID
  INTID$RCVFTRIG=!20h		;  Receive FIFO trigger level interrupt
  INTID$XMTFEMP =!10h		;  Transmit FIFO empty interrupt
  INTID$SPCRCV  =!08h		;  Special receive condition interrupt
  INTID$DELTACD =!04h		;  CD change interrupt
  INTID$DELTACTS=!02h		;  CTS change interrupt
  INTID$DELTADSR=!01h		;  DSR change interrupt
SERD_INTID1  =!31h		;(B-read)  Channel 1 interrupt ID
SERD_INTID2  =!32h		;(B-read)  Channel 2 interrupt ID
SERD_INTID3  =!33h		;(B-read)  Channel 3 interrupt ID
SERD_INTID4  =!34h		;(B-read)  Channel 4 interrupt ID
SERD_INTID5  =!35h		;(B-read)  Channel 5 interrupt ID
SERD_INTID6  =!36h		;(B-read)  Channel 6 interrupt ID
SERD_INTID7  =!37h		;(B-read)  Channel 7 interrupt ID
SERD_CMDREG  =!38h		;(B-write) Command register
  CMDREG$RESETALL =!80h		;  Reset AIOP (all channels - bit must be
				;    cleared to end reset state)
  CMDREG$XMTOVRRD =!40h		;  Transmit software off override
  CMDREG$RSTUART  =!20h		;  Reset channel's UART
  CMDREG$RSTXMTFCR=!10h		;  Reset channel's transmit FIFO count register
  CMDREG$RSTRCVFCR=!08h		;  Reset channel's receive FIFO count register
  CMDREG$CHNLNUM  =!07h		;  Channel number for above bits
SERD_INTSTS  =!39h		;(B-read)  Interrupt status register
  INTSTS$CHNL7  =!80h		;  Channel 7 interrupt pending
  INTSTS$CHNL6  =!40h		;  Channel 6 interrupt pending
  INTSTS$CHNL5  =!20h		;  Channel 5 interrupt pending
  INTSTS$CHNL4  =!10h		;  Channel 4 interrupt pending
  INTSTS$CHNL3  =!08h		;  Channel 3 interrupt pending
  INTSTS$CHNL2  =!04h		;  Channel 2 interrupt pending
  INTSTS$CHNL1  =!02h		;  Channel 1 interrupt pending
  INTSTS$CHNL0  =!01h		;  Channel 0 interrupt pending
SERD_INTMSK  =!3Ah		;(B-both)  Interrupt mask register
  INTMSK$CHNL7  =!80h		;  Enable channel 7 interrupts
  INTMSK$CHNL6  =!40h		;  Enable channel 6 interrupts
  INTMSK$CHNL5  =!20h		;  Enable channel 5 interrupts
  INTMSK$CHNL4  =!10h		;  Enable channel 4 interrupts
  INTMSK$CHNL3  =!08h		;  Enable channel 3 interrupts
  INTMSK$CHNL2  =!04h		;  Enable channel 2 interrupts
  INTMSK$CHNL1  =!02h		;  Enable channel 1 interrupts
  INTMSK$CHNL0  =!01h		;  Enable channel 0 interrupts
SERD_XADDR   =!3Ch		;(W-write) Index register address
SERD_XDATA   =!3Eh		;(E-both)  Index register data

;Define MUDBAC IO register offsets (direct access)

SERD_MBASE  =!0h		;(B-write) Base address for AIOP (shifted 6
				;	     bits)  
SERD_MINTID =!1h		;AIOP interrupt request register
SERD_MINTCTL=!2h		;Interrupt control register
  MINTCTL$INTSEL=!0F0h		;  Interrupt level select
				;    10h = IRQ3
				;    20h = IRQ4
				;    30h = IRQ5
				;    40h = IRQ9
				;    50h = IRQ10
				;    60h = IRQ11
				;    70h = IRQ12
				;    80h = IRQ15
  MINTCTL$ENBINT=!008h		;  Global interrupts enable
  MINTCTL$EOI   =!004h		;  Strobe and clear interrupt line (EOI)
  MINTCTL$INDEX =!003h		;  Index for value written to SERD_MBASE
SERD_MENABLE=!3h
  MENABLE$CLKONLY=!80h		;  Clock interrupt only
  MENABLE$CLKFREQ=!70h		;  Clock frequency
    CLKFREQ_274    =!60h	;  Clock interrupt at 274 Hertz
    CLKFREQ_137    =!50h	;  Clock interrupt at 137 Hertz
    CLKFREQ_69     =!40h	;  Clock interrupt at 69 Hertz
    CLKFREQ_34     =!30h	;  Clock interrupt at 34 Hertz
    CLKFREQ_17     =!20h	;  Clock interrupt at 20 Hertz
    CLKFREQ_9      =!10h	;  Clock interrupt at 10 Hertz
    CLKFREQ_NONE   =!00h	;  Clock interrupt disabled
  MENABLE$AIOP3  =!08h		;  Enable AIOP #3 register access
  MENABLE$AIOP2  =!04h		;  Enable AIOP #2 register access
  MENABLE$AIOP1  =!02h		;  Enable AIOP #1 register access
  MENABLE$AIOP0  =!01h		;  Enable AIOP #0 register access

;Define AIOP register index values

X_RCVFIFO  =!000h		;          Receive FIFO
X_XMTFIFL  =!800h		;          Transmit FIFO

X_RCVPROC  =!900h		;(?-????)  Receive processor control
X_XMTSWFC  =!908h		;(?-????)  Transmit software flow control (8Ah
				;	     disables, 0C5h enables)
X_XMTXOFCHR=!909h		;(B-both)  Transmit X-OFF character
X_XONCHAR  =!90Ah		;(B-both)  Unknown?????
X_XMTXONCHR=!90Bh		;(B-both)  Transmit X-ON character
X_XANY     =!90Ch		;(?-????)  X-ANY (86h disables, 21h enables)
X_RCVMASKC =!912h		;(?-????)  Receive mask character
X_CMPIGN0  =!914h		;(B-????)  Compare/ignore #0 (82h disables,
				;	     0CEh enables)
X_CMPBYTE0 =!915h		;(B-????)  Compare byte 0 value
X_CMP1     =!916h		;(B-????)  Compare #1 (82h disables, 0C4h
				;	     enables)
X_CMPBYTE1 =!917h		;(B-????)  Compare byte 1 value
X_CMP2     =!918h		;(?-????)  Compare #2
X_INT1     =!91Ah		;(B-????)  Interrupt #1
;          =!91Bh		;(B-????)  Unknown!! 81h does something!!
X_IGNREP1  =!91Ch		;(?-????)  Ignore/replace #1
X_INT2     =!91Eh		;(?-????)  Interrupt #2
X_IGNREP2  =!920h		;(?-????)  Ignore/replace #2
X_ENBRCVF  =!922h		;(?-????)  Enable receive FIFO (0Ah disables,
				;	     08h enables)
X_XMTENB   =!980h		;(B-both)  Transmit processor enables register
  XMTENB$ENBREP1W2=!10h		;  Enable replace byte 1 with 2 bytes
  XMTENB$ENBIGN2  =!08h		;  Enable ignore byte 2
  XMTENB$ENBIGN1  =!04h		;  Enable ignore byte 1
  XMTENB$ENBCMP2  =!02h		;  Enable compare byte 2
  XMTENB$ENBCMP1  =!01h		;  Enable compare byte 1
X_XMTCMP1  =!988h		;(B-both)  Transmit compare value #1
X_XMTCMP2  =!989h		;(B-both)  Transmit compare value #2
X_XMTREP1B1=!98Ah		;(B-both)  Transmit replace value #1 - byte 1
X_XMTREP1B2=!98Bh		;(B-both)  Transmit replace value #1 - byte 2
X_XMTREP2  =!98Ch		;(B-both)  Transmit replace value #2

X_RCVFOPNT =!990h		;(W-both)  Receive FIFO out pointer
X_RCVFIPNT =!992h		;(W-both)  Receive FIFO in pointer
X_XMTFOPNT =!994h		;(B-both)  Transmit FIFO out pointer
X_XMTFIPNT =!995h		;(B-both)  Transmit FIFO in pointer
X_XMTPCNT  =!996h		;(B-both)  Transmit priority count
  XMTPCNT$PEND=!80h		;  Priority data pending
X_XMTPPNT  =!997h		;(B-both)  Transmit priority pointer

X_XMTPBUF  =!9C0h		;          Transmit priority buffer

X_XMTCTL   =!0FF0h		;(W-write) Transmit control
  XMTCTL$SETBREAK=!1000h	;  Send break condition (must clear)
  XMTCTL$LOOPBACK=!0800h	;  Local loopback set for test
  XMTCTL$SETDTR  =!0400h	;  Assert DTR
  XMTCTL$SETRTS  =!0200h	;  Assert RTS
  XMTCTL$ENABLE  =!0100h	;  Enable transmitter
  XMTCTL$ENBCTSFC=!0080h	;  Enable CTS flow control
  XMTCTL$ENBRTSTG=!0040h	;  Enable RTS toggle
  XMTCTL$ENBINT  =!0010h	;  Enable transmit interrupt
  XMTCTL$2BITSTOP=!0008h	;  2 stop bits (0 = 1 stop bit)
  XMTCTL$ENBPAR  =!0004h	;  Enable parity (0 = no parity)
  XMTCTL$EVNPAR  =!0002h	;  Even parity (0 = odd parity)
  XMTCTL$8BITDATA=!0001h	;  8 bit data (0 = 7 bit data)
X_RCVCTL   =!0FF2h		;(B-write) Receive control
  RCVCTL$ENBRTSFC=!40h		;  Enable RTS flow control
  RCVCTL$ENBRCVPR=!20h		;  Enable receive processor
  RCVCTL$FTLVL   =!18h		;  Receive FIFO trigger level
    FTLVL_0        =!00h	;  Receive FIFO trigger level 0 (no trigger)
    FTLVL_1        =!08h	;  Receive trigger level 1 character
    FTLVL_1_2      =!10h	;  Receive trigger level 1/2
    FTLVL_7_8      =!18h	;  Receive trigger level 7/8
  RCVCTL$ENBSCINT=!04h		;  Enable special receive condition interrupt
  RCVCTL$ENBDRINT=!02h		;  Enable receive data ready interrupt
  RCVCTL$ENBMCINT=!01h		;  Enable modem change interrupt

X_BAUDRATE =!0FF4h		;(W-write) Baud rate {(230400/RATE) - 1}
X_CLKPRE   =!0FF6h		;(B-write) Clock prescaler
  CLKPRE_10  =!19h		;  Mod 9 (divide by 10) prescale

;Define bits returned in AH when reading data in read status mode

RSM_BREAK =!08h			;Break received
RSM_FRMERR=!04h			;Receive framing error
RSM_OVRERR=!02h			;Receive overrun error
RSM_PARERR=!01h			;Receive parity error

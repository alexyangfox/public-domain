	.TITLE	DISPLAY - Display routines for the parking unit BIOS

	.PROC	80386
	.STK16

	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD XOSINC:\XMAC\XOSXELAN.PAR
	.INCLUD XOSINC:\XMAC\XOSXT6963C.PAR
	.INCLUD	BIOS.PAR

	SEGMENT

;Subroutine to initialize the display routines - This subroutine initallizes
;  the display controller, clears the display buffer, and sets up the INT 10
;  vector.
;	CALL	displayinit

displayinit::
	MOVW	DX, #P_LCDCFG		;Point to the LCD configuration register
	MOVB	AL, #0			;Reset the display
	OUTB	[DX]
	MOVW	CX, #300t		;Wait a short time
2$:	NOP
	NOP
	LOOP	CX, 2$
	MOVB	AL, #81h		;Terminate the reset state, set for
	OUTB	[DX]			;  8x6 characters
;;;;;	MOVL	10h*4, #{CODESEL<16t}+int10

	MOVL	10h*4, #int10

	MOVW	DX, #P_LCDDATA		;Point to the data register
	MOVB	AH, #CMD_MODE1|MODE1_OR
	CALL	writecmd
	MOVB	AH, #CMD_MODE2|MODE2_TEXT|MODE2_CURSOR|MODE2_BLINK ;Text mode
	CALL	writecmd
	MOVB	AH, #0
	CALL	writedata
	MOVB	AH, #0			;Set both text and graphics base
	CALL	writedata		;  addresses to 0
	MOVB	AH, #CMD_TEXTADDR
	CALL	writecmd
	MOVB	AH, #0
	CALL	writedata
	MOVB	AH, #0
	CALL	writedata
	MOVB	AH, #CMD_GRPHADDR
	CALL	writecmd
	MOVB	AH, #40t		;Give the display the number of
	CALL	writedata		;  text columns
	MOVB	AH, #0
	CALL	writedata
	MOVB	AH, #CMD_TEXTWID
	CALL	writecmd
	MOVB	AH, #40t		;Also give it the number of graphios
	CALL	writedata		;  columns
	MOVB	AH, #0
	CALL	writedata
	MOVB	AH, #CMD_GRPHWID
	CALL	writecmd

;Here to clear the display

displayclear:
	CLRW	AX			;Set cursor position to start of the
	MOVW	curpos, AX		;  display
	CALL	writedata
	CALL	writedata
	MOVB	AH, #CMD_CURPOS
	CALL	writecmd
	MOVB	AH, #0
	CALL	writedata		;Set the display data address to the
	CALL	writedata		;  start of the display buffer
	MOVB	AH, #CMD_ADDRESS
	CALL	writecmd
	MOVB	AH, #CMD_AUTOWRT	;Start auto-write
	CALL	writecmd
	MOVW	DI, #LCD_WIDTH*LCD_HEIGHT
4$:	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
6$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 6$
	DECW	DX			;Point to the data register
	MOVB	AL, #0
	OUTB	[DX]
	DECW	DI
	JNE	4$.S
	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
8$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 8$
	DECW	DX			;Point to the data register
	MOVB	AH, #CMD_AUTOEND	;Terminate auto-write mode
	JMP	writecmd
.PAGE
	.SBTTL	displaycsstring - Subroutine to display string from code segment

;Subroutine to display null terminated string from the code segment
;	c[BP] = Offset of string in code segment
;	CALL	displaycsstring

displaycsstring::
	PUSHW	CS
	POPW	ES
	CLRW	CX
	MOVW	AX, #1301h
	MOVW	DX, curpos
	INT	10h
ret002:	RET
.PAGE


int10::	PUSHAW				;Save all registers
	PUSHW	DS
	PUSHW	ES
	MOVW	DS, CS:dsvalue#
	CMPB	AH, #13h		;Valid function?
	JA	8$.S			;No - just return quietly!
	MOVZBW	BX, AH			;Yes - get the function
	ADDW	BX, BX
	CALLI	CS:int10tbl[BX]		;Dispatch to the function routine
8$:	POPW	ES
	POPW	DS
	POPAW
	IRET

	.MOD	2

int10tbl:
	.WORD	int10_0		; 0 - Set video mode
	.WORD	ret002		; 1 - Set cursor size (ignored)
	.WORD	int10_2		; 2 - Set cursor position
	.WORD	int10_3		; 3 - Get cursor position
	.WORD	ret002		; 4 - Illegal
	.WORD	ret002		; 5 - Set page (ignored)
	.WORD	int10_6		; 6 - Scroll up
	.WORD	int10_7		; 7 - Scroll down
	.WORD	ret002		; 8 - Read character/attribute (not supported)
	.WORD	int10_9		; 9 - Write character/attribute
	.WORD	int10_A		;0A - Write character only
	.WORD	ret002		;0B - Set color palette (not supported)
	.WORD	ret002		;0C - Write pixel (not supported)
	.WORD	ret002		;0D - Read pixel (not supported)
	.WORD	int10_E		;0E - Write teletype character
	.WORD	int10_F		;0F - Get video status
	.WORD	ret002		;10 - Set palette registers (not supported)
	.WORD	ret002		;11 - Load character generator (not supported)
	.WORD	ret002		;12 - Alternate select (not supported)
	.WORD	int10_13	;13 - Write string
.PAGE

	.SBTTL	int10_0 - INT 10 function 0 - Set video mode

;Here for INT 10 function 0 - Set video mode
;	c(AL) = Bit    8: Do not clear screen if set
;	        Bits 7-0: Mode (ignored!)
;	c(AH) = 0
;	INT	10h

;NOTE:	All this really does is clear the screen if that is requested since
;	we only support a single mode!

int10_0:

	.SBTTL	int10_2 - INT 10 function 2 - Set cursor position

;Here for INT 10 function 2 - Set cursor position
;	c(AH) = 2
;	c(BH) = Display page (ignored)
;	c(DL) = Character
;	c(DH) = Line
;	INT	10h

int10_2:

	.SBTTL	int10_3 - INT 10 function 3 - Get cursor position

;Here for INT 10 function 3 - Get cursor position
;	c(AH) = 3
;	c(BH) = Display page (ignored)
;	INT	10h
;	c(CL) = Ending cursor scan line (always 7)
;	c(CH) = Starting cursor scan line (always 0)
;	c(DL) = Character
;	c(DH) = Line

int10_3:

	.SBTTL	int10_6 - INT 10 functions 6 and 7 - Scroll up or down

;Here for INT 10 functions 6 and 7 - Scroll up or down
;	c(AL) = Scroll distance (function is ignored if not 0!)
;	c(AH) = 6 or 7
;	c(BH) = Attribute to us on blanked lines (ignored)
;	c(CL) = Left character of area to scroll
;	c(CH) = Top line of area to scroll
;	c(DL) = Right character of area to scroll
;	c(DH) = Bottom line of area to scroll
;	INT	10h

;NOTE:	Only the clear window (AL = 0) sub-function is supported.  Scrolling
;	requests are ignored!

int10_6:
int10_7:

	.SBTTL	int10_9 - INT 10 functions 9 and 0A - Write character

;Here for INT 10 functions 9 and 0A - Write character with and without
;  attributes
;	c(AL) = Character
;	c(AH) = 9 or 0Ah
;	c(BL) = Character attribute (ignored)
;	c(BH) = Display page (ignored)
;	c[CX] = Repeat count
;	INT	10h

;NOTE:	Since we don't support attributes, functions 9 and 0A are identical

int10_9:
int10_A:

	.SBTTL	int10_E - INT 10 function 0E - Write teletype character

;Here for INT 10 function 0E - Write teletype character
;	c(AL) = Character
;	c(AH) = 0Eh
;	c(BH) = Page (ignored)
;	INT	10h

int10_E:

	.SBTTL	int10_F - INT 10 function 0F - Get video status

;Here for INT 10 function 0F - Get video status
;	c(AH) = 0Fh
;	INT	10
;	c(AL) = Current mode (always 3)
;	c(BH) = Current page (always 0)

int10_F:

.PAGE
	.SBTTL	int10_13 - INT 10 function 13 - Write string

;Here for INT 10 function 13 - Write string function
;	c(AL)    = Function bits:
;		     Bit 0 = Advance cursor if set
;		     Bit 1 = String includes attribute bytes if set
;	c(AH)    = 13h
;	c[ES:BP] = Address of string
;	c[CX]    = Length of string (-1 means string is null terminated)
;	c(DL)    = Starting character number
;	c(DH)    = Starting row number
;	INT	10h

;NOTE:	Since we do not support attributes on the LCD display, any attributes
;	specified are ignored, although the format which includes attribute
;	bytes in the string is allowed.

int10_13:






lcdstring:
	MOVB	AL, CS:[BX]		;Get next character
	CMPB	AL, #0			;Finished?
	JE	ret002.S		;Yes
	INCW	BX
	CMPB	AL, #CR
	JE	2$.S
	CMPB	AL, #LF			;No - end of line?
	JE	4$.S			;Yes
	CALL	lcdchar			;No - just display the character
	JMP	lcdstring.S		;Continue

;Here with CR character - go to start of current line

2$:	MOVB	curpos+0, #0
	JMP	6$.S

;Here with LF character - advance to next line

4$:	INCB	curpos+1
	CMPB	curpos+1, #LCD_HEIGHT	;At end of display?
	JB	6$.S			;No
	CALL	lcdscroll		;Yes - scroll the display one line
6$:	CALL	lcdsetpos		;Update hardware cursor position
	JMP	lcdstring.S		;Continue
.PAGE
;Subroutine to display a character on the console LCD display
;	c(AL) = Character to display
;	CALL	lcdchar

lcdchar:PUSHW	AX
	MOVZBW	AX, curpos+1
	IMULW	AX, #LCD_WIDTH
	MOVZBW	CX, curpos+0
	ADDW	AX, CX
	PUSHW	AX
	MOVB	AH, AL
	CALL	writedata
	POPW	AX
	CALL	writedata
	MOVB	AH, #CMD_ADDRESS
	CALL	writecmd
	POPW	AX
	SUBB	AL, #20h		;Change to display character code
	MOVB	AH, AL			;Give the character to the display
	CALL	writedata
	MOVB	AH, #CMD_WRITE
	CALL	writecmd
	INCB	curpos+0
	CMPB	curpos+0, #LCD_WIDTH
	JB	lcdsetpos.S
	MOVB	curpos+0, #0
	INCB	curpos+1
	CMPB	curpos+1, #LCD_HEIGHT
	JB	lcdsetpos.S
	CALL	lcdscroll
lcdsetpos:
	MOVB	AH, curpos+0
	CALL	writedata
	MOVB	AH, curpos+1
	CALL	writedata
	MOVB	AH, #CMD_CURPOS
	JMP	writecmd
.PAGE
;Subroutine to scroll the LCD display by one line
;	CALL	lcdscroll

lcdscroll:
	DECB	curpos+1
	MOVB	cnt2, #LCD_HEIGHT-1
	MOVW	lpnt, #0
2$:	MOVW	AX, lpnt
	ADDW	AX, #LCD_WIDTH.B
	PUSHW	AX
	MOVB	AH, AL
	CALL	writedata
	POPW	AX
	CALL	writedata
	MOVB	AH, #CMD_ADDRESS
	CALL	writecmd
	MOVB	AH, #CMD_AUTOREAD	;Start auto-read
	CALL	writecmd
	MOVW	DI, #LCD_WIDTH*LCD_HEIGHT
	MOVW	SI, #linebfr
	MOVW	DI, #LCD_WIDTH
4$:	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
6$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #04h
	LOOPE	CX, 6$
	DECW	DX			;Point to the data register
	INB	[DX]
	MOVB	[SI], AL
	INCW	SI
	DECW	DI
	JNE	4$.S
	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
8$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #04h
	LOOPE	CX, 8$
	DECW	DX			;Point to the data register
	MOVB	AH, #CMD_AUTOEND	;Terminate auto-read mode
	CALL	writecmd
	MOVB	AH, lpnt+0
	CALL	writedata
	MOVB	AH, lpnt+1
	CALL	writedata
	MOVB	AH, #CMD_ADDRESS
	CALL	writecmd
	MOVB	AH, #CMD_AUTOWRT	;Start auto-write
	CALL	writecmd
	MOVW	DI, #LCD_WIDTH*LCD_HEIGHT
	MOVW	SI, #linebfr
	MOVW	DI, #LCD_WIDTH
10$:	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
12$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 12$
	DECW	DX			;Point to the data register
	MOVB	AL, [SI]
	OUTB	[DX]
	INCW	SI
	DECW	DI
	JNE	10$.S
	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
14$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 14$
	DECW	DX			;Point to the data register
	MOVB	AH, #CMD_AUTOEND	;Terminate auto-write mode
	CALL	writecmd
	ADDW	lpnt, #LCD_WIDTH
	DECW	cnt2
	JNE	2$

;Here with N - 1 lines moved up one line - now fill the last line with blanks

	MOVB	AH, lpnt+0
	CALL	writedata
	MOVB	AH, lpnt+1
	CALL	writedata
	MOVB	AH, #CMD_ADDRESS
	CALL	writecmd
	MOVB	AH, #CMD_AUTOWRT	;Start auto-write
	CALL	writecmd
	MOVW	DI, #LCD_WIDTH
16$:	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
18$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 18$
	DECW	DX			;Point to the data register
	MOVB	AL, #0
	OUTB	[DX]
	DECW	DI
	JNE	16$.S
	INCW	DX			;Point to the status register
	MOVW	CX, #1500t
20$:	INB	[DX]			;Wait until display is ready
	TESTB	AL, #08h
	LOOPE	CX, 20$
	DECW	DX			;Point to the data register
	MOVB	AH, #CMD_AUTOEND	;Terminate auto-write mode
	JMP	writecmd
.PAGE
	.SBTTL	writedata - Subroutine to output data byte to display

;Subrouitne to output a data byte to the display controller
;	c(AH) = Value to output
;	c[DX] = Data register
;	CALL	writedata
;	C:set = Error
;	C:clr = Normal
;	DX and AH always unchanged

writedata:
	INCW	DX			;Point to commmand/status register
	MOVW	CX, #1500h		;Don't do this too much
4$:	INB	[DX]			;Get status
	NOTB	AL
	TESTB	AL, #03h
	LOOPNE	CX, 4$			;Wait if not ready
	DECW	DX			;Point to the data register
	MOVB	AL, AH			;Get the value
	OUTB	[DX]			;Output it
	RET

	.SBTTL	writecmd - Subroutine to output command byte to display

;Subrouitne to output a command byte to the display controller
;	c(AH)  = Value to output
;	c{EDX} = Data register
;	CALL	writecmd
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	EDX and AH always unchanged

writecmd:
	INCW	DX			;Point to command/status register
	MOVW	CX, #1500h		;Dont do this too much
10$:	INB	[DX]			;Get status
	NOTB	AL
	TESTB	AL, #03h
	LOOPNE	CX, 10$			;Wait if not ready
	MOVB	AL, AH			;Get the value
	OUTB	[DX]			;Output it as a command
	DECW	DX			;Point to the data register
	RET

	.TITLE	VID

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386
	.INCLUD XOSINC:\XMAC\DEFINES.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD XOSINC:\XMAC\CLIBX.PAR
	.INCLUD XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	VID.PAR

	.STDSEGS

;This module contains code to process the command line and to input the file
;  to be edited

	.PSECT	_ODATA_p

	.LONG	0

	.PSECT	_DATA_p

;Define the procarg table

optword:.LONG	sques   , 0                   , 0     , fnchelp   , 0
	.LONG	sh      , 0                   , 0     , fnchelp   , 0
	.LONG	shel    , 0                   , 0     , fnchelp   , 0
	.LONG	shelp   , 0                   , 0     , fnchelp   , 0
	.LONG	slin    , ASF$VALREQ|ASF$NVAL , 0     , fnclines  , 0
	.LONG	slines  , ASF$VALREQ|ASF$NVAL , 0     , fnclines  , 0
	.LONG	scol    , ASF$VALREQ|ASF$NVAL , 0     , fnccolumns, 0
	.LONG	scolumns, ASF$VALREQ|ASF$NVAL , 0     , fnccolumns, 0
	.LONG	saslc   , ASF$VALREQ|ASF$LSVAL, coltbl, fnccolor  , aslattrb#
	.LONG	saslb   , ASF$VALREQ|ASF$LSVAL, bkgtbl, fncbkgnd  , aslattrb#
	.LONG	sislc   , ASF$VALREQ|ASF$LSVAL, coltbl, fnccolor  , islattrb#
	.LONG	sislb   , ASF$VALREQ|ASF$LSVAL, bkgtbl, fncbkgnd  , islattrb#
	.LONG	scmdc   , ASF$VALREQ|ASF$LSVAL, coltbl, fnccolor  , cmdattrb#
	.LONG	scmdb   , ASF$VALREQ|ASF$LSVAL, bkgtbl, fncbkgnd  , cmdattrb#
	.LONG	srspc   , ASF$VALREQ|ASF$LSVAL, coltbl, fnccolor  , rspattrb#
	.LONG	srspb   , ASF$VALREQ|ASF$LSVAL, bkgtbl, fncbkgnd  , rspattrb#
	.LONG	stxtc   , ASF$VALREQ|ASF$LSVAL, coltbl, fnccolor  , txtattrb#
	.LONG	stxtb   , ASF$VALREQ|ASF$LSVAL, bkgtbl, fncbkgnd  , txtattrb#
	.LONG	stab    , ASF$VALREQ|ASF$NVAL , 0     , fnctab    , 0
	.LONG	0

;Option name strings for procarg

sques:	 .ASCIZ  "?"
sh:	 .ASCIZ  "H"
shel:	 .ASCIZ  "HEL"
shelp:	 .ASCIZ  "HELP"
slin:	 .ASCIZ  "LIN"
slines:	 .ASCIZ  "LINES"
scol:	 .ASCIZ  "COL"
scolumns:.ASCIZ  "COLUMNS"
saslc:	 .ASCIZ  "ASLC"
saslb:	 .ASCIZ  "ASLB"
sislc:	 .ASCIZ  "ISLC"
sislb:	 .ASCIZ  "ISLB"
scmdc:	 .ASCIZ  "CMDC"
scmdb:	 .ASCIZ  "CMDB"
srspc:	 .ASCIZ  "RSPC"
srspb:	 .ASCIZ  "RSPB"
stxtc:	 .ASCIZ  "TXTC"
stxtb:	 .ASCIZ  "TXTB"
stab:    .ASCIZ  "TAB"

;Color value tables for procarg

	.MACRO	C1
	CC	BLACK
	CC	BLA
	CC	BLUE
	CC	BLU
	CC	GREEN
	CC	GRE
	CC	CYAN
	CC	CYA
	CC	RED
	CC	RED
	CC	VIOLET
	CC	VIO
	CC	BROWN
	CC	BRO
	CC	WHITE
	CC	WHI
	.ENDM

	.MACRO	C2
	CC	GRAY
	CC	GRA
	CC	BBLUE
	CC	BBL
	CC	BGREEN
	CC	BGR
	CC	BCYAN
	CC	BCY
	CC	BRED
	CC	BRE
	CC	BVIOLET
	CC	BVI
	CC	YELLOW
	CC	YEL
	CC	BWHITE
	CC	BWH
	.ENDM

	.MACRO	CC col
	.LONG	str'col
	.ENDM

coltbl:	C1
	C2
	.LONG	0

bkgtbl:	C1
	.LONG	0

	.MACRO	CC col
.IF P1
  .IF NDF str'col
    str'col:.ASCIZ "col"
  .IFF
    xxx'col=!0
  .ENDC
.IFF
  .IF NDF xxx'col
    str'col:.ASCIZ "col"
  .IFF
    .IF EQ xxx'col
      str'col:.ASCIZ "col"
      xxx'col=!1
    .ENDC
  .ENDC
.ENDC
	.ENDM

	C1
	C2

	.SBTTL	Start of program

	.PSECT	_TEXT_p

mainalt::
	CLRL	EAX
	PUSHL	EAX			;Search for our environment string
	PUSHL	DS
	PUSHL	#envname#
	PUSHL	EAX
	PUSHL	EAX
	PUSHL	DS
	PUSHL	#blkbufr#
	PUSHL	#512t
	PUSHL	EAX
	PUSHL	EAX
	CALLF	svcSysFindEnv##
	ORL	EAX, EAX
	JS	4$.S			;If not found
	CLRL	EAX			;Found it - process value as arguments
	PUSHL	EAX			;No default extension for indirect file
	PUSHL	EAX			;No next line function
	PUSHL	EAX			;Error function
	PUSHL	EAX			;No function for non-keyword args
	PUSHL	EAX			;Offset of keyword table
	PUSHL	#optword		;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#envpntr#		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
4$:	MOVL	ESI, 4.B[ESP]		;Get offset of argument msect
	PUSHL	ESI
	CALL	getfarg#		;Get offset of first argument
	POPL	ECX
	MOVL	argpntr#, EAX		;Store it for procarg
	CLRL	EAX
	PUSHL	EAX			;No default extension for indirect file
	PUSHL	EAX			;No next line function
	PUSHL	EAX			;Error function
	PUSHL	#filename		;Function called for non-keyword args
	PUSHL	EAX			;Offset of keyword table
	PUSHL	#optword		;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#argpntr#		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	PUSHL	DS			;Give up the argument data
	PUSHL	ESI
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
	CMPB	helpflg#, #0		;Did he ask for help?
	JE	vid			;No
					;Yes - fall into dohelp on next page
.PAGE
;Function to display help text

dohelp:	PUSHL	#DH_STDTRM.B		;Display the initial part
	PUSHL	DS
	PUSHL	#hlptxt1
	PUSHL	#0.B
	CALLF	svcIoOutString##
	MOVL	EBX, #hmlin		;Display /LINES line
	MOVL	EDX, numlines#
	CALL	helpnum
	MOVL	EBX, #hmcol		;Display /COLUMNS line
	MOVL	EDX, numcolumns#
	CALL	helpnum
	MOVL	EBX, #hmaslc		;Display /ASLC line
	MOVZBL	EDX, aslattrb
	CALL	helpcol
	MOVL	EBX, #hmaslb		;Display /ASLB line
	MOVZBL	EDX, aslattrb
	CALL	helpbkg
	MOVL	EBX, #hmislc		;Display /ISLC line
	MOVZBL	EDX, islattrb
	CALL	helpcol
	MOVL	EBX, #hmislb		;Display /ISLB line
	MOVZBL	EDX, islattrb
	CALL	helpbkg
	MOVL	EBX, #hmcmdc		;Display /CMDC line
	MOVZBL	EDX, cmdattrb
	CALL	helpcol
	MOVL	EBX, #hmcmdb		;Display /CMDB line
	MOVZBL	EDX, cmdattrb
	CALL	helpbkg
	MOVL	EBX, #hmrspc		;Display /RSPC line
	MOVZBL	EDX, rspattrb
	CALL	helpcol
	MOVL	EBX, #hmrspb		;Display /RSPB line
	MOVZBL	EDX, rspattrb
	CALL	helpbkg
	MOVL	EBX, #hmtxtc		;Display /TXTC line
	MOVZBL	EDX, txtattrb
	CALL	helpcol
	MOVL	EBX, #hmtxtb		;Display /TXTB line
	MOVZBL	EDX, txtattrb
	CALL	helpbkg
	PUSHL	#DH_STDTRM.B		;Display the final part
	PUSHL	DS
	PUSHL	#hlptxt2
	PUSHL	#0.B
	CALLF	svcIoOutString##
	PUSHL	#0.B
	CALLF	svcSchExit##

helpnum:PUSHL	EDX
	PUSHL	EBX
	MOVL	EAX, #fmtnum
	ORL	EDX, EDX
	JNE	4$.S
	ADDL	EAX, #fmtdft-fmtnum
4$:	PUSHL	EAX
6$:	PUSHL	#blkbufr#
	CALL	sprintf#
	ADDL	ESP, #16t.B
	PUSHL	#DH_STDTRM.B
	PUSHL	DS
	PUSHL	#blkbufr#
	PUSHL	#0.B
	CALLF	svcIoOutString##
	RET

helpcol:ANDL	EDX, #0Fh.B
8$:	MOVL	EAX, coltbl[EDX*8]
	PUSHL	EAX
	PUSHL	EBX
	PUSHL	#fmtcol
	JMP	6$.S

helpbkg:SHRL	EDX, #4t
	JMP	8$.S

	.PSECT	_DATA_p

fmtdft:	.ASCIZ	"  %s (current screen value)"{CR,LF}
fmtnum:	.ASCIZ	"  %s (%d)"{CR,LF}
fmtcol:	.ASCIZ	"  %s (%s)"{CR,LF}

	.MACRO	VERVID  ver, edit
	.ASCII	"VID - Version ver'.'edit"
	.ENDM

hlptxt1:VERVID  >_VER, >_EDIT
	.ASCII	{CR,LF}"Command syntax is:"{CR,LF}
	.ASCII	"  VID {/option=value ...} {filespec}"{CR,LF}
	.ASCII	"If no file is specified, the last file edited is opened"{CR,LF}
	.ASCII	"Valid options are: (values in parens are current defaults)"
	.ASCII	{CR,LF}
	.ASCII	"  ?         = Display this text"{CR,LF}
	.ASCIZ	"  H{EL{P}}  = Display this text"{CR,LF}

hlptxt2:.ASCII	"Following are valid colors for text or background:"{CR,LF}
	.ASCII	"  BLA{CK}, BLU{E}, GRE{EN}, CYA{N}, RED, VIO{LET}, BRO{WN},"
	.ASCII	" WHI{TE}"{CR,LF}
	.ASCII	"Following are valid colors for text only:"{CR,LF}
	.ASCII	"  GRA{Y}, BBL{UE}, BGR{EEN}, BCY{AN}, BRE{D}, BVI{OLET},"
	.ASCIZ	" YEL{LOW}, BWH{ITE}"{CR,LF}

hmcol:	.ASCIZ	"COL{UMNS} = Number of screen columns"
hmlin:	.ASCIZ	"LIN{ES}   = Number of screen lines"
hmaslc:	.ASCIZ	"ASLC      = Text color for status line for active edit window"
hmaslb:	.ASCIZ	"ASLB      = Background color for status line for active edit window"
hmislc:	.ASCIZ	"ISLC      = Text color for status line for idle edit window"
hmislb:	.ASCII	"ISLB      = Background color for status line for idle edit"
	.ASCIZ	" window"
hmcmdc:	.ASCIZ	"CMDC      = Text color for command line"
hmcmdb:	.ASCIZ	"CMDB      = Background color for command line"
hmrspc:	.ASCIZ	"RSPC      = Text color for response line"
hmrspb:	.ASCIZ	"RSPB      = Background color for response line"
hmtxtc:	.ASCIZ	"TXTC      = Text color for edit window"
hmtxtb:	.ASCIZ	"TXTB      = Background for edit window"

	.PSECT	_TEXT_p
.PAGE
;Function called by procarg for the HELP option

fnchelp:MOVB	helpflg#, #1
	JMP	rtntrue.S

;Function called by procarg for the LINES option

fnclines:
	MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVL	EAX, argdata_value.B[EBX] ;Save the value
	MOVL	numlines#, EAX
	JMP	rtntrue.S

;Function called by procard for the COLUMNS option

fnccolumns:
	MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVL	EAX, argdata_value.B[EBX] ;Save the value
	MOVL	numcolumns#, EAX
rtntrue:MOVL	EAX, #1
	RET

;Function called by procarg for options which set foreground colors

fnccolor:
	MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVL	EDX, argdata_data.B[EBX] ;Get offset of item to change
	MOVL	EAX, argdata_value.B[EBX] ;Get value
	SHRL	EAX, #1
	ANDB	[EDX], #0F0h
	JMP	6$.S

;Function called by procarg for options which set background colors

fncbkgnd:
	MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVL	EDX, argdata_data.B[EBX] ;Get offset of item to change
	MOVL	EAX, argdata_value.B[EBX] ;Get value
	SHLL	EAX, #3
	ANDB	AL, #70h
	ANDB	[EDX], #8Fh
6$:	ORB	[EDX], AL
	JMP	rtntrue.S

;Function called by procarg for the TAB option

fnctab:	MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVB	AL, #7		;Assume want 8 space tabs
	CMPL	argdata_value.B[EBX], #8	;Right?
	JAE	8$.S
	MOVB	AL, #3
8$:	MOVB	tabmask#, AL
	MOVB	tabforce#, #1
	JMP	rtntrue.S

;Function called by procarg for non-keyword arguments - this must be our file
;  specification

filename:
	PUSHL	ESI
	CMPL	filespec#, #0.B		;Already have a file name?
	JNE	10$.S			;Yes - fail
	MOVL	ESI, 8.B[ESP]		;Get offset of the argument string
	PUSHL	ESI			;Get length of the string
	CALL	strlen#
	POPL	ECX
	MOVL	filespsz#, EAX
	INCL	EAX
	PUSHL	EAX			;Get space for the name
	CALL	sbrk#
	POPL	ECX
	MOVL	filespec#, EAX
	PUSHL	ESI			;Copy the name
	PUSHL	EAX
	CALL	strmov#
	ADDL	ESP, #8.B
	POPL	ESI
	JMP	rtntrue.S

;Here if more than one file specified

10$:	MOVL	EBX, #msgmfn#
	JMP	errdspm.S
.PAGE
vid:	MOVL	EDI, filespec#		;Was a file specified?
	ORL	EDI, EDI
	JNE	havname.S		;Yes
	PUSHL	#O$IN.B			;No - open the name file (VIDFILE.TMP)
	PUSHL	DS
	PUSHL	#namfil#
	PUSHL	DS
	PUSHL	#parmlist2#
	CALLF	svcIoOpen##
	ORL	EAX, EAX
	JNS	2$.S			;Go on if file is there
badred:	MOVL	EDX, #msgbdn#		;No - complain
errdspm:CALL	trmout#
errdone:PUSHL	#1.B			;Terminate the program
	CALLF	svcSchExit##

;Here with the file VIDFILE.TMP open for input

2$:	MOVL	namhndl#, EAX		;Save handle for name file
	PUSHL	EAX
	MOVL	EAX, filelen#		;Get length of the name file
	CMPL	EAX, #512t		;Is it reasonable?
	JA	badred.S		;No - ignore it
	MOVL	filespsz#, EAX		;Yes - store as file spec length
	INCL	EAX
	PUSHL	EAX			;Allocate file spec buffer
	CALL	sbrk#
	POPL	ECX
	ORL	EAX, EAX		;This should not fail!
	JE	badred.S
	MOVL	filespec#, EAX
	PUSHL	DS			;Read the name file (we pushed the
	PUSHL	EAX			;  handle above)
	PUSHL	filespsz#
	CALLF	svcIoInBlock##
	ORL	EAX, EAX
	JS	badred.S		;If error
	JMP	havnam2.S		;Go on
.PAGE
;Here if a file name was given in the command line

havname:PUSHL	#O$OUT|O$CREATE|O$TRUNCA ;Open the name file (VIDFILE.TMP)
	PUSHL	DS
	PUSHL	#namfil#
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen##
	ORL	EAX, EAX
	JS	4$.S			;If error
	MOVL	namhndl#, EAX		;Save handle
	PUSHL	namhndl#		;Write out the buffer
	PUSHL	DS
	PUSHL	filespec#
	PUSHL	filespsz#
	CALLF	svcIoOutBlock##
havnam2:PUSHL	namhndl#		;Close the name file
	PUSHL	#0.B
	CALLF	svcIoClose##
4$:	MOVL	EDX, filespec#		;Get offset of file specification
	CALL	opnfile#		;Open the file to edit
	JMPIL	CS:opndsp[EBX*4]	;Dispatch on the termination code

;Input termination cause dispatch table

	.MOD	4
opndsp:	.LONG	setdsp		; 0 - Normal
	.LONG	setdsp		; 1 - File not found
	.LONG	opnerr		; 2 - IO error					;Fall into setdsp on next page
.PAGE
;Here if error opening file

opnerr:	MOVL	EBX, #msgoerr#
opner1:	CALL	getemsg#		;Get message
opner2:	CALL	trmout#			;Display it
	MOVL	EDX, #msger2#		;Display rest of message
opner3:	CALL	trmout#
	JMP	errdone

;Here if can't map the terminal screen

trmerr:	MOVL	EDI, #scnerr#
	JMP	opner2.S

;Here to initialize the display

setdsp:	PUSHL	EAX			;Save file handle for later
	MOVL	EDI, #trmdata#
	PUSHL	#DH_STDTRM.B		;Get current terminal data
	PUSHL	#DM$RTNDATA
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcTrmDspMode##
	ORL	EAX, EAX		;Error?
	JS	trmerr			;Yes
	PUSHL	EDI
	MOVL	ESI, EDI		;Copy terminal data in case error
	MOVL	EDI, #trmsave#
	PUSHL	DS
	POPL	ES
	MOVL	ECX, #dm_SIZE/4
	CLD
	RMOVSL	[EDI], [ESI]
	POPL	EDI

;;;;	BTL	EAX, #DM%MONOADPT	;No - have monochrome adapter?
;;;;	JNC	4$.S			;No
;;;;	INCB	disptype#		;Yes - indicate that
;;;;	MOVL	aslattrb#, #{{{{{A_MRSP<8}|A_MCMD}<8}|A_MISL}<8}|A_MASL
;;;;	MOVB	txtattrb#, #A_MTXT	;Fix up attribute values for monochrome

4$:	MOVB	AL, txtattrb		;Get attribute value for text cursor
	MOVB	AH, AL
	RORB	AL, #4t
	ANDB	AH, #08h
	ORB	AL, #80h
	ORB	AL, AH
	MOVB	cmcattrb, al
	MOVL	EAX, numlines#		;Did he specify the number of lines or
	ORL	EAX, numcolumns#	;  the number of columns?
	JE	12$.S			;No - go on
	MOVL	EAX, numlines#		;Yes
	ORL	EAX, EAX
	JE	6$.S
	MOVL	dm_rows.B[EDI], EAX
6$:	MOVL	EAX, numcolumns#
	ORL	EAX, EAX
	JE	8$.S
	MOVL	dm_columns.B[EDI], EAX
8$:	CLRL	EAX
	MOVL	dm_horiz.B[EDI], EAX
	MOVL	dm_vert.B[EDI], EAX
	PUSHL	#DH_STDTRM.B		;Set current terminal data
	PUSHL	#DM$RTNDATA|DM$USEDATA|DM_TEXT
	PUSHL	DS
	PUSHL	EDI
	CALLF	svcTrmDspMode##
	ORL	EAX, EAX		;Error?
10$:	JS	trmerr			;Yes
12$:	MOVL	EAX, dm_columns.B[EDI]
	MOVL	swidth#, EAX
	MOVL	EAX, dm_rows.B[EDI]
	MOVL	sheight#, EAX
	PUSHL	#DH_STDTRM.B		;Get terminal screen buffer
	PUSHL	DS
	PUSHL	#scrnbufr
	MOVL	EAX, swidth#
	IMULL	EAX, sheight#
	ADDL	EAX, EAX
	PUSHL	EAX
	PUSHL	#0.B
	CALLF	svcTrmMapScrn##
	ORL	EAX, EAX
	JS	10$.S
	PUSHL	#DH_STDTRM.B		;Update terminal state
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	DS
	PUSHL	#trmparm#
	CALLF	svcIoInBlockP##
	ORL	EAX, EAX
	JS	10$.S
	MOVB	BL, swidth#		;Initialize the screen display
	MOVB	BH, sheight#
	CALL	initscn#
	CALL	cmdclr#			;Clear the command line
	MOVL	EDX, #verson#		;Get the version number
	CALL	dsprsp#			;Display version number
					;Fall into setfile on next page
.PAGE
;Here to read the main input file

setfile:CALL	initfile#		;Initialize a new file
	JC	dsperr.S		;If error
	MOVB	BL, swidth#
	MOVB	BH, sheight#
	SUBB	BH, #3
	MOVB	DL, #0
	MOVB	DH, #0
	CALL	initwindow#		;Initialize a display window
	JC	dsperr.S
	MOVL	ESI, ECX
	LEAL	EBX, f_filbfr.B[EDI]
	POPL	EAX			;Get file handle
	ORL	EAX, EAX		;Did we find the file?
	JS	inpfnf.S		;No
	CALL	inpfile#		;Yes - read in the file
	JMPIL	CS:inpdsp[EBX*4]	;Dispatch on the termination cause

;Input termination cause dispatch table

inpdsp:	.LONG	inprdy		; 0 - Normal
	.LONG	inptob		; 1 - File too big
	.LONG	inperr		; 2 - IO error
.PAGE
;Subroutine to reset the display to its initial state if have error before we
;  really get started
;	CALL	resetdsp

resetdsp:
	PUSHL	#DH_STDTRM.B		;Reset terminal data
	PUSHL	#DM$USEDATA|DM_TEXT
	PUSHL	DS
	PUSHL	#trmsave#
	CALLF	svcTrmDspMode##
	RET

;Here if error setting up our data structures after we have changed the
;  display parameters

dsperr:	PUSHL	EDX
	CALL	resetdsp
	POPL	EDX
	JMP	2$.S

;Here if error while reading the input file

inperr:	PUSHL	EAX
	CALL	resetdsp
	POPL	EAX
	MOVL	EBX, #msgierr#
	JMP	opner1

;Here if input file is too big

inptob:	PUSHL	EAX
	CALL	resetdsp
	POPL	EAX
	MOVL	EDX, #msgtob#
2$:	JMP	opner3
					;Yes - continue
;Here if file was not found

inpfnf:	PUSHL	#79t.B			;Copy the name so we will display it
	PUSHL	filespec
	LEAL	EAX, f_filename.B[EDI]
	PUSHL	EAX
	CALL	strnmov#
	ADDL	ESP, #12t.B
	MOVB	newfmsg#, #' '		;Tell him new file created
	MOVL	EDX, #verson#
	CALL	dsprsp#

;Here if file read with no errors

inprdy:	PUSHL	#29t.B
	LEAL	EAX, f_filename.B[EDI]
	PUSHL	EAX
	PUSHL	#pname#+2
	CALL	strnmov#
	ADDL	ESP, #12t.B
	PUSHL	DS
	PUSHL	#pname
	CALLF	svcSysSetPName##
	CALL	setsts#			;Set up status line for window
	LEAL	EAX, f_filbfr.B[EDI]
	MOVL	w_toppnt.B[ESI], EAX	;Point to first line in file
	MOVL	w_curpnt.B[ESI], EAX
	CLRL	EAX
	MOVL	w_toplin.B[ESI], EAX
	MOVL	w_curlin.B[ESI], EAX
	MOVL	curwin, ESI
	CALL	makecurwin#		;Make this the current window
	CALL	updwinfrc#		;Update the entire window
inpmode:CALL	getline#		;Update the line buffer from file
					;  buffer
inpmod2:CALL	edtscn#			;Let him edit the file
	MOVB	AL, cmcattrb#
	CALL	cmdcuron#		;Put second cursor on screen
	CALL	cursorset#
cmdmode:CALL	tocmdm#			;He typed command escape - switch to
					;  command mode	
	CALL	edtscn#			;Get command line
	CALL	cmdrspclr#		;Clear command and response lines
	CALL	toinpm#			;Restore input mode state
	CALL	getcmdatom#		;Get command atom
	JC	cmdmob.S
	MOVL	EBX, #cmdtbl		;Point to the command table
	MOVL	ECX, #CMDSIZ		;Get size of table
4$:	CMPL	CS:[EBX], EAX		;This one?
	JE	8$.S			;Yes
	ADDL	EBX, #8.B		;No
	LOOP	ECX, 4$
cmdmob::MOVL	EDX, #bdcmsg#		;Complain about bad command
cmdmoe:	CALL	dsprsp#			;Display error message on response line
	JMP	cmdmode			;Go get more input

;Here with match on command atom

8$:	JMPIL	CS:4.B[EBX]

;Here if syntax error

synerr:	MOVL	EDX, #synmsg#
	JMP	cmdmoe.S

;Here if bad number

badnum:	MOVL	EDX, #bdnmsg#
	JMP	cmdmoe.S
.PAGE
;Command dispatch table

	.MACRO	+ CMDT
	CC	    , cmdexit	; Blank
	CC	B   , cmdbtm	;Go to bottom of file
	CC	CF  , cmdcpyf	;Copy lines until string found
	CC	CL  , cmdcpyl	;Copy lines until string located
	CC	CN  , cmdcpyn	;Copy n lines
	CC	DF  , cmddelf	;Delete until string found
	CC	DL  , cmddell	;Delete until string located
	CC	DN  , cmddeln	;Delete n lines
	CC	EX  , cmdext	;Exit
	CC	EXIT, cmdext
	CC	F   , cmdfnd	;Find string
	CC	G   , cmdgoto	;Go to line
	CC	GET , cmdget	;Get input
;	CC	HELP, cmdhlp	;Help
	CC	L   , cmdloc	;Locate string
	CC	MF  , cmdmovf	;Move lines until string found
	CC	ML  , cmdmovl	;Move lines until string located
	CC	MN  , cmdmovn	;Move n lines
	CC	N   , cmdnxt	;Got to next line
	CC	T   , cmdtop	;Go to top of file
	CC	RF  , cmdrepf	;Global replace with find
	CC	RL  , cmdrepl	;Global replace with locate
	CC	SAVE, cmdsave	;Save
	CC	WH  , cmdwh	;New window, save file (horizontal)
	CC	WHF , cmdwhf	;New window, read file (horizontal)
	CC	WV  , cmdwv	;New window, same file (vertical)
	CC	WVF , cmdwvf	;New window, read file (vertical)
	CC	QUIT, cmdquit	;Quit
	.ENDM

;Generate character table

	.MACRO	CC  cmd, addr
$$$=!$
	.ASCII	"cmd"
$=$$$+4
	.LONG	addr
	.ENDM

	.MOD	4
cmdtbl:	CMDT
CMDSIZ=!{$-cmdtbl}/8
.PAGE
	.SBTTL	cmdexit - Leave command mode

;Here on blank command to leave command mode

cmdexit:CALL	cmdcuroff#		;Remove second cursor from screen
cmdext2:CALL	cursorset#		;Display real cursor in right place
	JMP	inpmode			;Go get input

	.SBTTL	cmdtop - Routine to process "Top of file" command

;Here for "Top of file" command

cmdtop::CALL	gototop#		;Go to the top of the buffer
	MOVB	w_cursorinb.B[ESI], #0	;Put cursor at beginning of line
2$:	CALL	scroll#
	CALL	chkbind#
	JMP	6$.S			;Continue

	.SBTTL	cmdbtm - Routine to porcess "Bottom of file" command

;Here for "Bottom of file" command

cmdbtm::CLRL	EAX
	MOVB	w_cursorinb.B[ESI], AL	;Force cursor to first column
	MOVL	w_cursorinv.B[ESI], EAX
	MOVL	w_cursorbind.B[ESI], EAX
	MOVL	ECX, #7FFFFFFFh		;Get very large positive number
	JMP	cmdlc6.S		;Continue

	.SBTTL	cmdgoto - Gnum - Routine to process "Go-to" command

;Here for "Go-to" command

cmdgoto::
	CALL	getnum#			;Get number
	JC	badnum			;If error
	PUSHL	EBX			;Save value
	CALL	gototop#		;Position to beginning of file
	POPL	ECX			;Restore count
	DECL	ECX			;Minus 1
	JLE	2$.S			;If he said line 0 or 1
	JMP	cmdlc6.S		;Go to the line he wants

	.SBTTL	cmdnxt - Nnum - Routine to process "Next line" command

;Here for "Next line" command

cmdnxt::CALL	getnum#			;Get number
	JC	badnum			;If he typed a bad number!
	MOVL	ECX, EBX		;Get count in right register
	ORL	ECX, ECX		;Zero?
	JNE	4$.S			;No
	INCL	ECX			;Yes - make it 1
4$:	CALL	movvrt#			;Move current line
6$:	CALL	updwindow#		;Update the screen
	JMP	cmdexit			;Switch to input mode
.PAGE
	.SBTTL	cmdfnd - F/strg/ Routine to process "Find string" command

;Here for "Find string" command

cmdfnd::CALL	find#			;Get string, do search
	JMP	2$.S			;Continue

	.SBTTL	cmdloc - L/strg/ - Routine to process "Locate string" command

;Here for "Locate string" command

cmdloc::CALL	locate#			;Get string, do search
2$:	JC	cmdexit			;Go to input mode if error
	MOVB	w_cursorinb.B[ESI], AL	;Set new cursor position					;  position
cmdlc6:	JREGZ	ECX, 4$			;If not really advancing
	MOVL	w_cursorbind.B[ESI], #-1 ;Yes - indicate no current cursor
	CALL	movvrt#			;Move to line
	CALL	updwindow#		;Update window
	JMP	6$.S

;Here if found match on same line

4$:	CALL	cursorset#
6$:	MOVL	EAX, w_cursorinv.B[ESI]	;Bind cursor
	MOVL	w_cursorbind.B[ESI], EAX
	JMP	cmdexit
.PAGE
	.SBTTL	cmdrepf - Routine to process RF command

;Routine to replace a string with a new string
;	RF/strg1/strg2/
;	String strg1 will be replaced by strg2

cmdrepf:CALL	find#			;Find the string
	JMP	4$.S			;Continue with common code

	.SBTTL	cmdrepl - Routine to process RL command

;Routine to replace a string with a new string
;	RL/strg1/strg2/
;	String strg1 will be replaced by strg2

cmdrepl:CALL	locate#			;Locate the string
4$:	JC	cmdexit			;Was not found
	MOVB	w_cursorinb.B[ESI], AL	;Store new cursor position
	JREGZ	ECX, 8$			;If found match in current line
	MOVL	w_cursorbind.B[ESI], #-1 ;Indicate no cursor now
	CALL	movvrt#			;Move to the correct line
	JMP	10$.S

8$:	CALL	getline#
10$:	CALL	getrep#			;Get the replacement string
	JC	12$.S			;If error
	CALL	repstr#			;OK - do the string replace
12$:	CALL	updwindow#		;Update the screen
	MOVL	EAX, w_cursorinv.B[ESI]	;Bind cursor
	MOVL	w_cursorbind.B[ESI], EAX
	CALL	cmdcuroff#		;Remove second cursor from screen
	CALL	cursorset#		;Display real cursor in right place
	JMP	inpmod2			;Go get input
.PAGE
	.SBTTL	cmddeln - Routine to process DN command

;Here for DN command

cmddeln:CALL	getnum#			;Get count
	JC	badnum			;If bad number
	ORL	EBX, EBX
	JNE	2$.S
	INCL	EBX
2$:	PUSHL	EBX			;OK - save count
	JMP	10$.S			;Continue

	.SBTTL	cmddelf - Routine to process DF command

;Here for DF command

cmddelf:CALL	find#			;Do "Find" type search
	JMP	6$.S			;Continue

	.SBTTL	cmddell - Routine to process DL command

;Here for DL command

cmddell:CALL	locate#			;Do "Locate" type search
6$:	JC	cmdexit			;If not found
	PUSHL	ECX			;Save count
10$:	POPL	EDX			;Restore count
cmdde6:	PUSHL	EDX
	CALL	dellns#			;Delete the lines
	POPL	ECX
	MOVB	w_cursorinb.B[ESI], #0	;Clear the cursor position
	MOVL	EDX, w_curlin.B[ESI]
	NEGL	ECX
	CALL	fixwindow#
	CALL	updwinfrc#
	MOVL	EAX, w_cursorinv.B[ESI]	;Bind cursor
	MOVL	w_cursorbind.B[ESI], EAX
	JMP	cmdexit			;Continue in input mode
.PAGE
	.SBTTL	cmdmovn - Routine to process MN command

;Here for MN command

cmdmovn:CALL	movcpyn#		;Do output
	JNC	cmdde6			;OK - go delete what we output
	JMP	cmdmode			;If error

	.SBTTL	cmdmovl - Routine to process ML command

;Here for ML command

cmdmovl:CALL	movcpyl#		;Do output
	JNC	cmdde6			;OK - go delete what we output
	JMP	cmdmode			;If error

	.SBTTL	cmdmovf - Routine to process MF command

;Here for MF command

cmdmovf:CALL	movcpyf#		;Do output
	JNC	cmdde6			;OK - go delete what we output
	JMP	cmdmode			;If error

	.SBTTL	cmdcpyn - Routine to process CN command

;Here for CN command

cmdcpyn:CALL	movcpyn#		;Do output
	JNC	cmdexit			;Continue in input mode if OK
	JMP	cmdmode			;If error

	.SBTTL	cmdcpyl - Routine to process CL command

;Here for CL command

cmdcpyl:CALL	movcpyl#		;Do output
	JNC	cmdexit			;Continue in input mode if OK
	JMP	cmdmode			;If error

	.SBTTL	cmdcpyf - Routine to process CF command

;Here for CF command

cmdcpyf:CALL	movcpyf#		;Do output
	JNC	cmdexit			;Continue in input mode if OK
	JMP	cmdmode			;If error
.PAGE
	.SBTTL	cmdsave - Routine to process SAVE command

;Here for SAVE command

cmdsave::
	PUSHL	#0.B			;Assume not save edit file
	CALL	getspec#		;Get file specification
	CMPB	[EBX], #0		;Null file name?
	JNE	4$.S			;No
	MOVL	EBX, filespec#		;Yes - use name of file being edited
	INCL	[ESP]			;Remember that this file was saved
4$:	CALL	savefile		;Save the file
	POPL	ECX
	JC	8$.S			;If error
	JREGZ	ECX, 6$			;OK - did we save the edit file?
	CALL	clrmfg#			;Yes - clear modified state
6$:	CALL	rspclr#			;OK - clear the response line
8$:	JMP	cmdexit			;Finished
.PAGE
	.SBTTL	cmdget - Routine to process GET command

;Here for GET command

cmdget::CALL	getspec#		;Get file specification
	PUSHL	EBX
	MOVL	EDX, #extmsg#		;Tell him to wait
	CALL	dsprsp#
	POPL	EDX
	CMPB	[EDX], #0		;Was a name given?
	JNE	2$.S			;Yes
	MOVL	EDX, #bfrnam#		;No - use default name
2$:	CALL	opnfile#		;Open the file
	JMPIL	CS:gtodsp[EBX*4]

;Get command termination code dispatch table for opnfile

	.MOD	4
gtodsp:	.LONG	getget		; 0 - Normal
	.LONG	getemp		; 1 - File not found
	.LONG	getioe		; 3 - Error

;Here with file open

getget:	MOVL	EBX, w_curpnt.B[ESI]
	PUSHL	f_numlin.B[EDI]
	CALL	inpfile#		;Read the file
	JMPIL	CS:gtidsp[EBX*4]	;Dispatch on termination cause

;Get command termination cause dispatch table

	.MOD	4
gtidsp:	.LONG	getdon		; 0 - Normal
	.LONG	gettob		; 2 - File too big
	.LONG	getioe		; 3 - IO error

;Here if all is normal

getdon:	MOVB	w_cursorinb.B[ESI], #0	;Put cursor at beginning of line
	MOVL	w_cursorinv.B[ESI], #0
	MOVL	w_cursorbind.B[ESI], #0	;And bind it there
	CALL	rspclr#			;Erase wait message
6$:	CALL	dspmfg#			;Indicate file has been modified
	CALL	getline			;Update line buffer from file buffer
	CALL	dspnln#			;Update number of lines display
	CALL	dspcln#			;And update current line number (this
					;  will change when he deletes the last
					;  line of the file!)
	CALL	dspnch#			;Update number of characters display
	CALL	scroll#
	CALL	chkbind#
	POPL	ECX
	SUBL	ECX, f_numlin.B[EDI]
	NEGL	ECX
	MOVL	EDX, w_curlin.B[ESI]
	CALL	fixwindow#
	CALL	updwinfrc#
	JMP	cmdexit

;Here if file too big

gettob:	MOVL	EDX, #gtmtob#		;Get address of message
8$:	CALL	dsprsp#			;Display it
	JMP	6$.S			;And continue

;Here if no buffer file

getemp:	MOVL	EAX, #ER_FILNF

;Here if IO error

getioe:	MOVL	EBX, #emget#
	CALL	getemsg#
	JMP	8$.S
.PAGE	
	.SBTTL	cmdquit - Routine to process QUIT command

;Here for QUIT command

cmdquit::
	CALL	getcmc#			;Make sure end of line here
	JNE	cmdmob			;If error
	CMPB	f_modified.B[EDI], #0	;Has the file been modified?
	JE	cmdex8			;No - just leave without any questions
	MOVL	EDX, #quitmsg#		;Yes - ask him if he really means this
	CALL	cmdques#
	JE	cmdex8			;He said yes - do it!
	CALL	cmdclr#			;He said no - forget it!
	JMP	cmdmode

	.SBTTL	cmdext - Routine to process "Exit" command

;Here for "Exit" command

cmdext::CALL	getcmc#			;Make sure end of line here
	JNE	cmdmob
	CMPB	f_modified.B[EDI], #0	;Has the file been modified?
	JE	cmdex8			;No - just leave without output
	MOVL	EBX, filespec#
	CALL	savefile
	JC	cmdmode			;If error
cmdex8:	MOVL	EDX, #clrstr#		;OK - clear screen
	CALL	trmout#
	PUSHL	#0.B			;All done here!
	CALLF	svcSchExit##
.PAGE
	.SBTTL	savefile - Subroutine to save file

;Subroutine to save file
;	c{EBX} = Offset of name for file
;	CALL	savefile
;	C:set = Error (message aready displayed
;	C:clr = Normal

savefile::
	PUSHL	EBX
	MOVL	EDX, #extmsg#		;Ask him to wait a while
	CALL	dsprsp#
	PUSHL	DS
	POPL	ES
	PUSHL	EDI
	PUSHL	ESI
	MOVL	ESI, 8.B[ESP]		;Get name file name
	MOVL	EDI, #baknbfr#		;Point to place for new name
	CLRL	EDX
	CLD
2$:	LODSB	[ESI]			;Get character
	CMPB	AL, #0
	JE	10$.S
	CMPB	AL, #'\'
	JE	4$.S
	CMPB	AL, #'/'
	JE	4$.S
	CMPB	AL, #':'
	JNE	6$.S
4$:	CLRL	EDX
6$:	CMPB	AL, #'.'		;Period?
	JNE	8$.S			;No
	MOVL	EDX, EDI		;Yes - remember where it is
8$:	STOSB	[EDI]			;Store character
	JMP	2$.S

;Here at end of name

10$:	TESTL	EDX, EDX		;Have period in name?
	JE	12$.S			;No
	MOVL	EDI, EDX		;Yes
12$:	MOVL	ESI, #bakext#		;Add ".bak" extension after last period
	MOVL	ECX, #5
	CLD
	RMOVSB	[EDI], [ESI]
	POPL	ESI
	POPL	EDI
	PUSHL	#0.B
	PUSHL	DS			;Delete current .BAK file
	PUSHL	#baknbfr#
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoDelete##
	ORL	EAX, EAX
	JNS	18$.S			;If OK
	CMPL	EAX, #ER_FILNF.B	;Error - was it file not found?
	JE	18$.S			;Yes - this is OK
14$:	MOVL	EBX, #embackup#		;No - complain and fail
	CALL	getemsg#
	POPL	ECX			;Fix up the stack
16$:	CALL	dsprsp#
	STC
	RET

;Here with old .BAK file deleted

18$:	MOVL	EAX, [ESP]
	PUSHL	#0.B
	PUSHL	DS			;Rename previous file to file.BAK
	PUSHL	EAX
	PUSHL	DS
	PUSHL	#baknbfr#
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoRename##
	ORL	EAX, EAX
	JNS	20$.S
	CMPL	EAX, #ER_FILNF.B
	JNE	14$.S
20$:	LEAL	EBX, f_filbfr.B[EDI]	;OK - output entire file buffer
	MOVL	ECX, #7FFFFFFFh
	POPL	EDX			;Point to file name
	CALL	outfile#
	JC	16$.S			;If error
	RET				;If OK
.PAGE
	.SBTTL	cmdwh - Routine to process WH command

;Here for the WH command - split current window horizontally

cmdwh:
cmdwhf:
	CALL	cmdcuroff#
	MOVL	EAX, w_width.B[ESI]	;Get width of window
	CMPL	EAX, #20t.B		;Is it big enough?
	JBE	4$.S			;No - complain and fail
	MOVL	EBX, EAX	
	SHRL	EAX, #1			;Get new width for old window
	SUBL	EBX, EAX		;Get width for new window
	DECL	EBX
	MOVB	BH, w_height.B[ESI]
	MOVB	DL, w_hpos.B[ESI]
	ADDB	DL, AL
	INCL	EDX
	MOVB	DH, w_vpos.B[ESI]
	PUSHL	EAX
	CALL	initwindow#
	POPL	EDX
	JC	6$.S			;If error
	MOVL	w_width.B[ESI], EDX	;OK - store new width
	JMP	8$.S			;Continue

;Here if window is too small to split

4$:	MOVL	EDX, #toosmlmsg#
	JMP	cmdmoe

	.SBTTL	cmdwv - Routine to process WV command

;Here for the WV command - split current window vertically

cmdwv:
cmdwvf:
	CALL	cmdcuroff#
	MOVL	EAX, w_height.B[ESI]	;Get height of window
	CMPL	EAX, #20t.B		;Is the window big enough?
	JBE	4$.S			;No - complain and fail
	MOVL	EBX, EAX		;Yes
	SHRL	EAX, #1			;Get new height of old window
	SUBL	EBX, EAX		;Get height of new window
	DECL	EBX
	MOVB	BH, BL
	MOVB	BL, w_width.B[ESI]
	MOVB	DH, w_vpos.B[ESI]
	ADDB	DH, AL
	INCB	DH
	MOVB	DL, w_hpos.B[ESI]
	PUSHL	EAX
	CALL	initwindow#		;Initialize the new window
	POPL	EDX
6$:	JC	cmdmoe			;If error
	MOVL	w_height.B[ESI], EDX	;OK - store new height of old window
8$:	MOVL	EAX, w_curlin.B[ESI]	;Finish cloning the old window
	MOVL	w_curlin.B[ECX], EAX
	MOVL	EAX, w_curpnt.B[ESI]
	MOVL	w_curpnt.B[ECX], EAX
	MOVL	EAX, w_toplin.B[ESI]
	MOVL	w_toplin.B[ECX], EAX
	MOVL	EAX, w_toppnt.B[ESI]
	MOVL	w_toppnt.B[ECX], EAX
	MOVL	EAX, w_cursorinv.B[ESI]
	MOVL	w_cursorinv.B[ECX], EAX
	MOVL	EAX, w_cursorbind.B[ESI]
	MOVL	w_cursorbind.B[ECX], EAX
	MOVB	AL, w_cursorinb.B[ESI]
	MOVB	w_cursorinb.B[ECX], AL
	PUSHL	ECX
	CALL	setwindow#		;Update current window for new size
	CALL	scroll#
	CALL	setsts#
	CALL	updwin#
	POPL	ESI			;Now finish setting up the new window
	CALL	scroll#
	CALL	setsts#
	CALL	getline#		;Get current line into the line buffer
	CALL	updwin#
	MOVB	AL, cmcattrb#
	CALL	cmdcuron		;Put second cursor on screen
	MOVL	ESI, curwin#
	MOVB	DH, aslattrb#		;Change new border to active state
	MOVB	DL, #0B3
	CALL	border#
	MOVL	EDI, [ESI]
	JMP	cmdext2

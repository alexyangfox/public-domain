	.TITLE	UTILITY

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386
	.INCLUD XOSINC:\XMAC\DEFINES.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD XOSINC:\XMAC\CLIBX.PAR
	.INCLUD XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	VID.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	getcmdatom - Subroutine to get command atom

;Subroutine to get command atom
;	CALL	getcmdatom
;	C:set = Error
;	C:clr = Normal
;	  c{EAX} = Command atom

getcmdatom::
	MOVL	EDX, #cmdatom#
	CLRL	EAX
	MOVL	[EDX], EAX
	MOVL	ECX, #4
2$:	CALL	getcmc
	CMPB	AL, #0
	JE	10$.S
	CMPB	AL, #' '
	JBE	getcmdatom.S
	DECL	cmdpnt#
4$:	CALL	getcmc			;Get next command character
	CALL	makupr			;Make upper case
	CMPB	AL, #'A'		;Letter?
	JB	6$.S			;No
	CMPB	AL, #'Z'		;Maybe
	JA	8$.S			;No
	DECL	ECX			;Yes - room for more?
	JS	12$.S			;No - fail
	MOVB	[EDX], AL		;Yes - store character
	INCL	EDX
	JMP	4$.S			;Continue

;Here with non-letter

6$:	CMPB	AL, #0
	JE	10$.S
	CMPB	AL, #' '
	JBE	10$.S
8$:	DECL	cmdpnt#
10$:	MOVL	EAX, cmdatom#
	CLC
	RET

;Here if error

12$:	STC
	RET
.PAGE
	.SBTTL	getcmc - Subroutine to fetch command character

;Subroutine to fetch command character
;	CALL	getcmc
;	Z:set  = End of line
;	c{EAX} = Next command character

getcmc::MOVL	EAX, cmdpnt#		;Get the pointer
	MOVZBL	EAX, [EAX]		;Get the next character
	ORL	EAX, EAX		;End of line?
	JE	2$.S			;Yes
	INCL	cmdpnt#			;No - increment the command pointer
2$:	RET				;Return with character (Z will be
					;  clear unless end of line

getcsws::
	CALL	getcmc			;Get a character
	JE	2$.S			;If end of line
	CMPB	AL, #' '		;Whitespace character?
	JBE	getcsws.S		;Yes - get another
	RET				;No - return with it
.PAGE
	.SBTTL	makupr - Subroutine to ensure that a character is upper case

;Subroutine to ensure that a character is upper case
;	c(AL) = ASCII character
;	CALL	makupr
;	c(AL) = Upper case character

makupr::CMPB	AL, #'a'		;Is this a lower case character?
	JB	ret001.S		;No - nothing to do here!
	CMPB	AL, #'z'		;Maybe
	JA	ret001.S		;No
	SUBB	AL, #20h		;Yes - change to upper case
ret001:	RET				;And return
.PAGE
	.SBTTL	getnum - Subroutine to get decimal number from the command line

;Subroutine to get decimal number from the command line
;	CALL	getnum
;	C:set = Bad number
;	C:clr = Normal
;	  Z:set  = Stopped by end of line
;	  c(AL)  = Stopper character
;	  c{EBX} = Value

getnum::CLRL	EBX			;Clear register
	CALL	getcmc			;Get character
	JE	2$.S			;If end of line
	CMPB	AL, #','		;Is there another comand?
	JE	8$.S			;Yes - process as if end of line
	CMPB	AL, #'-'		;No - minus?
	JNE	4$.S			;No
	CALL	6$			;Yes - get value
	JC	2$.S			;If error
	NEGL	EBX			;Make value negative
	CLC
2$:	RET				;And return

4$:	CMPB	AL, #'0'		;Is this a digit?
	JB	8$.S			;No
	CMPB	AL, #'9'
	JA	8$.S			;No
	ANDB	AL, #0Fh		;Get value of digit
	STC
	IMULL	EBX, #10t.b		;Multiply previous value by 10
	JC	12$.S			;If too large
	ORL	EBX, EBX
	JS	12$.S
	ADDL	EBX, EAX		;Add in new digit
	JS	12$.S
6$:	CALL	getcmc			;Get next character
	JE	8$.S			;End of line?
	CMPB	AL, #','		;No - end of the command?
	JNE	4$.S			;No - continue
8$:	DECL	cmdpnt#			;Yes - put the character back
	ORB	AL, AL			;Set Z if EOL, clear it otherwise,
	RET				;  always clear C

;Here if number is too big

12$:	STC				;Set carry flag
	RET
.PAGE
	.SBTTL	getspec - Subroutine to get file specification from command line

;Subroutine to get file specification from command line
;	CALL	getspec
;	Z:set  = Stopped by end of line
;	c(AL)  = Stopper character
;	c{EBX} = Offset of file specification

getspec::
	CALL	getcsws			;Get first character
	JE	4$.S			;If nothing there
	PUSHL	cmdpnt			;Save command pointer
2$:	CALL	getcmc			;Scan to end of command
	JNE	2$.S
	POPL	EBX
	DECL	EBX
	RET

;Here if no file specification is given

4$:	MOVL	EBX, #nullstr#
	RET
.PAGE
;Subroutine to get additional memory if its needed
;	c{EDX} = New value for memtop
;	CALL	chkmem
;	C:set = Error, memory not available
;	C:clr = Normal

chkmem::CMPL	EDX, f_memtop.B[EDI]	;Do we have enough space now?
	JBE	2$.S			;Yes
	PUSHL	EDX
	SUBL	EDX, EDI		;No - get additional memory
	INCL	EDX
	PUSHL	DS
	PUSHL	EDI
	PUSHL	#PG$WRITE|PG$READ.B
	PUSHL	EDX
	CALLF	svcMemChange##
	POPL	EDX
	ORL	EAX, EAX
	JS	4$.S			;Go on if got it
	ADDL	EAX, EDI
	DECL	EAX
	MOVL	f_memtop.B[EDI], EAX	;Update amount we have
2$:	CLC
	RET

;Here if can't get enough memory

4$:	STC
	RET

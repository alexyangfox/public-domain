	.TITLE	IPSICMP - Internet Control Message Protocol routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSXNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSXIPS.PAR
	.INCLUD	XOSINC:\XMAC\XOSXSNAP.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR

	.EXPORT	xosipsSendDstUnr

	LKECONT

;This module implements the Internet Control Message Protocol (ICMP).  This
;  version provides host support only.

	CODE

	.SBTTL	SVC dispatch table for ICMP devices

;SVC dispatch table for ICMP devices

icmpdsp:.LONG	knlRtnZero##	;sd_mount	=  0. - Mount
	.LONG	knlRtnZero##	;sd_cleardev	=  4. - Clear device
	.LONG	xosnetGiveDcb##	;sd_cleardcb	=  8. - Clear DCB
	.LONG	knlRtnZero##	;sd_commit	= 12. - Commit data to disk
	.LONG	knlRtnZero##	;sd_transold    = 16. - Transfer device/old
	.LONG	knlRtnZero##	;sd_transnew    = 20. - Transfer device/new
	.LONG	knlNullQio##	;sd_opena	= 24. - Open additinal
	.LONG	icmpopen	;sd_open1	= 28. - Open device/file
	.LONG	icmpopen	;sd_devparm     = 32. - Device parameters
	.LONG	knlIFnDev##	;sd_delete	= 36. - Delete file
	.LONG	knlIFnDev##	;sd_rename	= 40. - Rename file
	.LONG	knlIFnDevGQ##	;sd_inblock	= 44. - Input block
	.LONG	knlIFnDevGQ##	;sd_outblock	= 48. - Output block
	.LONG	knlIFnDev##	;sd_outblockq	= 52. - Output block (XFF)
	.LONG	knlIFnDevGQ##	;sd_outstring	= 56. - Output string
	.LONG	knlRtnMOne##	;sd_getiosts	= 60. - Get input/output status
	.LONG	icmpspecial	;sd_special     = 64. - Special device function
	.LONG	knlNullClose##	;sd_close	= 68. - Close file
	.LONG	knlNullLabel##	;sd_label       = 72. - Get device label
	.LONG	knlNullQioGQ##	;sd_commitfunc	= 76. - Commit data to disk
	.LONG	knlInfoNone##	;sd_devinfo     = 80. - Get device info
ICMPDSPSZ=!{$-icmpdsp}/4

;Class function dispatch table for ICMP class devices

	.LONG	ICMPCLSFMX
icmpcls:.LONG	knlIFnDev##	;           = 0. - Illegal
	.LONG	knlIFnDev##	;CF_ADDUNIT = 1. - Add unit
	.LONG	knlIFnDev##	;CF_ADDDCB  = 2. - Add DCB
ICMPCLSFMX==!{$-icmpcls}/4
.PAGE
;Device characteristics tables for the ICMP devices

	DATA

	.MOD	4
icmpdctbl:
 DCHARBGN  1, knlDCharValCom##
 DCHARENT  CLASS   , TEXT, , 8, knlDcMsgClass##, knlDcGetClass##   , knlDcSetClass##   , 0
 DCHARENT  PKTIN   , DECV, , 4, msgpktin       , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntpktin
 DCHARENT  BYTEIN  , DECV, , 4, msgbytein      , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntbytein
 DCHARENT  PKTOUT  , DECV, , 4, msgpktout      , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntpktout
 DCHARENT  BYTEOUT , DECV, , 4, msgbyteout     , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntbyteout
 DCHARENT  REDIRECT, DECV, , 4, msgredirect    , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntredirect
 DCHARENT  CHKSUM  , DECV, , 4, msgchksum      , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntchksum
 DCHARENT  PSLTMN  , DECV, , 4, msgpsltmn      , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntpsltmn
 DCHARENT  BADTYPE , DECV, , 4, msgbadtype     , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntbadtype
 DCHARENT  BADRDIR , DECV, , 4, msgbadrdir     , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntbadrdir
 DCHARENT  NOEREQ  , DECV, , 4, msgnoereq      , xosipsGetTpdbData#, xosipsSetTpdbData#, tpdb_icmpcntnoereq

	CODE

msgpktin:   DCHARINFO  {Number of packets input}
msgbytein:  DCHARINFO  {Number of bytes input}
msgpktout:  DCHARINFO  {Number of packets output}
msgbyteout: DCHARINFO  {Number of bytes output}
msgredirect:DCHARINFO  {Number of redirected connections}
msgchksum:  DCHARINFO  {Discarded - checksum error}
msgpsltmn:  DCHARINFO  {Discarded - packet size < minimum}
msgbadtype: DCHARINFO  {Discarded - bad message type}
msgbadrdir: DCHARINFO  {Discarded - bad redirect message}
msgnoereq:  DCHARINFO  {Discarded - no matching echo request}
.PAGE
;Device parameter table for ICMP: open

	.MOD	4

	.LONG	OPARMMAX
icmpopnparms:
	.LONG	icmpopngenparms	 ;IOPAR_xxxxxx = 00xx - Generic IO parameters
	.LONG	knlNullFilParms##;IOPAR_FILxxx = 01xx - File system IO
				 ;			  parameters
	.LONG	knlNullTrmParms##;IOPAR_TRMxxx = 02xx - Terminal IO parameters
OPARMMAX=!{$-icmpopnparms}/4-1

	.LONG	OPARMGENMAX	;Size of table
icmpopngenparms:
	.LONG	0		;		   = 0000h
	.LONG	knlIopDummyN##	;IOPAR_FILOPTN     = 0001h
	.LONG	knlIopDummyS##	;IOPAR_FILSPEC     = 0002h
	.LONG	knlIopDevSts##	;IOPAR_DEVSTS      = 0003h
	.LONG	knlIopUnitNum##	;IOPAR_UNITNUM     = 0004h
	.LONG	knlIopGlbId##	;IOPAR_GLBID       = 0005h
	.LONG	knlIopDelay##	;IOPAR_DELAY       = 0006h
	.LONG	knlIopTimeOut##	;IOPAR_TIMEOUT     = 0007h
	.LONG	0		;IOPAR_INPSTS      = 0008h
	.LONG	0		;IOPAR_OUTSTS      = 0009h
	.LONG	knlIopInpQLmt##	;IOPAR_INPQLMT     = 000Ah
	.LONG	knlIopOutQLmt##	;IOPAR_OUTQLMT     = 000Bh
	.LONG	0		;IOPAR_SIVECT1     = 000Ch
	.LONG	0		;IOPAR_SIVECT2     = 000Dh
	.LONG	0		;IOPAR_SIDATA      = 000Eh
	.LONG	knlIopNumOpen##	;IOPAR_NUMOPEN     = 000Fh
	.LONG	knlIopBufrLmt##	;IOPAR_BUFRLMT	   = 0010h
OPARMGENMAX=!{$-icmpopngenparms}/4

;Device parameter table for ICMP: IO operations

	.LONG	PARMMAX
icmpioparms:
	.LONG	icmpiogenparms	 ;IOPAR_xxxxxx = 00xx - Generic IO parameters
	.LONG	knlNullFilParms##;IOPAR_FILxxx = 01xx - File system IO
				 ;			  parameters
	.LONG	knlNullTrmParms##;IOPAR_TRMxxx = 02xx - Terminal IO parameters
PARMMAX=!{$-icmpioparms}/4

	.LONG	PARMGENMAX	;Size of table
icmpiogenparms:
	.LONG	0		;		   = 0000h
	.LONG	knlIoxFilOptn##	;IOPAR_FILOPTN     = 0001h
	.LONG	knlIoxFilSpec##	;IOPAR_FILSPEC     = 0002h
	.LONG	knlIopDevSts##	;IOPAR_DEVSTS      = 0003h
	.LONG	knlIopUnitNum##	;IOPAR_UNITNUM     = 0004h
	.LONG	knlIopGlbId##	;IOPAR_GLBID       = 0005h
	.LONG	knlIopDelay##	;IOPAR_DELAY       = 0006h
	.LONG	knlIopTimeOut##	;IOPAR_TIMEOUT     = 0007h
	.LONG	0		;IOPAR_INPSTS      = 0008h
	.LONG	0		;IOPAR_OUTSTS      = 0009h
	.LONG	knlIopInpQLmt##	;IOPAR_INPQLMT     = 000Ah
	.LONG	knlIopOutQLmt##	;IOPAR_OUTQLMT     = 000Bh
	.LONG	0		;IOPAR_SIVECT1     = 000Ch
	.LONG	0		;IOPAR_SIVECT2     = 000Dh
	.LONG	0		;IOPAR_SIDATA      = 000Eh
	.LONG	knlIopNumOpen##	;IOPAR_NUMOPEN     = 000Fh
	.LONG	knlIopBufrLmt##	;IOPAR_BUFRLMT	   = 0010h
PARMGENMAX=!{$-icmpiogenparms}/4
.PAGE
	.SBTTL	icmpinit - Initialization routine for ICMP class devices

	INITSUB

;Initialization routine for ICMP class devices
;	CALL	icmpinit

icmpinit::
	MOVL	EDI, #icmpchk		;Install the UDP class
	MOVL	EBX, #icmpcls		;Offset of class function dispatch table
	CLRL	ECX
	MOVL	EAX, #'ICMP'
	CLRL	EDX
	MOVL	ESI, #icmpccb#
	JMP	knlNewClass#

	CODE
.PAGE
	.SBTTL	icmpchk - Device check routine for ICMPUDP class devices

;Device check routine for IPSUDP class devices
;	c{SS:EBX} = Address of device name (16 characters)
;	CALL	icmpchk
;	C:set = Error (match found)
;	  c{EAX} = Error code
;	C:clr = Normal
;	  Z:set = Match found
;	    c{EDI} = Offset of DCB
;	  Z:clr = Not found
;  EBX and ESI are preserved

icmpchk:CMPL	SS:[EBX], #'ICMP'	;Is this ICMP*?
	JNE	4$.S			;No
	MOVL	EDI, xosipsIcmpTpdbHead	;Get offset first IC TPDB
	LEAL	ECX, 4.B[EBX]		;Get offset of 1st unit number character
	MOVL	EDX, #0			;Get description bits
	CALL	xosipsFindDev#		;Find matching network device
	JC	2$.S			;If error
	JNE	2$.S			;Or if not a match
	MOVL	dcb_sdisp.B[EDI], #icmpdsp ;Store offset of dispatch table
	MOVB	dcb_ipsprot.B[EDI], #IPP_ICMP ;Store protocol value
	MOVL	dcb_devchar.B[EDI], #icmpdctbl ;Use our device characteristics
	CLRL	EAX			;Set Z
2$:	RET				;And return

;Here if not ICMP*

4$:	CLC
	RET
.PAGE
	.SBTTL	sd_open - Open device

;Here for the open device entry

icmpopen:
	CMPL	SS:xffParm##, #0.B
	JE	4$.S
	MOVL	EBX, #icmpopnparms	;Process device parameters
	MOVL	ECX, #knlComDPParms##
	LFSL	EDX, SS:xffParm##
	JMP	knlProcDevParm##

4$:	CLRL	EAX
	RET
.PAGE
	.SBTTL	icmpspecial - Special device function for ICMP

;Here for the QFNC_special queued IO function for ICMP devices - Do special
;  device functions
;  QAB fields used:
;	qab_option:	Low 8 bits contain sub-function, high 24 bits may be
;			  used to modify sub-function
;	qab_count:	May be used to pass single 32 bit argument value
;	qab_buffer1:	Pointer to argument buffer
;  Contents returned in qab_amount depends on function

icmpspecial:
	CALL	knlIoReadLock##		;Lock the buffer
	JC	2$.S
	MOVB	iorb_queue.B[ESI], #dcb_outframe
	MOVL	iorb_routine.B[ESI], #ipsspec1
	JMP	knlXfQueue##		;Switch to extended fork context

2$:	TOFORK
4$:	CLRL	ECX
	MOVL	EBX, #QSTS$DONE
	RET

;Here in extended fork context

ipsspec1:
	CMPL	SS:xffParm##, #0.B	;Have any device parameters?
	JE	6$.S			;No
	MOVL	EBX, #icmpioparms	;Yes - process parameters
	MOVL	ECX, #knlComDPParms##
	LFSL	EDX, SS:xffParm##
	CALL	knlProcDevParm##
	JC	4$.S
6$:	MOVZBL	ECX, SS:xffOption##	;Get sub-function
	CMPL	ECX, #ICMPSFMAX.B	;Legal sub-function?
	JAE	8$.S			;No
	JMPIL	icmpsfdsp[ECX*4]	;Dispatch on the subfunction

8$:	MOVL	EAX, #ER_IFDEV
	JMP	4$.S

;Dispatch table for special device functions for disks

	DATA

icmpsfdsp:
	.LONG	6$		;	     = 0. - Illegal
	.LONG	icmpuserping	;ICMPSF_PING = 1. - Send ICMP echo request and
				;		      get response
ICMPSFMAX=!{$-icmpsfdsp}/4

	CODE
.PAGE
	.SBTTL	icmpuserping - Special device function to send ICMP echo request packet

;Special device function to send ICMP echo request packet for user

;The data buffer has the following format:
;	Offset Size       Description
;	   0     4     IP address
;	   4     4     Reserved
;	   8     1     Retry time (seconds)
;	   9     1     Number of retrys
;	  10     2     ID value for ICMP echo request
;	  12     4     Length of message
;	  16           Message data

$$$=!0
FRM usrp_rte   , 4t
FRM usrp_msglen, 4t
usrp_SIZE=!$$$

icmpuserping:
	ENTER	usrp_SIZE, 0
	CALL	getpingqel
	JC	6$
	CLRL	EAX
	MOVL	dcb_icmppktb.B[EDI], EAX
	MOVL	ESI, dcb_netsdb.B[EDI]	;Get offset of the SDB
	CMPL	SS:xffCount##, #16t.B	;Is the buffer big enough for a header?
	JBE	2$.S			;No
	LFSL	EBX, SS:xffBuffer1##	;Yes - get address of the user's buffer
	MOVL	EAX, FS:[EBX]		;Get IP address
	MOVL	EDX, dcb_netpdb.B[EDI]	;Get offset of the PDB
	TESTL	EAX, EAX		;All 0?
	JE	1$.S			;Yes - leave it alone
	TESTL	EAX, pdb_ipsubnetmask.B[EDX] ;No - is the network part given?
	JNE	1$.S			;Yes
	PUSHL	ECX			;No
	MOVL	ECX, pdb_ipaddr.B[EDX]	;Use our network address
	ANDL	ECX, pdb_ipsubnetmask.B[EDX]
	ORL	EAX, ECX
	POPL	ECX
	MOVL	FS:[EBX], EAX
1$:	MOVL	rt_ipaddr.B[ECX], EAX	;Store IP address
	MOVL	dcb_ipsrmtaddr.B[EDI], EAX
	MOVZBL	EAX, FS:8t.B[EBX]	;Get retry interval
	MOVL	rt_t2lcnt.B[ECX], EAX
	MOVB	rt_t2lval.B[ECX], AL
	MOVB	AL, FS:9t.B[EBX]	;Get number of retries
	MOVB	rt_retry.B[ECX], AL
	MOVL	usrp_rte.B[EBP], ECX
	MOVL	ECX, FS:12t.B[EBX]	;Get message length
	MOVL	usrp_msglen.B[EBP], ECX
	LEAL	EAX, 16t.B[ECX]		;Is the buffer big enough to hold the
	CMPL	SS:xffCount##, EAX	;  message data?
	JAE	8$.S			;Yes
2$:	MOVL	EAX, #ER_ICDEV
	JMP	pinger4.S

;Here if error

pinger2:MOVL	ECX, usrp_rte.B[EBP]	;Do we have a request buffer now?
	MOVL	EBX, rt_pkt.B[ECX]
	TESTL	EBX, EBX
	JE	4$.S			;No
	CALL	xosnetGiveBufr##	;Yes - give it up
4$:	MOVL	EBX, dcb_icmppktb.B[EDI] ;Do we have a response buffer now?
	TESTL	EBX, EBX
	JE	pinger4.S		;No
	CALL	xosnetGiveBufr##	;Yes - give it up
pinger4:MOVL	ESI, usrp_rte.B[EBP]	;Give up our routing table entry (which
	CALL	knlGiveQel##		;  has not been linked into the routing
6$:	LEAVE				;  table yet)
	MOVL	EBX, #QSTS$DONE
	CLRL	ECX
	RET

;Here with a valid buffer size
;	c{ECX} = Message length

8$:	MOVL	EDX, sdb_idb.B[ESI]
	ADDL	ECX, idb_hwhdrsz.B[EDX]
	ADDL	ECX, #28t.B		;Get approximate packet size
	CALL	xosnetGetBufr##		;Get a network buffer
	JC	pinger4.S		;If error
	MOVL	ECX, usrp_rte.B[EBP]
	MOVL	rt_pkt.B[ECX], EBX
	MOVL	EDX, #IPP_ICMP<8t
	CALL	xosipsSetPkt#		;Set up the IP header
	JC	pinger2.S
	PUSHL	EDI
	PUSHL	ESI
	LFSL	ESI, SS:xffBuffer1##	;Get address of the user's message
	MOVZWL	EAX, FS:10t.B[ESI]	;Get ICMP message ID value
	ADDL	ESI, #16t.B
	LEAL	EDI, 8.B[EDX]
	PUSHL	DS
	POPL	ES
	CLD
	MOVL	ECX, usrp_msglen.B[EBP]	;Get message length
	ADDL	npb_count.B[EBX], ECX	;Increase the packet size
	RMOVSB	[EDI], FS:[ESI]		;Copy the data
	POPL	ESI
	POPL	EDI
	MOVL	ECX, usrp_rte.B[EBP]
	MOVL	rt_timeout.B[ECX], #upingtimeout
	PUSHL	EDI
	MOVL	EDI, dcb_netpdb.B[EDI]	;Set up the ICMP header (note that EAX
	CALL	pingsetup		;  still contains the ID value)
	POPL	EDI
	MOVL	EBX, rt_pkt.B[ECX]	;Restore offset of the echo packet
	MOVL	EAX, #xosnetOutDone##
	CALL	xossnpSendPkt##		;Output the packet
	JC	10$.S			;If error
	PUSHL	ESI
	MOVL	ESI, dcb_netidb.B[EDI]	;OK
	MOVL	EAX, #-1		;Wait until done
	CALL	xosnetWaitPkt##
	POPL	ESI
	JC	10$.S
	CLRL	EAX
	CMPL	dcb_icmppktb.B[EDI], EAX ;Did we get a response already?
	JNE	10$.S			;Yes
	DECL	EAX			;No - wait for the response
	CALL	xosnetRspWait##
10$:	PUSHL	EAX
	MOVL	ECX, usrp_rte.B[EBP]
	MOVL	EBX, rt_pkt.B[ECX]	;Give up the request packet
	CALL	xosnetGiveBufr##
	PUSHL	EDI
	MOVL	EDI, dcb_netpdb.B[EDI]
	CALL	givepingrt		;Give up the echo routing table entry
	POPL	EDI
	POPL	EAX
	TESTL	EAX, EAX
	JS	6$			;Finished if error
	MOVL	EDX, #QSTS$DONE		;OK - get status bits to return
	MOVL	EBX, dcb_icmppktb.B[EDI] ;Get offset of the response packet
	PUSHL	EDI
	LESL	EDI, SS:xffBuffer1##	;Get address of the user's buffer
	MOVZBL	EAX, npb_npofs.B[EBX]	;Get source IP address
	MOVL	EAX, ip_srcipaddr.B[EBX+EAX]
	MOVL	ES:[EDI], EAX		;Store it in the user's buffer
	ADDL	EDI, #16t.B
	MOVL	ECX, npb_count.B[EBX]	;Get amount of data to copy
	SUBL	ECX, #8.B
	JNS	12$.S
	CLRL	ECX
12$:	MOVL	EAX, SS:xffCount##	;Will the entire message fit in his
	SUBL	EAX, #16t.B		;  buffer?
	CMPL	ECX, EAX
	JBE	14$.S			;Yes
	MOVL	ECX, EAX		;No - just give him what will fit and
	BTSL	EDX, #QSTS%TRUNC	;  indicate truncation
14$:	MOVZBL	ESI, npb_tpofs.B[EBX]
	LEAL	ESI, 8.B[EBX+ESI]	
	CLD
	PUSHL	ECX			;Save message length
	RMOVSB	[EDI], [ESI]		;Copy the data
	POPL	ECX
	POPL	EDI
	CALL	xosnetGiveBufr##	;Give up the response buffer
	LEAVE
	CLRL	EAX
	MOVL	EBX, EDX
	RET
.PAGE
;Here when a user ping request times out

upingtimeout:
	MOVL	EBX, rt_pkt.B[ECX]	;Get offset of packet buffer
	TESTB	npb_sts.B[EBX], #NPS$NANA ;Had an ARP failure on the packet?
	JNE	10$.S			;Yes - forget it!
	DECB	rt_retry.B[ECX]		;No - should we try it again?
	JS	10$.S			;No
pingagain:
	CMPL	npb_nextsnd.B[EBX], #-1.B ;Yes - is it still being output?
	JE	2$.S			;No
	INCB	rt_retry.B[ECX]		;Yes - wait some more
	JMP	4$.S

;Here if ping request packet output has finished

2$:	PUSHL	ECX
	MOVL	EAX, #ret002
	CALL	xossnpSendPkt##		;Output the packet again
	POPL	ECX
4$:	MOVZBL	EAX, rt_t2lval.B[ECX]	;Reset the timeer count
	MOVL	rt_t2lcnt.B[ECX], EAX
6$:	MOVL	ECX, rt_next.B[ECX]	;Finished here
	RET

;Here if we have tried enough

10$:	PUSHL	ECX
	PUSHL	EBX
	MOVL	EAX, rt_ipaddr.B[ECX]	;Get the IP address
	MOVB	DL, #0
	CALL	xosipsRtRmvOne#		;Remove the node's routing table entry
	POPL	EBX
	MOVL	EDI, npb_dcb.B[EBX]	;Wake up the user
	MOVL	EAX, #ER_NORSP
	CALL	xosnetRspDone##		;Continue - user XFF code will remove
	POPL	ECX			;  the routing table entry and give up
	JMP	6$.S			;  the packet buffer
.PAGE
;Here when a routing ping request times out

rpingtimeout:
	MOVL	EBX, rt_pkt.B[ECX]	;Get offset of packet buffer
	TESTB	npb_sts.B[EBX], #NPS$NANA ;Had an ARP failure on the packet?
	JNE	4$.S			;Yes - forget it!
	DECB	rt_retry.B[ECX]		;No - should we try it again?
	JNS	pingagain.S		;Yes - go do that
4$:	CALL	xosnetGiveBufr##	;No - give up the packet buffer
	MOVL	EAX, rt_ipaddr.B[ECX]	;Get the IP address
	PUSHL	ECX
	MOVB	DL, #0
	CALL	xosipsRtRmvOne#		;Remove the node's routing table entry
	POPL	ECX
	PUSHL	rt_next.B[ECX]
	CALL	givepingrt		;Give up the ping routing table entry
	POPL	ECX
	RET
.PAGE
;Subroutine to send ICMP echo request packet for the routing routines
;	c{EAX} = IP Address
;	c(DL)  = Time-out value for each retry (seconds)
;	c(DH)  = Number of retries
;	c{EDI} = Offset of PDB
;	c{ESI} = Offset of SDB
;	CALL	icmprouteping

icmprouteping::
	PUSHL	ESI			;Get a QEL
	CALL	getpingqel
	POPL	ESI
	JC	ret002.S
	MOVL	rt_ipaddr.B[ECX], EAX	;Store IP address
	MOVZBL	EAX, DL
	MOVL	rt_t2lcnt.B[ECX], EAX 	;Store time-out value
	MOVB	rt_t2lval.B[ECX], AL
	MOVB	rt_retry.B[ECX], DH	;Store number of retries
	PUSHL	ECX
	MOVL	EDX, sdb_idb.B[ESI]
	MOVL	ECX, idb_hwhdrsz.B[EDX]
	ADDL	ECX, #32t.B		;Get approximate size
	CALL	xosnetGetBufr##		;Get a network buffer
	POPL	ECX
	JC	givep2			;If error
	MOVL	rt_pkt.B[ECX], EBX
	MOVL	EAX, rt_ipaddr.B[ECX]	;Get IP address
	PUSHL	ECX
	MOVL	EDX, #IPP_ICMP<8t
	CALL	xosipsSetPkt2#		;Set up the IP packet header
	POPL	ECX
	JC	2$.S			;If error
	MOVL	rt_timeout.B[ECX], #rpingtimeout ;Set time-out dispatch
	MOVL	8.B[EDX], #12345678h	;Store 4 data bytes
	ADDL	npb_count.B[EBX], #4.B
	MOVL	EAX, #5533h
	CALL	pingsetup		;Set up the echo request header (this
					;  also links the routing table entry
	MOVL	EAX, #ret002		;  into the routing table lists)
	JMP	xossnpSendPkt##		;Output the packet and return

;Here if error with network buffer allocated

2$:	CALL	xosnetGiveBufr##	;Give up the network buffer
	JMP	givep2.S
.PAGE
;Subroutine to allocate QEL for ping routing table entry
;	CALL	getpingqel
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{ECX} = Offset of QEL

getpingqel:
	CALL	knlGetQel##		;Get a QEL
	JC	ret002.S
	MOVL	ECX, ESI
	MOVB	rt_type.B[ECX], #RTT_PING
	MOVL	rt_pkt.B[ECX], #0
ret002:	RET

;Subroutine to remove our routing table entry from the routing table
;	c{ECX} = Offset of routing table entry
;	c{EDI} = Offset of PDB
;	CALL	givepingrt

givepingrt:
	MOVL	EDX, pdb_ipndb[EDI]
	MOVL	EBX, rt_next.B[ECX]	;Remove block from the routing table
	MOVL	EAX, rt_prev.B[ECX]	;  list
	TESTL	EAX, EAX
	JE	8$.S
	MOVL	rt_next.B[EAX], EBX
	JMP	10$.S

8$:	MOVL	ndb_rthead.B[EDX], EBX
10$:	TESTL	EBX, EBX
	JE	12$.S
	MOVL	rt_prev.B[EBX], EAX
12$:	LEAL	EBX, ndb_pinghead.B[EDX] ;Also remove it from the ping list
14$:	CMPL	[EBX], ECX
	JE	16$.S
	MOVL	EBX, [EBX]
	TESTL	EBX, EBX
	JNE	14$.S
	CRASH	BDPL			;{BaD Ping List]

;Here with predicessor in ping list

16$:	MOVL	EAX, [ECX]		;Remove it from the ping list
	MOVL	[EBX], EAX
givep2:	PUSHL	ESI			;Give up the QEL
	MOVL	ESI, ECX
	CALL	knlGiveQel##
	POPL	ESI
	RET
.PAGE
;Subroutine to set up ICMP header for a ping message
;	c[AX]  = ID value
;	c{EBX} = Offset of packet buffer
;	c{ECX} = Offset of ping routing table entry
;	c{EDX} = Offset of ICMP header in packet
;	c{EDI} = Offset of PDB
;	CALL	pingsetup

pingsetup:
	SHLL	EAX, #16t
	MOVW	AX, pingseq		;Get identifier and sequence number
	INCL	pingseq
	MOVL	rt_data.B[ECX], EAX
	PUSHL	ECX
	MOVL	ECX, EAX
	MOVL	EAX, #ICMPT_ECHOREQ	;Get type and code values
	CALL	icmpsetup
	CALL	xosipsSendSet2#		;Finish setting up the IP header
	POPL	ECX			;Restore routing table entry offset
	INCL	tpdb_icmpcntpktout.B[EDI] ;;;;;;;;
	MOVL	EAX, npb_count.B[EBX]
	ADDL	tpdb_icmpcntbyteout.B[EDI], EAX ;;;;;;;
	MOVB	AL, pdb_netnum.B[EDI]
	MOVB	rt_pdbx.B[ECX], AL

;Now insert our routing table entry into the routing table lists - this does
;  not really have anything at all to do with routing, but the routing table
;  provides a convient way to do timeouts, which is all we really use it for.
;  We do not link into the routing hash table, just the routing timer list.

	MOVL	EDX, pdb_ipndb[EDI]
	MOVL	EAX, ndb_rthead.B[EDX]	;Link the entry to the routing table
	MOVL	rt_next.B[ECX], EAX	;  list
	TESTL	EAX, EAX
	JE	2$.S
	MOVL	rt_prev.B[EAX], ECX
	CLRL	EAX
2$:	MOVL	rt_prev.B[ECX], EAX
	MOVL	ndb_rthead.B[EDX], ECX
	MOVL	EAX, ndb_pinghead.B[EDX] ;Also link it to the echo request list
	MOVL	[ECX], EAX		 ;  using the rt_hash link pointer
	MOVL	ndb_pinghead.B[EDX], ECX
	MOVB	rt_type.B[ECX], #RTT_PING
	RET
.PAGE
	.SBTTL	icmpabortping - Subroutine to abort all ping requests for a link

;Subroutine to abort all ping requests for a link
;	c{EDI} = Offset of PDB
;	CALL	icmpabortping

icmpabortping::
	PUSHL	ESI
	MOVL	EDX, pdb_ipndb[EDI]	;Get offset of the NDB
	LEAL	ESI, ndb_pinghead.B[EDX] ;Get first ping routing table entry
	MOVB	AL, pdb_netnum.B[EDI]	;Get routing index for the PDB
4$:	MOVL	ECX, [ESI]		;Get next routing table entry
	TESTL	ECX, ECX
	JE	10$.S			;If finished
	CMPB	rt_pdbx.B[ECX], AL	;For this PDB?
	JNE	6$.S			;No
	CLRL	EAX			;Yes - stop the timer on this block
	MOVL	rt_t2lcnt.B[ECX], EAX
	MOVL	EBX, rt_pkt.B[ECX]	;Get offset of echo packet
	CMPL	npb_dcb.B[EBX], #0.B	;Is there an associated DCB?
	JE	8$.S			;No - must be a routing echo request
	PUSHL	ECX
	PUSHL	EDI			;Yes
	MOVL	EDI, npb_dcb.B[EBX]	;Wake up the user
	MOVL	EAX, #ER_NLKNA
	CALL	xosnetRspDone##		;Continue - user XFF code will remove
	POPL	EDI
	POPL	ECX			;  the routing table entry and give up
6$:	MOVL	ESI, ECX		;Advance pointer
	JMP	4$.S			;Continue

;Here for routing echo request - must give up the buffers here

8$:	MOVL	EBX, rt_pkt.B[ECX]	;Give up the associated buffer
	CALL	xosnetGiveBufr##
	CALL	givepingrt		;Give up the routing table entry
	JMP	4$.S

10$:	POPL	ESI
	RET
.PAGE
;Subroutine to set up ICMP packet header (also calculates the checksum so any
;  data must already be stored leaving an 8 byte hole for the header)
;	c{EAX} = Type and code values (high 16 bits must be 0)
;	c{EBX} = Offset of packet buffer
;	c{ECX} = Identifier and sequence number values
;	c{EDX} = Offset of start of ICMP part
;	c{EDI} = Offset of PDB
;	CALL	icmpsetup

icmpsetup:
	ADDL	npb_count.B[EBX], #8.B	;Increase size to allow for ICMP header
	MOVL	[EDX], EAX		;Store type and code values, clear the
					;  checksum field
	MOVL	icmp_id.B[EDX], ECX	;Store identifier and sequence number
icmpset2:
	TESTB	pdb_ipchksumh[EDI], #PCSH$GEN ;Should we generate checksums?
	JE	4$.S			;No - go on
	PUSHL	ESI			;Yes
	MOVL	ESI, EDX
	MOVZBL	ECX, npb_tpofs.B[EBX]
	NEGL	ECX
	ADDL	ECX, npb_count.B[EBX]	;Get length of the ICMP data
	CLRL	EAX
	CALL	xosipsChkSumFin#	;Calculate checksum value
	POPL	ESI
	NOTL	EAX
	MOVW	icmp_checksum.B[EDX], AX ;Store it
4$:	RET
.PAGE
	.SBTTL	icmprcv - Subroutine to process received ICMP packet

;Subroutine to process received ICMP packet
;	c{EAX} = Offset of IDB
;	c{EBX} = Offset of start of IP header
;	c{ECX} = Number of ICMP bytes (including ICMP header)
;	c{EDX} = Offset of start of ICMP header
;	c{EDI} = Offset of PDB
;	c{ESI} = Offset of TPDB
;	CALL	icmprcv

2$:	INCL	tpdb_icmpcntpsltmn.B[ESI] ;Count the error
4$:	CALL	xosnetGiveBufr##
	RET

icmprcv::
	INCL	tpdb_icmpcntpktin.B[ESI] ;Count the packet
	ADDL	tpdb_icmpcntbytein.B[ESI], ECX
	CMPL	ECX, #8t.B		;Is there enough data?
	JS	2$.S			;No - ignore the packet
	TESTB	pdb_ipchksumh[EDI], #PCSH$CHK ;Should we check checksums?
	JE	icmprcv4.S		;No - go on
	PUSHL	ECX			;Yes
	PUSHL	EDX
	PUSHL	ESI
	MOVL	ESI, EDX
	CLRL	EAX
	CALL	xosipsChkSumFin#	;Calculate the checksum
	POPL	ESI
	POPL	EDX
	POPL	ECX
	CMPW	AX, #0FFFFFFFFh.B	;Is the checksum value correct?
	JNE	30$.S			;No
icmprcv4:				;Yes
	MOVZBL	EAX, icmp_type.B[EDX]	;Get ICMP message type
	CMPB	AL, #ICMPT_MAX.B
	JA	badtype.S		;If illegal type, ignore it quietly
	JMPIL	typedsp[EAX*4]		;Dispatch on the message type

;Here if have illegal message type (icmp_type field)

badtype:INCL	tpdb_icmpcntbadtype.B[ESI] ;Count the error
	JMP	ignore.S

;Here if check-sum value is bad

30$:	INCL	tpdb_icmpcntchksum.B[ESI] ;Count the error
ignore:	CALL	xosnetGiveBufr##
	RET
.PAGE
	DATA

typedsp:.LONG	echoreply	;ICMPT_ECHOREPLY = 0  - Echo reply
	.LONG	badtype		;		 = 1  - Illegal
	.LONG	badtype		;		 = 2  - Illegal
	.LONG	dstunr		;ICMPT_DSTUNR    = 3  - Destination unreachable
	.LONG	srcquench	;ICMPT_SRCQUENCH = 4  - Source quench
	.LONG	redirect	;ICMPT_REDIRECT  = 5  - Redirect
	.LONG	badtype		;		 = 6  - Illegal
	.LONG	badtype		;		 = 7  - Illegal
	.LONG	echoreq		;ICMPT_ECHOREQ   = 8  - Echo request
	.LONG	badtype		;		 = 9  - Illegal
	.LONG	badtype		;		 = 10 - Illegal
	.LONG	ignore		;ICMPT_TIMEEXCD  = 11 - Time exceeded
	.LONG	parmprob	;ICMPT_PARMPROB  = 12 - Parameter problem
	.LONG	tsreq		;ICMPT_TSREQ     = 13 - Timestamp request
	.LONG	tsreply		;ICMPT_TSREPLY   = 14 - Timestamp reply
	.LONG	badtype		;ICMPT_INFOREQ   = 15 - Information request
	.LONG	badtype		;ICMPT_INFOREPLY = 16 - Information reply
	.LONG	ignore		;ICMPT_AMREQ     = 17 - Address mask request
	.LONG	amreply		;ICMPT_AMREPLY   = 18 - Address mask reply

	CODE
.PAGE
	.SBTTL	echoreply - Process echo reply message

;Here to process the ICMPT_ECHOREPLY message - Echo reply

echoreply:
	MOVL	EDX, icmp_id.B[EDX]	;Get sequence number and ID value
	MOVZBL	EAX, npb_npofs.B[EBX]	;Get source IP address
	MOVL	EAX, ip_srcipaddr.B[EBX+EAX]
	MOVL	ECX, pdb_ipndb[EDI]
	MOVL	ECX, ndb_pinghead.B[ECX] ;Get first ping block
	JREGZ	ECX, 8$			;If none
2$:	CMPL	rt_ipaddr.B[ECX], #0.B	;Did we know who we were sending it to?
	JE	4$.S			;No - don't check the address
	CMPL	rt_ipaddr.B[ECX], EAX	;Yes - does the address match?
	JNE	6$.S			;No
4$:	CMPL	rt_data.B[ECX], EDX	;Yes - what about the ID and sequence
					;  number?
	JE	10$.S			;Yes - this one matches
6$:	MOVL	ECX, [ECX]		;No - advance to next block
	TESTL	ECX, ECX
	JNE	2$.S			;Continue if another to check
8$:	INCL	tpdb_icmpcntnoereq.B[ESI] ;No matching request - count this
	JMP	ignore			;Otherwise, ignore the packet

;Here with matching echo block

10$:	CLRL	EAX			;Stop the timer on this block
	MOVL	rt_t2lcnt.B[ECX], EAX
	MOVL	EDX, rt_pkt.B[ECX]	;Get offset of the request packet
	MOVL	EAX, npb_dcb.B[EDX]	;Is there an associated DCB?
	TESTL	EAX, EAX
	JE	12$.S			;No
	CMPL	EAX, #xmbbase		;Maybe
	JB	12$.S			;No
	CMPL	dcb_icmppktb.B[EAX], #0.B ;Yes - do we already have a response?
	JNE	8$.S			;Yes - ignore this duplicate!
	MOVL	dcb_icmppktb.B[EAX], EBX ;No - store offset of received packet
	MOVL	EDI, EAX
	CLRL	EAX			;Wake up whoever is waiting for this
	JMP	xosnetRspDone##		;  (they will give up all of the
					;  bufferers, etc.)

;Here if no DCB associated with the ping request - this must be a routing ping
;  request - we must do all of the clean-up here - we don't need to do anything
;  else since the only reason for sending this was to refresh the routing table
;  for this node if it responded and the IP level code has alreay done this

12$:	PUSHL	rt_pkt.B[ECX]
	CALL	xosnetGiveBufr##	;Give up the echo reply paket
	POPL	EBX
	CALL	xosnetGiveBufr##	;Give up the echo request packet
	JMP	givepingrt		;Give up the echo routing table entry
.PAGE
	.SBTTL	dstunr - Process destination unreachable message

;Here to process the ICMPT_DSTUNR message - Destination unreachable

dstunr:	CMPL	ECX, #28t.B		;Is it long enough?
	JB	8$.S			;No - ignore it
	MOVB	AL, icmp_data+ip_ipprot.B[EDX] ;Get the protocol
	MOVL	ESI, pdb_iptpdbhead.B[EDI]
	ORL	ESI, ESI
	JE	8$.S
6$:	CMPB	tpdb_ipprot.B[ESI], AL
	JE	10$.S
	MOVL	ESI, [ESI]
	ORL	ESI, ESI
	JNE	6$.S
8$:	JMP	ignore

;Here with the corresponding protocol

10$:	MOVL	ECX, tpdb_dstunr.B[ESI]
	JREGZ	ECX, 8$
	CALLI	ECX
	JMP	ignore
.PAGE
	.SBTTL	srcquench - Process source quench message

;Here to process the ICMPT_SRCQUENCH message - Source quench

srcquench:
	JMP	ignore
.PAGE
	.SBTTL	redirect - Process redirect message

;Here to process the ICMPT_REDIRECT message - Redirect route to node

redirect:
	CMPB	icmp_code.B[EDX], #3	;Valid code value?
	JA	10$.S			;No - ignore the message!
	MOVL	EAX, icmp_gwipaddr.B[EDX] ;Yes - is the new gateway IP address 
	XORL	EAX, pdb_ipaddr.B[EDI]	  ;  a local address?
	TESTL	EAX, pdb_ipsubnetmask.B[EDI]
	JNE	10$.S			;No - ignore the message!
	MOVL	EAX, icmp_data+ip_dstipaddr.B[EDX] ;Yes
	XORL	EAX, pdb_ipaddr.B[EDI]	;Is the address being redirected a
	TESTL	EAX, pdb_ipsubnetmask.B[EDI] ;  local address?
	JE	10$.S			;Yes - ignore the message
	MOVL	EAX, icmp_data+ip_dstipaddr.B[EDX] ;Get IP address to redirect
	MOVL	ECX, icmp_gwipaddr.B[EDX] ;Get address to redirect to
	CALL	xosnetGiveBufr##	;Give up the buffer
	JMP	rtredirect#		;Do redirection

;Here if have invalid redirect request

10$:	INCL	tpdb_icmpcntbadrdir.B[ESI] ;Count the error
	JMP	ignore
.PAGE
	.SBTTL	echoreq - Process echo request message

;Here to process the ICMPT_ECHOREQ message - Echo request - this packet is
;  simply echoed back to the sender

echoreq:PUSHL	npb_count.B[EBX]	;Save length of ICMP part
	MOVL	ECX, pdb_idb.B[EDI]
	CALLI	idb_icmpecho.B[ECX]	;Call interface ICMP echo function 
	CALL	xosipsSetEcho#		;Set up the packet to echo
	POPL	ECX			;Restore length
	JC	ignore			;If error
	ADDL	npb_count.B[EBX], ECX	;Increate size of packet to include data
	MOVB	icmp_type.B[EDX], #ICMPT_ECHOREPLY ;Change message type
	MOVW	icmp_checksum.B[EDX], #0 ;Clear checksum field
	CALL	icmpset2		;Calculate and store checksum if need to
	CALL	xosipsSendSet2#		;Finish setting up the IP header
	MOVL	EAX, #xosnetGiveBufr##	;Output the packet and then give it up
	CALL	xossnpSendPkt##
	RET
.PAGE
	.SBTTL	parmprob - Process parameter problem message

;Here to process the ICMPT_PARMPROB message - Parameter problem

parmprob:
	JMP	ignore
.PAGE
	.SBTTL	tsreq - Process timestamp request message

;Here to process the ICMPT_TSREQ message - Timestamp request

tsreq:
	JMP	ignore
.PAGE
	.SBTTL	tsreply - Process timestamp reply message

;Here to process the ICMPT_TSREPLY message - Timestamp reply

tsreply:
	JMP	ignore
.PAGE
	.SBTTL	amreply - Process address mask reply message

;Here to process the ICMPT_AMREPLY message - Address mask reply

amreply:
	JMP	ignore
.PAGE
	.SBTTL	xosipsSendDstUnr - Subroutine to send ICMP destination unreachable packet

;Subroutine to send ICMP destination unreachable packet
;	c{EBX} = Offset of packet
;	c{EDI} = Offset of PDB
;	CALL	xosipsSendDstUnr

xosipsSendDstUnr:
	PUSHL	EBX			;Save offset of packet
	PUSHL	EAX			;Save ICMP packet type and code
	MOVZBL	EDX, npb_npofs.B[EBX]	;Get the size of the IP header in the
	ADDL	EDX, EBX		;  undeliverable packet
	PUSHL	EDX
	MOVB	CL, [EDX]
	ANDL	ECX, #0Fh.B
	SHLL	ECX, #2t
	PUSHL	ECX
	PUSHL	ip_srcipaddr.B[EDX]	;Save the IP address
	ADDL	ECX, #36t.B		;Calculate size needed for ICMP packet
	MOVL	EAX, pdb_idb.B[EDI]
	ADDL	ECX, idb_hwhdrsz.B[EAX]
	CALL	xosnetGetBufr##		;Allocate a buffer for the packet
	POPL	EAX			;Restore IP address
	JC	6$.S			;Forget it if error!
	MOVL	EDX, #IPP_ICMP<8t
	CALL	xosipsSetPkt2#		;Set up the IP header
	JC	4$.S			;If error
	POPL	ECX
	ADDL	ECX, #8t.B		;Get amount to copy
	ADDL	npb_count.B[EBX], ECX
	XCHGL	ESI, [ESP]
	PUSHL	EDI
	LEAL	EDI, 8.B[EDX]
	PUSHL	DS
	POPL	ES
	CLD
	RMOVSB	[EDI], [ESI]
	POPL	EDI
	POPL	ESI
	POPL	EAX
	CLRL	ECX
	CALL	icmpsetup
	CALL	xosipsSendSet2#		;Finish setting up the IP header
	MOVL	EAX, #xosnetGiveBufr##	;Output the packet and then give it up
	CALL	xossnpSendPkt##
	POPL	EBX
	RET

;Here if error setting up the IP header

4$:	CALL	xosnetGiveBufr##
6$:	ADDL	ESP, #12t.B
	POPL	EBX
	RET
.PAGE
	DATA

	.MOD	4
pingseq:.LONG	1
xosipsIcmpTpdbHead::
	.LONG	0

	LKEEND

		RCP Protocol Description

RCP (Reliable Connection Protocol) is a packet orientated connection base
protocol which is layered on top of UDP.  It is intended as a direct
replacement for TCP for applications where a packet, rather than a byte
stream protocol, is needed.

The overall structure and philosophy of the protocol is similar to that of
TCP except that is uses packet rather than byte numbers for message
acknowledgement and flow control.  Also, the use of the packet type field
is quite different.  The same adaptive retransmission scheme is used.

Each RCP packet (which is sent as the data part of a UDP packet) has the 
following format: (all multi-byte values as sent with the high order byte
first)

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|    Type     | Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |        Available window       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The packet types are as follows:

  CONREQ = 0x1  Connection request
  CONACK = 0x2  Connection acknowlegement
  CONREJ = 0x3  Connection reject
  CONBSY = 0x4  Connection already exists

  INT    = 0x8  Interrupt data
  DATA   = 0x9  User data
  SUPER  = 0xA  Supervisory data
  WINPRB = 0xB  Window probe
  WINACK = 0xC  Window probe acknowlegement

  CLSREQ = 0xF  Close request
  KILREQ = 0x10 Kill request
  KILACK = 0x11 Kill acknowlegement
  RSTREQ = 0x12 Reset connection request
  RSTACK = 0x13 Reset connection acknowlegement
  RSTREJ = 0x14 Reset connection reject

Note that there are some gaps in the packet type numbering scheme to allow
for future additions.

The "I" field indicates an interrupt acknowlegement.

The connection ID number field contains an 8-bit value which is the same for
all packets associated with a connection.  This is used to allow ports to be
immediately reused without worrying about left over packets from a previous
connection.  This is needed this the 16-bit sequence number field is small
enough that it is difficult to guarentee that left over packets will not be
a problem.

The send sequence number field contains the sequence number for the packet.
The number always starts at 0 when a connection is established and is
incremented by one after sending a data packet which contains data.

The acknowlege sequence number field contains the number of the next data
packet expected to be received.

The available window field contains the number of packets which the sender
is willing to receive, based on the value in the ack sequence number field.

**** CONNECTION ESTABLISHMENT ****

A connection is established by sending a CONREQ packet.  The format of a
CONREQ packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 0 1| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Maximum packet size      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    |      Connection options       |
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The connection ID number may have any value.  The value should be chosen by
the originator of the connection to be different from any connection ID value
recently used for a connection ID for the same UDP port.

The available window value is the number of packets which the sender of the
CONREQ packet is perpared to receive.

The maximum packet size value specifies the maximum length data packet (data
part only) which the sender of the CONREQ will send and is willing to receive.

Connections are established between UDP ports.  The ports used by each end of
a connection do not need to be equal and more than one connection can exist
for any given UDP port.  Only one connection can exist between any given
pair of UDP ports.  This is the same scheme as is used by TCP.

The reserved items are reserved for future specification and must contain 0.

The format of a connection option is as follows:

    +-+-+-+-+-+-+-+-+
    |  Option type  |
    +-+-+-+-+-+-+-+-+
    |     Length    |
    +-+-+-+-+-+-+-+-+
    |               |
    |      Data     |
    |               |
    +-+-+-+-+-+-+-+-+

Connection option types will be defined soon.


When a CONREQ packet is received, a CONACK, CONREJ, or a CONBSY packet must be
sent in reply.  A CONACK packet accepts the connection request and establishes
a connection.  A CONREJ packet rejects the connection request.  A CONBSY packet
rejects the connection request because a connection already exists between the
port-pair.


The format of a CONACK packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 0 2| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Maximum packet size      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    |      Connection options       |
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The value of the connection ID number must be the same as that specified in the
CONREQ packet.  The available window field value specifies the number of data
packets the sender of the CONACK packet is willing to receive.

The maximum packet size value specifies the maximum length data packet (data
part only) which the sender of the CONACK will send and is willing to receive.
This value must be less than or equal to the value specified in the CONREQ
packet.

Connection options are the same as for the CONREQ packet.


The format of a CONREJ packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 0 3| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |          Error code           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The error code indicates the reason for rejecting the connection request.
Values will be defined soon.

The format of a CONBSY packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 0 4| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | Con ID in use |0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The send and ack sequence number values are the current values for the existing
connection.  The "connection ID in use" field indicates the connection ID value
for the existing connection.

When establishing a connection, the initiateing enity (the one sending the
CONREQ packet) should retransmit the packet at least 3 times at an interval
of between 1/2 and 5 seconds before giving up.  An ICMP reject message from
the final destination of the message should terminate these retries.  Other
ICMP rejects should be ignored.


If an CONBSY response is received, it indicates that a "half open" connection
exists.  The usual response will be to send a RSTREQ packet followed by another
CONREQ packet.

The format of an RSTREQ packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 1 2| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The "connection ID number" field must contain the connection ID value for the
connection being reset.  The send and ack sequence numbers are relative to the
sender of this packet, so they must be reversed from those received in a CONBSY
packet.  That is, the two values must be exchanged.

The response to this packet will be either an RSTACK or an RSTREJ packet.  An
RSTACK packet indicates that the connection was reset.  An RSTREJ packet
indicates that the connection was not reset.

The format of an RSTACK packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 1 3| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The value in the connection ID number field will be the connection ID value for
the connection which was cleared.


The format of an RSTREJ packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 1 4| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |          Error code           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The value in the connection ID number field will be the connection ID value for
the connection which was to be cleared.  The values for the error code will be
specified soon.

If a connect collision occures (a CONREQ packet is received when expecting a
CONACK), the enity with the numerically highest IP address wins.  This means
that when a CONREQ is received when expecting a CONACK, if the remote IP
address is numerically larger than the local IP address, the pending outgoing
connection should should be terminated and the incoming CONREQ should be
processed normally.  If the remote IP address is numerically smaller, it should
be ignored.  This is correct, this the other end will have already terminated
the connection attempt because of the CONREQ it received.

A CONREQ packet may be received again after a connection is established if the
CONACK packet is lost and the CONREQ is retransmitted.  If a CONREQ is received
for the same connection (same connection ID value) before any data or interrupt
packets are received, the same CONACK should be sent as was sent in response
to the original CONREQ.  If a duplicate CONREQ is received after a data or
interrupt packet is received, it should be ignored (it must be out of order and
has already been acknowleged, otherwise data could not have been sent).


**** CONNECTION TERMINATION ****

A connection is terminated by sending a KILREQ packet.  This can be sent from
either end of the connection.  When a KILREQ packet is received, it should not
be acted on until all preceeding packets have been received.  Preceeding
packets do not, however, have to have been processed.  In fact, all unprocessed
preceeding packets must be discarded when a KILREQ is received.  A KILACK
packet is sent in response to a KILREQ packet.  Note that a KILREQ cannot be
rejected.  It always terminates the connection when received.  KILACK should
be sent immediately after the KILREQ is acted upon.  If a KILREQ is received
for which there is no connection, a KILACK should be sent anyway.  This is a
simple way of handling the problem of responding to KILREQ packets which are
retransmitted because the KILACK packet is lost.  It also handles the problem
of a system having to time-out when trying to terminate a half-open connection.

The format of an KILREQ packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 1 0| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |          Reason code          |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Reserved            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The reason code value indicates why the connection is being terminated.  The
values will be defined soon.

The format of an KILACK packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|0 0 0 0 0 1 1| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


**** DATA TRANSMISSION ****

Data is transmitted using the DATA, SUPER, and INT packets.  DATA and SUPER
packets are sequenced.  This means that whenever a DATA or SUPER packet which
contains data is sent the send sequence number is incremented by 1.  Likewise,
when one is received, the ack sequence number is incremented by 1.  Empty DATA
packets are used to acknowledge receiving or processing of received DATA or
SUPER packets.  RCP is a packet protocol.  This means that each packet sent is
delivered to the receiver as a unit.  Packets are never merged or split by the
receiver.

The handling of the sequence numbers and the flow control window size are
exactly like TCP, except that sequencing is by packet rather than by byte.
The same dynamic retransmission scheme is used.  Determination of round-trip
time is somewhat easier than with TCP, since the complication introduced by
merging of packets by the receiver does not exist.

DATA packets are used to convey user data.  The format of a DATA packet is as
follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|0 0 0 0 0 0 9| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    |          User data            |
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

SUPER packets are used to convey supervisory network data.  This data is
generally not delivered to the user but is used directly by the protocol
routines.  SUPER packets are sequenced in the same sequence space as DATA
packets.  The format of a SUPER packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|0 0 0 0 0 0 A| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |     Supervisory function      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    |       Additional data         |
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The following supervisory functions are defined:

  CLSREQ = 1  Close request.  Causes a KILREQ to be sent when preceeding data
              has been processed.  The additional data consists of 2 bytes
              which specify the reason for terminating the connection (see
              KILREQ for values).

SUPER packets always contain data and always increment the send sequence
number.

INT packets are used to send out-of-band user data.  These packets specify a
send sequence number and are not processed until all preceeding packets have
been received but they do not occupy sequence space, i.e., the send sequence
number is not incremented when they are sent.  Also, they are processed before
any buffered received packets are processed.  At most one INT packet may be
unacknowleged at any time.  INT packets are acknowleged by sending a DATA or
SUPER packet with the I bit set in the byte which contains the packet type.

The format of an INT packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|0 0 0 0 0 0 8| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Int seq number | Function bits |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    |           User data           |
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The interrupt sequence number value is incremented by 1 for each INT packet
sent.  This is intended to provide detection of duplicate packets which can
occure if acknowlegements are lost.  It is set to 0 when a connection is
established.

The function bits byte specifies various supervisory functions associated with
the packet as follows:

   Bit 0 - Discard all pending data packets if set.
   Bit 1 - Reserved, must be 0
   Bit 2 - Reserved, must be 0
   Bit 3 - Reserved, must be 0
   Bit 4 - Reserved, must be 0
   Bit 5 - Reserved, must be 0
   Bit 6 - Reserved, must be 0
   Bit 7 - Reserved, must be 0

The user data area contains data which is passed to the user as out-of-band
data.  It must contain at least one byte.


**** FLOW CONTROL CONSIDERATIONS ****

A problem exists because the packets which update flow control information are
not directly acknowleged.  It is possible for a situation to exist where a
single packet is sent to fully open a completely closed flow control window.
If this packet is lost, there is no direct way to recover.  TCP handles this
case by periodically sending a "window probe" packet when the flow control
window is conpletely closed and there is something to send.  RCP uses a
slightly more complex scheme which has the advantage of not requiring
continuing periodic probe packets.

When there is output to be sent and the output flow control window has been
completely closed for some small period of time (exact value is t.b.d.), a
WINPRB packet is output.  This is acknowleged with a WINACK packet.  If a
WINACK packet is not received in the normal acknowlegement time, the WINPRB
packet should be retransmitted.  The WINPRB packet informs the receiver that
the sender of the packet has data to send and is waiting for the window to
open.  If the receiver of the WINPRB packet finally sends an empty DATA packet
which opens the window, it will consider that packet lost and retransmit it if
it does not receive a DATA or SUPER packet in the normal retransmit interval.
If the window is opened by sending a non-empty DATA or SUPER packet, no special
handling is done, since this packet will be acknowleged and retransmitted if
necessary using the normal mechanism.

The format of the WINPRB packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|0 0 0 0 0 0 B| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format of the WINACK packet is as follows:

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |I|0 0 0 0 0 0 C| Con ID number |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Send sequence number     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |      Ack sequence number      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Available window        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Note that both of these packets contain sequence numbers and are not processed
until all preceeding packets have been received (but not can necessarly
processed).  These packets can acknowlege DATA, SUPER, or INT packets and can
change the flow control window value.  Indeed, the WINACK packet can open the
flow control window for which it is acknowleging the probe.  This can happen
if window opens at about the same time that the probe is sent.  If it is
necessary to retransmit this packet, the retransmission will be a DATA packet,
not another WINACK packet.

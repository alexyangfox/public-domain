	.TITLE	ENFJADRV - Network device driver for Fujitsu Ethercoupler for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSXNET.PAR
	.INCLUD XOSINC:\XMAC\XOSXEN.PAR
	.INCLUD XOSINC:\XMAC\PCAT.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR

;This device driver supports the Fujitsu Ethercoupler controller MB86965
;  Ethernet chip.  It is supported in both 8 bit and 16 bit modes.

;First include the MB86965 chip definitions

	.INCLUD	MB86965.PAR
.PAGE
MAJV   =!1t
MINV   =!1t
EDITNUM=!0t

;1.0.0 - 8-Dec-92
;	Initial version, created from ENNEADRV 1.0.6

	LKEHEAD	ENFJADRV, MAJV, MINV, EDITNUM, LKETYPE_DEVICE

;Define offsets in the device dependent part of the IDB for the enfja interface
;  (Fujitsu ethercoupler controller MB86965)

$$$=!idb_SIZE
BLK idb_enfjatcvrmode, 1t	;Value for P_2TCVRMODE register
BLK idb_enfjabfrsize , 1t	;Buffer size bits
BLK idb_enfjacfg0    , 1t	;Value for P_CONFIG0 register
BLK idb_enfjacfg1    , 1t	;value for P_CONFIG1 register
idb_enfjaSIZE=!$$$
.PAGE
;Device characteristics for ENFJA NET devices

	DATA

	.MOD	4
enfjadctbl:
 DCHARBGN  1, knlDCharValCom##
 DCHARENT  CLASS   , TEXT, , 8, knlDcMsgClass##   , knlDcGetClass##, knlDcSetClass##, 0
 DCHARENT  TYPE    , TEXT, , 4, knlDcMsgType##    , knlDcGet4Byte##, 0              , dcb_type
 DCHARENT  IOREG   , HEXV, , 4, knlDcMsgIoReg##   , dcgetioreg     , 0              , 0
 DCHARENT  INT     , DECV, , 1, knlDcMsgInt##     , dcgetint       , 0              , 0
 DCHARENT  NETADDR , HEXB, , 6, msgnetaddr        , dcgetnetaddr   , 0              , 0
 DCHARENT  TP      , TEXT, , 4, msgtp             , dcgettp        , dcsettp        , IC$TP
 DCHARENT  SHIELDED, TEXT, , 4, msgshielded       , dcgetyesno     , dcsetyesno     , IC$SHIELDED
 DCHARENT  EOPHIGH , TEXT, , 4, msgeophigh        , dcgetyesno     , 0              , IC$ACTHIGH1
 DCHARENT  LOWTHRES, TEXT, , 4, msglowthres       , dcgetyesno     , dcsetyesno     , IC$LOWTHRES
 DCHARENT  MEMSIZE , DECV, , 1, msgmemsize        , dcgetsize      , 0              , 0
 DCHARENT  FASTMEM , TEXT, , 4, msgfastmem        , dcgetyesno     , 0              , IC$FASTBFR
 DCHARENT  MEMWIDTH, DECV, , 1, msgmemwidth       , dcgetwidth     , 0	            , IC$16BITBFR
 DCHARENT  BUSWIDTH, DECV, , 1, msgbuswidth       , dcgetwidth     , 0              , IC$16BITBUS
 DCHARENT  PRM     , TEXT, , 4, msgprm            , dcgetyesno     , dcsetyesno     , IC$PRM
 DCHARENT  PKTIN   , DECV, , 4, xosnetMsgPktIn##  , dcgeterror     , dcseterror     , idb_cntpktin
 DCHARENT  BYTEIN  , DECV, , 4, knlDcMsgByteIn##  , dcgeterror     , dcseterror     , idb_cntbytein
 DCHARENT  PKTOUT  , DECV, , 4, xosnetMsgPktOut## , dcgeterror     , dcseterror     , idb_cntpktout
 DCHARENT  BYTEOUT , DECV, , 4, knlDcMsgByteOut## , dcgeterror     , dcseterror     , idb_cntbyteout
 DCHARENT  BCPKTIN , DECV, , 4, xosnetMsgBcPktIn##, dcgeterror     , dcseterror     , idb_cntbcpktin
 DCHARENT  NOSAP   , DECV, , 4, xosnetMsgNoSap##  , dcgeterror     , dcseterror     , idb_cntnosap
 DCHARENT  BADSIZE , DECV, , 4, xosnetMsgBadSize##, dcgeterror     , dcseterror     , idb_cntbadsize
 DCHARENT  NOSBFR  , DECV, , 4, xosnetMsgNoSBfr## , dcgeterror     , dcseterror     , idb_cntnosbfr
 DCHARENT  NOIBFR  , DECV, , 4, msgnoibfr         , dcgeterror     , dcseterror     , idb_cntnoibfr
 DCHARENT  IFRAME  , DECV, , 4, msgfrmerr         , dcgeterror     , dcseterror     , idb_cntfa
 DCHARENT  ICRC    , DECV, , 4, xosnetMsgCrcErr## , dcgeterror     , dcseterror     , idb_cntcrc
 DCHARENT  IOVRRN  , DECV, , 4, xosnetMsgOvrErr## , dcgeterror     , dcseterror     , idb_cntrover
 DCHARENT  OCSEN   , DECV, , 4, msgxcsenerr       , dcgeterror     , dcseterror     , idb_cntcsense
 DCHARENT  OUNDRN  , DECV, , 4, msgxunderr        , dcgeterror     , dcseterror     , idb_cntxunder
 DCHARENT  OHUNG   , DECV, , 4, xosnetMsgXHung##  , dcgeterror     , dcseterror     , idb_cntxhung
 DCHARENT  OHTBT   , DECV, , 4, msgxhtbterr       , dcgeterror     , dcseterror     , idb_cnthrtbt
 DCHARENT  OJABBER , DECV, , 4, msgojabber        , dcgeterror     , dcseterror     , idb_cntjabber
 DCHARENT  OOWC    , DECV, , 4, msgxowcerr        , dcgeterror     , dcseterror     , idb_cntowcol
 DCHARENT  OCOL    , DECV, , 4, msgxcolerr        , dcgeterror     , dcseterror     , idb_cntnumcol
 DCHARENT  OXCOL   , DECV, , 4, msgxxcolerr       , dcgeterror     , dcseterror     , idb_cntabort

	CODE

msgnetaddr: DCHARINFO  {Physical network address}
msgshielded:DCHARINFO  {Twisted-pair cable (if used) is shielded}
msgeophigh: DCHARINFO  {EOP signal is active high}
msgtp:      DCHARINFO  {Interface uses twisted-pair cable}
msglowthres:DCHARINFO  {Low squelch threshold}
msgmemsize: DCHARINFO  {Buffer memory size (KB)}
msgbuswidth:DCHARINFO  {Bus width (bits)}
msgmemwidth:DCHARINFO  {Buffer memory width (bits)}
msgfastmem: DCHARINFO  {Interface uses fast buffer memory}
msgprm:     DCHARINFO  {Promiscuous receive mode}
msgnoibfr:  DCHARINFO  {Discarded - no interface buffer available}
msgfrmerr:  DCHARINFO  {Number of input framing errors}
msgxcsenerr:DCHARINFO  {Number of output carrier lost errors}
msgxunderr: DCHARINFO  {Number of output underrun errors}
msgxhtbterr:DCHARINFO  {Number of output heartbeat errors}
msgojabber: DCHARINFO  {Number of output jabber errors}
msgxowcerr: DCHARINFO  {Number of output out of window collisions}
msgxcolerr: DCHARINFO  {Number of output collisions}
msgxxcolerr:DCHARINFO  {Number of excessive output collisions}
.PAGE
;Protocol translation table which converts from standard internal protocol
;  values to device protocol values

	.MOD	4
etypetbl:
	.LONG	-1		;	  =80000000 - Illegal
	.BYTE	81, 0BA, 0, 0	;PROT_SSL1=80000001 - SSL 1st Ethernet protocol
	.BYTE	81, 0BB, 0, 0	;PROT_SSL2=80000002 - SSL 2nd Ethernet protocol
	.BYTE	81, 0BC, 0, 0	;PROT_SSL3=80000003 - SSL 3rd Ethernet protocol
	.BYTE	81, 0BD, 0, 0	;PROT_SSL4=80000004 - SSL 4th Ethernet protocol
	.BYTE	81, 0BE, 0, 0	;PROT_SSL5=80000005 - SSL 5th Ethernet protocol
	.BYTE	81, 0BF, 0, 0	;PROT_SSL6=80000006 - SSL 6th Ethernet protocol
	.BYTE	81, 0C0, 0, 0	;PROT_SSL7=80000007 - SSL 7th Ethernet protocol
	.BYTE	81, 0C1, 0, 0	;PROT_SSL8=80000008 - SSL 8th Ethernet protocol
	.LONG	-1		;	  =80000009 - Illegal
	.LONG	-1		;	  =8000000A - Illegal
	.LONG	-1		;	  =8000000B - Illegal
	.LONG	-1		;	  =8000000C - Illegal
	.LONG	-1		;	  =8000000D - Illegal
	.LONG	-1		;	  =8000000E - Illegal
	.LONG	-1		;	  =8000000F - Illegal
	.BYTE	8 , 0  , 0, 0	;0PROT_IP =80000010 - Internet IP protocol
	.BYTE	8 , 6  , 0, 0	;PROT_ARP =80000011 - Internet ARP protocol
	.BYTE	80, 35 , 0, 0	;PROT_RARP=80000012 - Internet RARP protocol
ETYPEMAX=!{$-etypetbl}/4-1
.PAGE
	.SBTTL	Initialization routine

	INITSUB	initenfja

initenfja:
	MOVL	EBX, #'EFJA'		;Get network driver name
	MOVL	EDX, #enfjaaddunit	;Get offset of dispatch table
	CALL	xosnetNewDrive##	;Register this network driver
	JC	4$.S
	MOVL	ECX, #codetop
	CLRL	EDX
	CLRL	EAX
4$:	MOVL	EBX, #QSTS$DONE
	RET

	CODE
.PAGE
	.SBTTL	enfjaaddunit - Subroutine to add Ethernet interface unit

;Subroutine to add Ethernet interface unit
;	c(AL) = Unit number
;	CALL	enfjaaddunit
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal

$$$=!0
FRM eau_unit   , 4t	;Unit number
FRM eau_irout  , 4t	;Interrupt routine offset
FRM eau_ioreg  , 4t	;Base IO register number
FRM eau_int    , 4t	;Interrupt level
FRM eau_config , 4t	;Value for idb_config
FRM eau_bfrsize, 1t	;Buffer size code
FRM            , 3t
eau_SIZE=!$$$

	DATA

	.MOD	4
enfjaaublk:				;Parameter block for addunitchar
 DCHARBGN  2, knlDCharValCom##
 DCHARENT  UNIT    , DECV, , 1, knlDcMsgUnit## , 0, retclc         , 0
 DCHARENT  TYPE    , TEXT, , 4, knlDcMsgType## , 0, retclc         , 0
 DCHARENT  IOREG   , HEXV, , 4, knlDcMsgIoReg##, 0, enfjaauioreg   , 0
 DCHARENT  INT     , DECV, , 1, knlDcMsgInt##  , 0, enfjaauint     , 0
 DCHARENT  TP      , TEXT, , 4, msgtp          , 0, enfjaautp      , IC$TP
 DCHARENT  SHIELDED, DECV, , 1, msgshielded    , 0, enfjaauyesno   , IC$SHIELDED
 DCHARENT  EOPHIGH , TEXT, , 4, msgeophigh     , 0, enfjaauyesno   , IC$ACTHIGH1
 DCHARENT  LOWTHRES, TEXT, , 4, msglowthres    , 0, enfjaauyesno   , IC$LOWTHRES
 DCHARENT  MEMSIZE , DECV, , 1, msgmemsize     , 0, enfjaausize    , 0
 DCHARENT  FASTMEM , DECV, , 2, msgfastmem     , 0, enfjaauyesno   , IC$FASTBFR
 DCHARENT  MEMWIDTH, DECV, , 1, msgmemwidth    , 0, enfjaauwidth   , IC$16BITBFR
 DCHARENT  BUSWIDTH, DECV, , 1, msgbuswidth    , 0, enfjaauwidth   , IC$16BITBUS

	CODE

enfjaaddunit::
	ENTER	eau_SIZE, 0		;Allocate our stack frame
	MOVL	eau_unit.B[EBP], EAX	;Store unit number
	MOVB	eau_bfrsize.B[EBP], #02h ;Default buffer size is 32KB
	MOVL	eau_config.B[EBP], #IC$16BITBUS|IC$FASTBFR|IC$ACTHIGH1
					;Default bus size is 16 bits, default
					;  buffer size is 8 bits, default
					;  interface is AUI/thin-wire, default
	CLRL	EAX			;  SRAM speed is fast, default EOP sense
	DECL	EAX			;  is active high
	MOVL	eau_ioreg.B[EBP], EAX	;Store illegal values for port and
	MOVL	eau_int.B[EBP], EAX	;  interrupt level
	MOVL	EBX, #enfjaaublk	;Process the characteristics
	MOVB	AL, #0			;Fail if have a bad name
	CALL	knlAddUnitChar##
	JC	4$.S			;If error
	MOVL	EAX, eau_ioreg.B[EBP]	;Did we get all of the values we need?
	ORL	EAX, eau_int.B[EBP]
	JS	6$.S			;No - fail

;Now check to see if the physical interface exists

	MOVL	EDX, eau_ioreg.B[EBP]	;First do a hardware reset
	A2IOP	P_IDROM
	MOVB	AL, #0
	OUTB	[DX]
	MOVL	ECX, #10t		;Delay for a short time
	CALL	knlSDelay##
	A2IOP	P_CONFIG0-P_IDROM	;Read configuration register 0
	INB	[DX]
	CMPB	AL, #0B6h		;Is it right?
	JNE	2$.S			;No - its not there
	A2IOP	P_CONFIG1-P_CONFIG0	;Also read configuration register 1
	INB	[DX]
	ANDB	AL, #0EFh		;Remove don't care bit
	CMPB	AL, #0E0h		;Is it right
	JE	12$.S			;Yes
2$:	MOVL	EAX, #ER_PDNAV		;No - interface is not there
4$:	LEAVE
	CLRL	ECX
	MOVL	EBX, #QSTS$DONE
	TOFORK
	STC
ret002:	RET

;Here if a required characteristic is missing

6$:	MOVL	EAX, #ER_CHARM
	JMP	4$.S

;Here if error while have the exec memory resource

8$:	CALL	knlGiveXRes##
	JMP	4$.S

;Here if the interface exists

12$:	CALL	knlGetXRes##		;Get exec memory resource
	MOVB	CL, eau_int.B[EBP]	;Get interrupt number
	CALL	knlChkIRqAvl##		;Is it available?
	JC	8$			;No - fail
	MOVL	ECX, #ENFJAINTSZ	;Yes - get space for interrupt code
	CALL	knlGetXCode##
	JC	16$.S
	MOVL	eau_irout.B[EBP], EDI	;Remember where code is going
	MOVL	ESI, #enfjaint		;Copy prototype
	SHRL	ECX, #2
	MOVB	gdtable+GS_CODEALS+5, #DT_RWDATA+PL_0 ;Enable aliased code space
	PUSHL	#GS_CODEALS.B
	POPL	ES
	CLD
	RMOVSL	[EDI], ES:[ESI]
	MOVL	ECX, #idb_mSIZE+idb_enfjaSIZE ;Get size for our IDB
	MOVL	EDX, #enfjadctbl	;Get offset of device characteristics
	MOVL	EAX, eau_unit.B[EBP]	;Get unit number
	CALL	xosnetMakeIdb##		;Make our IDB
	JNC	18$.S			;OK
	CLRL	EBX			;Error
	MOVL	ES, EBX
	MOVB	gdtable+GS_CODEALS+5, BL ;Disable the aliased code space
16$:	JMP	8$

;Here with IDB allocated

18$:	MOVL	idb_typname.B[ESI], #'EFJA';Store type name
	MOVB	idb_iftype.B[ESI], #IFT_MULTI ;Store interface type
	MOVB	idb_hwhdrsz.B[ESI], #14t ;Store hardware header size
	MOVL	idb_hwpktsz.B[ESI], #1500t ;Store maximum packet size
	MOVB	idb_hlen.B[ESI], #6t	;Store hardware address size
	MOVB	idb_hwtype+1.B[ESI], #01h ;Store hardware type value for APR
	MOVB	idb_cntoffset.B[ESI], #en_count ;Store offset of count field
	MOVW	idb_hwtype.B[ESI], #0100h ;Store hardware address type
	MOVL	idb_iopprotocol.B[ESI], #xossnpNetIopSapAddr##
	MOVL	idb_makedcb.B[ESI], #xossnpMakeDcb##
	MOVL	idb_netclose1.B[ESI], #xossnpNetClose1##
	MOVL	idb_setpkt.B[ESI], #setpkt
	MOVL	idb_setecho.B[ESI], #setecho
	MOVL	idb_sendpkt.B[ESI], #sendpkt
	MOVL	idb_rcvpkt.B[ESI], #rcvpkt
	MOVL	idb_getetype.B[ESI], #getetype
	MOVL	idb_sethwa.B[ESI], #sethwa
	MOVL	idb_gethwa.B[ESI], #gethwa
	MOVL	idb_lnkctl.B[ESI], #knlIFnDev##
	MOVL	idb_icmpecho.B[ESI], #ret002
	MOVB	idb_state.B[ESI], #LNKS_ESTAB
	MOVL	idb_xmtavail.B[ESI], #1
	MOVL	idb_fdisp.B[ESI], #enfjafork ;Store offset of fork routine
	MOVL	EAX, enfjalidb		;Link into our list of IDBs
	MOVL	enfjalidb, ESI
	TESTL	EAX, EAX
	JE	20$.S
	MOVL	idb_nextd.B[EAX], ESI
	JMP	22$.S

20$:	MOVL	enfjafidb, ESI
	MOVL	EBX, #enfjaoas		;Set up our once-a-second routine the
	CALL	knlSetupOAS##		;  first time though here
22$:	MOVL	EDI, eau_irout.B[EBP]	;Fix up the interrupt code
	PUSHL	#GS_CODEALS
	POPL	ES
	MOVL	ES:{fix1-enfjaint}+1.B[EDI], ESI
	MOVL	EAX, EDI
	SUBL	EAX, #enfjaint
	SUBL	ES:{fix2-enfjaint}+1.B[EDI], EAX
	CLRL	EAX
	MOVL	ES, EAX
	MOVB	gdtable+GS_CODEALS+5, AL ;Disable the aliased code space
	MOVL	ECX, eau_config.B[EBP]	;Store configuration bits
	MOVL	idb_config.B[ESI], ECX
	MOVB	CL, eau_bfrsize.B[EBP]	;Store buffer size bits
	MOVB	idb_enfjabfrsize[ESI], CL
	MOVL	EDX, eau_ioreg.B[EBP]
	MOVL	idb_bioreg.B[ESI], EDX	;Store base IO register number
	MOVB	BL, #4t			;Read the board's Ethernet address from
	CALL	readeeprom		;  the EEPROM
	MOVL	idb_hwaddr+0[ESI], EBX
	MOVB	BL, #5t
	CALL	readeeprom
	MOVW	idb_hwaddr+2[ESI], BX
	MOVB	BL, #6t
	CALL	readeeprom
	MOVL	idb_hwaddr+4[ESI], EBX
	MOVL	EBX, #temp+3		;Build name for interrupt table
	CLRL	EAX
	MOVL	1.B[EBX], EAX
	MOVL	EAX, eau_unit.B[EBP]
	CALL	knlPutDecNmbr##
	MOVL	EDX, #temp
	MOVL	EBX, eau_irout.B[EBP]	;Get address of interrupt routine
	MOVB	CL, eau_int.B[EBP]	;Get interrupt number
	MOVB	idb_intlvl.B[ESI], CL	;Remember it
	MOVB	CH, #DT_TRAP+PL_0	;Set up our interrupt vector
	CALL	knlSetIRq##
	CALL	knlGiveXRes##		;Give up the exec memory resource
	CALL	enfjareset		;Now reset the interface
	MOVL	ECX, eau_int.B[EBP]	;Enable our interrupt
	CALL	knlEnableInt##
	CLRL	EAX			;Get our return value
	MOVL	ECX, #1
	MOVL	EBX, #QSTS$DONE
	LEAVE
	TOFORK
	RET
.PAGE
;Subroutine called by addunitchar for the "IOREG" characteristic

enfjaauioreg:
	CMPL	EAX, #0FFFh		;Valid port address?
	JA	badcv.S			;No - fail
	CMPL	EAX, #100h		;Maybe
	JB	badcv.S			;No - fail
	MOVL	eau_ioreg.B[EBP], EAX	;Yes - store it
	CLC
	RET

;Subroutine called by addunitchar for the "INT" characteristic

enfjaauint:
	CMPL	EAX, #15t.B		;Valid interrupt level?
	JA	badcv.S			;No - fail
	CMPB	AL, #2			;Maybe
	JB	badcv.S			;No - fail
	JNE	2$.S
	MOVB	AL, #9
2$:	MOVL	eau_int.B[EBP], EAX	;Yes - store it
	RET

;Here if bad characteristic value

badcv:	MOVL	EAX, #ER_CHARV		;Get error code
	STC				;Fail
	RET

;Subroutine called by addunitchar for the "TP" parameter

enfjaautp:
	ANDB	eau_config.B[EBP], #~{IC$TP|IC$AUTOIFS}
	CMPL	EAX, #'AUTO'
	JE	6$.S
	CMPL	EAX, #'A'
	JNE	enfjaauyesno.S
6$:	ORB	eau_config.B[EBP], #IC$AUTOIFS
	RET

;Subroutine called by addunitchar for parameter parameter which set or clear
;  bits in idb_config

enfjaauyesno:
	CALL	knlGetYesNo##
	JC	8$.S
	JNE	10$.S
	ORL	eau_config.B[EBP], EBX	;Yes
8$:	RET

10$:	NOTL	EBX
	ANDL	eau_config.B[EBP], EBX	;No
	RET

;Subroutine called by addunitchar for the BFRSIZE parameter

enfjaausize:
	CLRL	EDX			;Get code for 8K
	CMPL	EAX, #8t.B		;Is it 8K?
	JE	14$.S			;Yes
	INCL	EDX			;No - get code for 16K
	CMPL	EAX, #16t.B		;Is it 16K?
	JE	14$.S			;Yes
	INCL	EDX			;No - get code for 32K
	CMPL	EAX, #32t.B		;Is it 32K?
	JE	14$.S			;Yes
	INCL	EDX			;No - get code for 64K
	CMPL	EAX, #64t.B		;Is it 64K?
	JNE	badcv.S			;No - fail
14$:	MOVB	eau_bfrsize.B[EBP], DL	;Store code
	RET

;Subroutine called by addunitchar for the BUSWIDTH and BFRWIDTH parameters

enfjaauwidth:
	ORL	eau_config.B[EBP], EBX	;Assume 16 bits
	CMPL	EAX, #16t.B		;Right?
	JE	8$.S			;Yes
	CMPL	EAX, #8t.B		;No - is it 8 bits?
	JNE	badcv.S			;No - fail
	NOTL	EBX			;Yes
	ANDL	eau_config.B[EBP], EBX
	RET
.PAGE
;Here to get the value of the IOREG characteristic

dcgetioreg:
	MOVL	ESI, dcb_netidb.B[EDI]
	MOVL	EAX, idb_bioreg.B[ESI]
	CLRL	EDX
	RET

;Here to get the value of the INT characteristic

dcgetint:
	MOVL	ESI, dcb_netidb.B[EDI]
	MOVZBL	EAX, idb_intlvl.B[ESI]
	CLRL	EDX
	RET

;Here to get the value of the NETADDR characteristic

dcgetnetaddr:
	MOVL	ESI, dcb_netidb.B[EDI]
	MOVL	EAX, idb_hwaddr+0[ESI]
	MOVL	EDX, idb_hwaddr+4[ESI]
	RET
.PAGE
;Here to get the value of the BFRSIZE characteristic

dcgetsize:
	MOVL	ESI, dcb_netidb.B[EDI]
	MOVB	AL, idb_enfjabfrsize[ESI]
	ANDL	EAX, #03h.B
	MOVL	EAX, bfrsize[EAX]
	RET

	DATA

bfrsize:.BYTE	8t
	.BYTE	16t
	.BYTE	32t
	.BYTE	64t

	CODE

;Here to get the value of the BUSWIDTH or BFRWIDTH characteristic

dcgetwidth:
	MOVL	ESI, dcb_netidb.B[EDI]
	MOVL	EAX, #8t		;Assume 8 bits
	TESTB	idb_config.B[ESI], BL	;Right
	JE	4$.S			;Yes
	MOVB	AL, #16t		;No - its 16 bits
	RET

;Here to get value of the TP characteristic

dcgettp:
	MOVL	ESI, dcb_netidb.B[EDI]
	TESTB	idb_config.B[ESI], #IC$AUTOIFS
	JE	2$.S
	MOVL	EAX, #'AUTO'
	RET

;Here to get value of characteristic with a value of YES or NO

dcgetyesno:
	MOVL	ESI, dcb_netidb.B[EDI]
2$:	MOVL	EAX, #'NO'		;Assume NO
	TESTL	idb_config.B[ESI], EBX	;Right?
	JE	4$.S			;Yes
	MOVL	EAX, #'YES'		;No
4$:	RET

;Here to set value of the TP characteristic

dcsettp:
	MOVL	ESI, dcb_netidb.B[EDI]
	CMPL	EAX, #'AUTO'
	JE	6$.S
	CMPL	EAX, #'A'
	JNE	8$.S
6$:	ANDB	idb_config.B[ESI], #~IC$TP
	ORB	idb_config.B[ESI], #IC$AUTOIFS
	RET

;Here if value was not AUTO

8$:	ANDB	idb_config.B[ESI], #~IC$AUTOIFS
					;Fall into dcsetyesno

;Here to set value of characteristic with a value of YES or NO

dcsetyesno:
	CALL	knlGetYesNo##
	JC	10$.S
	MOVL	ESI, dcb_netidb.B[EDI]
	JNE	12$.S
	ORL	idb_config.B[ESI], EBX	;Yes
10$:	RET

12$:	NOTL	EBX
	ANDL	idb_config.B[ESI], EBX	;No
	RET

;Here to get the value of an error counter

dcgeterror:
	ADDL	EBX, dcb_netidb.B[EDI]	;Point to the count value
	MOVL	EAX, [EBX]		;Get it
	CLRL	EDX			;Only 32 bits
	RET

;Here to set the value of an error counter

dcseterror:
	ADDL	EBX, dcb_netidb.B[EDI]	;Point to the count value
	MOVL	[EBX], EAX		;Set it
	RET				;Thats all
.PAGE
;Here to set the value of the PRM characteristic

dcsetprm:
	MOVL	ESI, dcb_netidb.B[EDI]
	CALL	knlGetYesNo##
	JC	10$.S
	JE	2$.S			;If he said YES
	ANDB	idb_config.B[ESI], #{~IC$PRM}&0FFh ;He said NO
	JMP	4$.S

2$:	ORB	idb_config.B[ESI], #IC$PRM
4$:

;NEED CODE HERE TO CHANGE BIT IN INTERFACE (MAYBE)

10$:	RET
.PAGE
	.SBTTL	getetype - Subroutine to get Ethertype value for device

;Subroutine to get Ethertype value for device
;	c{EAX} = Standard Ethertype value
;	CALL	getetype
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EAX} = Device Ethertype value

getetype:
	CMPL	EAX, #-1.B		;Is this the default Ethertype?
	JE	6$.S			;Yes - pass it through
	BTZL	EAX, #31t		;No - is this an internal Ethertype ID?
	JNC	2$.S			;No
	CMPL	EAX, #ETYPEMAX.B	;Yes - legal Ethertype value?
	JA	4$.S			;No - fail
	MOVL	EAX, CS:etypetbl[EAX*4]	;Yes - get corresponding Ethertype value
	CMPL	EAX, #-1.B		;Valid value?
	JE	4$.S			;No - fail
2$:	XCHGB	AL, AH			;Must be above 1500 so as not to
	CMPL	EAX, #1500t		;  conflict with 802.3 format packets
	JBE	4$.S
	XCHGB	AL, AH
	TESTL	EAX, #0FFFF0000h	;Must be a 16 bit value
	JE	6$.S			;OK
4$:	MOVL	EAX, #ER_NILPC		;If bad protocol value
	STC
6$:	RET
.PAGE
	.SBTTL	sethwa - Subroutine to store remote hardware address in packet

;Subroutine to store remote hardware address in packet
;	c{EDX,EAX} = Remote hardware address
;	c{EBX}     = Offset of packet buffer
;	CALL	sethwa

sethwa:	MOVL	[EBX], EAX
	MOVW	4.B[EBX], DX
	RET

	.SBTTL	gethwa - Subroutine to get source hardware address from packet

;Subroutine to get source hardware address from packet
;	c{EBX} = Offset of packet buffer
;	CALL	sethwa
;	c{EDX,EAX} = Source hardware address

gethwa:	MOVL	EAX, 6.B[EBX]
	MOVZWL	EDX, 10t.B[EBX]
	RET
.PAGE
	.SBTTL	enfjareset - Subroutine to reset Ethernet interface

;Subroutine to reset Ethernet interface
;	c{ESI} = Offset of IDB
;	CALL	enfjareset

enfjareset:
	MOVL	EDX, idb_bioreg.B[ESI]	;First do a hardware reset
	A2IOP	P_IDROM
	MOVB	AL, #0
	OUTB	[DX]
	MOVL	ECX, #10t		;Delay for a short time
	CALL	knlSDelay##
	A2IOP	P_CONFIG0-P_IDROM
	MOVB	AL, #CFG0$8BITBUS|CFG0$8BITBFR
	TESTB	idb_config.B[ESI], #IC$FASTBFR
	JE	2$.S
	ORB	AL, #CFG0$SRAMCT
2$:	TESTB	idb_config.B[ESI], #IC$16BITBUS ;16 bit bus?
	JE	4$.S			;No
	ANDB	AL, #~CFG0$8BITBUS	;Yes
	TESTB	idb_config.B[ESI], #IC$16BITBFR ;16 bit buffer?
	JE	4$.S			;No
	ANDB	AL, #~CFG0$8BITBFR	;Yes
4$:	ORB	AL, idb_enfjabfrsize[ESI]
	MOVB	idb_enfjacfg0[ESI], AL	;Remember value for later
	ORB	AL, #CFG0$DLCDIS	;Disable transmitter and receiver
	OUTB	[DX]			;Set coniguration register 0
	A2IOP	P_CONFIG1-P_CONFIG0
	MOVB	AL, #CFG1$POWER		;Assume EOP pin is active low
	BTL	idb_config.B[ESI], #IC%ACTHIGH1 ;Right?
	JNC	6$.S			;Yes
	ORB	AL, #CFG1$EOPHIGH	;No - its active high
6$:	MOVB	idb_enfjacfg1[ESI], AL
	OUTB	[DX]			;Select register bank 0
	A2IOP	P_RCVMODE-P_CONFIG1	;Set receive mode register: discard bad
	MOVB	AL, #02h		;  bad packets, use full address,
	OUTB	[DX]			;  discard short packets, disable remote
					;  reset, receive broadcast + mutlicast
					;  using hash table
	A2IOP	P_XMITMODE-P_RCVMODE	;Set transmit mode register: not
	MOVB	AL, #XMR$LPBKDIS	;  loopback, defer to network traffic
	OUTB	[DX]
	PUSHL	ESI
	A2IOP	P_0NODEID-P_XMITMODE
	ADDL	ESI, #idb_hwaddr
	MOVL	ECX, #6t
	CLD
8$:	LODSB	[ESI]			;Load the 6 byte Ethernet hardware
	OUTB	[DX]			;  address
	INCL	EDX
	LOOP	ECX, 8$
	POPL	ESI
	A2IOP	P_CONFIG1-{P_0NODEID+6}
	MOVB	AL, idb_enfjacfg1[ESI]	;Select register bank 1
	ORB	AL, #04h
	OUTB	[DX]
	A2IOP	P_1HASHTBL-P_CONFIG1
	MOVL	ECX, #8t		;Clear the multi-cast hash table
	MOVB	AL, #0
10$:	OUTB	[DX]
	INCL	EDX
	LOOP	ECX, 10$
	PUSHL	ESI
	ADDL	ESI, #idb_hwaddr	;Calculate multi-cast hash index for
	CALL	calhash			;  our node address
	SHRL	EBX, #3			;Get register number
	ANDB 	AH, #7			;Get bit number
	MOVB	CL, AH
	MOVB	AH, #1			;Get bit in register
	SHLB	AH, CL
	MOVL	ESI, [ESP]
	ADDL	EBX, idb_bioreg.B[ESI]
	LEAL	EDX, P_1HASHTBL.B[EBX]
	INB	[DX]
	ORB	AL, AH
	OUTB	[DX]
	POPL	ESI
	MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_CONFIG1
	MOVB	AL, idb_enfjacfg1[ESI]	;Select register bank 2
	ORB	AL, #08h
	OUTB	[DX]
	A2IOP	P_2FSR-P_CONFIG1	;Set the filter self receive register:
	MOVB	AL, #FSR$FLTRSLF	;  disable self receive, disable all
	OUTB	[DX]			;  remote interrupts
	A2IOP	P_2COLCTL-P_2FSR
	MOVB	AL, #07h		;Select mode: discard packet after 16
	OUTB	[DX]			;  collisions
	A2IOP	P_2TCVRMODE-P_2COLCTL
	MOVL	ECX, idb_config.B[ESI]
	MOVB	AL, #0
	TESTB	CL, #IC$SHIELDED	;Want 150 ohm termination?
	JE	12$.S			;No
	ORB	AL, #TMR$TERMSEL	;Yes
12$:	TESTB	CL, #IC$AUTOIFS		;Want auto port selection?
	JNE	14$.S			;Yes
	ORB	AL, #TMR$MANSEL		;No - indicate manual selection
	TESTB	CL, #IC$TP		;What to use the TP transceiver?
	JNE	14$.S			;Yes
	ORB	AL, #TMR$AUISEL		;No	
14$:	BTL	ECX, #IC%LOWTHRES	;Want low squelch threshold?
	JNC	16$.S			;No
	ORB	AL, #TMR$LSTHRES	;Yes
16$:	OUTB	[DX]
	A2IOP	P_CONFIG0-P_2TCVRMODE
	MOVB	AL, idb_enfjacfg0[ESI]
	OUTB	[DX]
	A2IOP	P_RCVIE-P_CONFIG0
	MOVB	AL, #RIE$PKTAVL|RIE$SHTERR|RIE$ALNERR|RIE$CRCERR|RIE$ROVRFL
	OUTB	[DX]			;Enable interrupts which we want
	A2IOP	P_XMITIE-P_RCVIE
	MOVB	AL, #XIE$XDONE|XIE$JABBER|XIE$16COL
	OUTB	[DX]
	RET				;Finished
.PAGE
	.SBTTL	setecho - Subroutine to set up echo packet header

;Subroutine to set up hardware level packet header for echoed packet - the
;  packet is set up to be an echo for the current receive packet
;	c{EBX} = Offset of packet buffer
;	CALL	setecho
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{ECX} = Offset of start of software part of received packet
;	  c{EDX} = Offset of start of software part of echo packet

setecho:MOVL	EAX, en_srchwadr+0.B[EBX] ;Copy source to destination
	MOVL	en_dsthwadr+0.B[EBX], EAX
	MOVW	DX, en_srchwadr+4.B[EBX]
	MOVW	en_dsthwadr+4.B[EBX], DX
	JMP	4$.S

	.SBTTL	setpkt - Subroutine to set up packet header

;Subroutine to set up hardware level packet header
;	c{EBX} = Offset of packet buffer
;	CALL	setpkt
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EDX} = Offset of start of software part of packet

setpkt:	MOVW	en_ethertype.B[EBX], AX	;Store Ethertype value
4$:	MOVL	EAX, idb_hwaddr+0[ESI]	  ;Store our address in the packet
	MOVL	en_srchwadr+0.B[EBX], EAX ;  as the source address
	MOVL	EAX, idb_hwaddr+4[ESI]
	MOVW	en_srchwadr+4.B[EBX], AX
	MOVB	npb_lpofs.B[EBX], #en_data ;Store offset of first 2 levels
	MOVB	npb_npofs.B[EBX], #en_data
	MOVL	npb_count.B[EBX], #en_data ;Store initial total size
	LEAL	EDX, en_data.B[EBX]	;Get pointer to next header
	CLC
	RET
.PAGE
	.SBTTL	sendpkt - Subroutine to send a packet over the network

;Subroutine to send a packet over the network - must be called from fork level,
;  does not wait for completion
;	c{EBX} = Offset of packet to send
;	c{ESI} = Offset of IDB
;	CALL	sendpkt
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;  EBX is preserved

sendpkt:CLD
	PUSHL	EDI
	MOVL	ECX, npb_count.B[EBX]	;Get amount to output
	CMPL	ECX, #1514t		;Is it too big?
	JBE	2$.S			;No
	MOVL	ECX, #1514t		;Yes - just send what we can
2$:	CMPL	ECX, #60t.B		;Is it too short?
	JAE	4$.S			;No - go on
	LEAL	EDI, [EBX+ECX]		;Yes - pad it with zeros
	PUSHL	DS
	POPL	ES
	SUBL	ECX, #60t.B
	NEGL	ECX
	CLRL	EAX
	RSTOSB	[EDI]
	MOVL	ECX, #60t
4$:	MOVL	EDX, idb_bioreg.B[ESI]	;Point to the data port
	A2IOP	P_2DATA
	PUSHL	ESI
	MOVL	EAX, ECX
	TESTB	idb_config.B[ESI], #IC$16BITBUS ;Do we have a 16 bit bus?
	MOVL	ESI, EBX
	JE	10$.S			;No
	OUTW	[DX]			;Yes - output count as a word
	MOVZBL	EAX, npb_sizex.B[ESI]	;Get size index for buffer
	MOVL	EAX, knlXmbSize##[EAX*4]
	SUBL	EAX, #npb_mSIZE.B
	MOVL	EDI, EBX
	MOVL	EBX, ECX		;Save the count
6$:	CMPL	ECX, EAX		;Is this the last chunk?
	JBE	8$.S			;Yes
	SUBL	ECX, EAX		;No - calculate amount left after this
	PUSHL	ECX
	MOVL	ECX, EAX
	SHRL	ECX, #1			;Get number of words in this chunk
	ROUTSW	[ESI]			;Copy chunk to the interface
	MOVL	EDI, npc_link.B[EDI]	;Point to next chunk
	MOVL	ESI, EDI
	MOVZBL	EAX, npc_sizex.B[ESI]	;Get size of buffer
	MOVL	EAX, knlXmbSize##[EAX*4]
	SUBL	EAX, #npc_mSIZE.B	;Get size
	POPL	ECX			;Restore amount left to copy
	JMP	6$.S			;Continue

;Here with last chunk of packet to output

8$:	SHRL	ECX, #1			;Get number of words
	ROUTSW	[ESI]			;Copy data to the interface
	JMP	16$.S			;Continue

;Here if have an 8 bit bus interface to the card

10$:	OUTB	[DX]			;Output count as 2 bytes
	MOVB	AL, AH
	OUTB	[DX]
	MOVZBL	EAX, npb_sizex.B[ESI]	;Get size index for buffer
	MOVL	EAX, knlXmbSize##[EAX*4]
	SUBL	EAX, #npb_mSIZE.B
	MOVL	EDI, EBX
12$:	CMPL	ECX, EAX		;Is this the last chunk?
	JBE	14$.S			;Yes
	SUBL	ECX, EAX		;No - calculate amount left after this
	PUSHL	ECX
	MOVL	ECX, EAX
	ROUTSB	[ESI]			;Copy chunk to the interface
	MOVL	EDI, npc_link.B[EDI]	;Point to next chunk
	MOVL	ESI, EDI
	MOVZBL	EAX, npc_sizex.B[ESI]	;Get size of buffer
	MOVL	EAX, knlXmbSize##[EAX*4]
	SUBL	EAX, #npc_mSIZE.B	;Get size
	POPL	ECX			;Restore amount left to copy
	JMP	12$.S			;Continue

;Here with last chunk of packet to output

14$:	ROUTSB	[ESI]			;Copy data to the interface
16$:	POPL	ESI			;Restore registers
	POPL	EDI
	A2IOP	P_2XMITCTL-P_2DATA	;Point to the output control register
	MOVB	AL, #81h		;Send 1 packet
	OUTB	[DX]
	MOVB	idb_outtimer.B[ESI], #2	;Start 2 second time-out
retclc:	CLC				;Clear C
	RET				;And return
.PAGE
	.SBTTL	Network interface interrupt routines

;The following is a prototype for the interrupt service routine entry code
;  - this code is copied for each unit by enfjaaddunit

enfjaint:
	PUSHAL				;Save registers
	PUSHL	DS
	PUSHL	ES
	PUSHL	FS
	PUSHL	GS
	PUSHL	#GS_DATA.B		;Make our data addressable
	POPL	DS
fix1:	MOVL	EDI, #0			;Get offset of IDB for this interface
fix2:	JMP	enfjaintcom		;Go to the common interrupt routine

ENFJAINTSZ=!$-enfjaint

;Common interrupt routine

enfjaintcom:

;MAYBE CHECK FOR ERRORS HERE???

	CALL	knlReqFork##		;Request fork
	MOVB	AL, #INT_EOI
	CLI
	CMPB	idb_intlvl.B[EDI], #7	;High interrupt?
	JBE	4$.S			;No
	OUTB	P_INC2P0		;Yes - release 2nd interrupt controller
4$:	OUTB	P_INC1P0		;Release first interrupt controller
	JMP	knlDismissInt2##	;Check for scheduling and dismiss
.PAGE
	.SBTTL	enfjafork - Fork routine

;Get here at fork level after interrupt from the Ethernet interface card

enfjafork:
	MOVL	ESI, EDI		;Get offset of the IDB in right register
	INCL	idb_cntint.B[ESI]	;Count the interrupt
fkloop:	MOVL	EDX, idb_bioreg.B[ESI]	;Get receive interrupt bits
	A2IOP	P_RCVSTS
	INB	[DX]
	TESTB	AL, #RSTS$PKTAVL	;Have a receive packet now?
	JE	rcvchkerr		;No - go check for receive errors
rcvchk:	MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_RCVMODE
	INB	[DX]
	TESTB	AL, #RMR$BUFEMP		;Anything in the receive buffer?
	JE	rcvrdy.S		;Yes
	A2IOP	P_RCVSTS-P_RCVMODE	;No - clear the receive ready interrupt
	MOVB	AL, #RSTS$PKTAVL	;  request
	OUTB	[DX]
	IOPAUSE
	A2IOP	P_RCVMODE-P_RCVSTS	;Check for one sneeking in!
	INB	[DX]
	TESTB	AL, #RMR$BUFEMP
	JE	rcvchk.S		;Opps - go receive it
	JMP	fkloop.S		;Continue

;Here with a packet ready in the receive buffer

rcvrdy:	A2IOP	P_2DATA-P_RCVMODE	;Point to data port
2$:	TESTB	idb_config.B[ESI], #IC$16BITBUS ;Do we have a 16 bit bus?
	JE	4$.S			;No
	INW	[DX]			;Yes - get (and discard) receive status
	CLRL	EAX
	INW	[DX]			;Get receive byte count
	CMPL	EAX, #60t.B		;Is the packet big enough?
	JL	8$.S			;No - ignore the packet!
	INCL	idb_cntpktin.B[ESI]	;Count the receive packet
	ADDL	idb_cntbytein.B[ESI], EAX
	MOVL	ECX, EAX
	CLRL	EDI
	CALL	xosnetGetBufr##		;Get a network buffer
	JC	10$.S			;Can't get a buffer - junk the packet!
	PUSHL	ECX			;Save packet length
	MOVL	EDX, idb_bioreg.B[ESI]	;Point to the data port
	A2IOP	P_2DATA
	MOVL	EDI, EBX
	PUSHL	DS
	POPL	ES
	INCL	ECX			;Get number of words to read (round
	SHRL	ECX, #1			;  up)
	CLD
	RINSW	[EDI]			;Copy data to our buffer
	JMP	6$.S			;Continue

;Here if have an 8 bit data bus

4$:	INB	[DX]			;Get (and discard) receive status
	INB	[DX]			;Get (and discard) the unused byte
	CLRL	EAX
	INB	[DX]			;Get receive byte count
	MOVB	AH, AL
	INB	[DX]
	XCHGB	AL, AH
	CMPL	EAX, #60t.B		;Is the packet big enough?
	JL	8$.S			;No - ignore the packet!
	INCL	idb_cntpktin.B[ESI]	;Yes - count the receive packet
	ADDL	idb_cntbytein.B[ESI], EAX
	MOVL	ECX, EAX
	CLRL	EDI
	CALL	xosnetGetBufr##		;Get a network buffer
	JC	10$.S			;Can't get a buffer - junk the packet!
	PUSHL	ECX			;Save packet length
	MOVL	EDX, idb_bioreg.B[ESI]	;Point to the data port
	A2IOP	P_2DATA
	MOVL	EDI, EBX
	PUSHL	DS
	POPL	ES
	CLD
	RINSB	[EDI]			;Copy data to our buffer
6$:	CMPL	[EBX], #-1.B		;Is this a broadcast packet?
	JNE	7$.S			;No
	CMPW	4.B[EBX], #-1.B		;Maybe
	JNE	7$.S			;No
	INCL	idb_cntbcpktin.B[ESI]	;Yes - count it
7$:	POPL	ECX			;Restore amount transfered
	CALL	rcvpkt			;Process the received packet
	JMP	rcvchk			;See if have any more packets to get

;Here if packet is too small (should not happen since interface should have
;  already discarded small packets!)

8$:	INCL	idb_cntfa[ESI]		;Count the error
	JMP	12$.S			;Continue

;Here if can't get a buffer for the input packet

10$:	INCL	idb_cntnosbfr.B[ESI]	;Count the error
12$:	MOVL	EDX, idb_bioreg.B[ESI]	;Point to the data port
	A2IOP	P_2DATA
	CMPL	ECX, #8t.B		;Can we use the skip bit?
	JBE	18$.S			;No
	TESTB	idb_config.B[ESI], #IC$16BITBUS ;Yes - do we have a 16 bit bus?
	JE	14$.S			;No
	INW	[DX]			;Yes - read twice to keep the fifo happy
	INW	[DX]
	JMP	16$.S

14$:	INB	[DX]
	INB	[DX]
	INB	[DX]
	INB	[DX]
16$:	MOVL	EDX, idb_bioreg.B[ESI]	;Yes
	A2IOP	P_2FSR
	MOVB	AL, #FSR$SKIPPKT	;Skip the packet
	OUTB	[DX]
	JMP	rcvchk			;Continue

;Here if packet is too short to skip using the FSR$SKIPPKT bit - this is very
;  unlikely but could happen if receiving all packets and accepting short
;  packets!

18$:	TESTB	idb_config.B[ESI], #IC$16BITBUS ;Do we have a 16 bit bus?
	JE	24$.S			;No
	INCL	ECX			;Yes - get number of words to discard
	SHRL	ECX, #1
	JE	30$.S
20$:	INW	[DX]
	LOOP	ECX, 20$
	JMP	30$.S

24$:	JREGZ	ECX, 30$
26$:	INB	[DX]
	LOOP	ECX, 26$
30$:	JMP	rcvchk
.PAGE
;Here to check for receive errors

rcvchkerr:				;Have any receive errors?
	TESTB	AL, #RSTS$SHTERR|RSTS$ALNERR|RSTS$CRCERR|RSTS$ROVRFL
	JE	chkxmit.S		;No - go check for xmit conditions
	ANDB	AL, #RSTS$SHTERR|RSTS$ALNERR|RSTS$CRCERR|RSTS$ROVRFL
	OUTB	[DX]			;Yes - clear the error bits
	TESTB	AL, #RSTS$SHTERR
	JE	4$.S
	INCL	idb_cntrunt.B[ESI]
4$:	TESTB	AL, #RSTS$ALNERR
	JE	6$.S
	INCL	idb_cntfa[ESI]
6$:	TESTB	AL, #RSTS$CRCERR
	JE	8$.S
	INCL	idb_cntcrc[ESI]
8$:	TESTB	AL, #RSTS$ROVRFL
	JE	10$.S
	INCL	idb_cntrover.B[ESI]
10$:	JMP	fkloop
.PAGE
;Here with all receive conditions handled - now check for xmit conditions

chkxmit:MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_XMITSTS		;Get xmit status bits
	INB	[DX]
	TESTB	AL, #XSTS$16COL|XSTS$JABBER ;Error?
	JE	10$.S			;No - go on
	ANDB	AL, #XSTS$16COL|XSTS$JABBER ;Yes
	OUTB	[DX]

	TESTB	AL, #XSTS$16COL
	JE	4$.S
	INCL	idb_cntabort[EDI]
4$:	TESTB	AL, #XSTS$JABBER
	JE	chkxmit.S
	INCL	idb_cntjabber[EDI]
	JMP	chkxmit.S

;Here if no xmit errors

10$:	TESTB	AL, #XSTS$XDONE		;Is output done?
	JE	12$.S
	MOVB	AL, #XSTS$XDONE		;Clear the interrupt request
	OUTB	[DX]
	CLRL	EAX			;Get collision count
	A2IOP	P_XMITMODE-P_XMITSTS
	INB	[DX]
	SHRL	EAX, #4
	ADDL	idb_cntnumcol[ESI], EAX	;Add in to our total collision count
	CLRL	EAX			;Indicate no errors
	CALL	xosnetFinXmit##		;Do output done processing
	JMP	fkloop			;Continue

;Here with all interrupt conditions serviced

12$:	RET
.PAGE
	.SBTTL	rcvpkt - Subroutine to process received packet

;Subroutine to process received packet
;	c{EBX} = Offset of packet
;	c{ECX} = Size of packet
;	c{ESI} = Offset of IDB
;	CALL	rcvpkt

rcvpkt:	MOVL	npb_count.B[EBX], ECX	;Store total count in packet
	MOVB	npb_lpofs.B[EBX], #en_data ;Store header offsets
	MOVB	npb_npofs.B[EBX], #en_data
	SUBL	ECX, #en_data.B		;Adjust the count
	LEAL	EDX, en_data.B[EBX]	;Point to start of data
	MOVZWL	EAX, en_ethertype.B[EBX] ;Get Ethertype value from the packet
	JMP	xossnpRcv##		;Process the received packet
.PAGE
	.SBTTL	enfjaoas - Once-a-second routine

enfjaoas:
	MOVL	ESI, enfjafidb		;Get offset of first IDB
4$:	TESTL	ESI, ESI		;More to check?
	JE	10$.S			;No
	CMPB	idb_outtimer.B[ESI], #0	;Yes - need to time output?
	JE	6$.S			;No
	DECB	idb_outtimer.B[ESI]	;Yes - has it timed out?
	JNE	6$.S			;No
	INCL	idb_cntxhung[ESI]	;Yes - count it
	TOFORK				;Raise to fork level
	MOVL	EAX, #ER_DEVER		;Report this as a device error
	STC
	CALL	xosnetFinXmit##		;Do output done processing
	FROMFORK			;Back to main program level
6$:	MOVL	ESI, idb_nextd.B[ESI]	;Advance to next IDB
	JMP	4$.S			;Continue

10$:	RET
.PAGE
	.SBTTL	calhash - Subroutine to calculate bit in the mult-cast hash table

;Subroutine to calculate bit in the multi-cast hash table
;	c{ESI} = Offset of node address string
;	CALL	calhash
;	c(AH) = {EBX} = Hash index (0 - 63t)

POLYL=!1DB6h
POLYH=!04C1h

calhash:PUSHL	EBP
	MOVL	EAX, #0FFFFh		;Initialize CRC value
	MOVL	EDX, EAX
	MOVB	CH, #3t	  		;Do 3 words of address
2$:	MOVB	CL, #16t  		;Set innerloop count
	MOVW	BP, [ESI]  		;Get a word of address
	ADDL	ESI, #2.B		;Bump pointer
4$:	MOVL	EBX, EDX		;Get crch
	ROLW	BX, #1			;Bit31 to LSB
	XORL	EBX, EBP		;Combine with incoming
	SALW	AX, #1			;Shift left entire crc
	RCLW	DX, #1
	ANDL	EBX, #1.B		;Get control bit
	JE	6$.S			;Zero = no xor
	XORL	EAX, #POLYL		;XOR CRC with polynomial
	XORL	EDX, #POLYH
6$:	ORL	EAX, EBX		;Or in control bit
	RORW	BP, #1			;Rotate incoming word right 1
	DECB	CL			;Decrement bit counter
	JNE	4$.S			;Loop a word
	DECB	CH			;Decrement word counter
	JNE	2$.S			;Loop 3 words

;When get here have CRC in AX-DX, now reverse bit order

	MOVL	ECX, #10t
8$:	SALB	AL, #1 			;Shift out of al left
	RCRB	AH, #1 			;Right thru carry into ah
	LOOP	ECX, 8$			;Do 9 times to get last bit thru carry
	MOVZBL	EBX, AH			;Get the hash index
	POPL	EBP
	RET
.PAGE
	.SBTTL	readeeprom - Subroutine to read a word from the EEPROM

;Subroutine to read a word from the EEPROM
;	c(BL) = Index of word to read
;	CALL	readeeprom
;	c{EBX} = Value read

readeeprom:
	CLRL	EAX			;Clear control and data signals
	MOVL	EDX, idb_bioreg.B[ESI]	;Point to control register
	ADDL	EDX, #P_EEPCTL.B
	OUTB	[DX]
	A2IOP	P_EEPDATA-P_EEPCTL	;Point to Data register
	OUTB	[DX]
	MOVB	AL, #20h		;Activate chip select
	A2IOP	P_EEPCTL-P_EEPDATA
	OUTB	[DX]
	MOVB	AL, #80h		;Output data start bit
	A2IOP	P_EEPDATA-P_EEPCTL
	OUTB	[DX]
	MOVB	AL, #60h		;Clock in the start bit
	A2IOP	P_EEPCTL-P_EEPDATA
	OUTB	[DX]
	MOVB	AL, BL			;Output read command with register index
	ORB	AL, #80h
	CALL	writebyte
	CALL	readbyte		;Read first byte of word
	CLRL	EBX
	MOVB	BH, AL
	CALL	readbyte		;Read second byte of word
	MOVB	BL, AL
	CLRL	EAX			;Clear the control signals
	MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_EEPCTL
	OUTB	[DX]
	MOVB	AL, #40h
	OUTB	[DX]
	CLRL	EAX
	OUTB	[DX]
	RET

;Subroutine to write a byte to the serial EEPROM
;	c(AL) = Byte to write
;	CALL	writebyte

writebyte:
	MOVL	ECX, #8t
	MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_EEPDATA
	MOVB	AH, AL
4$:	MOVB	AL, AH
	OUTB	[DX]
	A2IOP	P_EEPCTL-P_EEPDATA
	MOVB	AL, #20h
	OUTB	[DX]
	MOVB	AL, #60h
	OUTB	[DX]
	A2IOP	P_EEPDATA-P_EEPCTL
	SHLB	AH, #1
	LOOP	ECX, 4$
	RET

;Subroutine to read a byte from the serial EEPROM
;	CALL	readbyte
;	c(AL) = Byte read

readbyte:
	MOVL	ECX, #8t
	MOVL	EDX, idb_bioreg.B[ESI]
	A2IOP	P_EEPCTL
8$:	MOVB	AL, #20h
	OUTB	[DX]
	MOVB	AL, #60h
	OUTB	[DX]
	A2IOP	P_EEPDATA-P_EEPCTL
	INB	[DX]
	SHLL	EAX, #1			;Shift data bit into AH
	A2IOP	P_EEPCTL-P_EEPDATA
	LOOP	ECX, 8$
	MOVB	AL, AH
	RET
.PAGE
	.SBTTL	Data

	DATA

enfjafidb:.LONG	0		;Offset of first IDB for this type of interface
enfjalidb:.LONG	0		;Offset of last IDB for this type of interface
temp:	  .LONG 'NET', 0

	LKEEND

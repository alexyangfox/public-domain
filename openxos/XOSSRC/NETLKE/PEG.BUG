Bugs: (the number indicates relative seriousness, 1 = most serious, 3 = least
  serious)

1  Expanding the Full Decode Window to full screen and then attempting to
   scroll through the stored data with cursor-up/cursor-down crashes the
   program.

1  When quickly scrolling through the display, the program sometimes gets
   "out-of-sync" with the monitor hardware.  It will say the buffer is empty
   or display garbage.  Reloading the program usually cleans things up.

1  Switching to "Full Decode Window" sometimes crashes the program.  This
   may be related to displaying incorrectly formed data packets (see next
   item) or may be related to being positioned at the end of the buffer when
   switching to the "Full Decode Window".

1  Attempting to bring up the "Full Decode Window" when viewing a saved file
   gives a fatal "Not enough memory" error.

1  LAPB frames 2 or 3 characters in length (including checksum bytes) often
   show FCS as "OK" when it is not.  1 character frames do seem to always
   indicate a bad checksum.  Also the decode on short frames is generally
   wrong.  It looks like its decoding whatever was left in its buffer if the
   frame contains less than 2 data bytes.

1  Data packets which are too short (a 2-byte long LAPB I-frame, so there is
   no X.25 header data present) display garbage data for the 3 X.25 header
   bytes in the "Full Decode Window".  It should indicate that the packet
   is too short to contain the X.25 header bytes.

1  The packet header display displays an X.25 data packet header (with garbage
   values) for a LAPB FRMR frame.  The "Full Decode Window" display for the
   FRMR frame is correct, however.

2  The byte offset shown on the left of the Full Decode Window only allows for
   two characters.  When the packet is longer than 255 bytes, the first
   character displays non-hex characters.

2  The compressed hex mode does not work in the HDLC/X.25 Full Decode Window.
   When displaying in ASCII mode, non-ASCII values are not displayed at all.

2  Scrolling of the HDLC/X.25 decode display is by frame.  If you have a
   frame longer than will fit on the screen, there is no way to look at the
   data toward the end of the packet (except by switching to the Full Decode
   Window).  Scrolling by frame rather than display line also is somewhat
   ackward in general since it results in very uneven scrolling, depending
   on the sizes of the frames being displayed.

2  The yellow highlight color for the checksum only shows on the 2nd checksum
   byte if it is the only byte displayed on the last line.  Also, it should
   be noted that the yellow color is identical to white on at least some
   mono-LCD displays.  (Switching to monochrome mode does make the checksum
   highlight more visible, but almost everything else is worse! - What you
   really need is a second set of color values that work better with gray-scale
   LCD displays.  Most of these displays can show at least 4 to 6 discernable
   shades of gray, provided the right color values are used.  Probably the only
   real solution is to allow the user to select the color for each major
   display element.)

2  The time-stamp display does not work unless you display a protocol decode.
   You should be able to get a time-stamped display with just the hex display.
   A side effect of this is that if a packet ends at exactly the end of a line,
   you can't easily reconize the end of that packet and the beginning of the
   next.  (Remember that the yellow checksum highlight is virutally invisilbe
   on mono-LCD screens.)  Even with the checksum highlight to indicate the end
   of a frame, this is not real visible.  Everything tends to run together.

3  The relative time is not displayed on the first frame on the screen.  (Not
   the first frame in the buffer, but the first frame on the screen at any
   time.  If you scroll down a frame, what was the first frame will then
   display a relative time!)

3  When stopping monitoring, the display is placed about 1 screen before the
   end of the buffer rather than at the end of the buffer as I would expect.
   Also, when pressing END, the screen is placed about 1 screen before the
   end of the buffer.

3  Clearing the screen while monitoring is active stops monitoring until it
   is manually stopped and restarted.  The indicator in the upper right corner
   stays on, however.

Major deficiencies:

I understand that some of these items are impractical because of the design
of the monitor hardware.  Unfortunately, since I don't know much about the
details of the design, I can't do a very good job of filtering these out.

There is no way to set any parameters for sync decode.  For byte-sync, you need
to be able to specify one/two sync characters, value of sync character, an
optional drop sync character, etc.  For both byte-sync and bit-sync, you need
to be able to specify the CRC algorithm (CRC-16 or CRC-CCITT) and the starting
value (all 0s or all 1s).

Support for 50 or 60 line mode is badly needed.  I understand that the
compressed hex display mode is not practical with an 8-bit high character cell,
but the mode would still be useful and would provide more information on the
screen, even without a compressed hex mode.  You really should support 60 line
mode which allows 10 more lines without reducing the size of the text on LCD
displays.  I understand this is not an offical VGA mode, but I have been using
it for years and am yet to find a VGA (including the orginal IBM VGA) on which
it does not work.

There is no cursor on the display.  A cursor which can be moved around the
display is very handy for marking what you are looking at so you don't tend
to loose it in the mass of data on the screen if you look away for a second.
Also, many analyzers provide extended decode for the single byte under the
cursor.

There is no indication of where you are in the buffer, except for a very
rough indication of position provided by the pointer on the bottom of the
screen.  This is nowhere near accurate enough to allow you to move back to
a particular item in the buffer.  You need to display the character number
in the buffer of the current item (see comments about a cursor above).
It would also be nice to have the frame number in the buffer for sync
protocols.

Related to the above, there needs to be a command to position the display at
a specified (by number) character or frame in the buffer.

It would be nice to have the amount available in the buffer displayed on the
capture screen (as a number, not a bar graph - the bar graphs are not
accurate enough).

There needs to be some kind of search capability.  It should at least allow
you to specify a byte value, maybe with a mask.  For sync protocols, the
ability to search for a byte at a specified offset in a frame is very useful.

There should be some way to mark a frame such that all times displayed are
relative to that frame.  This could be a special time display mode or you
could display two relative times: one relative to the previous frame and
the other relative to the last previous marked frame (the Network General
Ethernet Sniffer does this).

Start and stop triggers are badly needed.  There are many instances where it
is necessary to monitor a circuit looking for a specific protocol event
(usually an error) and capture a significant amount of data both before and
after the event.  This can generally be done if you have a trigger which can
reconize the event (admittedly this is sometimes hard to do) and stop capturing
some number of frames later.  The ability to trigger on a line which is idle
for some amount of time would be valuable in some cases.

Display filters are needed.  A display filter would work just like a storage
filter except that it is applied to the data in the buffer when it is
displayed.  This allows you to easily determine if interesting events have
been captured while still retaining the ability to look at surrounding events
if necessary.  Refer to the Network General Ethernet Sniffer for some
reasonable examples of storage and display filter implementation.

Triggers and filters should be specifable in terms of the various protocol
levels.  For example, I should be able to specify that only certain X.25
logical channels be captured (or displayed) or that capturing should start
when an X.25 CALL REQUEST is received or that capturing stops 100 frames after
a LAPB FRMR is received.

There needs to be some control over encoding and clock sources.  I hope the
hardware you are using can support more than NRZ/external clock.  Most high
speed analyziers today support NRZ, NRZI, FM (usually two modes), and
Manchester encoding.  Phase-locked-loop clock recovery is usually also
available, at least for NRZI and Manchester encoding, usually with a
significantly lower maximum rate than the maximum data rate supported with
external clock.  (Actually, most PLL implementations also seem to work pretty
well with NRZ, even if, in theory, you don't have enough transitions for
completely reliable clock recovery.)

The ability to display interframe flags and/or marking time would be useful
in some cases.  At least, it would be good to know when there is a single flag
between frames since some interfaces have trouble receiving when there is a
single flag between frames.  I understand that this may not be possible because
of the hardware you are using.

It would be nice to be able specify how much of each packet is saved.  It is
often the case that you will be receiving long packets but only case about
the headers and first dozen or so data bytes.  It would be nice to be able
to tell it to only store the first N bytes of each frame.  (The Network
General Ethernet Sniffer has this ability.)  This could significanly increase
the effective size of the buffer.

A nice addition to the protocol decode would be the ability to verify packet
sequence numbers and flag out-of-sequence packets.  There is actually a lot
that can be done in this area, including flaging excessively long ACK delays,
window overruns, etc.  The Network General Sniffer provides some nice
capabilities of this sort with its IP decode features. Admittedly, this is not
trivial.

The X.25 emulation features look like they might be useful, but without any
documentation, I have not had time to try to figure out how they work or even
exactly what they can do.

It would provide more information on the screen if frames received at about the
same time were displayed opposite (or partly opposite) each other.

Good features: (please don't remove these! - sorry the list is so short)

The ability to stop and restart monitoring without clearing the buffer.  This
is very convient and is not possible on most other analyzers.


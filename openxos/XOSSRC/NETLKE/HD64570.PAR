	.SBTTL	System level parameter file HD64570.PAR
	.SBTTL	Definitions for Hitiachi HD64570 (SCA) serial interface chip

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

.IF NDF DEFINES
	.NLIST
	.INCLUD	XOSINC:\XMAC\DEFINES.PAR
	.LIST
.ENDC
	.PARM

HD_LPR  =!000h		;(both)  Low power register
HD_PABR0=!002h		;(both)  Physical address boundry register 0
HD_PABR1=!003h		;(both)  Physical address boundry register 1
HD_WCRL =!004h		;(both)  Wait control register L
HD_WCRM =!005h		;(both)  Wait control register M
HD_WCRH =!006h		;(both)  Wait control register H
HD_PCR  =!008h		;(both)  DMA priority control register
HD_DMER =!009h		;(both)  DMA master enable register
HD_ISR0 =!010h		;(both)  Interrupt status register 0
HD_ISR1 =!011h		;(both)  Interrupt status register 1
HD_ISR2 =!012h		;(both)  Interrupt status register 2
HD_IER0 =!014h		;(both)  Interrupt enable register 0
HD_IER1 =!015h		;(both)  Interrupt enable register 1
HD_IER2 =!016h		;(both)  Interrupt enable register 2
HD_ITCR =!018h		;(both)  Interrupt control register
HD_IVR  =!01Ah		;(both)  Interrupt vector register
HD_IMVR =!01Ch		;(both)  Interrupt modified vector register
HD_SCI0 =!020h		;	 Base address for channel 0 SCI registers
HD_SCI1 =!040h		;	 Base address for channel 1 SCI registers
HD_TMR0 =!060h		;	 Base address for timer 0 registers
HD_TMR1 =!068h		;	 Base address for timer 1 registers
HD_TRM2 =!070h		;	 Base address for timer 2 registers
HD_TMR3 =!078h		;	 Base address for timer 3 registers
HD_DMAR0=!080h		;	 Base address for channel 0 receive DMA
			;	   controller registers
HD_DMAX0=!0A0h		;	 Base address for channel 0 transmit DMA
			;	   controller registers
HD_DMAR1=!0C0h		;	 Base address for channel 1 receive DMA
			;	   controller registers
HD_DMAX1=!0E0h		;	 Base address for channel 1 transmit DMA
			;	   controller registers

;Define SCA controller registers for each SCI channel - values are relative to
;  the base regsiter for the SCI channel

SCI_DATA=!00h		;(both)  Data register (16 bits)
SCI_STS0=!02h		;(read)  Status register 0
SCI_STS1=!03h		;(both)  Status register 1
SCI_STS2=!04h		;(both)  Status register 2
SCI_STS3=!05h		;(both)  Status register 3
SCI_FST =!06h		;(both)  Frame status register
SCI_IE0 =!08h		;(both)  Interrupt enable register 0
SCI_IE1 =!09h		;(both)  Interrupt enable register 1
SCI_IE2 =!0Ah		;(both)  Interrupt enable register 2
SCI_FIE =!0Bh		;(both)  Frame interrupt enable register
SCI_CMD =!0Ch		;(write) Command register
SCI_MD0 =!0Eh		;(both)  Mode register 0
SCI_MD1 =!0Fh		;(both)  Mode register 1
SCI_MD2 =!10h		;(both)  Mode register 2
SCI_CTL =!11h		;(both)  Control register
SCI_SA0 =!12h		;(both)  Synchronous address register 0
SCI_SA1 =!13h		;(both)  Synchronous address register 1
SCI_IDL =!14h		;(both)  Idle pattern register
SCI_TMC =!15h		;(both)  Time constant register
SCI_RXS =!16h		;(both)  Receive clock source
SCI_TXS =!17h		;(both)  Transmit clock source
SCI_TRC0=!18h		;(both)  Transmit ready control register 0
SCI_TRC1=!19h		;(both)  Transmit ready control register 1
SCI_RRC =!1Ah		;(both)  Receive ready control register
SCI_CST0=!1Ch		;(both)  Current status register 0
SCI_CST1=!1Dh		;(both)  Current status register 1

;Define timer registers for each timer - values are relative to the base
;  register for the timer

TMR_CNTR=!00h		;(both)  Up-counter (16 bits)
TMR_CON =!02h		;(both)  Constant register (16 bits)
TMR_CSR =!04h		;(both)  Control/status register
TMR_EPR =!05h		;(both)  Expanded prescale register

;Define DMA controller registers for each DMA channel - values are relative to
;  the base register for the DMA controller channel

DMA_DAR =!00h		;(both)  Destination address register (low 16 bits)
DMA_DARB=!02h		;(both)  Destination addrses reigster (high 8 bits)
DMA_SAR =!04h		;(both)  Source address register (low 16 bits)
DMA_SARB=!06h		;(both)  Source addrses reigster (high 8 bits)
DMA_CPBB=!06h		;(both)  Chain pointer base (high 8 bits - block mode
			;	   only
DMA_CDA =!08h		;(both)  Current descriptor address register (low 16
			;	   bits)
DMA_EDA =!0Ah		;(both)  Error descriptor address register (low 16 bits)
DMA_BFL =!0Ch		;(both)  Buffer length register (16 bits)
DMA_BCR =!0Eh		;(both)  Byte count register (16 bits)
DMA_DSR =!10h		;(both)  DMA status register
DMA_DMR =!11h		;(both)  DMA mode register
DMA_FCT =!13h		;(both)  Frame end interrupt counter
DMA_DIR =!14h		;(both)  DMA interrupt enable register
DMA_DCR =!15h		;(both)  DMA command register

;Define values for the SCI_CMD register

SCICMD_NOOP  =!00h	;No-op
SCICMD_TXRST =!01h	;Reset transmitter
SCICMD_TXENB =!02h	;Enable transmitter
SCICMD_TXDIS =!03h	;Disable transmitter
SCICMD_TXICRC=!04h	;Initialize transmit CRC
SCICMD_TXXCRC=!05h	;Transmit CRC exclusion
SCICMD_TXEOM =!06h	;Transmit end-of-messages
SCICMD_TXABRT=!07h	;Abbort transmission
SCICMD_TXMPON=!08h	;MP bit on
SCICMD_TXCLR =!09h	;Clear transmit buffer
SCICMD_RXRST =!11h	;Reset receiver
SCICMD_RXENB =!12h	;Enable receiver
SCICMD_RXDIS =!13h	;Disable receiver
SCICMD_RXICRC=!14h	;Initialize receive CRC
SCICMD_RXMREJ=!15h	;Message reject
SCICMD_RXSMP =!16h	;Search MP bit
SCICMD_RXXCRC=!17h	;Receive CRC exclusion
SCICMD_RXFCRC=!18h	;Force receive CRC calculation
SCICMD_RESET =!21h	;Channel reset
SCICMD_SEARCH=!32h	;Enter search mode

;Define bits for the SCI_STS3 register

SCISTS3$SOL =!20h	;Sending on loop
SCISTS3$SRCH=!10h	;Search mode
SCISTS3$CTS =!08h	;CTS input state
SCISTS3$DCD =!04h	;DCD input state
SCISTS3$TXE =!02h	;Transmiter enabled
SCISTS3$RXE =!01h	;Receiver enabled

;Define bits for the SCI_MD0 register

SCIMD0$PROT  =!0E0h	;Protocol mode
  SCIMD0PROT_ASYNC=!000h;  Asynchronous mode
  SCIMD0PROT_BSMSM=!020h;  Byte-sync (mono-sync) mode
  SCIMD0PROT_BSBSM=!040h;  Byte-sync (bi-sync) mode
  SCIMD0PROT_BSXSM=!060h;  Byte-sync (external sync) mode
  SCIMD0PROT_HDLC =!080h;  Bit-sync HDLC mode
  SCIMD0PROT_BSLPM=!0A0h;  Bit-sync loop mode
SCIMD0$AUTO  =!010h	;Auto-enable
SCIMD0$CRCENB=!004h	;CRC calculation enable
SCIMD0$CRCSEL=!002h	;CRC select (0 = CRC-16, 1 = CRC-CCITT)
SCIMD0$CRCINV=!001h	;CRC initial value (0 = all zeros, 1 = all ones)

;Define bits for the SCI_MD2 register

SCIMD2$CODE =!0E0h	;Transmission code
  SCIMD2CODE_NRZ =!000h	;  NRZ (if SCIDM2NRZFM = 0)
  SCIMD2CODE_NRZI=!020h	;  NRZI (if SCIDM2NRZFM = 0)
  SCIMD2CODE_MAN =!080h	;  Manchester coding (if SCIDM2NRZFM = 1)
  SCIMD2CODE_FM1 =!0A0h	;  FM1 (if SCIDM2NRZFM = 1)
  SCIMD2CODE_FM0 =!0C0h	;  FM0 (if SCIDM2NRZFM = 1)
SCIMD2$PLL  =!18h	;Phase locked loop operating clock rate
  SCIMD2PPL_8 =!00h	;  x8
  SCIMD2PPL_16=!08h	;  x16
  SCIMD2PPL_32=!10h	;  x32
SCIMD2$CHNL =!03h	;Channel connection
  SCIMD2CHNL_FULL=!00h	;  Full duplex
  SCIMD2CHNL_ECHO=!01h	;  Auto echo
  SCIMD2CHNL_LLB =!03h	;  Local loop-back

;Define bits for the SCI_CTL register

SCICTL$URUNMD=!20h	;Underrun mode (0 = abort, 1 = normal termination)
SCICTL$IDLEMD=!10h	;Idle mode (0 = mark, 1 = idle pattern)
SCICTL$BREAK =!08h	;Break (async only)
SCICTL$SCLOAD=!04h	;SYN character load enable (byte-sync only)
SCICTL$GAOP  =!02h	;Go active on poll (bit-sync loop mode only)
SCICTL$RTS   =!01h	;RTS output state

;Define bits for the SCI_RXS register

SCIRXS$SRC=!70h		;Receive clock source
  SCIRXSSRC_EXT   =!00h	;  RXC line input
  SCIRXSSRC_EXTNS =!02h	;  RXC line input/noise supppression
  SCIRXSSRC_INT   =!04h	;  Baud rate generator
  SCIRXSSRC_PLLEXT=!06h	;  PLL output (PLL clock = baud rate generator)
  SCIRXSSRC_PLLINT=!07h	;  PLL output (PLL clock = RXC line input)
SCIRXS$DIV=!0Fh		;Clock division ratio
  SCIRXSDIV_1  =!0h	;  1/1
  SCIRXSDIV_2  =!1h	;  1/2
  SCIRXSDIV_4  =!2h	;  1/4
  SCIRXSDIV_8  =!3h	;  1/8
  SCIRXSDIV_16 =!4h	;  1/16
  SCIRXSDIV_32 =!5h	;  1/32
  SCIRXSDIV_64 =!6h	;  1/64
  SCIRXSDIV_128=!7h	;  1/128
  SCIRXSDIV_256=!8h	;  1/256
  SCIRXSDIV_512=!9h	;  1/512

;Define bits for the SCI_TXS register

SCITXS$SRC=!70h		;Transmit clock source
  SCITXSSRC_EXT=!00h	;  TXC line input
  SCITXSSRC_INT=!04h	;  Baud rate generator
  SCITXSSRC_REC=!06h	;  Receive clock
SCITXS$DIV=!0Fh		;Clock division ratio
  SCITXSDIV_1  =!0h	;  1/1
  SCITXSDIV_2  =!1h	;  1/2
  SCITXSDIV_4  =!2h	;  1/4
  SCITXSDIV_8  =!3h	;  1/8
  SCITXSDIV_16 =!4h	;  1/16
  SCITXSDIV_32 =!5h	;  1/32
  SCITXSDIV_64 =!6h	;  1/64
  SCITXSDIV_128=!7h	;  1/128
  SCITXSDIV_256=!8h	;  1/256
  SCITXSDIV_512=!9h	;  1/512

;Define bits for the DMA_DMR register

DMADMR$CHAIN =!10h	;Chained-block transfer
DMADMR$MULT  =!04h	;Multi-frame transfer (chained mode only)
DAMDMR$FECNTE=!02h	;Frame end interrupt counter enable

;Define bits for the DMA_DSR register

DMADSR$EOT   =!80h	;End of transfer
DMADSR$EOM   =!40h	;End of frame
DMADSR$BOF   =!20h	;Buffer overflow/underflow
DMADSR$COF   =!10h	;Counter overflow
DMADSR$DMAENB=!02h	;DMA enable
DMADSR$DEBWD =!01h	;DMAENB bit write disable

;Define bits for the DMA_DIR register

DMADIR$EOTE=!80h	;Transfer end interrupt enable
DMADIR$EOME=!40h	;Frame transfer end interrupt enable
DMADIR$BOFE=!20h	;Buffer overflow/underflow interrupt enable
DMADIR$COFE=!10h	;Counter overflow interrupt enable

;Define offsets in the buffer descriptors

bd_next  =!00h		;Offset (low 16 bits) of next bufer descriptor
bd_buffer=!02h		;Offset (24 bits) of buffer
bd_length=!06h		;Data length
bd_status=!08h		;Status byte
bd_packet=!0Ch		;Offset of associated packet
bd_SIZE  =!10h

	.TITLE	bits

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR

	.STDSEGS

	.PSECT	_TEXT_p

;Function to test a bit in a bit array
;	int rtn = testbit(
;	    ulong *array,
;	    int    bit);

	.ENTRY	testbit
testbit::
	MOVL	EAX, 8.B[ESP]		;Get bit number
	MOVL	EDX, 4.B[ESP]		;Get address of the array
	BTL	[EDX], EAX		;Test the bit
	SETC	AL
	MOVZBL	EAX, AL
	RET

;Function to clear a bit in a bit array
;	int rtn = clearbit(
;	    ulong *array,
;	    int    bit);

	.ENTRY	clearbit
clearbit::
	MOVL	EAX, 8.B[ESP]		;Get bit number
	MOVL	EDX, 4.B[ESP]		;Get address of the array
	BTZL	[EDX], EAX		;Test the bit
	SETC	AL
	MOVZBL	EAX, AL
	RET

;Function to set a bit in a bit array
;	int rtn = setbit(
;	    ulong *array,
;	    int    bit);

	.ENTRY	setbit
setbit::MOVL	EAX, 8.B[ESP]		;Get bit number
	MOVL	EDX, 4.B[ESP]		;Get address of the array
	BTCL	[EDX], EAX		;Test the bit
	SETC	AL
	MOVZBL	EAX, AL
	RET

.IF NE
	FINISH THIS LATER!!!

;Function to find the next bit in a bit array
;	int rtn = nextbit(
;	    ulong *array,
;	    int    begin,
;	    int    end);

	.ENTRY	nextbit
nextbit::

	MOVL	EDX, 8.B[ESP]		;Get starting bit number
	MOVL	ESI, EDX		;Get bit number offset
	ANDL	ESI, #0FFFFFFE0h.B
	MOVL	ECX, EDX		;Generate a mask for the first bit
	ANDL	ECX, #1Fh.B
	MOVL	EAX, #0FFFFFFFFh
	SHLL	EAX, CL

	MOVL	ECX, 12t.B[ESP]		;Get ending bit number
	MOVL	EBX, 4.B[ESP]		;Get address of array


	ADDL	ECX, #31t.B		;Get address of first long not to test
	SHRL	ECX, #3t
	ANDB	CL, #0FCh
	ADDL	ECX, EBX



	SHRL	EDX, #3t		;Get address of first long to test
	ANDB	DL, #0FCh
	ADDL	EBX, EDX

;When get here:
;  c{EAX} = Mask for first long
;  c{ESI} = Bit offset from start of array to first long
;  c{EBX} = Offset of first long
;  c{ECX} = Ending address

	ANDL	EAX, [EBX]		;Get first bits to test
4$:	BSFL	EDX, EAX		;Find a set bit
	JNE	qqqq			;If found one
	ADDL	EBX, #4.B		;Didn't find one - bump things
	CMPL	EBX, ECX
	JAE	qqqqq
	MOVL	EAX, [EBX]
	JMP	4$.S

6$:	MOVL	EAX, #-1
	RET

;Here if found a bit
;	c{EAX} = Bit number in long

8$:	SUBL	EBX, 4.B[ESP]
	SHLL	EBX, #3t
	ADDL	EAX, EBX
	RET
.ENDC


	.END

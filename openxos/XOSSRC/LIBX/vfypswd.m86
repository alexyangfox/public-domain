	.TITLE	verifypassword - Function to verify XOS password

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDFUTIL.PAR
	.INCLUD	XOSINC:\XMAC\XOSGETUSER.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	verifypassword - Function to verify an XOS password

;Function to verify an XOS password
;	char  *password;	// Password
;	int    pswdlen;		// Length of the password
;	char  *verify;		// Verify data (NULL if password is not
;				//   encrypted)
;	char  *refdata;		// Reference data for verify
;	struct usrdata *usrdata;// Structure to receive user data
;	int verifypassword(password, pswdeln, verify, refdata, usrdata);
;  Value returned: TRUE if OK, FALSE if error

;Must be called after a good return from verifyuser.  usrdata must be the
;  structure filled in by verifyuser.  The data buffer used by verifyuser
;  must still be allocated.

arg_password=!12t
arg_pswdlen =!16t
arg_verify  =!20t
arg_refdata =!24t
arg_usrdata =!28t

$$$=!0
FRM vd_buffer  , 32t
vd_SIZE=!$$$

	.ENTRY	verifypassword
verifypassword:
	PUSHL	ESI
	ENTER	vd_SIZE, 0
	MOVL	ESI, arg_usrdata.B[EBP] ;Get offset of the user data structure
	MOVL	EAX, arg_pswdlen.B[EBP]
	CMPL	EAX, #31t
	JA	12$.S
	ADDL	EAX, arg_password.B[EBP]
	MOVB	[EAX], #0
	CMPL	arg_verify.B[EBP], #0.B	;Did he give us encrypted data?
	JE	4$.S			;No
	MOVL	EBX, arg_verify.B[EBP]	;Yes - check the verify data
	MOVL	EDX, arg_refdata.B[EBP]
	MOVL	ECX, #8t
2$:	MOVL	EAX, [EBX]
	CMPL	[EDX], EAX
	JNE	12$.S
	ADDL	EBX, #4t.B
	ADDL	EDX, #4t.B
	LOOP	ECX, 2$

;Here with the verify data verified or if the password data was not encrypted
;  to begin with - now hash the password and see it it matches
	
4$:	MOVL	EBX, arg_password.B[EBP] ;Point to the password
	LEAL	EAX, vd_buffer.B[EBP]	;Generate the hash code for the
	PUSHL	EAX			;  password
	PUSHL	ud_pswdpnt.B[ESI]
	PUSHL	EBX
	CALL	qdesGenHash32#
	ADDL	ESP, #12t.B
	MOVL	EBX, ud_pswdpnt.B[ESI]
	ADDL	EBX, #8t.B
	LEAL	EDX, vd_buffer.B[EBP]
	MOVL	ECX, #8t
10$:	MOVL	EAX, [EDX]
	CMPL	[EBX], EAX
	JNE	12$.S
	ADDL	EDX, #4t.B
	ADDL	EBX, #4t.B
	LOOP	ECX, 10$
	MOVL	EAX, #1
	JMP	14$.S

;Here if the verify data or the password does not match

12$:	CLRL	EAX
	MOVL	ud_error1[ESI], #vubdumsg#
14$:	LEAVE
	POPL	ESI
	RET

	.END

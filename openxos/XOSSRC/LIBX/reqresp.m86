	.TITLE	reqresp

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDFUTIL.PAR
	.INCLUD	XOSINC:\XMAC\XOSGETUSER.PAR

	.STDSEGS

	.PSECT	_TEXT_p

;Subroutine to send request and get response
;	long udpdev;
;	long addr;
;	long port;
;	MSG  req;
;	long msgsize;
;	MSG  resp;
;	long respsize;
;	rtn = reqresp(udpdev, addr, port, req, reqsize, resp, respsize);
;  Value returned is positive length of response if OK or negative error
;    code if error.

arg_respsz=!40t
arg_resp  =!36t
arg_reqsz =!32t
arg_req   =!28t
arg_port  =!24t
arg_addr  =!20t
arg_udpdev=!16t

$$$=!0
FRM rr_udpoparms, 20t
FRM rr_udpiparms, 28t
rr_SIZE=!$$$

	.ENTRY	reqresp
reqresp:PUSHL	EDI
	PUSHL	ESI
	ENTER	rr_SIZE, 0
	MOVL	rr_udpoparms+0.B[EBP], #{PAR$SET|REP_HEXV}+{4<8t}+{IOPAR_NETRMTNETAS<16t}
	MOVL	EAX, arg_addr.B[EBP]
	MOVL	rr_udpoparms+4.B[EBP], EAX
	MOVL	rr_udpoparms+8.B[EBP], #{PAR$SET|REP_HEXV}+{4<8t}+{IOPAR_NETRMTPORTS<16t}
	MOVL	EAX, arg_port.B[EBP]
	MOVL	rr_udpoparms+12t.B[EBP], EAX
	CLRL	EAX
	MOVB	rr_udpoparms+16t.B[EBP], AL
	MOVL	rr_udpiparms+0.B[EBP], #{PAR$GET|REP_HEXV}+{4<8t}+{IOPAR_NETRMTNETAR<16t}
	MOVL	rr_udpiparms+4.B[EBP], EAX
	MOVL	rr_udpiparms+8.B[EBP], #{PAR$GET|REP_HEXV}+{4<8t}+{IOPAR_NETRMTPORTR<16t}
	MOVL	rr_udpiparms+12t.B[EBP], EAX
	MOVL	rr_udpiparms+16t.B[EBP], #{PAR$SET|REP_HEXV}+{4<8t}+{IOPAR_TIMEOUT<16t}
	MOVL	rr_udpiparms+20t.B[EBP], #XT_SECOND*3
	MOVB	rr_udpiparms+24t.B[EBP], AL
	MOVL	EDX, #4
4$:	PUSHL	arg_udpdev.B[EBP]
	PUSHL	DS
	PUSHL	arg_req.B[EBP]
	PUSHL	arg_reqsz.B[EBP]
	PUSHL	DS
	LEAL	EAX, rr_udpoparms.B[EBP]
	PUSHL	EAX
	CALLF	svcIoOutBlockP##
	ORL	EAX, EAX
	JS	8$.S
	PUSHL	arg_udpdev.B[EBP]
	PUSHL	DS
	PUSHL	arg_resp.B[EBP]
	PUSHL	arg_respsz.B[EBP]
	PUSHL	DS
	LEAL	EAX, rr_udpiparms.B[EBP]
	PUSHL	EAX
	CALLF	svcIoInBlockP##
	ORL	EAX, EAX
	JNS	8$.S
	CMPL	EAX, #ER_NORSP
	JNE	8$.S
	DECL	EDX
	JNE	4$.S
8$:	LEAVE
	POPL	ESI
	POPL	EDI
	RET

	.END

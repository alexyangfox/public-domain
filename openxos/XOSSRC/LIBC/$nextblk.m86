	.TITLE	$nextblk - Internal function to advance to next block of file
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	$nextblk - Internal function to advance to next block of file

;Internal function to advance to next block of file
;	c{ESI} = Offset of IOB
;	CALL	$nextblk
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal

	.ENTRY	$nextblk
$nextblk:
	CALL	$dumpblk#		;Output current block if need to
	JC	4$.S			;If error
	BTL	iob_flag.B[ESI], #IOB%DISK ;OK - is this a disk?
	JNC	6$.S			;No
	MOVL	EAX, iob_offset.B[ESI]	;Yes - get new offset in file
	ADDL	EAX, iob_bsize.B[ESI]
	MOVL	iob_offset.B[ESI], EAX	;Update offset
	CMPL	EAX, iob_length.B[ESI]	;Past end of file?
	JAE	10$.S			;Yes

	.SBTTL	$thisblk - Internal function to get block from file

;Internal function to get block from file
;	c{ESI} = Offset of IOB
;	CALL	$thisblk
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EAX} = 0

	.ENTRY	$thisblk
$thisblk:
	PUSHL	iob_handle.B[ESI]	;Set position for IO
	PUSHL	iob_offset.B[ESI]
	PUSHL	#0.B
	CALLF	svcIoSetPos#
	TESTL	EAX, EAX		;Error?
	JNS	8$.S			;No - continue
2$:	STC
4$:	RET

;Here for non-disk buffered device

6$:	BTL	iob_flag.B[ESI], #IOB%READ ;Need to read non-disk buffer?
	JNC	10$.S			;No
8$:	PUSHL	iob_handle.B[ESI]	;Yes - do so
	PUSHL	DS
	PUSHL	iob_buffer.B[ESI]
	PUSHL	iob_bsize.B[ESI]
	CALLF	svcIoInBlock#
	TESTL	EAX, EAX		;Error?
	JNS	12$.S			;No - go on
	CMPL	EAX, #ER_EOF.B		;Yes - is it EOF?
	JNE	2$.S			;No
10$:	CLRL	EAX			;Yes - just say nothing read

;Here if don't have an error

12$:	MOVL	EDX, iob_bsize.B[ESI]	;Store end of block count value
	SUBL	EDX, EAX
	MOVL	iob_end.B[ESI], EDX
	MOVL	EAX, iob_bsize.B[ESI]	;Reset count
	MOVL	iob_count.B[ESI], EAX
	MOVL	EAX, iob_buffer.B[ESI]	;Reset pointer
	MOVL	iob_pnt.B[ESI], EAX
	CLC				;Make sure C is clear
	RET

	.END

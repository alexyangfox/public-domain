	.TITLE	exit - ANSI C function to exit back to O/S
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 22Sep94  FPJ  Added abort() function.
;  8Sep94  FPJ  Added code to handle atexit() stuff.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.STDSEGS

	.SBTTL	exit - ANSI C function to exit back to O/S

;+
; Function: exit()
;
; Call:
;
;       PUSHL	<exit code>
;
;	CALL 	exit
;
; Return:
;
;	(it doesn't return)
;-

	.PSECT	_TEXT_p

	.ENTRY	exit, _exit

exit:

; First, call all registered functions

	MOVL	ECX, _atcount#		;Get no. of registered functions
10$:	TESTL	ECX, ECX		;Is it zero?
	JZ	closeall		;Yes, so close files
	DECL	ECX			;Make into index
	MOVL	EAX, _atfuns#[ECX*4]	;Get address of function
	PUSHAL				;Save all registers
	CALLI	EAX			;Now call the function
	POPAL				;Restore our state
	JMP	10$.S			;Keep looping

; Second, close all files

closeall:
	MOVL	ESI, #_stdin#		;Point to first stream
	MOVL	EDI, #NFILES+3
30$:	CMPL	ESI, #_stdtrm#		;Don't close STDTRM!
	JE	40$.S
	TESTL	iob_flag.B[ESI], #IOB$READ|IOB$WRITE ;Is the file open?
	JE	40$.S			;No
	PUSHL	ESI			;Yes - close it now
	CALL	fclose#
	POPL	EAX			;Dump the stream pointer
40$:	ADDL	ESI, #iob_SIZE.B
	DECL	EDI			;More to do?
	JNE	30$.S			;Yes - continue

; Note that it is not necessary to remove files created by tmpfile(),
; since those files, marked for delete after being opened, were
; removed when they were closed above.

_exit:	POPL	EAX			;Discard the return address (this
					;  leaves the exit code in the right
					;  place on the stack for svcSchExit!)
	CALLF	svcSchExit#		;Terminate the program

	.SBTTL	abort - ANSI C function to abort program

;+
; Function: abort()
;
; Call:
;
;	CALL 	abort
;
; Return:
;
;	(it doesn't return)
;-

EXIT_FAILURE	=! 1.B

	.PSECT	_TEXT_p

aborttext:
	.ASCIZ	"? Program abort"

	.ENTRY	abort

abort:

; First say we died

	PUSHL	_stderr#		;Push handle of stdout
	PUSHL	DS
	PUSHL	#aborttext
	PUSHL	#0.B			;Output until <NUL>
	CALLF	svcIoOutString#		;Now output the string

	PUSHL	_stderr#		;Push handle
	PUSHL	#13t			;Output a carriage return
	CALLF	svcIoOutSingle#		;Now output the character

	PUSHL	_stderr#		;Push handle
	PUSHL	#10t			;Output a line feed
	CALLF	svcIoOutSingle#		;Now output the character

; And then die

	PUSHL	#EXIT_FAILURE		;Insert a failure code
	JMP	closeall		;Close files and exit

	.END

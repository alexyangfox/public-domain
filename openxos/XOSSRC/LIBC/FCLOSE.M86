	.TITLE	fclose - ANSI C function to close file
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 28Sep94  FPJ  Optimized code.
; 28Oct94  FPJ  Added code to avoid closing STDTRM.
; 11Nov94  FPJ  Added check for NULL pointer.
;-

	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	fclose - ANSI C function to close file

;+
; Function: fclose()
;
; Call:
;
;	PUSHL	<offset of stream to close>
;
;	CALL 	fclose
;
; Return:
;	EAX = 0 if success, EOF if failure
;-

p1 =! 8t

	.PSECT	_TEXT_p

	.ENTRY	fclose

fclose:
	PUSHL	EDI
	MOVL	EDI, p1.B[ESP]		;Get pointer to stream
	TESTL	EDI, EDI		;Is it a NULL pointer?
	JE	35$			;Yes, so exit now with EOF
	CLRL	EDX			;Assume we'll return success
	TESTL	iob_flag.B[EDI], #IOB$WRITE | IOB$READ
					;Is this file open?
	JE	17$.S			;No
	BTL	iob_flag.B[EDI], #IOB%WRITE ;Yes - doing output?
	JNC	10$.S			;No
	BTL	iob_flag.B[EDI], #IOB%UNBUF ;Yes - buffered file?
	JC	10$.S			;No

; If stream open for output and is buffered, then flush the stream

	PUSHL	EDX

; FIXME: add code to $dumpblk to return actual error code,
;	rather just returning C-bit.

	PUSHL	ESI
	MOVL	ESI, EDI
	CALL	$dumpblk#		;Yes - output final block
	POPL	ESI
	POPL	EDX
	JNC	10$.S			;If OK
	MOVL	EDX, #EOF		;Error, so return EOF to user
10$:	CMPL	iob_handle.B[EDI], #4	;STDTRM?
	JE	15$			;Yes
	CMPL	iob_handle.B[EDI], #2	;STDIN, STDOUT, or STDERR?
	JA	20$.S			;No
15$:	MOVL	iob_flag.B[EDI], #0	;Don't really close it!
17$:	JMP	40$.S			;Now exit

; Here once we have eliminated any possibility of a special stream

20$:	PUSHL	EDX
	PUSHL	iob_buffer.B[EDI]	;De-allocate the I/O buffer
	MOVL	iob_buffer.B[EDI], #0	;Make sure we don't re-use it
	CALL	free#			;N.B.: this works even if buffer=NULL
    	POPL	EDX			;Dump size parameter
	POPL	EDX

; Re-initialize I/O block structure and close the stream

30$:	MOVL	iob_bsize.B[EDI], #0
	MOVL	iob_flag.B[EDI], #0	;Clear the flags

	PUSHL	iob_handle.B[EDI]	;Close the file
	MOVL	iob_handle.B[EDI], #0
	PUSHL	#0			;No special close bits
	CALLF	svcIoClose#
	TESTL	EAX, EAX		;Error?
	JNS	40$.S			;No
	TESTL	EDX, EDX		;Yes - first error?
	JNE	40$.S			;No
	MOVL	iob_error.B[EDI], EAX	;Yes, so save it
	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
35$:	MOVL	EDX, #EOF		;Error, so return EOF to user
40$:	MOVL	EAX, EDX		;Copy error code
	POPL	EDI
	RET

	.END


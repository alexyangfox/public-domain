	.TITLE	brk - Low level memory allocation routines for C programs
	.SBTTL	Run-time library for XC for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

;These functions allocate a block of memory at the top of memory by expanding
;  the programs memory allocation to provide more room.  This space does NOT
;  become part of malloc's pool of allocatable memory.  It cannot be deallocated
;  by calling free.  It does not, however, interfere in any may with malloc's
;  ability to manage memory blocks either above or below the space allocated.

mab_membase=!0t
mab_mempnt =!4t
mab_memtop =!8t

	.PSECT	_TEXT_p

	.SBTTL	makex - Function to set up a memory block

;Function to set up a memory block
;	int makex(
;	    MAB *mb,
;	    long offset);
;  Value returned is 0 if normal or -1 if error (errno is set)

	.ENTRY	makex
makex:	MOVL	EBX, 4t.B[ESP]		;Get offset of the MAB
	MOVL	EAX, 8t.B[ESP]		;Get base of the msect
	MOVL	mab_membase.B[EBX], EAX
	MOVL	mab_mempnt.B[EBX], EAX
	CLRL	EAX
	MOVL	mab_memtop.B[EBX], EAX
	RET

	.SBTTL	junkx - Function to discard a memory block

;Function to discard a memory block
;	int junkx(
;	    MAB *mb);
;  Value returned is 0 if normal or -1 if error (errno is set)

	.ENTRY	junkx
junkx:	MOVL	EBX, 4t.B[ESP]
	CMPL	mab_membase.B[EBX], #0.B
	JE	2$.S
	PUSHL	DS
	PUSHL	mab_membase.B[EBX]
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
	TESTL	EAX, EAX
	JS	fail
2$:	CLRL	EAX
	MOVL	mab_membase.B[EBX], EAX
	MOVL	mab_memtop.B[EBX], EAX
	MOVL	mab_mempnt.B[EBX], EAX
	RET

	.SBTTL	sbrkx - Function to permanently allocate memory give size of block

;Function to permanently allocate a block of memory in any msect given size of
;  the block
;	long  size;		/* Size of block to allocate (in bytes) */
;	struct mab *mem;	/* Memory allocation block */
;	char *ptr;		/* Pointer to allocated block */
;	(void *)ptr = sbrkx(size, mem);
;  Value returned is -1 if error or address of memory obtained if normal

	.ENTRY	sbrkx
sbrkx:	MOVL	EBX, 8t.B[ESP]		;Get offset of the MAB
	JMP	4$.S

;Function to permanently allocate a block of memory in any msect given size of
;  the block without forcing long alignment
;	long  size;		/* Size of block to allocate (in bytes) */
;	struct mab *mem;	/* Memory allocation block */
;	char *ptr;		/* Pointer to allocated block */
;	(void *)ptr = sbrkxx(size, mem);
;  Value returned is -1 if error or address of memory obtained if normal

	.ENTRY	sbrkxx
sbrkxx:	MOVL	EBX, 8t.B[ESP]		;Get offset of the MAB
	MOVL	EDX, 4t.B[ESP]		;Get size requested
	TESTL	EDX, EDX
	JS	toobig.S
	MOVL	ECX, mab_mempnt.B[EBX]	;Get value to return if OK
	ADDL	EDX, ECX		;Get new top offset
	JMP	brk4.S			;Continue

;Function to permanently allocate a block of memory give size of the block
;	long  size;		/* Size of block to allocate (in bytes) */
;	char *ptr;		/* Pointer to allocated block */
;	(void *)ptr = sbrk(size);
;  Value returned is -1 if error or address of memory obtained if normal

	.ENTRY	sbrk
sbrk:	MOVL	EBX, #_clib_membase#
4$:	MOVL	EDX, 4t.B[ESP]		;Get size requested
	TESTL	EDX, EDX
	JS	toobig.S
	MOVL	ECX, mab_mempnt.B[EBX]	;Get value to return if OK
	ADDL	EDX, ECX		;Get new top offset
	JMP	brk2.S			;Continue
.PAGE
	.SBTTL	brkx - Function to permanently allocate memory given new high offset

;Function to permanently allocate a block of memory give the new high offset
;	void *top;		/* Requested new top of memory offset */
;	struct mab *mem;
;	void *ptr;		/* Pointer actual new top of memory offset */
;	(void *)ptr = brkx(top, mem);
;  Value returned is -1 if error or address of memory obtained if normal

	.ENTRY	brkx
brkx:	MOVL	EBX, 8t.B[ESP]
	JMP	4$.S

;Function to permanently allocate a block of memory give the new high offset
;	void *top;		/* Requested new top of memory offset */
;	void *ptr;		/* Pointer actual new top of memory offset */
;	(void *)ptr = brk(top);
;  Value returned is -1 if error or address of memory obtained if normal

	.ENTRY	brk
brk:	MOVL	EBX, #_clib_membase#
4$:	CLRL	ECX			;Get value for good return
	MOVL	EDX, 4t+0t.B[ESP]	;Get new top offset wanted
brk2:	ADDL	EDX, #3.B		;Make sure even number of longs
	ANDL	EDX, #0FFFFFFFCh.B
brk4:	CMPL	EDX, mab_memtop.B[EBX]	;Need more memory now?
	JBE	6$.S			;No
	MOVL	EAX, EDX
	SUBL	EAX, mab_membase.B[EBX]	;Yes - get new size wanted
	PUSHL	DS
	PUSHL	mab_membase.B[EBX]
	PUSHL	#3
	PUSHL	EAX
	CALLF	svcMemChange#
	TESTL	EAX, EAX		;Error?
	JS	fail.S			;Yes
	ADDL	EAX, mab_membase.B[EBX]	;Get new top pointer
	MOVL	mab_memtop.B[EBX], EAX
6$:	MOVL	mab_mempnt.B[EBX], EDX	;Store new break pointer
	MOVL	EAX, ECX		;Get value to return
	RET

;Here if error allocating memory

toobig:	MOVL	EAX, #ER_NEMA
fail:	NEGL	EAX			;Negate it for errno
	MOVL	errno#, EAX		;Store error code
	MOVL	EAX, #-1		;Return -1
	RET

	.END

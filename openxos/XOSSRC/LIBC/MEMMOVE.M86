	.TITLE	memmove - ANSI C function to copy memory regions
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 30Aug94  FPJ  Original creation.
; 29-Sep-96 JRG  Added code to always return with D clear
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	memmove - ANSI C function to copy memory regions

;+
; Function: memmove()
;
; Call:
;       PUSHL   <no. of bytes to move>
;       PUSHL   <offset of source region>
;       PUSHL   <offset of destination region>
;
;       CALL    memmove
;
; Return:
;       EAX -> Destination region
;       EBX =  Random
;       ECX =  Random
;       ES  =  Random
;-

p1 =! 12t
p2 =! 16t
p3 =! 20t

	.PSECT	_TEXT_p

	.ENTRY	memmove
memmove:PUSHL	EDI
	PUSHL	ESI
	PUSHL	DS
	POPL	ES
	MOVL	EDI, p1.B[ESP]		;Get offset of destination string
	MOVL	ESI, p2.B[ESP]		;Get offset of source string
	MOVL	EBX, p3.B[ESP]		;Get no. of bytes to copy
	MOVL	EAX, EDI		;Return offset of destination string
        TESTL	EBX, EBX                ;Zero?
        JE      30$.S                   ;Yes, quit now
	MOVL	ECX, EBX
        CMPL    EDI, ESI                ;Do we need to copy backwards?
        JBE     10$.S                   ;No
	LEAL	EDX, [ESI+EBX]
	CMPL	EDI, EDX
	JAE	10$.S
        STD                             ;Yes
        LEAL    ESI, -1.B[ESI + EBX]    ;Point to end of source
        LEAL    EDI, -1.B[EDI + EBX]    ;Point to end of destination
	CMPL	EBX, #8.B
	JBE	24$.S
	LEAL	ECX, -3.B[EDI]
	ANDL	ECX, #03.B
	JE	4$.S
	SUBL	EBX, ECX
	RMOVSB	[EDI], [ESI]
4$:	SUBL	ESI, #3.B
	SUBL	EDI, #3.B
	MOVL	ECX, EBX
	SHRL	ECX, #2
	RMOVSL	[EDI], [ESI]
	MOVL	ECX, EBX
	ANDL	ECX, #03.B
	JE	30$.S
	ADDL	ESI, #3.B
	ADDL	EDI, #3.B
        JMP     24$.S			;Join common code

;Here if we want to copy in the forward direction

10$:	CLD                             ;Make sure MOVS copies forward
	CMPL	ECX, #8.B
	JBE	24$.S
        MOVL    ECX, EDI                ;Copy destination address
        NEGL    ECX                     ;Negate so ANDL works correctly
20$:    ANDL    ECX, #3.B               ;Calculate no. of bytes needed
        SUBL    EBX, ECX                ;   for longword alignment
	RMOVSB	[EDI], [ESI]		;Copy 0-3 bytes
        MOVL    ECX, EBX                ;Get the no. of remaining bytes
        SHRL    ECX, #2                 ;Calculate longword count
        RMOVSL  [EDI], [ESI]            ;Move data by longwords
        MOVL    ECX, EBX                ;Calculate the number
        ANDL    ECX, #3.B               ; of bytes left to output
24$:	RMOVSB	[EDI], [ESI]		;Copy 0-3 bytes
30$:	CLD				;Leave D clear to keep Watcom happy!
	POPL	ESI
	POPL	EDI
	RET

	.END

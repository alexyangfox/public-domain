	.TITLE	_fmode - Scan open mode
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 19Sep94  FPJ  Original creation.
; 30Nov94  FPJ  Added O$IN to open mode for write and append.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	_fmode - Function to scan fopen mode strings

;+
; Call:
;	ESI -> Mode string
;
;	CALL	_fmode
;
; Return:
;	EAX =  Error code or 0
;	EBX =  iob bits
;	ECX =  open bits
;-

	.PSECT	_TEXT_p

	.ENTRY	_fmode

_fmode:
	PUSHL	ESI

	CLRL	EAX			;Clear all bits in case we return
					; a success code of zero
	CLD
	MOVL	EBX, #IOB$ASCII		;Assume ASCII file
	CLRL	ECX			;No open bits
	LODSB	[ESI]			;Get first character in AL
	CMPB	AL, #'r'		;Open for read?
	JE	20$.S			;Yes
	MOVL	ECX, #O$TRUNCA		;Assume write
	CMPB	AL, #'w'		;Open for write?
	JE	10$.S			;Yes
	CMPB	AL, #'a'		;Open for append?
	JNE	50$.S			;No, it's an error
	MOVL	ECX, #O$APPEND		;Use append mode (and clear O$TRUNCA)
10$:	ORL	ECX, #O$OUT | O$IN | O$CREATE
					;Allow output & input, create if needed
	ORL	EBX, #IOB$WRITE
	JMP	30$.S			;Continue

; Here if we need to open the file in read mode

20$:	MOVL	ECX, #O$IN		;Allow input
	ORL	EBX, #IOB$READ

; Here to check for binary and update modes - the only forms that
; are allowed here are "", "+", "b", "b+", and "+b".

30$:	LODSB	[ESI]			;Get next character in AL
	CALL	bincheck		;Check for 'b' following mode (and
					; before any '+'
; Here to check for update mode

	CMPB	AL, #'+'		;Update mode?
	JNE	40$.S			;No, check for trailing NUL
	ORL	ECX, #O$IN | O$OUT	;Yes, allow both input and output
	ORL	EBX, #IOB$READ | IOB$WRITE
	LODSB	[ESI]			;Get next character in AL

	TESTL	EBX, #IOB$ASCII		;Have we seen 'b' yet?
	JE	40$.S			;Yes, don't allow another 'b'
	CALL	bincheck		;Check for 'b' following '+'
40$:	TESTB	AL, AL			;Is last character a NUL?
	JE	60$.S			;Yes, exit with EAX = 0 (high 24
					; bits are already zero from above)
50$:	MOVL	EAX, #ER_PARMV		;No, call it an error
60$:	POPL	ESI			;Restore old ESI
	RET

; Here to check for binary mode

bincheck:
	CMPB	AL, #'b'		;Binary mode?
	JNE	80$.S			;No
	ANDL	EBX, #~IOB$ASCII	;Yes, remove ASCII mode
	LODSB	[ESI]			;Get next character in AL
80$:	RET

	.END

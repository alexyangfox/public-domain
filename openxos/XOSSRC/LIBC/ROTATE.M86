	.TITLE	rotate - Functions to rotate a value

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_DATA_p

;Function to rotate an 8 bit value
;  Calling sequence:
;	unsigned char value;	/* Value to rotate */
;	int      amnt;		/* Amount to rotate (+ is right, - left) */
;	unsigned long rotate8(value, amnt);
;  Value returned is rotated value;

	.ENTRY	rotate8
rotate8:MOVZBL	EAX, 4t.B[ESP]		;Get value to rotate (8 bits)
	JMP	2$.S			;Continue

;Function to rotate a 16 bit value
;  Calling sequence:
;	unsigned short value;	/* Value to rotate */
;	int      amnt;		/* Amount to rotate (+ is right, - left) */
;	unsigned long rotate16(value, amnt);
;  Value returned is rotated value;

	.ENTRY	rotate16
rotate16:
	MOVZWL	EAX, 4t.B[ESP]		;Get value to rotate (16 bits)
	JMP	2$.S			;Continue

;Function to rotate a 32 bit value
;  Calling sequence:
;	unsigned long value;	/* Value to rotate */
;	int      amnt;		/* Amount to rotate (+ is right, - left) */
;	unsigned long rotate32(value, amnt);
;  Value returned is rotated value;

	.ENTRY	rotate32
rotate32:
	MOVL	EAX, 4t.B[ESP]		;Get value to rotate (32 bits)
2$:	MOVB	CL, 8t.B[ESP]		;Get amount to rotate
	ORB	CL, CL
	JS	4$.S			;If want to rotate left
	RORL	EAX, CL
	RET

4$:	NEGB	CL
	ROLL	EAX, CL
	RET

	.END

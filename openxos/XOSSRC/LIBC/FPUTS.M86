	.TITLE	fputs - Function to string to IO stream
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	fputs - Function to write block to IO stream

;Function to write block to IO stream
;	const void *str;	/* Pointer to string to output */
;	FILE *stream;		/* Stream pointer */
;	(int)val = fputs(str, stream);
;  Value returned is number of characters output if normal or -1 if
;    error (errno is set)

$$$=!0
FRM fw_rtn, 4t
FRM fw_cnt, 4t
fw_SIZE=!$$$

	.ENTRY	fputs
fputs:	PUSHL	ESI
	PUSHL	EDI
	MOVL	ESI, 12t.B[ESP]		;Get offset of string
	MOVL	EDI, 16t.B[ESP]		;Get stream pointer
	BTL	iob_flag.B[EDI], #IOB%UNBUF ;Unbuffered device?
	JC	10$.S			;Yes
4$:	MOVB	AL, [ESI]		;Get character
	INCL	ESI
	CMPB	AL, #0			;Finished?
	JE	6$.S			;Yes
	PUSHL	EDI			;Output it
	PUSHL	EAX
	CALL	fputc#
	ADDL	ESP, #8.B
	TESTL	EAX, EAX
	JNS	4$.S			;Continue if OK
	JMP	8$.S			;If error

;Here when finished

6$:	SUBL	ESI, 12t.B[ESP]		;Calculate amount output
	MOVL	EAX, ESI
8$:	POPL	EDI
	POPL	ESI
	RET

;Here if have unbuffered device - we do output directly here to minimize the
;  number of system calls needed

10$:	SUBL	ESP, #200t		;Allocate a buffer
	CLRL	EDX
12$:	MOVL	EBX, ESP
	MOVL	ECX, #198t
	CLD
14$:	LODSB	[ESI]
	CMPB	AL, #0
	JE	20$.S
	INCL	EDX
	CMPB	AL, #LF
	JNE	16$.S
	MOVB	[EBX], #CR
	INCL	EBX
	DECL	ECX
16$:	MOVB	[EBX], AL
	INCL	EBX
	DECL	ECX
	JG	14$.S
	CALL	dmpbufr
	JNC	12$.S
18$:	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
	CLRL	EAX
	DECL	EAX
	JMP	22$.S

;Here at end of string

20$:	CALL	dmpbufr
	JC	18$.S
	MOVL	EAX, EDX
22$:	ADDL	ESP, #200t
	POPL	EDI
	POPL	ESI
	RET

;Local subroutine to output our buffer

dmpbufr:LEAL	EAX, 4t.B[ESP]
	SUBL	EBX, EAX
	PUSHL	iob_handle.B[EDI]
	PUSHL	DS
	PUSHL	EAX
	PUSHL	EBX
	CALLF	svcIoOutBlock#
	BTL	EAX, #31t
	RET

	.END

	.TITLE	strtol - ANSI C function to convert long ints
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 15Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	strtol - ANSI C function to convert long ints

;+
; Function: strtol()
;
; Call:
;
;	PUSHL	<radix to convert to>
;       PUSHL	<offset of endstring pointer>
;	PUSHL	<offset of integer string>
;
;	CALL 	strtol
;
; Return:
;
;       EAX =  Binary representation of string
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 4t
p2 =! 8t
p3 =! 12t

LONG_MIN =! 80000000h
LONG_MAX =! 7FFFFFFFh

	.PSECT	_TEXT_p

	.ENTRY	strtol

strtol:
	MOVL	EAX, p1.B[ESP]		;Get offset of source string
	MOVL	EBX, p3.B[ESP]		;Get the base to convert to
	MOVL	ECX, p2.B[ESP]		;Get the end pointer (if any)
	CALL	_strtoul#		;Convert
        CMPL    errno#, #-ER_RANGE	;Did we see a range error?
        JE      20$.S                   ;Yes, don't go further
        TESTL   EBX, EBX                ;Is it supposed to be negative?
        JNS     30$.S                   ;No
        TESTL   EAX, EAX                ;Yes, is it negative?
        JS      40$.S                   ;Yes, that's okay
10$:    MOVL    errno, #-ER_RANGE	;No, so it overflowed
20$:    MOVL    EAX, #LONG_MAX          ;Assume it's positive
        TESTL   EBX, EBX                ;Is it?
        JNS     40$.S                   ;Yes
        MOVL    EAX, #LONG_MIN          ;No, so return min. neg. number
        JMP     40$.S                   ;Now exit

; Here if number is supposed to be positive

30$:    TESTL   EAX, EAX                ;Is it positive?
        JS      10$.S                   ;No, so it overflowed
40$:	RET

	.END

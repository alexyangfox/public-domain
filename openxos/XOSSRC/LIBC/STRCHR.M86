	.TITLE	strchr - ANSI C function to find character in a string
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  1Sep94  FPJ  Optimized code.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	strchr - ANSI C function to find character in a string

;+
; Function: strchr()
;
; Call:
;
;       PUSHL	<character to search for>
;	PUSHL	<offset of search string>
;
;	CALL 	strchr
;
; Return:
;
;       EAX =  Offset of first occurrence of character, or 0 if not found
;	EBX =  Random
;	ECX =  Random
;-

p1 =! 8t
p2 =! 12t

	.PSECT	_TEXT_p

	.ENTRY	strchr

strchr:
	PUSHL	EDI
	CLD

; Calculate length of search string

	MOVL	EDI, p1.B[ESP]		;Get offset of search string
	MOVL	EBX, EDI		;Save it for RNSCASB
	CLRL	EAX			;Look for trailing NUL
	MOVL	ECX, #-1.B		;Use maximum string size
	RNSCASB	[EDI]			;Scan to end of source string
	NOTL	ECX			;Get length (including final null)

; Now look for desired character

	MOVL	EDI, EBX		;Get search string offset again
	MOVL	EAX, p2.B[ESP]		;Get character to search for
	RNSCASB	[EDI]			;Scan for desired character

	LEAL	EAX, -1.B[EDI]		;Return pointer to matching char.
	JZ	10$.S			;If we found the character
	CLRL	EAX			;No match, so return a NUL

10$:	POPL	EDI
	RET

	.END

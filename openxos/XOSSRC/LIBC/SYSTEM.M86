	.TITLE	system - ANSI C function to run command processor
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 18Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.PSECT	_DATA_p

devlist:
        .LONG   DH_STDIN		;src
        .LONG   DH_STDIN		;dst
        .LONG   O$IN                    ;bits
        .LONG   0                       ;xxx

        .LONG   DH_STDOUT		;src
        .LONG   DH_STDOUT		;dst
        .LONG   O$IN | O$OUT            ;bits
        .LONG   0                       ;xxx

        .LONG   DH_STDERR		;src
        .LONG   DH_STDERR		;dst
        .LONG   O$IN | O$OUT            ;bits
        .LONG   0                       ;xxx

        .LONG   DH_STDTRM		;src
        .LONG   DH_STDTRM		;dst
        .LONG   O$IN | O$OUT            ;bits
        .LONG   0                       ;xxx

devend = $
        
	.MOD	4
runparm:
        .BYTE   PAR$SET | REP_STR       ;desp
        .BYTE   0                       ;size
        .WORD   IOPAR_RUNCMDTAIL        ;index
        .LONG   0                       ;buffer
        .WORD   0
        .WORD   0                       ;xxx
        .WORD   0                       ;bfrlen
        .WORD   0                       ;strlen

        .BYTE   PAR$SET | REP_STR       ;desp
        .BYTE   0                       ;size
        .WORD   IOPAR_RUNDEVLIST        ;index
        .LONG   devlist                 ;buffer
        .WORD   0
        .WORD   0                       ;xxx
        .WORD   { devend - devlist }    ;bfrlen
        .WORD   0                       ;strlen

        .BYTE   0                       ;end of list

        .MOD	4
runqab:
	.WORD   RFNC$WAIT | RFNC_RUN    ;qab_func    - Function
        .WORD   0                       ;qab_status  - Returned status
        .LONG   0                       ;qab_error   - Error code
        .LONG   0                       ;qab_amount  - Process ID
        .LONG   0                       ;qab_handle  - Device handle
        .BYTE   0                       ;qab_vector  - Vector for interrupt
        .BYTE   0                       ;qab_xxx1    - Reserved
        .BYTE   0                       ;qab_xxx2    - Reserved
        .BYTE   0                       ;qab_xxx3    - Reserved
        .LONG   R$CHILDTERM             ;qab_option  - Options or command
        .LONG   0                       ;qab_count   - Count
        .LONG   0                       ;qab_buffer1 - Pointer to file spec
	.WORD	0
        .WORD   0                       ;qab_buffer1x
        .LONG   0                       ;qab_buffer2 - Unused
	.WORD	0
        .WORD   0                       ;qab_buffer2x
        .LONG   runparm                 ;qab_parm    - Parameter area
	.WORD	0
        .WORD   0                       ;qab_parmx

shellcmd:
        .ASCII  "XOSCMD:SHELL.RUN "

buffer:
        .BLKB   512                     ;FIXME!

	.SBTTL	system - ANSI C function to run command processor

;+
; Function: system()
;
; Call:
;
;	PUSHL	<command string>
;
;	CALL 	system
;
; Return:
;
;       EAX =  Random
;       EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 12t

	.PSECT	_TEXT_p

	.ENTRY	system

system:
	PUSHL	ESI
	PUSHL	EDI
	MOVSEG	ES, DS			;Copy DS to ES

	MOVL	EDI, p1.B[ESP]		;Point command string
	MOVB	AL, [EDI]		;Get the first byte
	CLRL	EDX			;Assume no escape
	CMPB	AL, #1Bh		;Is it an escape?
	JNE	10$.S			;No
	INCL	EDI			;Yes, so skip it
	INCL	EDX			;Set flag for escape

; Figure out the length of the string

10$:	MOVL	ESI, EDI		;Save pointer to string start
	MOVL	ECX, #-1.B		;Use maximum string size
	CLRL	EAX			;Scan for trailing NUL
	RNSCASB	[EDI]			;Scan to end of string
	NOTL	ECX			;Get length (including final null)
	MOVL	EBX, ECX		;And save it

	LEAL	EDI, buffer		;Point to storage
	RMOVSB	[EDI], [ESI]		;Copy the string

	LEAL	EDI, shellcmd		;Point to start of shell command
	MOVL	ECX, #{buffer - shellcmd} ;Get no. of chrs. in shell command
	TESTL	EDX, EDX		;Is escape flag set?
	JE	20$.S			;No
	LEAL	EDI, buffer		;Yes, point past the shell command
	CLRL	ECX			;No chrs. in string yet

20$:	ADDL	ECX, EBX		;Add in command string length
	DECL	ECX			;But discount the trailing NUL
        MOVW    runparm+12t, CX		;Save the length
        MOVW    runparm+14t, CX		;Save it here also
        MOVL    runparm+4, EDI          ;Save buffer address
        MOVL    runparm+8, DS           ;Save descriptor
	MOVL	runparm+24t, DS		;Save descriptor
        MOVL    runqab+qab_buffer1, EDI ;Save it here also
        MOVL    runqab+qab_buffer1+4, DS ;Save descriptor
        MOVL    runqab+qab_parm+4, DS	;Save descriptor
        PUSHL   DS
        PUSHL   #runqab
        CALLF   svcIoRun#               ;Run the program
        TESTL   EAX, EAX                ;All okay?
        JNE     30$.S                   ;No, so exit now
        MOVL    EAX, runqab+qab_error   ;Get the error code
        TESTL   EAX, EAX                ;All okay?
        JNE     30$.S                   ;No, so exit now
        MOVL    EAX, runqab+qab_amount  ;Get the amount field

30$:	POPL	EDI
	POPL	ESI
	RET

	.END


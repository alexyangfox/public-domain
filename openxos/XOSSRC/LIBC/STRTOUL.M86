	.TITLE	strtoul - ANSI C function to convert integer strings
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 15Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR

	.STDSEGS

	.SBTTL	strtoul - ANSI C function to convert integer strings

;+
; Function: strtoul()
;
; Call:
;
;	PUSHL	<radix to convert to>
;       PUSHL	<offset of endstring pointer>
;	PUSHL	<offset of integer string>
;
;	CALL 	strtoul
;
; Return:
;
;       EAX =  Binary representation of string
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 4t
p2 =! 8t
p3 =! 12t

	.PSECT	_TEXT_p

	.ENTRY	strtoul

strtoul:
	MOVL	EAX, p1.B[ESP]		;Get offset of source string
	MOVL	EBX, p3.B[ESP]		;Get the base to convert to
	MOVL	ECX, p2.B[ESP]		;Get the end pointer (if any)
	;JMP	_strtoul#		;Convert and exit

	.SBTTL	_strtoul - Internal function to convert integer strings

;+
; Function: _strtoul()
;
; Call:
;
;	EAX =  Offset of integer string
;	EBX =  Base to convert to (0 or 2-36)
;	ECX =  Offset of endstring pointer (or 0 if NULL)
;
;	CALL 	_strtoul
;
; Return:
;
;       EAX =  Binary representation of string
;	EBX =  -1 if number was negative, else 0
;	ECX =  Random
;	EDX =  Random
;-

CT$ALNUM =! CT$UPPER | CT$LOWER | CT$DIGIT

sign =! 0t
overflow =! 4t
string =! 8t
endptr =! 12t

MAXBASE =! 36

ULONG_MAX =! 0FFFFFFFFh

	.PSECT	_TEXT_p

	.ENTRY	_strtoul

_strtoul:
	PUSHL	ESI
	PUSHL	EDI
	SUBL	ESP, #16t.B		;Make room for variables
	MOVL	overflow.B[ESP], #0.B	;Assume no overflow
	CLD

	MOVL	endptr.B[ESP], ECX	;Save end pointer
	MOVL	string.B[ESP], EAX	;Save pointer to source string
	MOVL	ESI, EAX		;Point to source string
	CLRL	EAX			;Assume we return zero
	CLRL	ECX			;Clear register for MOVBs below
	CMPL	EBX, #1.B		;Base 1?
	JE	40$.S			;Yes, that's silly, so quit
	CMPL	EBX, #MAXBASE		;More than base 36?
	JA	40$.S			;Yes, that's silly too

; Skip past whitespace characters in string

10$:	MOVB	CL, [ESI]		;Get first character
	INCL	ESI			;Skip to next
	TESTL	ECX, ECX		;End of string?
	JE	40$.S			;Yes, so quit with EAX = 0
	TESTB	_chrtbl#[ECX], #CT$SPACE ;Whitespace character?
	JNE	10$.S			;Yes, keep looping

; Check to see if we have a plus or minus for sign

	MOVL	sign.B[ESP], #-1.B    	;Assume negative number
	CMPL	ECX, #'-'		;Correct?
	JE	20$.S			;Yes
	MOVL	sign.B[ESP], #0.B  	;No, must be positive number
	CMPL	ECX, #'+'		;Do we need to eat a plus sign?
	JNE	30$.S			;No, so don't
20$:	MOVB	CL, [ESI]		;Yes - get chr. following sign chr.
	INCL	ESI			;Point to next

; Check for special radix of zero

30$:	TESTL	EBX, EBX		;Was base zero?
	JNE	60$.S			;No
	CMPL	ECX, #'0'		;Yes - was first digit zero?
	JE	50$.S			;Yes, it's either octal or hex.
	JB	40$.S			;No, it's got to be bad
	MOVL	EBX, #10t.B		;Assume decimal
	CMPL	ECX, #'9'		;Was it 1-9?
	JBE	70$.S			;Yes
40$:	MOVL	ESI, string.B[ESP]	;Point to start of source string
	JMP	150$			;And exit

; Here if special radix and first non-whitespace character was a '0'

50$:	MOVB	CL, [ESI]		;See if 'x' or 'X' followed '0'
	INCL	ESI			;Skip to next
	MOVL	EBX, #16t.B		;Assume hexadecimal
	CMPL	ECX, #'x'		;Was it 0x?
	JE	80$.S			;Yes
	CMPL	ECX, #'X'		;Was it 0X?
	JE	80$.S			;Yes
	MOVL	EBX, #8t.B		;No, 0 means octal then
	JMP	70$.S			;Continue below

; Here if not special radix, to see if radix is hexidecimal

60$:	CMPL	EBX, #16t.B		;Is radix 16?
	JNE	70$.S			;No
	CMPL	ECX, #'0'		;Is next character zero?
	JNE	70$.S			;No
	MOVB	CL, [ESI]		;Yes, see if next is 0x or 0X
	INCL	ESI			;Point to next character
	CMPL	ECX, #'x'		;Was it 0x?
	JE	80$.S			;Yes
	CMPL	ECX, #'X'		;Was it 0X?
	JE	80$.S			;Yes

; Here to start the scan of the subject sequence

70$:	DECL	ESI			;Back off to last character
80$:	MOVL	EDI, ESI		;Save pointer to start of string

; Here to skip past any leading zeroes

90$:	MOVB	CL, [ESI]   		;See if current character is zero
	INCL	ESI			;Point to next
	CMPL	ECX, #'0'		;Is it a zero?
	JE	90$.S			;Yes, so discard it

; Here when we see the first non-zero character in the string

100$:	TESTL	ECX, ECX		;All done?
	JE	140$.S			;Yes
	TESTB	_chrtbl#[ECX], #CT$ALNUM ;Alphanumeric character?
	JE	140$.S			;No, so we're all done
	TESTB	_chrtbl#[ECX], #CT$DIGIT ;Decimal digit (0-9)?
	JNE	120$.S			;Yes
	TESTB	_chrtbl#[ECX], #CT$UPPER ;Uppercase letter?
	JNE	110$.S			;Yes
	SUBL	ECX, #'a' - 'A'		;No, lowercase - make it uppercase
110$:	SUBL	ECX, #'A' - '9' - 1	;Make A-Z contiguous with 0-9
120$:	SUBL	ECX, #'0'		;Subtract ASCII bias for 0-35
	CMPL	ECX, EBX		;Is it too big for base?
	JAE	140$.S			;Yes, so we're done
	MULL	EBX			;Make room for another character
	JNC	130$.S			;Okay
	MOVL	overflow.B[ESP], #-1t.B	;Overflow, so save indication
130$:	ADDL	EAX, ECX		;Add in the next "digit"
	MOVB	CL, [ESI]		;Get another character
	INCL	ESI			;Point to next
	JMP	100$.S			;And continue
	
; Here when done scanning the subject sequence

140$:	DECL	ESI			;Back off to current character
	CMPL	EDI, ESI		;Did we scan anything?
	JE	40$			;No, so it's an invalid sequence
	MOVL	EBX, sign.B[ESP]  	;Get the sign
	TESTL	EBX, EBX		;Is it negative?
	JNS	145$.S			;No
	NEGL	EAX			;Yes, so negate the result
145$:	MOVL	EDX, overflow.B[ESP]	;Get the overflow indication
	TESTL	EDX, EDX		;Did we overflow?
	JE	150$.S			;No
	MOVL	errno#, #-ER_RANGE	;Indicate we overflowed
	MOVL	EAX, #ULONG_MAX		;Use maximum possible unsigned long

; Here when all done

150$:	MOVL	EDX, endptr.B[ESP] 	;Get the end pointer
	TESTL	EDX, EDX		;Is it a NULL pointer?
	JE	190$.S			;Yes
	MOVL	[EDX], ESI		;No, return pointer to last valid chr.

190$:	ADDL	ESP, #16t.B
	POPL	EDI
	POPL	ESI
	RET

	.END

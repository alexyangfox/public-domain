	.TITLE	memchr - ANSI C function to search a memory region
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 30Aug94  FPJ  Added check for zero count.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	memchr - ANSI C function to search a memory region

;Calling sequence:
;	char *rtn = memchr(
;		char *addr,		// First address to compare
;		int   val,		// Value to check for
;		int   len);		// Number of bytes to check
;  Value returned is address of byte found or NULL if not found

p1 =! 8t
p2 =! 12t
p3 =! 16t

	.PSECT	_TEXT_p

	.ENTRY	memchr
memchr:	PUSHL	ESI
	CLD
	MOVL	ESI, p1.B[ESP]		;Get offset of string
	MOVB	AH, p2.B[ESP]		;Get byte to search for
	MOVL	ECX, p3.B[ESP]		;Get no. of bytes to search
        TESTL	ECX, ECX                ;Is count zero?
        JE      20$.S                   ;Yes, quit now       
10$:	LODSB	[ESI]			;Get character
	CMPB	AL, AH			;This one?
	JE	30$.S			;Yes
        LOOP    ECX, 10$                ;Loop for all bytes
20$:	CLRL	EAX			;Not found -- return NULL
        JMP     40$.S                   ;And exit

;Here with character found

30$:	LEAL	EAX, -1.B[ESI]		;Get offset of character to return

40$:	POPL	ESI
	RET

	.END

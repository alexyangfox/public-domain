	.TITLE	memset - ANSI C function to initialize a memory region
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 30Aug94  FPJ  Fixed code to return pointer in EAX.
; 14Aug94  FPJ  Optimized code to copy longwords if possible.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	memset - ANSI C function to initialize a memory region

;+
; Function: memset()
;
; Call:
;       PUSHL   <no. of bytes to move>
;       PUSHL   <fill character - lower 8 bits>
;       PUSHL   <offset of region>
;
;       CALL    memset
;
; Return:
;       EAX -> Destination region
;       EBX =  Random
;       ECX =  Random
;       EDX =  Random
;       ES  =  Random
;-

p1 =! 8t
p2 =! 12t
p3 =! 16t

	.PSECT	_TEXT_p

	.ENTRY	memset

memset:
	PUSHL	EDI
	MOVSEG	ES, DS			;Copy DS to ES
	CLD

	MOVL	EDI, p1.B[ESP]		;Get offset of destination string
	MOVL	EDX, EDI		;Save it for later
	MOVB	AL, p2.B[ESP]		;Get character to set
	MOVL	EBX, p3.B[ESP]		;Get amount to copy

        CMPL	EBX, #3.B		;Less than a longword to copy?
        JBE     10$.S                   ;Yes, just copy it and quit
        MOVL    ECX, EDI                ;Get destination address
        NEGL    ECX                     ;Get 2's complement so that
        ANDL    ECX, #3.B               ; we can figure no. of bytes
        SUBL    EBX, ECX                ;  needed for longword alignment
	RSTOSB	[EDI]			;Copy 0-3 bytes

; Copy the low byte through the upper 3 bytes (so RMOVSL will work right)

	MOVB	AH, AL			;Replicate low 8 bits in next 8 bits
	MOVL	ECX, EAX		;Copy to spare register
	SHLL	EAX, #16t.B		;Move low 16 bits to high 16 bits
	MOVW	AX, CX			;Now copy low 16 bits from spare

; Now copy longwords of data

        MOVL    ECX, EBX                ;Get the no. of remaining bytes
        SHRL    ECX, #2.B		;Calculate longword count
        RSTOSL  [EDI]			;Move data by longwords
10$:    MOVL    ECX, EBX                ;Calculate the number
        ANDL    ECX, #3.B               ; of bytes left to output
	RSTOSB	[EDI]			;Copy 0-3 bytes
        MOVL    EAX, EDX                ;Get pointer in right register

	POPL	EDI
	RET

	.END

	.TITLE	setjmp - ANSI C functions for non-local jumps
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 15Sep94  FPJ  Optimized code.
;-

	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\SETJMP.PAR

	.STDSEGS

	.SBTTL	setjmp - ANSI C function to set up for long jump

;+
; Function: setjmp()
;
; Call:
;
;       PUSHL	<environment block>
;
;	CALL 	setjmp
;
; Return:
;
;	EAX =  0
;	EBX =  Random
;-

p1 =! 4t

	.PSECT	_TEXT_p

	.ENTRY	setjmp

setjmp:
	MOVL	EBX, p1.B[ESP]		;Get offset of his buffer
	PUSHFL
	POPL	longjmp_EFR.B[EBX]	;Save EFR
	MOVL	longjmp_EBP.B[EBX], EBP	;Save EBP
	POPL	longjmp_EIP.B[EBX]	;Save EPC
	MOVL	[EBX], ESP		;Save ESP
	MOVL	longjmp_EDI.B[EBX], EDI ;Save EDI
	MOVL	longjmp_ESI.B[EBX], ESI ;Save ESI
	CLRL	EAX			;Return 0
	JMPIL	longjmp_EIP.B[EBX]

	.SBTTL	longjmp - ANSI C function to do non-local jump

;+
; Function: longjmp()
;
; Call:
;
;	PUSHL	<code to return - must be non-zero>
;       PUSHL	<environment block>
;
;	CALL 	longjmp
;
; Return:
;
;	EAX =  Non-zero code (return is to setjmp)
;	EBX =  Random
;-

	.PSECT	_TEXT_p

p1 =! 4t
p2 =! 8t

	.ENTRY	longjmp

longjmp:
	MOVL	EBX, p1.B[ESP]		;Get offset of his buffer
	MOVL	EAX, p2.B[ESP]		;Get his data item
	TESTL	EAX, EAX		;Is it 0?
	JNE	10$.S			;No
	INCL	EAX			;Yes - make it 1
10$:	MOVL	ESP, [EBX]		;Restore his stack
	MOVL	EDI, longjmp_EDI.B[EBX]	;Restore EDI
	MOVL	ESI, longjmp_ESI.B[EBX] ;Restore ESI
	MOVL	EBP, longjmp_EBP.B[EBX] ;Restore EBP
	PUSHL	longjmp_EFR.B[EBX]	;Restore EFR
	POPFL
	JMPIL	longjmp_EIP.B[EBX]	;Return to the saved EIP

	.END

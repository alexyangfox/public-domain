	.TITLE	div - ANSI C functions to divide two numbers
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 14Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	div - ANSI C function to divide two ints
	.SBTTL	ldiv - ANSI C function to divide two longs

;+
; Function: div(), ldiv()
;
; Call:
;
;       PUSHL	<denominator>
;       PUSHL	<numerator>
;
;	ESI -> Storage for result
;
;	CALL 	div
;
;	-OR-
;
;       PUSHL	<denominator>
;       PUSHL	<numerator>
;
;	ESI -> Storage for result
;
;	CALL	ldiv
;
; Return:
;
;       EAX =  Random
;	EBX =  Random
;	EDX =  Random
;-


p1 =! 4t
p2 =! 8t

quot =! 0t
rem =! 4t

	.PSECT	_TEXT_p

	.ENTRY	div, ldiv

div:
ldiv:
	MOVL	EAX, p1.B[ESP]		;Get the numerator
	MOVL	EBX, p2.B[ESP]		;Get the denominator
	TESTL	EBX, EBX		;Is denominator zero?
	JNE     10$.S                   ;No
        CLRL    EAX                     ;Yes, return all zeroes
        CLRL    EDX
        MOVL    errno#, #-ER_MATH	;Call it a domain error
        JMP     20$.S                   ;And exit

; Here if not dividing by zero

10$:    CLQ				;Sign-extend the high order 32 bits
        IDIVL   EBX			;Divide by divisor

; Here to store quotient and remainder and exit

20$:	MOVL	quot.B[ESI], EAX	;Store quotient
	MOVL	rem.B[ESI], EDX		;Store remainder

	RET

	.END

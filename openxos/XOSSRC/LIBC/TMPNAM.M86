	.TITLE	tmpnam - ANSI C function to create temporary file name
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 22Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

L_tmpnam =! 512

	.PSECT	_DATA_p

	.SBTTL	tmpnam - ANSI C function to create temporary file name

;+
; Function: tmpnam()
;
; Call:
;
;	PUSHL	<place to store name, or NULL>
;
;	CALL 	tmpnam
;
; Return:
;	EAX =  Random
;	EBX =  Random
;-

p1 =! 4t

	.PSECT	_DATA_p

filename:
	.ASCIZ	"XXXXXXXX.TMP"

	.PSECT	_TEXT_p

filechars:
	.ASCII	"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

	.ENTRY	tmpnam

tmpnam:
	PUSHL	EDI

	SUBL    ESP, #8t                ;Make room for returned data
	MOVL	EAX, ESP
        PUSHL   #11t			;Specify high res. date/time
        PUSHL   SS			;Specify place to store info
        PUSHL   EAX
        CALLF   svcSysDateTime#         ;Get the info
	POPL    EBX			;Get the low order
	POPL	EDX			;Get the high order
        MOVL    ECX, EAX                ;Copy the error code
        TESTL   ECX, ECX                ;Any error?
        JNS	10$.S			;No, continue
        CLRL	EAX			;Indicate failure
	NEGL	ECX			;Make positive for errno
        MOVL    errno#, ECX             ;Store error code
	JMP	90$.S			;And exit

; Here if no error getting date and time

10$:	LEAL	EDI, filename
	ADDL	EDI, #7t		;Point to end of name
	STD				;Store in reverse
	RORL	EBX, #2			;Skip low order 2 bits

	MOVL	ECX, #6t		;Get 6 digits from low order
20$:	MOVL	EAX, EBX
	ANDL	EAX, #01fh		;Isolate low 5 bits
	RORL	EBX, #5			;Shift down another 5 bits
	ADDL	EAX, #filechars		;Point to character we want
	MOVB	AL, [EAX]		;And retrieve it
	STOSB	[EDI]			;Now store it
	LOOP	ECX, 20$		;Loop for all

	MOVL	ECX, #2t		;Get two digits for high order
30$:	MOVL	EAX, EDX
	ANDL	EAX, #01fh		;Isolate low 5 bits
	RORL	EDX, #5			;Shift down another 5 bits
	ADDL	EAX, #filechars		;Point to character we want
	MOVB	AL, [EAX]		;And retrieve it
	STOSB	[EDI]			;Now store it
	LOOP	ECX, 30$		;Loop for all
	LEAL	EAX, filename

90$:	POPL	EDI
	RET

	.END

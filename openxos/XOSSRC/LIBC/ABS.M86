	.TITLE	abs - ANSI C functions to return absolute value
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 14Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	abs - ANSI C function to return absolute value
	.SBTTL	labs - ANSI C function to return absolute value

;+
; Function: abs(), labs()
; Call:
;	int abs(int value);
;	long labs(long value);
; Return:
;	Absolute value of argument;
; Notes:
;	The code below has the benefit of obtaining the absolute value
;	of a number without doing any branching, and therefore being
;	faster than the run-of-the-mill approach. The main thing to
;	observe is that when the number is positive, its sign will be
;	zero, EDX will therefore be zero, and the XOR and SUB will do
;	nothing. If the number is negative, EDX will be -1, the XOR
;	will act the same as a NOT (one's complement) on EAX, and the
;	SUB will correct to two's complement, all of which is the same
;	as a NEGL.
;
;	We get away with using the same code below for both abs() and
;	labs(), since we know that ints and longs are both 32 bits.
;-

p1 =! 4t

	.PSECT	_TEXT_p

	.ENTRY	abs, labs

abs:
labs:
	MOVL	EAX, p1.B[ESP]		;Get the value
	TESTL	EAX, EAX		;Is it negative?
	JNS     10$.S                   ;No
        NEGL    EAX                     ;Yes, negate it
        JNO     10$.S                   ;No overflow
        MOVL    errno#, #-ER_MATH	;Overflow, set error code
10$:	RET

	.END

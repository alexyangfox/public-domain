	.TITLE	errmsg - Function to construct/display general error message
	.SBTTL	Run-time library for XC for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\ERRMSG.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	errmsg - Function to construct/display general error message

;Function to construct/display general error message
;  Message generated is of one of two formats:
;   If msg1 is null:
;	? progname: {ERCOD} Error message text: msg2 text
;   If msg1 is not null:
;	? progname: msg1 text
;		    {ERCOD} Error message text: msg2 text
;   msg2 may also be null, in which case no colon follows the error message
;   text.  Most parts of the format are optional and are controlled by bits
;   in the bits argument:
;	0x0001	Include initial NL
;	0x0002	Include initial ?
;	0x0004	Include initial %
;	0x0008	Include program name
;	0x0010	Include error code
;	0x0020	Include error message text
;	0x0040	Include final NL
;	0x8000	Terminate after displaying message
;   If the buffer argument is NULL, the message is output to stdout, otherwise
;   it is stored in buffer, which must allow space for at least 180 characters.
;	int   bits;		// Function bits
;	char *buffer;		// Buffer to receive message
;	long  code;		// Error code
;	char *msg1;		// First message string
;	char *msg2;		// Second message string
;	errmsg(bits, buffer, code, msg1, msg2);
;    Nothing is returned.

$$$=!0
FRM em_begin , 4t
FRM em_errbfr, 80t
em_SIZE1=!$$$
FRM em_msgbfr, 180t
em_SIZE2=!$$$

	.ENTRY	errmsg
errmsg:	ENTER	em_SIZE1, 0
	PUSHL	ESI
	PUSHL	EDI
	PUSHL	DS
	POPL	ES
	CLD
	MOVL	EDX, 8t.B[EBP]		;Get function bits
	MOVL	EDI, 12t.B[EBP]		;Get offset of his buffer
	TESTL	EDI, EDI		;Did he specify one?
	JNE	4$.S			;Yes
	SUBL	ESP, #em_SIZE2-em_SIZE1	;No
	LEAL	EDI, em_msgbfr[EBP]	;Use a local buffer
4$:	MOVL	em_begin.B[EBP], EDI
	BTL	EDX, #EM%INL		;Want initial new line?
	JNC	6$.S			;No
	MOVB	[EDI], #LF		;Yes
	INCL	EDI
6$:	TESTB	DL, #EM$IQM|EM$IPC	;Want initial character?
	JE	10$.S			;No
	MOVB	[EDI], #'?'		;Yes - assume want ?
	TESTB	DL, #EM$IQM		;Right?
	JNE	8$.S			;Yes
	MOVB	[EDI], #'%'		;No
8$:	INCL	EDI
	MOVB	[EDI], #' '
	INCL	EDI
10$:	TESTB	DL, #EM$NAME		;Want program name?
	JE	12$.S			;No
	MOVL	ESI, #prgname#		;Yes
	CALL	errmov
	MOVW	[EDI], #': '
	ADDL	EDI, #2.B
12$:	MOVL	ESI, 20t.B[EBP]
	TESTL	ESI, ESI
	JE	14$.S
	MOVL	EBX, EDI
	SUBL	EBX, em_begin.B[EBP]
	CALL	errmov
	MOVB	[EDI], #LF
	INCL	EDI
	MOVL	ECX, EBX
	JREGZ	ECX, 14$
	MOVB	AL, #' '
	RSTOSB	[EDI]
14$:	CLRL	EAX
	BTL	EDX, #EM%CODE
	ADCL	EAX, #0.B
	ADDL	EAX, EAX
	BTL	EDX, #EM%TEXT
	ADCL	EAX, #0.B
	PUSHL	16t.B[EBP]		;Get error message text
	PUSHL	EAX

;;;	LEAL	EAX, em_errbfr.B[EBP]
;;;	PUSHL	SS
;;;	PUSHL	EAX

	PUSHL	DS
	PUSHL	EDI
	CALLF	svcSysErrMsg#
	ADDL	EDI, EAX
	MOVL	ESI, 24t.B[EBP]		;Have second message string?
	TESTL	ESI, ESI
	JE	18$.S
	MOVW	[EDI], #': '
	ADDL	EDI, #2t.B
	CALL	errmov
18$:	TESTB	DL, #EM$FNL		;Want final new line?
	JE	20$.S			;No
	MOVB	[EDI], #LF		;Yes
	INCL	EDI
20$:	MOVB	[EDI], #0
	CMPL	12t.B[EBP], #0.B	;Do we need to do output?
	JNE	24$.S			;No
	PUSHL	#_stderr#		;Yes
	LEAL	EAX, em_msgbfr[EBP]
	PUSHL	EAX
	CALL	fputs#
	ADDL	ESP, #8t.B
24$:	TESTB	9t.B[EBP], #EM$EXIT>8t
	JNE	26$.S			;Yes
	POPL	EDI
	POPL	ESI
	LEAVE
	RET

;Here if want to exit

26$:	PUSHL	#1.B
	CALL	exit#

;Subroutine to move error string
;	c{EDI} = Offset of destination
;	c{ESI} = Offset of source
;	CALL	errmov
;	c{EDI} = Offset of byte after destination

errmov:	MOVL	ECX, #-1
	CLRL	EAX
	PUSHL	EDI
	MOVL	EDI, ESI
	RNSCASB	[EDI]			;Scan to end of string
	POPL	EDI
	NOTL	ECX			;Get length (including final null)
	DECL	ECX
	RMOVSB	[EDI], [ESI]		;Copy the string
	RET				;Return

	.END

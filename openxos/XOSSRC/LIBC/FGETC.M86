	.TITLE	fgetc - Function to input single character from stream
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	fgetc - Function to input single character from stream

;Function to input single character from stream
;	FILE *stream;		/* Stream pointer */
;	(int)val = fgetc(stream);
;  Value returned if -1 if error (errno is set) or character (0 filled to 32
;    bits) if normal

	.ENTRY	fgetc
fgetc:	PUSHL	ESI
	MOVL	ESI, 8t+0t.B[ESP]	;Get stream pointer
$fgetc::MOVL	EAX, iob_count.B[ESI]	;Have data in buffer now?
	DECL	EAX
	CMPL	EAX, iob_end.B[ESI]
	JL	10$.S			;No
	DECL	iob_count.B[ESI]	;Yes - reduce count
	MOVL	EBX, iob_pnt.B[ESI]	;Get the data
	INCL	iob_pnt.B[ESI]
	MOVZBL	EAX, [EBX]
6$:	CMPB	AL, #CR			;Is this a carrage-return?
	JNE	8$.S			;No
	BTL	iob_flag.B[ESI], #IOB%ASCII ;Yes - ASCII file?
	JC	$fgetc.S		;Yes - discard the carrage-return
8$:	POPL	ESI
	RET

;Here if data is not in the buffer

10$:	BTL	iob_flag.B[ESI], #IOB%UNBUF ;Unbuffered device?
	JNC	20$.S			;No
	CMPL	iob_ungetc.B[ESI], #0.B	;Yes - have ungotten character?
	JS	14$.S			;No
	MOVL	EAX, iob_ungetc.B[ESI]	;Yes - get it
	MOVL	iob_ungetc.B[ESI], #-1
12$:	POPL	ESI
	RET				;Return with it

;Here if don't have ungotten character for unbuffered device

14$:	PUSHL	iob_handle.B[ESI]	;Get a character
	CALLF	svcIoInSingle#
	TESTL	EAX, EAX
	JNS	6$.S			;If OK, return with the character
16$:	JMP	$errorrtnp1x#

;Here if have a buffered device

20$:	TESTL	EAX, EAX		;Really at end of the block?
	JGE	22$.S			;No - must be at EOF
	MOVL	iob_count.B[ESI], #0	;Yes
	CALL	$nextblk#		;Get next buffer full
	JC	16$.S			;If error
	MOVL	EAX, iob_count.B[ESI]
	CMPL	EAX, iob_end.B[ESI]
	JG	$fgetc.S		;If have more data to get
22$:	MOVL	EAX, #ER_EOF		;If EOF
	JMP	16$.S

	.END

	.TITLE	atexit - ANSI C function to register exit functions
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  8Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.STDSEGS

	.SBTTL	atexit - ANSI C function to register exit functions

;+
; Function: atexit()
;
; Call:
;
;       PUSHL	<offset of function to register>
;
;	CALL 	atexit
;
; Return:
;
;	EAX =  Zero if success, non-zero if failure
;	EBX =  Random
;	ECX =  Random
;-

	.PSECT	_DATA_p

MAXATS = 32				;Max. no. of functions to register

	.ENTRY	_atcount, _atfuns

_atcount:
	.LONG	0			;No. of registered functions

_atfuns:
	.BLKL	MAXATS

p1 =! 4t

	.PSECT	_TEXT_p

	.ENTRY	atexit

atexit:
	MOVL	EAX, #-1.B		;Assume failure
	MOVL	ECX, _atcount		;Get no. of registered functions
	CMPL	_atcount, #MAXATS	;Too many?
	JAE	10$.S			;Yes, so quit
	LEAL	EBX, _atfuns[ECX*4]	;Point to current storage slot
	INCL	ECX			;Bump to next slot
	MOVL	_atcount, ECX		;And save it for next time
	MOVL	EAX, p1.B[ESP]		;Get the function offset
	MOVL	[EBX], EAX		;And store it
	CLRL	EAX			;Now return success
10$:	RET

	.END


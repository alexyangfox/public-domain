	.TITLE	memcmp - ANSI C function to compare memory regions
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 30Aug94  FPJ  Fixed code to set up ES.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	memcmp - ANSI C function to compare memory regions

;+
; Function: memcmp()
;
; Call:
;       PUSHL   <no. of bytes to search>
;       PUSHL   <offset of 2nd region>
;       PUSHL   <offset of 1st region>
;
;       CALL    memcmp
;
; Return:
;       EAX =  Difference of first non-equal bytes
;       ECX =  Random
;       ES  =  Random
;-

p1 =! 12t
p2 =! 16t
p3 =! 20t

	.PSECT	_TEXT_p

	.ENTRY	memcmp

memcmp:
	PUSHL	ESI
	PUSHL	EDI
	MOVSEG	ES, DS			;Copy DS to ES
	CLD

	MOVL	EDI, p1.B[ESP]		;Get offset of first region
	MOVL	ESI, p2.B[ESP]		;Get offset of second region
	MOVL	ECX, p3.B[ESP]		;Get no. of bytes to compare
	CLRL	EAX                     ;Assume regions are identical
        TESTL	ECX, ECX                ;Zero?
        JE      10$.S                   ;Yes, quit now
	RECMPSB	[EDI], [ESI]		;Compare the blocks
	JE	10$.S			;If identical
	MOVXBL	EAX, -1.B[EDI]		;Different - get difference of last byte
	MOVXBL	EDX, -1.B[ESI]
	SUBL	EAX, EDX

10$:	POPL	EDI
	POPL	ESI
	RET

	.END

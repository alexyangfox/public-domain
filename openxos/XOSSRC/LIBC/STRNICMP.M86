	.TITLE	strnicmp - Function to compare two strings ignoring case
	.SBTTL	Run-time library for XC for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	strnicmp - Function to compare two strings ignoring case

;Function to compare two strings ignoring case
;	const char *stra;	/* Pointer to first string */
;	const char *strb;	/* Pointer to second string */
;	int   max;		/* Maximum number of character to compare */
;	(int)val = strnicmp(stra, strb)
;  Value returned is the difference of first not-equal character (0 if
;    strings are the same)

	.ENTRY	strnicmp
strnicmp:
	PUSHL	ESI
	MOVL	ESI, 8t.B[ESP]		;Get offset of first string
	MOVL	EBX, 12t.B[ESP]		;Get offset of second string
	MOVL	ECX, 16t.B[ESP]		;Get maximum amount to compare
	CLD
	CLRL	EAX
	CLRL	EDX
2$:	LODSB	[ESI]			;Get character from first string
	TESTB	_chrtbl#[EAX], #CT$LOWER
	JE	4$.S
	SUBB	AL, #20h
4$:	MOVB	DL, [EBX]
	INCL	EBX
	TESTB	_chrtbl#[EDX], #CT$LOWER
	JE	6$.S
	SUBB	DL, #20h
6$:	SUBB	AL, DL
	JNE	10$.S			;If different
	CMPB	DL, #0			;Same - end of string?
	LOOPNE	ECX, 2$			;Continue if not end and more to check
	CLRL	EAX			;No more to check or end - return equal
	POPL	ESI
	RET

;Here if strings are different

10$:	MOVXBL	EAX, AL			;Sign extend the difference
	POPL	ESI
	RET

	.END

	.TITLE	strtok - ANSI C function to find token in a string
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  4Sep94  FPJ  Optimized code.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.PSECT	_DATA_p

nexttoken:.LONG	0		;Offset at which to start search

	.SBTTL	strtok - ANSI C function to find token in a string

;+
; Function: strtok()
;
;	The delimiter after the token is replaced with NUL and the pointer
;	to the next character is remembered and used if called with the
;	token pointer equal to NULL.
;
; Restrictions:
;
;	This function uses static memory and is NOT re-entrant!
; Call:
;
;       PUSHL	<offset of token string>
;	PUSHL	<offset of search string>
;
;	CALL 	strtok
;
; Return:
;
;	EAX -> Offset of first token or NULL if token is not found.
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 12t
p2 =! 16t

	.PSECT	_TEXT_p

	.ENTRY	strtok

strtok:
	PUSHL	ESI
	PUSHL	EDI

	CLRL	EDX			;Assume we will return NULL
	MOVL	ESI, p1.B[ESP]		;Get offset of search string
	TESTL	ESI, ESI		;Was one specified?
	JNE	10$.S			;Yes - go on
	MOVL	ESI, nexttoken		;No - get next token offset
	TESTL	ESI, ESI		;Do we have one?
	JE	40$.S			;No - we are finished (Note: EDX=0)

; Get length of token string

10$:	CLD
	MOVSEG	ES, DS			;Copy DS to ES
	MOVL	EDI, p2.B[ESP]		;Get offset of token string
	MOVL	ECX, #-1		;Get length of token string
	CLRL	EAX
	RNSCASB	[EDI]			;Scan to end of string
	NOTL	ECX			;Get length (excluding trailing NUL)
	DECL	ECX
	MOVL	EBX, ECX

; First find a character in search string not in token string

20$:	LODSB	[ESI]			;Get character from search string
	TESTB	AL, AL			;End of string?
	JE	40$.S			;Yes (Note: EDX=0)
	MOVL	EDI, p2.B[ESP]		;No - search the token string
	MOVL	ECX, EBX		;Get length of token string
	RNSCASB	[EDI]
	JE	20$.S			;Continue if found in token string

; Now find first following chr. in search string which is in token string

	LEAL	EDX, -1.B[ESI]		;Remember start of token
30$:	LODSB	[ESI]			;Get character from search string
	TESTB	AL, AL			;End of string?
	JE	40$.S			;Yes
	MOVL	EDI, p2.B[ESP]		;No - search the token string
	MOVL	ECX, EBX
	RNSCASB	[EDI]
	JNE	30$.S			;Continue if not found
	MOVB	-1.B[ESI], #0		;Found it - replace it with null
	MOVL	nexttoken, ESI		;Save offset to use next time
	JMP	50$.S			;Exit with pointer to token

;+
; Here if no non-delimiter character found (EDX = 0)
;
;	-OR-
;
; Here if no delimiter character found after token (EDX != 0)
;-

40$:	CLRL	EAX
	MOVL	nexttoken, EAX		;Ensure we return NULL next time
					; unless we have a new search string
50$:	MOVL	EAX, EDX		;Return start of this token

60$:	POPL	EDI
	POPL	ESI
	RET

	.END

	.TITLE	strchr - ANSI C function to find a sub-string
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  4Sep94  FPJ  Optimized code.
; 21Nov94  FPJ  Fixed bug in match XOSorithm.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	strchr - ANSI C function to find a sub-string

;+
; Function: strstr()
;
; Call:
;
;       PUSHL	<offset of string to search for>
;	PUSHL	<offset of target string>
;
;	CALL 	strstr
;
; Return:
;
;       EAX =  Offset of sub-string found, or 0 (NULL) if not found
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 12t
p2 =! 16t

	.PSECT	_TEXT_p

	.ENTRY	strstr

strstr:
	PUSHL	ESI
	PUSHL	EDI
	CLD

; Calculate length of search string

	MOVL	ESI, p2.B[ESP]		;Get offset of search string
	LODSB	[ESI]			;Get first character in AL
	MOVL	EDI, ESI		;Copy pointer to rest of string
	CALL	getlen			;Get its length
	MOVL	EDX, ECX		;Save length minus 1st chr.

; Calculate length of target string

	MOVL	EDI, p1.B[ESP]		;Get offset of target string
	CALL	getlen			;Get its length in ECX
	CLRL	EBX			;Assume we will fail and return 0

; Scan target string for first character (in EAX) of search string

10$:	RNSCASB	[EDI]			;Find first chr. of search string
	JNZ	20$.S			;Not found, so quit with EBX = 0

; First character matched - now try comparing rest of search string.
;  Note we will fall through the JNZ if there is only one character
;  in the search string.

	PUSHL	ESI			;Save search string pointer
	PUSHL	EDI			;Save target string pointer
	PUSHL	ECX			;Save remaining target string count
	MOVL	ECX, EDX		;Match remaining len. of search string
	RECMPSB	[EDI], [ESI]		;Do remaining characters match?
	POPL	ECX			;Restore count
	POPL	EDI			;Restore target string pointer
	POPL	ESI			;Restore search string pointer
	JNZ	10$.S			;Not a match - keep searching

; Search succeeded - return pointer to start of what we found

	LEAL	EBX, -1.B[EDI]		;Point to start of search string
20$:	MOVL	EAX, EBX		;Copy pointer or NULL
	POPL	EDI
	POPL	ESI
	RET

;+
; Call:
;
;       EDI -> Offset of string
;
;	CALL 	getlen
;
; Return:
;
;       ECX =  Length of string, excluding trailing NUL
;	EDI -> Offset of string (same as passed)
;-

getlen:	PUSHL	EAX
	PUSHL	EDI
	CLRL	EAX			;Look for trailing NUL
	MOVL	ECX, #-1.B		;Use maximum string size
	RNSCASB	[EDI]			;Scan to end of source string
	NOTL	ECX			;Get no. of chrs. in string (plus NUL)
	DECL	ECX			;Now ignore the NUL
	POPL	EDI
	POPL	EAX
	RET

	.END

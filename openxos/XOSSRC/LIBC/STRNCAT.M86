	.TITLE	strncat - ANSI C function to concatenate strings
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  1Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	strncat - ANSI C function to concatenate strings

;+
; Function: strncat()
;
; Call:
;
;       PUSHL	<maximum characters to copy>
;       PUSHL	<offset of source string>
;	PUSHL	<offset of destination string>
;
;	CALL 	strncat
;
; Return:
;
;       EAX =  Offset of destination string
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

p1 =! 12t			;Offset of destination string
p2 =! 16t			;Offset of source string
p3 =! 20t			;Max. no. of source bytes to copy

	.PSECT	_TEXT_p

	.ENTRY	strncat

strncat:
        PUSHL	ESI
	PUSHL	EDI
	MOVSEG	ES, DS			;Copy DS to ES
	CLD

; First point to end of destination string

	MOVL	EDI, p1.B[ESP]		;Get offset of destination string
	CLRL	EAX			;Look for trailing NUL
	MOVL	ECX, #-1.B		;Use maximum string size
	RNSCASB	[EDI]			;Scan to end of string
	DECL	EDI			;Point to trailing NUL
	MOVL	EDX, EDI		;Save it for RMOVSB below

; Then figure out how many source string characters to copy

	MOVL	EDI, p2.B[ESP]		;Get offset of source string
	MOVL	ESI, EDI		;And save it for RMOVSB below
	;CLRL	EAX			;Look for trailing NUL
	MOVL	EBX, p3.B[ESP]		;Get the max. no. of bytes to copy
	MOVL	ECX, EBX		;And copy it
	RNSCASB	[EDI]			;Scan for a NUL
	JNZ	10$.S			;Not found, so use max. length
	NOTL	ECX			;Found, so only copy what we need to
	ADDL	ECX, EBX		;(NOTL is the same as NEGL followed
	JMP	20$.S			; by DECL)

; Copy up to p3 bytes from source to destination

10$:	MOVL	ECX, EBX		;Assume we didn't find it
20$:	MOVL	EDI, EDX		;Get offset of destination string
	RMOVSB	[EDI], [ESI]		;Copy the string
	;CLRL	EAX			;Ensure we add a NUL
	STOSB	[EDI]			;And add it in

	MOVL	EAX, p1.B[ESP]		;Return offset of destination string
	POPL	EDI
	POPL	ESI
	RET

	.END

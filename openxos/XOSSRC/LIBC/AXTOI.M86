	.TITLE	axtoi - Function to convert string containing hex value

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;*--------------------------------------------------------------------------*
;* axtoi.m86
;*
;* Written by: John R. Goltz
;*
;* Edit History:
;* 05/17/94(brn) - Fixed entry point to be axtoi not atoi
;*--------------------------------------------------------------------------*

	.INCLUD XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\PROGARG.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	axtoi - Function to convert string containing hex value

;Function to convert string containing hex value
;	const char *str;	/* Pointer to string */
;	(int)val = axtoi(str);
;  Value returned is decimal value of string

	.ENTRY	axtoi
axtoi:	CLRL	EAX			;Clear value
	CLRL	EDX			;Clear minus flag
	CLRL	ECX			;Clear high bits in ECX for indexing
	MOVL	EBX, 8.B[ESP]		;Get offset of string
4$:	MOVB	CL, [EBX]		;Get character
	INCL	EBX
	CMPB	AL, #0			;If end
	JE	12$.S
	TESTB	_chrtbl#[ECX], #CT$SPACE ;Skip leading whitespace
	JNE	4$.S
	CMPB	CL, #'+'		;Have leading + ?
	JE	6$.S			;Yes
	CMPB	CL, #'-'		;No - have leading - ?
	JNE	8$.S			;No
	INCL	EDX			;Yes - remember that
6$:	MOVB	CL, [EBX]		;Get character
	INCL	EBX
8$:	TESTB	_chrtbl#[ECX], #CT$HEXDG ;Is it a hex digit?
	JE	10$.S			;No - finished
	TESTB	_chrtbl#[ECX], #CT$DIGIT ;Is it a decimal digit?
	JNE	10$.S			;Yes
	ADDB	CL, #9t			;No - adjust value
10$:	ANDL	ECX, #0Fh.B		;Get value
	SHLL	EAX, #4t		;Make room
	ORL	EAX, ECX		;Merge in this digit
	JMP	6$.S			;Continue

;Here at end of value

12$:	TESTL	EDX, EDX		;Want negative value?
	JE	14$.S			;No
	NEGL	EAX			;Yes - make it negative
14$:	RET				;Finished

	.END

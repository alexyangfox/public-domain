	.TITLE	ddt2str - Function to convert DOS date-time value to string
	.SBTTL	Run-time library for XC for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_DATA_p

month:	.LONG	questr, janstr, febstr, marstr, aprstr, maystr, junstr
	.LONG	julstr, augstr, sepstr, octstr, novstr, decstr
day:	.LONG	sunstr, monstr, tuestr, wedstr, thustr, fristr, satstr, questr
tzname: .LONG	0
	.ASCIZ	"GMT"
	.LONG	0
	.LONG	-300t
	.ASCIZ	"EST"
	.ASCIZ	"EDT"
	.LONG	-360t
	.ASCIZ	"CST"
	.ASCIZ	"CDT"
	.LONG	-420t
	.ASCIZ	"MST"
	.ASCIZ	"MDT"
	.LONG	-480t
	.ASCIZ	"PST"
	.ASCIZ	"PDT"
TZNUM=!{$-tzname}/12t

lit10:	.LONG	10t
lit60:	.LONG	60t
lit100:	.LONG	100t

questr:	.ASCIZ	"????"
janstr:	.ASCIZ	"January"
febstr:	.ASCIZ	"February"
marstr:	.ASCIZ	"March"
aprstr:	.ASCIZ	"April"
maystr:	.ASCIZ	"May"
junstr:	.ASCIZ	"June"
julstr:	.ASCIZ	"July"
augstr:	.ASCIZ	"August"
sepstr:	.ASCIZ	"September"
octstr:	.ASCIZ	"October"
novstr:	.ASCIZ	"November"
decstr:	.ASCIZ	"December"
sunstr:	.ASCIZ	"Sunday"
monstr:	.ASCIZ	"Monday"
tuestr:	.ASCIZ	"Tuesday"
wedstr:	.ASCIZ	"Wednesday"
thustr:	.ASCIZ	"Thursday"
fristr:	.ASCIZ	"Friday"
satstr:	.ASCIZ	"Saturday"

;Function to convert DOS format date/time value to string under control of
;  a format specification
;	Format controls are as follows:
;	  %Z   Set to replace suppressed 0s with spaces (default)
;	  %z   Set to drop suppressed 0s
;	  %H   Insert hours as 2 digits with leading zero suppressed (24 hour)
;	  %h   Insert hours as 2 digits with leading zero (24 hour)
;	  %T   Insert hours as 2 digits with leading zero suppressed (12 hour)
;	  %t   Insert hours as 2 digits with leading zero (12 hour)
;	  %A   Insert AM or PM (2 characters)
;	  %a   Insert am or pm (2 characters)
;	  %M   Insert minutes as 2 digits with leading zero suppressed
;	  %m   Insert minutes as 2 digits with leading zero
;	  %S   Insert seconds as 2 digits with leading zero suppressed
;	  %s   Insert seconds as 2 digits with leading zero
;	  %F   Insert fractional seconds (msec) as 3 digits with leading zero
;		 suppressed
;	  %f   Insert fractional seconds (msec) as 3 digits with leading zero
;	  %W   Insert name of day of week in all upper case
;	  %w   Insert name of day of week in mixed case
;	  %D   Insert day of month as 2 digits with leading zero suppressed
;	  %d   Insert day of month as 2 digits with leading zero
;	  %N   Insert name of month in all upper case
;	  %n   Insert name of month in mixed case
;	  %R   Insert number of month with leasing zero suppressed
;	  %r   Insert number of month with leasing zero
;	  %Y   Insert year as 2 digits with leading zero suppressed
;	  %y   Insert year as 2 digits with leading zero
;	  %L   Insert year as 4 digits
;	  %l   Same as %L
;	  %O   Insert time zone as sign plus 4 digits (hhmm)
;	  %o   Insert time zone as 3 letter name if possible or as sign plus
;		 4 digits if not.  Optional count specifies minimum number of
;		 spaces to use to right fill.

;Calling sequence:
;	char       *buffer;		/* Buffer to receive string */
;	const char *format;		/* Format string */
;	time_d      datetime;		/* Date-time structure */
;	size = ddt2str(buffer, format, &datetime)
;  Value returned is the number of character stored (positive) if normal
;    or -1 if error (errno is set in this case)

$$$=!0
FRM d2s_zeroflag, 1t		;0 = drop suppressed 0s, 1 = replace with spaces
FRM             , 3t
d2s_SIZE=!$$$

arg_buffer  =!16t
arg_format  =!20t
arg_datetime=!24t

	.PSECT	_TEXT_p

	.ENTRY	ddt2str
ddt2str:PUSHL	EDI
	PUSHL	ESI
	ENTER	d2s_SIZE, 0
	MOVL	EDI, arg_buffer.B[EBP]	;Get offset of buffer
	PUSHL	DS
	POPL	ES
	CLD
	MOVL	ESI, arg_format.B[EBP]	;Get offset of format string
	MOVL	EBX, arg_datetime.B[EBP] ;Get offset of date-time value
	MOVB	d2s_zeroflag.B[EBP], #1
mloop:	LODSB	[ESI]			;Get format character
	CMPB	AL, #0.B		;Finished?
	JE	6$.S			;Yes
	CMPB	AL, #'%'		;No - start of format specification?
	JE	10$.S			;Yes
4$:	STOSB	[EDI]			;No - just store character
	JMP	mloop.S			;Continue

;Here at end of format string

6$:	MOVB	[EDI], #0		;Store final null
	MOVL	EAX, EDI		;Get number of characters stored
	SUBL	EAX, arg_buffer.B[EBP]
	LEAVE
	POPL	ESI
	POPL	EDI
	RET

;Here with format specification

10$:	LODSB	[ESI]
	CMPB	AL, #0
	JE	6$.S
	CLRL	ECX
12$:	CMPB	AL, #'0'
	JB	14$.S
	CMPB	AL, #'9'
	JA	14$.S
	IMULL	ECX, #10t.B
	ANDL	EAX, #0Fh.B
	ADDL	ECX, EAX
	LODSB	[ESI]
	JMP	12$.S

14$:	MOVB	AH, AL
	CMPB	AH, #'a'		;Lower case?
	JB	16$.S			;No
	SUBB	AH, #'a'-'A'		;Yes - change to upper case
16$:	CMPB	AH, #'Z'
	JE	fmtZ.S
	CMPB	AH, #'H'
	JE	fmtH.S
	CMPB	AH, #'T'
	JE	fmtT.S
	CMPB	AH, #'A'
	JE	fmtA
	CMPB	AH, #'M'
	JE	fmtM
	CMPB	AH, #'S'
	JE	fmtS
	CMPB	AH, #'F'
	JE	fmtF
	CMPB	AH, #'W'
	JE	fmtW
	CMPB	AH, #'R'
	JE	fmtR
	CMPB	AH, #'N'
	JE	fmtN
	CMPB	AH, #'D'
	JE	fmtD
	CMPB	AH, #'L'
	JE	fmtL
	CMPB	AH, #'Y'
	JE	fmtY
	CMPB	AH, #'O'
	JE	fmtO
	JMP	4$
.PAGE
;Here to set or clear the zero flag

fmtZ:	MOVB	d2s_zeroflag.B[EBP], #1	;Assume want to replace leading 0s with
	CMPB	AL, #'Z'		;  spaces
	JE	2$.S			;If correct
	MOVB	d2s_zeroflag.B[EBP], #0	;Wrong - want to drop leading 0s
2$:	JMP	mloop

;Here to convert hours value (24 hour format)

fmtH:	MOVZWL	EDX, tmx_hour.B[EBX]
	JMP	twodig2.S

;Here to convert hours value (12 hour format)

fmtT:	MOVZWL	EDX, tmx_hour.B[EBX]
	CMPL	EDX, #12t.B
	JBE	4$.S
	SUBL	EDX, #12t.B
4$:	JMP	twodig2.S

;Here to generate AM or PM

fmtA:	CMPB	AL, #'A'		;Want upper case?
	JNE	14$.S			;No
	CMPW	tmx_hour.B[EBX], #12t.B	;Yes - past noon?
	JB	12$.S			;No
	MOVB	AL, #'P'		;Yes
12$:	STOSB	[EDI]
	MOVB	AL, #'M'
	JMP	18$.S

14$:	CMPW	tmx_hour.B[EBX], #12t.B	;Past noon?
	JB	16$.S			;No
	MOVB	AL, #'p'		;Yes
16$:	STOSB	[EDI]
	MOVB	AL, #'m'
18$:	STOSB	[EDI]
	JMP	mloop

;Here to convert the minutes value

fmtM:	MOVZWL	EDX, tmx_min.B[EBX]
	JMP	twodig2.S

;Here to convert the seconds value

fmtS:	MOVZWL	EDX, tmx_sec.B[EBX]
twodig2:CALL	twodigits
	JMP	mloop

;Here to convert the milliseconds value

fmtF:	MOVZWL	EDX, tmx_msec.B[EBX]
	CALL	threedigits
	JMP	mloop

;Here to convert the day of the week value

fmtW:	MOVZWL	EDX, tmx_wday.B[EBX]
	CMPL	EDX, #7.B
	JBE	20$.S
	MOVL	EDX, #7
20$:	MOVL	EDX, day[EDX*4]		;Get offset of day of week name string
	JMP	charcom.S

;Here to convert the month value (numeric format)

fmtR:	MOVZWL	EDX, tmx_mon.B[EBX]
	JMP	twodig4.S

;Here to convert the month value (text format)

fmtN:	MOVZWL	EDX, tmx_mon.B[EBX]
	CMPL	EDX, #12t.B
	JBE	22$.S
	CLRL	EDX
22$:	MOVL	EDX, month[EDX*4]
charcom:MOVB	AH, AL
	MOVB	AL, [EDX]		;Get first character
	INCL	EDX
	STOSB	[EDI]
	DECL	ECX
	JE	27$.S
24$:	MOVB	AL, [EDX]
	CMPB	AL, #0
	JE	28$.S
	INCL	EDX
	CMPB	AH, #'a'
	JAE	26$.S
	SUBB	AL, #'a'-'A'
26$:	STOSB	[EDI]
	LOOP	ECX, 24$
27$:	JMP	mloop

;Here with name stored - fill out the field if necessary

28$:	TESTL	ECX, ECX
	JLE	27$.S
	MOVB	AL, #' '
	RSTOSB	[EDI]
	JMP	mloop

;Here to convert day of month value

fmtD:	MOVZWL	EDX, tmx_mday.B[EBX]
twodig4:CALL	twodigits
	JMP	mloop

;Here to convert year value (4 digit format)

fmtL:	MOVL	ECX, EAX
	MOVZWL	EAX, tmx_year.B[EBX]
	CLRL	EDX
	IDIVL	lit100
	PUSHL	EDX
	MOVL	EDX, EAX
	MOVL	EAX, ECX
	CALL	twodigits
	POPL	EDX
	MOVB	AL, #'l'
	JMP	twodig4.S

;Here to convert year value (2 digit format)

fmtY:	PUSHL	EAX
	MOVZWL	EAX, tmx_year.B[EBX]
	CLRL	EDX
	IDIVL	lit100
	POPL	EAX
	JMP	twodig4.S
.PAGE
;Here to convert time zone value

fmtO:	CMPW	tmx_tzone.B[EBX], #1440t ;Valid offset value?
	JG	22$.S			;No - display a null field
	PUSHL	ECX			;Yes
	CMPB	AL, #'o'		;Lower case?
	JNE	16$.S			;No - don't check for name
	MOVL	EDX, #tzname		;Yes - see if we can use a name
	MOVXWL	EAX, tmx_tzone.B[EBX]
	MOVXWL	ECX, tmx_dlst.B[EBX]
	SUBL	EAX, ECX
	MOVL	ECX, #TZNUM
6$:	CMPL	EAX, [EDX]
	JE	8$.S
	ADDL	EDX, #12t.B
	LOOP	ECX, 6$
	JMP	16$.S

;Here with a match on the time zone offset

8$:	CMPW	tmx_dlst.B[EBX], #0.B
	JE	10$.S
	ADDL	EDX, #4t.B
10$:	MOVL	ECX, #3
12$:	MOVB	AL, 4t.B[EDX]
	INCL	EDX
	STOSB	[EDI]
	LOOP	ECX, 12$
	POPL	ECX			;Restore field width
	SUBL	ECX, #3.B		;Calculate amount of fill needed
	JMP	22$.S

;Here if don't want a time zone name of if can't find one that matches

16$:	MOVXWL	EAX, tmx_tzone.B[EBX]
	MOVB	DL, #'+'
	TESTL	EAX, EAX
	JNS	18$.S
	MOVB	DL, #'-'
	NEGL	EAX
18$:	MOVB	[EDI], DL
	INCL	EDI
	CLRL	EDX
	DIVL	lit60
	PUSHL	EDX
	MOVL	EDX, EAX
	CALL	twodigits0
	POPL	EDX
	CALL	twodigits0
	POPL	ECX
	SUBL	ECX, #5.B
22$:	JLE	24$.S
	MOVB	AL, #' '
	RSTOSB	[EDI]
24$:	JMP	mloop
.PAGE
	.SBTTL twodigits - Local subroutine to store two digits into our result string

;Local subroutine to store two digits into our result string
;	c(AL)  = Format character (upper case means suppress leading 0)
;	c{EDX} = Value
;	c{EDI} = Pointer to result buffer
;	CALL	twodigits
;	c{EDI} = Updated pointer

twodigits0:
	MOVB	AL, #'a'
twodigits:
	CMPL	EDX, #10t.B		;Need to suppress leading 0?
	JAE	2$.S			;No
	CMPB	AL, #'a'		;Maybe
	JAE	2$.S			;No
	CMPB	d2s_zeroflag.B[EBP], #0.B ;Yes - want space?
	JE	6$.S			;No
	MOVB	AL, #' '		;Yes - store space
	JMP	4$.S

;Here to store first digit

2$:	MOVL	EAX, EDX
	CLRL	EDX
	IDIVL	lit10
	ADDB	AL, #'0'
4$:	STOSB	[EDI]
6$:	LEAL	EAX, '0'.B[EDX]
	STOSB	[EDI]
	RET
.PAGE
	.SBTTL threedigits - Local subroutine to store 3 digits into our result string

;Local subroutine to store 3 digits into our result string
;	c(AL)  = Format character (upper case means suppress leading 0)
;	c{EDX} = Value
;	c{EDI} = Pointer to result buffer
;	CALL	threedigits
;	c{EDI} = Updated pointer

threedigits:
	MOVL	ECX, EAX
	MOVL	EAX, EDX
	CLRL	EDX
	IDIVL	lit100			;Get first digit
	CMPB	CL, #'a'		;Always store it?
	JAE	4$.S			;Yes
	TESTL	EAX, EAX		;No - is it 0?
	JNE	4$.S			;No
	CMPB	d2s_zeroflag.B[EBP], #0.B ;Yes - want space?
	JE	2$.S			;No
	MOVB	AL, #' '		;Yes - store space
	STOSB	[EDI]
2$:	MOVL	EAX, ECX
	JMP	twodigits

;Here if should store first digit

4$:	ADDB	AL, #'0'		;Store first digit
	STOSB	[EDI]
	MOVB	AL, #'a'
	JMP	twodigits

	.END

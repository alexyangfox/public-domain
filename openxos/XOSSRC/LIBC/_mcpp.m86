	.TITLE	_main - Startup routines for C programs
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;@@@ CEY included from xosinc:\xmac\stdio.par
;		to add/define Watcom/C++ generated .PSECTs
;		BEFORE HEAP_p
;
; Specifically: XIB,XI,XIE YIB,YI,YIE
;
; XI,YI are PSECTS for initialization and finalization of statically
;   allocated classes.
;
; The {X|Y}IB and {X|Y}IE PSECTS are simply place holder PSECTS to define
;   begin/end labels for the accumulated initializers/finalizers.
;
; The format of each 'record' in the XI/YI PSECTs is as follows:
;
;  .BYTE  FLAG
;  .BYTE  PRIORITY
;  .LONG  FUNCTION
;
;  It is assumed that EAX is initialized to 0x000000FF (Priority)
;  before calling __InitRtns or __FiniRtns to initialize or finialize
;  in appropriate priority order.

	.PROC	80386

;The following defines the order of the Psects in memory

	.SEG	_TEXT_s , 32BIT, CODE, READ
	.MSECT	_TEXT_m , _TEXT_s, READ, ADDR=_CODEBASE
	.PSECT	_TEXT_p , _TEXT_m, MOD=4
	.PSECT	_OTEXT_p, _TEXT_m, MOD=4

	.SEG	DGROUP_s, 32BIT, DATA, READ, WRITE
	.MSECT	DGROUP_m, DGROUP_s, READ, WRITE, ADDR=_DATABASE
	.PSECT	_BEGIN_p, DGROUP_m, MOD=4
	.PSECT	CONST_p , DGROUP_m, MOD=4
	.PSECT	CONST2_p, DGROUP_m, MOD=4
	.PSECT	_DATA_p , DGROUP_m, MOD=4
	.PSECT	_BSS_p  , DGROUP_m, MOD=4
	.PSECT	XIB_p,	  DGROUP_m, MOD=2
	.PSECT	XI_p,	  DGROUP_m, MOD=2
	.PSECT	XIE_p,	  DGROUP_m, MOD=2
	.PSECT	YIB_p,	  DGROUP_m, MOD=2
	.PSECT	YI_p,	  DGROUP_m, MOD=2
	.PSECT	YIE_p,	  DGROUP_m, MOD=2
	.PSECT	_HEAP_p , DGROUP_m, MOD=4

	.MSECT	_ODATA_m, DGROUP_s, READ, WRITE, ADDR=_ODATABASE
	.PSECT	_ODATA_p, _ODATA_m, MOD=4

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

;This routine contains the first code executed when a C++ program is
;  started after it is loaded.

	.STDSEGS
	.LNKSEG	_TEXT_s, DGROUP_s

	.PSECT	_BEGIN_p, DGROUP_m
_clib_begin::
	.STACK	_clib_stack
	.BLKL	128t		;Stack
_clib_stack::

	.PSECT	XIB_p, DGROUP_m
_clib_xib_::

	.PSECT	XIE_p, DGROUP_m
_clib_xie_::

	.PSECT	YIB_p, DGROUP_m
_clib_yib_::

	.PSECT	YIE_p, DGROUP_m
_clib_yie_::

	.PSECT	_HEAP_p , DGROUP_m
_clib_heap::

	.PSECT	_DATA_p
_clib_membase::			;These 3 items must be in this order!
	.LONG	_clib_begin	;Offset of start of base msect
_clib_mempnt::
	.LONG	_clib_heap	;Memory allocation pointer
_clib_memtop::
	.LONG	0		;Top of memory offset
_argc::	.LONG	0
_argv::	.LONG	0

maemsg:	.ASCIZ	"? Memory allocation error"{CR,LF}
strmsg:	.ASCIZ	"? Stream initialization error"{CR,LF}

__8087==!1

	.PSECT	_TEXT_p

$$$=!0
FRM mn_numchr, 4t
FRM mn_pntadj, 4t
mn_SIZE=!$$$

;This is the first instruction executed for the process - when get here the
;  registers are set up as follows:
;	c{ES:EDI} = Address of argument data
;	c{SI:0}   = Address of lowest available memory

	.START	_main
	.ENTRY	_main, _cstart_

_cstart_:
_main:	PUSHL	#!_DATA_p
	POPL	DS

	ENTER	mn_SIZE, 0		;Allocate stack frame
	PUSHL	DS			;Allocate additional memory for our
	PUSHL	#_STACKBASE		;  stack but make it all virtual
	PUSHL	#0Bh.B
	PUSHL	#_clib_begin-_STACKBASE;
	CALLF	svcMemChange#
	TESTL	EAX, EAX
	 JS	$mainmb.S		;If can't get more space for the stack!

	PUSHL	DS			;See how big we are
	PUSHL	#_clib_begin
	PUSHL	#0.B
	PUSHL	#-1.B
	CALLF	svcMemChange#
	TESTL	EAX, EAX
	 JNS	2$.S			;This should not fail!

$mainmb::
	LEAL	EDI, maemsg		;Memory allocation failure
mainfl:	PUSHL	#DH_STDTRM.B
	PUSHL	DS
	PUSHL	EDI
	PUSHL	#0.B
	CALLF	svcIoOutString#
	PUSHL	#1.B
	CALLF	svcSchExit#

strmerr:
	LEAL	EDI, strmsg		;Stream initialization error
	JMP	mainfl			;Now exit

;Here with memory allocation determined

2$:	ADDL	EAX, #_clib_begin	;Get offset for top
	MOVL	_clib_memtop, EAX	;Remember allocated top of memory

;First, we must scan the command line and find the beginning of each string
;  and count characters

	MOVL	ESI, ES:8		;Get start of command string
	CLRL	ECX			;Clear character count
	CLRL	EDX			;Clear string count
4$:	LODSB	ES:[ESI]		;Skip leading whitespace
	CMPB	AL, #' '
	JE	4$.S
	CMPB	AL, #HT
	JE	4$.S
	CMPB	AL, #0			;End of command?
	JE	22$.S			;Yes
	DECL	ESI
	PUSHL	ESI			;Save offset of this string
	INCL	ESI
	INCL	EDX			;Count the string
6$:	INCL	ECX			;Count the character
	CMPB	AL, #'"'		;Quote?
	JE	14$.S			;Yes
8$:	LODSB	ES:[ESI]		;Get next character
	INCL	ECX
10$:	CMPB	AL, #0			;End of command?
	JE	12$.S			;Yes
	CMPB	AL, #' '		;No - whitespace?
	JE	12$.S			;Yes
	CMPB	AL, #HT			;Maybe
	JNE	6$.S			;No
12$:	MOVB	ES:-1.B[ESI], #0	;Store null over the terminator
	CMPB	AL, #0			;At end of command line?
	JNE	4$.S			;No
	JMP	22$.S

;Here if have double quote in the argument

14$:	LODSB	ES:[ESI]		;Get next character
	INCL	ECX			;Count the character
	CMPB	AL, #0			;End of command line?
	JE	12$.S			;Yes
	CMPB	AL, #'"'		;No - another double quote?
	JNE	14$.S			;No

;Here with a double quote in a quoted string

20$:	LODSB	ES:[ESI]		;Get next character
	INCL	ECX			;Count it
	CMPB	AL, #'"'		;Another double quote?
	JE	14$.S			;Yes - continue in quoted mode
	JMP	10$.S			;No - switch back to unquoted mode

;Here at end of command line - we now have offset of the beginning of each
;  string on the stack

22$:	MOVL	mn_numchr.B[EBP], ECX
	MOVL	_argc, EDX
	MOVL	EAX, ES:4		;Get length of full file specification
	INCL	EAX			;Allow for final null
	INCL	EDX			;Get space needed for argv
	INCL	EDX
	SHLL	EDX, #2
	ADDL	EAX, EDX
	ADDL	EAX, ECX		;Plus space needed for strings
	SUBL	EDX, ES:8		;Calculate amount to adjust pointers
	MOVL	mn_pntadj.B[EBP], EDX
	PUSHL	EAX			;Get this much space
	CALL	sbrk#
	POPL	EBX
	TESTL	EAX, EAX
	 JS	$mainmb			;If error

	ADDL	mn_pntadj.B[EBP], EAX
	ADDL	EAX, #4.B
	MOVL	_argv, EAX		;Save offset of argv
	MOVL	ECX, _argc		;Get number of arguments
	MOVL	[EAX+ECX*4], #0		;Put 0 at end of the table
	JREGZ	ECX, 32$		;If no argument strings at all
	MOVL	EDX, mn_pntadj.B[EBP]	;Get adjustment amount
30$:	POPL	-4.B[EAX+ECX*4]		;Store offset of string
	ADDL	-4.B[EAX+ECX*4], EDX	;Adjust the offset
	LOOP	ECX, 30$		;Continue if more to do here

;Here with the argument pointer table (argv) setup - now we must copy the
;  strings

32$:	MOVL	ECX, _argc		;Get number of strings
	MOVL	EBX, _argv		;Point to start of argument table
	PUSHL	DS
	PUSHL	ES
	POPL	DS
	POPL	ES
	 JREGZ	ECX, 38$		;If none at all

34$:	MOVL	EDI, ES:[EBX]		;Point to place to put string
	MOVL	ESI, EDI		;Point to current location of string
	SUBL	ESI, mn_pntadj.B[EBP]

36$:	LODSB	[ESI]			;Get character
	STOSB	[EDI]			;Store character
	CMPB	AL, #0			;Null?
	 JNE	36$.S			;No - continue

	ADDL	EBX, #4.B		;Yes - bump table pointer
	LOOP	ECX, 34$		;Continue if more to do here

38$:	MOVL	ESI, DS:0		;Point to file specification
	PUSHL	EDI

40$:	LODSB	[ESI]			;Get character
	CMPB	AL, #0E0h		;No - special character?
	 JB	42$.S			;No

	CMPB	AL, #0FFh		;Yes - image prefix?
	 JNE	40$.S			;No

	LODSB	[ESI]			;Yes - get image character

42$:	STOSB	[EDI]			;Store character
	CMPB	AL, #0			;End?
	JNE	40$.S			;No
	POPL	EDI
	PUSHL	DS			;Give up command data segment
	PUSHL	ES
	POPL	DS
	CALLF	svcMemRemove#
	MOVL	EBX, _argv		;Get address of argv
	MOVL	ECX, _argc		;Get value of argc
	LEAVE				;Remove our stack frame
	MOVL	-4.B[EBX], EDI		;Store pointer to file spec as the "-1"
					;  entry in argv
	PUSHL	#0.B			;Push arguments for main (the zero is
	PUSHL	EBX			;  case someone expects to find a
	PUSHL	ECX			;  pointer to a Unix style environment
					;  area as the third argument!)

;Here with the command line arguments setup - now initialize the standard
;  IO streams

	PUSHL	#_stdin#		;Setup stdin
	CALL	_fsetup#
	POPL	EBX			;Dump parameter
	TESTL	EAX, EAX		;Any error?
;	JE	strmerr			;Yes, error in setting up stream

	PUSHL	#_stdout#		;Setup stdout
	CALL	_fsetup#
	POPL	EBX			;Dump parameter
	TESTL	EAX, EAX		;Any error?
;	JE	strmerr			;Yes, error in setting up stream

	PUSHL	#_stderr#		;Setup stderr
	CALL	_fsetup#
	POPL	EBX			;Dump parameter
	TESTL	EAX, EAX		;Any error?
;	JE	strmerr			;Yes, error in setting up stream

	PUSHL	#_stdtrm#		;Setup stdtrm
	CALL	_fsetup#
	POPL	EBX			;Dump parameter
	TESTL	EAX, EAX		;Any error?
;	JE	strmerr			;Yes, error in setting up stream

;Execute any static constructors (this is specific to OpenWatcom)

	MOVL	EAX, #0FFh
	CALL	__InitRtns

;Here with all setup complete - now call the user's program

	CALL	main#

;Execute any static destructors (this is specific to OpenWatcom)

	movl	eax, #0FFh
	call	__FiniRtns

	PUSHL	EAX			;Return value is exit status
	CALL	exit#			;Go exit
.PAGE
	.SBTTL	Common error returns

;Error return for functions which have a stack frame and have saved both
;  EDI and ESI and ESI points to the IOB

$errorrtnlvp2x::
	MOVL	iob_error.B[ESI], EAX
$errorrtnlvp2::
	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
	MOVL	EAX, #-1
	LEAVE
	POPL	EDI
	POPL	ESI
	RET	

$errorrtnlv::
	LEAVE
$errorrtn::
	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
	MOVL	EAX, #-1
	RET

;Error return for functions which do not have stack frame and have saved ESI
;  only

$errorrtnp1x::
	MOVL	iob_error.B[ESI], EAX
$errorrtnp1::
	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
	MOVL	EAX, #-1
	POPL	ESI
	RET	


;; Watcom 10.0+? specific
;
;
__InitRtns::

	PUSHL	ESI
	PUSHL	EDI
	PUSHL	EBX
	PUSHL	EDX
	PUSHL	ES

	MOVL	EDX, EAX

1$:	LEAL	ESI, _clib_xib_
	LEAL	EDI, _clib_xie_

	MOVL	EBX, EDI
	MOVB	AL,  DL

2$:	CMPL    ESI, EDI
	 JAE	4$.S

	CMPB    [ESI], #2
	 JE	3$

	CMPB    1.B[ESI], AL
	 JS      3$.S

	MOVL	EBX, ESI
	MOVB	AL, 1.B[ESI]

3$:
	ADDL    ESI, #6
	JMP     2$.S

4$:	CMPL	EBX, EDI
	 JE	6$.S

	MOVL    EAX, 2.B[EBX]
	ORL	EAX, EAX
	 JE	5$.S

	PUSHL	DS
	POPL	ES

;
; Call initialization routine
;
	PUSHL	EDX
	PUSHL	EBX

	 CALLI	EAX		;;@@@ OK...

	POPL	EBX
	POPL	EDX

5$:
	MOVB	[EBX], #2	;; Done
	JMP	1$.S

6$:
	popl     es
	popl     edx
	popl     ebx
	popl     edi
	popl     esi
	ret

     
;;	.ENTRY  __FiniRtns 

__FiniRtns::
	pushl    esi
	pushl    edi
	pushl	ebx
	pushl	es

	movb     dh,dl
	movb     dl,al

7$:
	leal	esi, _clib_yib_
	leal	edi, _clib_yie_

	movl	ebx, edi
	movb	al, dl

8$:
	cmpl	esi, edi
	 jae     10$.S

	cmpb     [esi],#2t
	 je      9$.S

	cmpb     al, 1[esi]
	 ja      9$.S

	movl     ebx, esi
	movb     al, 1[esi]

9$:
	addl	esi, #6
	jmp      8$.S

10$:
	cmpl     ebx, edi
;                 je      12$.S
	 jz      12$.S

 	cmpb     AL, DH
	 ja      11$.S

	movl     eax, 2[ebx]
	orl      eax, eax
	 je      11$.S

	pushl    ds
	popl     es
	pushl    edx

	calli    eax
	popl     edx

11$:
	movb	[ebx], #2
	jmp     7$.S

12$:
	popl     es
	popl     ebx
	popl     edi
	popl     esi
	ret     

	.END

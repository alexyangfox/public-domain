	.TITLE	strspn - ANSI C function to span string for character
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  2Sep94  FPJ  Original creation.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	strspn - ANSI C function to span string for character

;+
; Function: strspn()
;
; Call:
;
;	PUSHL	<offset of string of characters to exclude>
;	PUSHL	<offset of search string>
;
;	CALL 	strspn
;
; Return:
;
;       EAX =  Length of string
;       ECX =  Random
;-


tblsize =! { 256t / 8t }.B		;No. of bytes for bitmap
tbllong =! { 256t / 32t }.B		;No. of longs for bitmap

p1 =! tblsize + 12t
p2 =! tblsize + 16t

	.PSECT	_TEXT_p

	.ENTRY	strspn

strspn:
	PUSHL	ESI
	PUSHL	EDI
	SUBL	ESP, #tblsize		;Make room for bitmap
	CLD

; First clear the bitmap

	MOVSEG	ES, SS			;Copy SS to ES
	MOVL	ECX, #tbllong		;No. of longwords to clear
	CLRL	EAX			;Store NUL characters
	MOVL	EDI, ESP		;Point to bit table
	RSTOSL	[EDI]			;And clear it
	MOVSEG	ES, DS			;Copy DS to ES

; Then set bits for characters in scan string (excluding the trailing NUL)

;	CLRL	EAX			;(High order bits already zero)
	MOVL	ESI, p2.B[ESP] 		;Get offset of scan string
10$:	LODSB	[ESI]			;Get the next character
	BTSL	[ESP], EAX		;And set the appropriate bit
	TESTL	EAX, EAX		;Was it a NUL (end of string)?
	JNZ	10$.S			;No, keep looping
	BTCL	[ESP], EAX		;Yes, reset the bit

; Now scan search string, matching against bit map

;	CLRL	EAX			;(High order bits already zero)
	MOVL	ESI, p1.B[ESP]		;Point to search string
	MOVL	EDI, ESI		;Save the string offset
20$:	LODSB	[ESI]			;Get next character
	BTL	[ESP], EAX		;Is this character in table?
	JNC	30$.S			;No, so we're done
	TESTL	EAX, EAX		;End of string?
	JNZ	20$.S			;No, keep looping

30$:	LEAL	EAX, -1.B[ESI]		;Calculate no. of chrs. skipped
	SUBL	EAX, EDI

	ADDL	ESP, #tblsize		;Pop off bit table
	POPL	EDI
	POPL	ESI
	RET

	.END

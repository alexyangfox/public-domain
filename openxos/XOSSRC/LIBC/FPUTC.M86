	.TITLE	fputc - Function to output character to IO stream
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	fwrite - Function to output character to IO stream

;Function to output chracater to IO stream
;	int   chr;		/* Character to output */
;	FILE *stream;		/* Stream pointer */
;	(int)val = fputc(chr, stream);
;  Value returned is -1 if error or character output (0 filled to 32 bits) if
;    normal

	.ENTRY	fputc
fputc:	PUSHL	ESI
	MOVL	ESI, 8t+4t.B[ESP]	;Get stream pointer
	MOVZBL	EAX, 8t+0t.B[ESP]	;Get character
	CMPB	AL, #LF			;Line-feed?
	JNE	2$.S			;No
	BTL	iob_flag.B[ESI], #IOB%ASCII ;Yes - ASCII file?
	JNC	2$.S			;No
	PUSHL	ESI			;Yes
	PUSHL	#CR.B			;Output carriage-return first
	CALL	fputc
	ADDL	ESP, #8.B
	TESTL	EAX, EAX
	JS	4$.S
	MOVB	AL, #LF			;Restore the line-feed character
2$:	DECL	iob_count.B[ESI]	;Reduce buffer count
	JNS	16$.S			;If room for more in buffer
	BTL	iob_flag.B[ESI], #IOB%UNBUF ;Unbuffered device?
	JNC	10$.S			;No
	MOVL	iob_ungetc.B[ESI], #-1	;Yes - clear ungotten character */
	MOVL	iob_count.B[ESI], #-1
	MOVL	EDX, EAX		;Save character
	PUSHL	iob_handle.B[ESI]	;Output character
	PUSHL	EAX
	CALLF	svcIoOutSingle#
	TESTL	EAX, EAX
	JS	8$.S			;If error
	MOVL	EAX, EDX		;Restore character to return
4$:	POPL	ESI
	RET	

;Here if error with character on the stack

6$:	POPL	ESI			;Discard character
8$:	JMP	$errorrtnp1#

;Here if have buffered device

10$:	PUSHL	EAX			;Save character
	CALL	$nextblk#		;Get the next block
	JC	6$.S			;If error
	POPL	EAX			;OK - restore character
	DECL	iob_count.B[ESI]	;Adjust the count
16$:	MOVL	EBX, iob_pnt.B[ESI]	;Get buffer pointer
	INCL	iob_pnt.B[ESI]		;Increment pointer
	MOVB	[EBX], AL		;Store character
	BTSL	iob_flag.B[ESI], #IOB%CHNG ;Indicate buffer changed
	POPL	ESI			;Thats all
	RET

	.END

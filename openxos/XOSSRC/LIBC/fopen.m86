	.TITLE	fopen - ANSI C function to open files
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	fopen - ANSI C function to open files

;ASNI C function to open file

;	FILE *fopen(
;	    char *name,
;	    int   mode);
;  Value returned is a stream pointer if OK or NULL if error (errno is
;	set if error)

p1=!12t
p2=!16t

	.PSECT	_TEXT_p

	.ENTRY	fopen
fopen:	PUSHL	EDI
	PUSHL	ESI

;Scan through I/O blocks looking for available slot

	MOVL	ECX, #NFILES		;Search for a free IOB
	LEAL	EDI, _iob#
10$:	CMPL	iob_flag.B[EDI], #0.B	;Is this one free?
	JE	20$.S			;Yes
	ADDL	EDI, #iob_SIZE.B	;No - bump to next IOB
	LOOP	ECX, 10$ 		;Continue if more to check
	MOVL	EAX, #ER_TMDVP		;Fail - Too many devices open
	JMP	25$.S			;Store error and exit

;Here with available I/O block

20$:	MOVL	ESI, p2.B[ESP]		;Point to the mode string
	CALL	_fmode#			;See if it's valid
	TESTL	EAX, EAX		;Error?
	JS	25$.S			;Yes

;Open the file

	MOVL    EAX, p1.B[ESP]          ;Get pointer to file name
	PUSHL	ECX			;Pass the option bits
	PUSHL	DS			;Pass the file name
	PUSHL	EAX
	PUSHL	#0.B			;No parameter list
	PUSHL	#0.B
	CALLF	svcIoOpen#
	TESTL	EAX, EAX
	JNS	30$.S			;If no error

;Here if error occurred

25$:	NEGL	EAX			;Make positive for errno
	MOVL	errno#, EAX
	CLRL	EDI                     ;Return a NULL pointer
	JMP	40$.S			;Now exit

;Here if no error occurred

30$:	MOVL	iob_handle.B[EDI], EAX	;OK - store file handle
	MOVL	iob_flag.B[EDI], EBX	;Store new flags
	PUSHL	EDI			;Pass address of IOB block
	CALL	_fsetup#		;Finish setting it up
	POPL	EDI			;Restore IOB address

	TESTL	EAX, EAX		;Any error?
	JNE	40$.S			;No, exit all okay

;Error in stream initialization - reset I/O block and close stream

	MOVL	iob_flag.B[EDI], #0	;Clear flag bits
	PUSHL	iob_handle.B[EDI]	;Close the device
	MOVL	iob_handle.B[EDI], #0	;Stop using this handle
	PUSHL	#0.B			;No close bits
	CALLF	svcIoClose#
	CMPL	iob_buffer.B[EDI], #0.B
	JE	35$.S
	PUSHL	iob_buffer.B[EDI]	;Give up any existing buffer
	MOVL	iob_buffer.B[EDI], #0	;Clear buffer pointer
	CALL	free#			;N.B.: this works even if buffer=NULL
	POPL	EAX			;Discard parameter
35$:	CLRL	EDI			;Ensure we return a NULL pointer
	
;Common exit

40$:	MOVL	EAX, EDI                ;Return pointer or NULL in EAX
	POPL	ESI
	POPL	EDI
	RET

	.END

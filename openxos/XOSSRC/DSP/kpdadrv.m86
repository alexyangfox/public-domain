	.TITLE	KPDADRV - Keypad driver type A

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;This driver supports a very simple matrix keypad which has no interrupt
;  capability.  The keypad array is polled each tick.  Key-press events are
;  reported immediately.  Key-release events are delayed for 2 ticks for
;  debounce.

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR

MAJV   =!1t
MINV   =!0t
EDITNUM=!0t

	LKEHEAD	KPDADRV, MAJV, MINV, EDITNUM, LKETYPE_DEVICE

	CODE

kpdadsp:.LONG	keyopen		;kf_open    =  0. - Open
	.LONG	knlRtnZero##	;kf_vkinb   =  4. - INB instruction for
				;		      keyboard in real mode
	.LONG	knlRtnZero##	;kf_vkoutb  =  8. - OUTB instruction for
				;		      keyboard in real mode
	.LONG	knlRtnZero##	;kf_keyint  = 12. - Attempt to execute keyboard
				;		      interrupt routine in real
				;		      mode
	.LONG	knlRtnZero##	;kf_clrkeyi = 16. - Clear keyboard interrupt
	.LONG	knlRtnZero##	;kf_tolites = 20. - Update keyboard lites
	.LONG	knlRtnZero##	;kf_process = 24. - Process held scan codes
	.LONG	keybeep		;kf_beep    = 28. - Beep
	.LONG	knlRtnZero##	;kf_enable  = 32. - Enable keyboard
.PAGE
	.SBTTL	kpdainit - Keypad initialization routine

	INITSUB	kpdainit

kpdainit:
	MOVL	EAX, #'KPDA'		;Register this keyboard driver
	MOVL	EBX, #kpdaaddunit
	CALL	xosconNewKeyDriver##
	JC	6$.S			;If error
	CLRL	EAX			;OK
	CLRL	EDX
	MOVL	ECX, #codetop
6$:	RET

	CODE
.PAGE
	.SBTTL	kpdaaddunit - Keypad type A addunit routine

;Keypad type A addunit routine
;	c{EBX} = Interrupt number for keyboard
;	c{EDI} = Offset of console DHDB
;	CALL	kpdaaddunit
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal

kpdaaddunit:
	MOVL	dhdb_kdisp.B[EDI], #kpdadsp ;Store offset of keypad function
					    ;  dispatch table
	MOVL	dhdb_fdisp.B[EDI], #kpdafork ;Store offset of keypad fork
	MOVL	EAX, firstdhdb		;Link into our list of DHDBs
	MOVL	firstdhdb, EDI
	MOVL	dhdb_nexts.B[EDI], EAX
	TESTL	EAX, EAX		;Is this the first one?
	JNE	4$.S			;No - finished here
	PUSHL	EDI
	MOVL	EBX, #kpdatimer		;Yes - set up our direct timer routine
	CALL	knlSetupTimer##
	POPL	EDI
4$:	RET
.PAGE
	.SBTTL	keyopen

keyopen:PUSHL	EDI
	MOVL	EDI,tdb_dhdb.B[ESI]	;Get offset of our DHDB
	MOVL	EDX, dhdb_kbioreg.B[EDI] ;Point to our IO register
	CLRL	EAX
	CLI
	MOVB	dhdb_kbcnts.B[EDI], AL
	MOVB	dhdb_kbcntx.B[EDI], AL
	INB	[DX]
	ANDB	AL, #20h
	MOVB	dhdb_kbvals.B[EDI], AL
	TESTB	AL, #20h
	MOVB	AL, #'+'
	JE	4$.S			;Yes
	MOVB	AL, #'-'		;No
4$:	CALL	storechr
	STI
	POPL	EDI
	CLRL	EAX
	RET
.PAGE
	.SBTTL	keybeep - Subroutine to generate timed tone

;Subroutine to generate a timed tone
;  NOTE:  This version only supports a single tone generator, which is the
;	  PC's built in speaker - all calls to this routine use this speaker
;	c{EAX} = Duration (milliseconds)
;	c{EDX} = Frequency (Hertz)
;	c{ESI} = Offset of TDB
;	CALL	keybeep
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal			;Normal return

2$:	STC
4$:	POPL	EDI
	RET

keybeep:PUSHL	EDI
	MOVL	EDI,tdb_dhdb.B[ESI]	;Get offset of our DHDB
	TESTL	EDI, EDI
	JE	2$.S			;If none
	TESTB	dhdb_spkstate.B[EDI], #02h ;Is a tone being generated now?
	JNE	4$.S			;Yes - forget it!
	TESTL	EAX, EAX		;Do we want a tone?
	JE	4$.S			;No
	PUSHL	EDX			;Yes - save frequency
	ADDL	EAX, #19t.B		;Change to ticks (round up)
	CLRL	EDX
	DIVL	lit20
	MOVL	EBX, #endbeep
	PUSHL	ESI
	CALL	knlWakeRequest##	;Enter timer request
	POPL	ESI
	POPL	EBX
	JC	4$.S			;If error
	CMPL	EBX, #19t		;Make sure not too small
	JA	6$.S
	MOVB	AL, #19t
6$:	MOVL	EAX, #1193167t		;Calculate counter factor
	CLRL	EDX
	DIVL	EBX
	MOVL	EBX, EAX
	MOVB	AL, #0B6		;Set the counter
	OUTB	P_TMRCWR
	IOPAUSE
	MOVB	AL, BL
	OUTB	P_TMRCNT2
	IOPAUSE
	MOVB	AL, BH
	OUTB	P_TMRCNT2
	IOPAUSE
	ORB	knlPort61##, #03	;Connect the counter to the speaker
	MOVB	AL, knlPort61##
	OUTB	P_SYSCONB
	IOPAUSE
	ORB	dhdb_spkstate.B[EDI], #02h ;Indicate generating tone
	POPL	EDI
	RET

;Here at the end of the tone to end it
;	c{EDI} = Offset of DHDB
;	CALL	endbeep

endbeep:ANDB	knlPort61##, #0FCh	;Disconnect the speaker
	MOVB	AL, knlPort61##
	OUTB	P_SYSCONB
	IOPAUSE
	MOVB	AL, #0B6		;Set the counter
	OUTB	P_TMRCWR
	IOPAUSE
	MOVB	AL, dhdb_spkcnt+0.B[EDI]
	OUTB	P_TMRCNT2
	IOPAUSE
	MOVB	AL, dhdb_spkcnt+1.B[EDI]
	OUTB	P_TMRCNT2
	IOPAUSE
	ANDB	dhdb_spkstate.B[EDI], #~02h
	TESTB	dhdb_spkstate.B[EDI], #01h
	JE	10$.S
	ORB	knlPort61##, #03h	;Restore idle speaker state
	MOVB	AL, knlPort61##
	OUTB	P_SYSCONB
	IOPAUSE
10$:	CLC
ret006:	RET				;Thats all
.PAGE
	.SBTTL	kpdafork - Keypad fork routine

;Here at fork level
;	c{EDI} = Offset of DHDB for keypad

kpdafork:
	MOVL	ESI, dhdb_curtdb.B[EDI]	;Get offset of our TDB
2$:	CMPB	dhdb_ircnt.B[EDI], #0	;Anything in the input ring buffer?
	JE	ret006.S		;No - finished here
	MOVZBL	EBX, dhdb_irtak.B[EDI]	;Get taker pointer
	MOVZBL	EAX, dhdb_irng.B[EDI+EBX] ;Get character
	INCL	EBX			;Bump pointer
	CMPB	BL, #IKSIZE		;Past end of ring?
	JB	4$.S			;No
	CLRL	EBX			;Yes
4$:	MOVB	dhdb_irtak.B[EDI], BL
	DECB	dhdb_ircnt.B[EDI]	;Reduce ring count
	ORL	EAX, #80000000h		;Indicate ASCII character
	INCL	tdb_kbchar[ESI]
	CALL	knlTrmInp##		;Process the character
	JMP	2$.S			;See if more there
.PAGE
	.SBTTL	kpbatimer - Direct timer routine

;Direct timer routine for KPBA devices - This routine is called at interrupt
;  level 2 with interrupts disabled.  Registers EAX, EDX, DS, and ES only have
;  been saved.

kpdatimer:
	PUSHL	EDI			;Save other registers we will use
	PUSHL	EBX
	MOVL	EDI, firstdhdb		;Get our first DHDB
loop:	MOVB	dhdb_kbthis.B[EDI], #0
	MOVL	EDX, dhdb_kbioreg.B[EDI] ;Point to our IO register
	MOVB	AL, #01h		;Check keypad row 1
	OUTB	[DX]
	INB	[DX]
	ANDB	AL, #0Fh
	CMPB	AL, #0Fh		;Any pressed?
	JE	chk2.S			;No
	CMPB	AL, #0Eh		;Yes - column 1 pressed?
	JE	key11			;Yes
	CMPB	AL, #0Dh		;No - column 2 pressed?
	JE	key21			;Yes
	CMPB	AL, #0Bh		;No - column 3 pressed?
	JE	key31			;Yes
	CMPB	AL, #07h		;No - column 4 pressed?
	JNE	kpignore		;More than 1 column pressed - ignore it

;Here if key 4-1 (A) is pressed

key41:	MOVB	dhdb_kbthis.B[EDI], #'A'
	JMP	chk2.S

;Here if key 3-1 (3) is pressed

key31:	MOVB	dhdb_kbthis.B[EDI], #'3'
	JMP	chk2.S

;Here if key 2-1 (2) is pressed

key21:	MOVB	dhdb_kbthis.B[EDI], #'2'
	JMP	chk2.S

;Here if key 1-1 (1) is pressed

key11:	MOVB	dhdb_kbthis.B[EDI], #'1'

;Here to check keypad row 2

chk2:	MOVB	AL, #02h
	OUTB	[DX]
	INB	[DX]
	ANDB	AL, #0Fh
	CMPB	AL, #0Fh		;Any pressed?
	JE	chk3.S			;No
	CMPB	dhdb_kbthis.B[EDI], #0	;Yes - is it the first?
	JNE	kpignore		;No - ignore this poll
	CMPB	AL, #0Eh		;Yes - column 1 pressed?
	JE	key12			;Yes
	CMPB	AL, #0Dh		;No - column 2 pressed?
	JE	key22			;Yes
	CMPB	AL, #0Bh		;No - column 3 pressed?
	JE	key32			;Yes
	CMPB	AL, #07h		;No - column 4 pressed?
	JNE	kpignore		;More than 1 column pressed - ignore it

;Here if key 4-2 (B) is pressed

key42:	MOVB	dhdb_kbthis.B[EDI], #'B'
	JMP	chk3.S

;Here if key 3-2 (6) is pressed

key32:	MOVB	dhdb_kbthis.B[EDI], #'6'
	JMP	chk3.S

;Here if key 2-2 (5) is pressed

key22:	MOVB	dhdb_kbthis.B[EDI], #'5'
	JMP	chk3.S

;Here if key 1-2 (4) is pressed

key12:	MOVB	dhdb_kbthis.B[EDI], #'4'

;Here to check keypad row 3

chk3:	MOVB	AL, #04h
	OUTB	[DX]
	INB	[DX]
	ANDB	AL, #0Fh
	CMPB	AL, #0Fh		;Any pressed?
	JE	chk4			;No
	CMPB	dhdb_kbthis.B[EDI], #0	;Yes - is it the first?
	JNE	kpignore		;No - ignore this poll
	CMPB	AL, #0Eh		;Yes - column 1 pressed?
	JE	key13			;Yes
	CMPB	AL, #0Dh		;No - column 2 pressed?
	JE	key23			;Yes
	CMPB	AL, #0Bh		;No - column 3 pressed?
	JE	key33			;Yes
	CMPB	AL, #07h		;No - column 4 pressed?
	JNE	kpignore		;More than 1 column pressed - ignore it

;Here if key 4-3 (C) is pressed

key43:	MOVB	dhdb_kbthis.B[EDI], #'C'
	JMP	chk4.S

;Here if key 3-3 (9) is pressed

key33:	MOVB	dhdb_kbthis.B[EDI], #'9'
	JMP	chk4.S

;Here if key 2-3 (8) is pressed

key23:	MOVB	dhdb_kbthis.B[EDI], #'8'
	JMP	chk4.S

;Here if key 1-3 (7) is pressed

key13:	MOVB	dhdb_kbthis.B[EDI], #'7'

;Here to check keypad row 4

chk4:	MOVB	AL, #08h
	OUTB	[DX]
	INB	[DX]
	ANDB	AL, #0Fh
	CMPB	AL, #0Fh		;Any pressed?
	JE	kpdone			;No
	CMPB	dhdb_kbthis.B[EDI], #0	;Yes - is it the first?
	JNE	kpignore		;No - ignore this poll
	CMPB	AL, #0Eh		;Yes - column 1 pressed?
	JE	key14			;Yes
	CMPB	AL, #0Dh		;No - column 2 pressed?
	JE	key24			;Yes
	CMPB	AL, #0Bh		;No - column 3 pressed?
	JE	key34			;Yes
	CMPB	AL, #07h		;No - column 4 pressed?
	JNE	kpignore		;More than 1 column pressed - ignore it

;Here if key 4-4 (.) is pressed

key44:	MOVB	dhdb_kbthis.B[EDI], #'.'
	JMP	kpdone.S

;Here if key 3-4 (#) is pressed

key34:	MOVB	dhdb_kbthis.B[EDI], #'#'
	JMP	kpdone.S

;Here if key 2-4 (0) is pressed

key24:	MOVB	dhdb_kbthis.B[EDI], #'0'
	JMP	kpdone.S

;Here if key 1-4 (A) is pressed

key14:	MOVB	dhdb_kbthis.B[EDI], #'*'
					;Fall into kpdone on next page
.PAGE
;Here when done scanning the keypad and we found 0 or 1 key pressed

kpdone:	MOVB	AL, dhdb_kbthis.B[EDI]	;Get current character
	CMPB	AL, dhdb_kblast.B[EDI]	;Has it changed?
	JE	kpignore.S		;No
	CMPB	AL, #0			;Was a key just released?
	JNE	accept.S		;No - accept the new character now
	CMPB	dhdb_kbcount.B[EDI], #0	;Yes - is this the first time?
	JNE	4$.S			;No
	INCB	dhdb_kbcount.B[EDI]	;Yes - just count it
	JMP	6$.S

;Here with second key release detect

4$:	MOVB	dhdb_kblast.B[EDI], #0
kpignore:
	MOVB	dhdb_kbcount.B[EDI], #0
	JMP	6$.S

;Here to accept a new character

accept:	MOVB	dhdb_kblast.B[EDI], AL	;Store as current keypad character
	CALL	storechr
6$:	INB	[DX]			;Is the extra button pressed?
	TESTB	AL, #10h
	JNE	10$.S			;No
	CMPB	dhdb_kbcntx.B[EDI], #0	;Yes
	JS	12$.S			;If already reported
	JNE	8$.S			;If timing now
	MOVB	dhdb_kbcntx.B[EDI], #30t ;Idle - start timing it now
	JMP	12$.S

;Here if the extra button is pressed and we are already timing it

8$:	DECB	dhdb_kbcntx.B[EDI]	;Waited long enough?
	JNE	12$.S			;No
	MOVB	AL, #'$'		;Yes - report it
	CALL	storechr
	MOVB	dhdb_kbcntx.B[EDI], #80h
	JMP	12$.S

;Here if the extra button is not pressed

10$:	MOVB	dhdb_kbcntx.B[EDI], #0
12$:	INB	[DX]			;Get the switch state
	ANDB	AL, #20h
	XORB	AL, dhdb_kbvals.B[EDI]	;Has it changed?
	JNE	16$.S			;Yes
	CMPB	dhdb_kbcnts.B[EDI], #0	;No - are we timing it now?
	JE	20$.S			;No
	DECB	dhdb_kbcnts.B[EDI]	;Yes -  has it run out?
	JNE	20$.S			;No
	MOVB	AL, #'+'		;Yes - assume just closed
	TESTB	dhdb_kbvals.B[EDI], #20h ;Right?
	JE	14$.S			;Yes
	MOVB	AL, #'-'		;No
14$:	CALL	storechr
	JMP	20$.S

;Here if switch state has changed

16$:	XORB	dhdb_kbvals.B[EDI], #20h ;Update our value
	CMPB	dhdb_kbcnts.B[EDI], #0	;Was the timer active?
	JE	18$.S			;No
	MOVB	dhdb_kbcnts.B[EDI], #0	;Yes - just clear it
	JMP	20$.S

18$:	MOVB	dhdb_kbcnts.B[EDI], #30t ;Restart the timer
20$:	MOVL	EDI, dhdb_nexts.B[EDI]
	TESTL	EDI, EDI
	JNE	loop
	POPL	EBX
	POPL	EDI
22$:	RET


storechr:
	CMPB	dhdb_ircnt.B[EDI], #IKSIZE ;Room for more in the keypad
					   ;  interrupt ring buffer?
	JA	22$.S			;No - forget it!
	MOVZBL	EBX, dhdb_irput.B[EDI]	;Yes - get putter pointer
	MOVB	dhdb_irng.B[EDI+EBX], AL ;Store code in ring
	INCL	EBX			;Bump pointer
	CMPB	BL, #IKSIZE		;Past end of ring?
	JB	24$.S			;No
	CLRL	EBX			;Yes - reset pointer
24$:	MOVB	dhdb_irput.B[EDI], BL	;Update pointer
	INCB	dhdb_ircnt.B[EDI]	;Bump count
	JMP	knlReqFork##		;Request fork
.PAGE
	.SBTTL	Data

	DATA

lit20:	.LONG	20t
firstdhdb:
	.LONG	0		;Offset of first KPDA DHDB

	LKEEND

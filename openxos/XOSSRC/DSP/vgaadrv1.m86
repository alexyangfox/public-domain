	.TITLE	VGAADRV1 - Loadable driver for basic VGA display

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD	XOSINC:\XMAC\XOSLKE.PAR
	.INCLUD	XOSINC:\XMAC\XOSXLKE.PAR

MAJV   =!2t
MINV   =!0t
EDITNUM=!0t

	LKEHEAD	VGAADRV, MAJV, MINV, EDITNUM, LKETYPE_DEVICE

;This driver supports a standard VGA in text mode only.  It includes the hooks
;  to support an extension driver to provide graphics mode support for specific
;  extended VGAs.  The VGA is operated in color rext modes only.  Monochrome 
;  text modes are not supported.  Only the first 64KB of the 128KB text mode
;  character/attribute buffer is used.  The upper 64KB is not accessable.
;  Direct access to the VGA registers is not supported.  Direct access to the
;  character/attribute buffer is supported.  Loadable character fonts are
;  supported using BIOS or XOS calls only.  Fonts are always loaded to BOTH
;  planes 2 and 3 in an attempt to make some of the funny Trident VGAs work
;  right.

;Each virtual screen associated with a display is given a 128KB virtual address
;  space.  When the screen is the current screen, the bottom 64KB of this
;  address is mapped to the character/attribute buffer.  The upper 64KB is
;  mapped the same.  When the screen is not the current screen, the bottom
;  64KB is mapped to the virtual character/attribute buffer and the upper 64KB
;  is mapped to the virtual character generator buffer.  This allows the
;  loading of user defined fonts when the screen is not the current screen,
;  otherwise the upper 64KB is not really needed!  Each virtual screen also
;  has a "page list" which is a 32 element array of longs.  Each element
;  describes the state of a single display buffer page.

	.EXPORT xosvgaClrBuffer
	.EXPORT	xosvgaGetGVF
	.EXPORT	xosvgaGGetCurPos
	.EXPORT	xosvgaGSetCurCol
	.EXPORT	xosvgaGSetCurPat
	.EXPORT	xosvgaGSetCurPos
	.EXPORT xosvgaSetDHS
	.EXPORT	xosvgaSetGraphic
	.EXPORT	xosvgaSetGVF
	.EXPORT xosvgaSetPage

	DATA

xosvgaSetDHS::    .LONG ret002
xosvgaSetGraphic::.LONG	knlBadValue##
xosvgaSetPage::   .LONG ret002
xosvgaClrBuffer:: .LONG ret002
	CODE

	.SBTTL	vgadsp - VGA console device driver dispatch table

;VGA console device driver dispatch table

vgadspbgn:
xosvgaGGetCurPos:
	.LONG	knlIFnDev##	;tf_ggetcurpos= -72. - Get graphics cursor
xosvgaGSetCurPos:		;			 postion
	.LONG	knlIFnDev##	;tf_gsetcurpos= -68. - Set graphics cursor
xosvgaGSetCurCol:		;			 positon
	.LONG	knlIFnDev##	;tf_gsetcurcol= -64. - Set graphics cursor
xosvgaGSetCurPat:		;			 colors
	.LONG	knlIFnDev##	;tf_gsetcurpat= -60. - Set graphics cursor
xosvgaSetGVF:			;			 pattern
	.LONG	knlRtnZero##	;tf_setgvf    = -56. - Set graphics vert. freq.
xosvgaGetGVF:
	.LONG	knlRtnZero##	;tf_getgvf    = -52. - Get graphics vert. freq.

	.LONG	vgaloadfont#	;tf_loadfont  = -48. - Load font
	.LONG	vgaselfont#	;tf_selfont   = -44. - Select font table & mode
	.LONG	vgaenable	;tf_enable    = -40. - Enable video
	.LONG	vgadisable	;tf_disable   = -36. - Disable video
	.LONG	vgacurtype#	;tf_curtype   = -32. - Get/set cursor type (INT
				;			 10, function 01)
	.LONG	vgacurpos#	;tf_curpos    = -28. - Get/set cursor position
				;			 (INT 10, function 02)
	.LONG	vgadsppage#	;tf_dsppage   = -24. - Set display page (INT 10,
				;			 function 05)
	.LONG	vgascroll#	;tf_scroll    = -20. - Scroll window (INT 10,
				;			 functions 06 and 07)
	.LONG	vgagetatrchr#	;tf_getatc    = -16. - Get attribute and char.
				;			 (INT 10, function 08)
	.LONG	vgasetatrchr#	;tf_setatc    = -12. - Set attribute and char.
				;			 (INT 10, function 09)
	.LONG	vgasetchr#	;tf_setchr    =  -8. - Set character only (INT
				;			 10, function 0A)
	.LONG	xosconAttrib##	;tf_attrib    =  -4. - Get or set attributes
vgadsp:	.LONG	knlRtnZero##	;tf_transfer  =   0. - Transfer device
	.LONG	knlRtnZero##	;tf_opena     =   4. - Open additional
	.LONG	xosconOpen1##	;tf_open1     =   8. - Open first time
	.LONG	ret002		;tf_stop      =  12. - Stop output
	.LONG	ret002		;tf_clrout    =  16. - Clear output buffer
	.LONG	xosconEchChr##	;tf_echchr    =  20. - Echo character
	.LONG	xosconOutChr##	;tf_doutchr   =  24. - Direct output character
	.LONG	xosconOutBlk##	;tf_doutblk   =  28. - Direct output block
	.LONG	xosconOutStr##	;tf_doutstr   =  32. - Direct output string
	.LONG	knlIFnDev##	;tf_qoutchr   =  36. - Queued output character
	.LONG	knlIFnDev##	;tf_qoutblk   =  40. - Queued output block
	.LONG	knlIFnDev##	;tf_qoutstr   =  44. - Queued output string
	.LONG	knlRtnZero##	;tf_idle      =  48. - Set to idle state
	.LONG	knlTrmDoEcho##	;tf_resume    =  52. - Resume output
	.LONG	xosconMapScreen##;tf_mapscn   =  56. - Map screen buffer
	.LONG	xosconDosSet##	;tf_dosset    =  60. - Set up terminal for DOS
	.LONG	xosconDosUpd##	;tf_dosupd    =  64. - Update page 0 for DOS
	.LONG	xosconDosUse##	;tf_dosuse    =  68. - Use data on DOS page 0
	.LONG	vgadspmode#	;tf_dspmode   =  72. - Get or set display mode
	.LONG	vgaaaddunit	;tf_addunit   =  76. - Add unit
	.LONG	vgasstrans#	;tf_sstrans   =  80. - Screen symbiont transfer
	.LONG	vgassmaskwrt#	;tf_ssmaskwrt =  84. - Screen symbiont masked
				;			 write
	.LONG	vgassmapbufr#	;tf_ssmapbufr =  88. - Screen symbiont map
				;			 screen buffer
	.LONG	vgasspageflt#	;tf_sspageflt =  92. - Display page page fault
	.LONG	vgassstatus#	;tf_ssstatus  =  96. - Report screen status to
				;			 screen symbiont
	.LONG	vgassutil#	;tf_ssutil    = 100. - Screen symbiont utility
				;			 functions
	.LONG	0		;             = 104. - Reserved
	.LONG	vgavdinb	;tf_vdinb     = 108. - INB in virtual-86 mode
	.LONG	vgavdoutb	;tf_vdoutb    = 112. - OUTB in virtual-86 mode
	.LONG	vgadspcur#	;tf_dspcur    = 116. - Display cursor on screen
	.LONG	0		;             = 120. - Reserved
	.LONG	ret002		;tf_setdtr    = 124. - Set or clear DTR output
	.LONG	ret002		;tf_setrts    = 128. - Set or clear RTS output
	.LONG	ret002		;tf_getdsb    = 132. - Get data set bits
	.LONG	ret002		;tf_finout    = 136. - Ensure output is finished
	.LONG	ret002		;tf_imodechng = 140. - Input mode change
	.LONG	ret002		;tf_omodechng = 144. - Output mode change
	.LONG	xosconMapPhys##	;tf_mapphys   = 148. - Map physical display

VGADSPSIZE=!{$-vgadspbgn}/4
.PAGE
	.SBTTL	vgainit - VGA console driver initialization routine

	INITSUB	vgainit

	DATA

	.MOD	4
vgainitblk:					;Characteristics description
 DCHARBGN  1, knlDCharValCom##			;  block for initialization
 DCHARENT  RESULT, STR , , 0, 0, knlGetDcNullS##, 0       , 0

stdtype:.ASCIZ	"Standard VGA"

	ONCE

vgainit:PUSHL	FS
	PUSHL	EDX
	MOVL	EBX, #vgafonttbl#	;Set up our font tables

	MOVL	EAX, knlFont8x8L##
	MOVL	TF_8X8*8+0.B[EBX], EAX
	MOVL	TF_9X8*8+0.B[EBX], EAX

	MOVL	EAX, knlFont8x8H##
	MOVL	TF_8X8*8+4.B[EBX], EAX
	MOVL	TF_9X8*8+4.B[EBX], EAX

	MOVL	EAX, knlFont8x14L##
	MOVL	TF_8X14*8+0.B[EBX], EAX
	MOVL	TF_9X14*8+0.B[EBX], EAX

	MOVL	EAX, knlFont8x14H##
	MOVL	TF_8X14*8+4.B[EBX], EAX
	MOVL	TF_9X14*8+4.B[EBX], EAX

	MOVL	EAX, knlFont8x16L##
	MOVL	TF_8X16*8+0.B[EBX], EAX
	MOVL	TF_9X16*8+0.B[EBX], EAX

	MOVL	EAX, knlFont8x16H##
	MOVL	TF_8X16*8+4.B[EBX], EAX
	MOVL	TF_9X16*8+4.B[EBX], EAX

	MOVL	EBX, #vgafontfix#
	MOVL	EAX, knlFont9x8F##
	MOVL	TF_9X8*8+0.B[EBX], EAX
	MOVL	TF_9X8*8+4.B[EBX], EAX

	MOVL	EAX, knlFont9x14F##
	MOVL	TF_9X14*8+0.B[EBX], EAX
	MOVL	TF_9X14*8+4.B[EBX], EAX

	MOVL	EAX, knlFont9x16F##
	MOVL	TF_9X16*8+0.B[EBX], EAX
	MOVL	TF_9X16*8+4.B[EBX], EAX

	MOVL	EBX, #'VGAA'		;Register this as a terminal driver
	MOVL	EDX, #vgadsp
	CALL	knlTrmNewDriver##
	POPL	EDX
	POPL	FS
	JC	6$.S			;If error
	PUSHL	knlXCodePnt##
	MOVL	knlXCodePnt##, #vgaintcode#
	TESTL	EDX, EDX		;OK - have a characteristics list?
	JE	2$.S			;No
	MOVL	EBX, #vgainitblk	;Yes - point to characteristics table
	CALL	knlAddUnitChar##	;Process characteristics
	JC	10$.S			;If error
2$:	CLRL	EAX			;OK
	CLRL	EDX
	MOVL	ECX, knlXCodePnt##
	POPL	knlXCodePnt##
6$:	RET

;Here if error after the driver is registered

10$:	CALL	knlTrmUnlinkDriver##	;Unlink the driver
	STC				;Return failure
	RET

	CODE
.PAGE
	.SBTTL	vgaaaddunit - Subroutine to add console display unit

;Subroutine to add console display unit
;	c(AL) = Unit number
;	c(AH) = Screen number
;	CALL	vgaaaddunit
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal

$$$=!0
FRM vau_adapter, 1t	;Adapter type
FRM vau_screen , 1t	;Screen number
FRM vau_unit   , 1t	;Unit number
FRM            , 1t
FRM vau_ioreg  , 4t	;Display base IO register number
FRM vau_kbtype , 4t	;Keyboard driver type name
FRM vau_kbioreg, 4t	;Keyboard base IO register number
FRM vau_kbint  , 4t	;Keyboard interrupt number
FRM vau_inrbs  , 4t	;Input ring buffer size
FRM vau_inlbs  , 4t	;Input line buffer size
FRM vau_kbtype , 4t	;Keyboard type name
vau_SIZE=!$$$

;Description block for addunitchar

	DATA

	.MOD	4
vgaaaublk:
 DCHARBGN  2, knlDCharValCom##
 DCHARENT  UNIT   , DECV, , 4, 0, 0, retclc       , 0
 DCHARENT  SCREEN , DECV, , 4, 0, 0, vgaaauscreen , 0
 DCHARENT  TYPE   , TEXT, , 4, 0, 0, retclc       , 0
 DCHARENT  ADAPTER, TEXT, , 8, 0, 0, vgaaauadapter, 0
 DCHARENT  KBTYPE , TEXT, , 4, 0, 0, vgaaaukbtype , 0
 DCHARENT  IOREG  , HEXV, , 4, 0, 0, vgaaauioreg  , 0
 DCHARENT  KBIOREG, HEXV, , 4, 0, 0, vgaaaukbioreg, 0
 DCHARENT  KBINT  , DECV, , 1, 0, 0, vgaaaukbint  , 0
 DCHARENT  INRBS  , DECV, , 2, 0, 0, vgaaauinrbs  , 0
 DCHARENT  INLBS  , DECV, , 2, 0, 0, vgaaauinlbs  , 0

	CODE

adpttbl:.LONG	'MONO', 0
	.LONG	'COLO', 'R'
ADPTSZ=!{$-adpttbl}/8t

vgaaaddunit::
	ENTER	vau_SIZE, 0		;Allocate our stack frame
	CMPB	AH, #0			;Was a screen specified?
	JE	8$.S			;No - fail
	MOVL	vau_unit.B[EBP], EAX	;Yes - store unit and screen numbers
	MOVL	vau_ioreg.B[EBP], #-1	;Store illegal value for register number
	MOVB	vau_adapter.B[EBP], #DISP$COLOR ;Assume color adapter
	MOVL	vau_inrbs.B[EBP], #IRSIZE ;Store default buffer sizes
	MOVL	vau_inlbs.B[EBP], #IBSIZE
	MOVL	vau_kbtype.B[EBP], #'KBDA' ;Store default keyboard driver type
					   ;  name
	MOVL	EBX, #vgaaaublk		;Point to our description block
	MOVB	AL, #0			;Fail if bad name
	CALL	knlAddUnitChar##
	JC	6$.S			;If error
	CMPL	vau_ioreg.B[EBP], #-1.B	;Was an IO register specified?
	JE	8$.S			;No - fail

;CODE HERE TO CHECK FOR INTERFACE!

	JMP	12$.S

4$:	MOVL	EAX, #ER_PDNAV		;Fail if does not exist
6$:	MOVL	EBX, #QSTS$DONE
	CLRL	ECX
	LEAVE
	TOFORK
	STC
	RET

;Here if a required parameter is missing

8$:	MOVL	EAX, #ER_CHARM
	JMP	6$.S

10$:	CALL	knlGiveXRes##		;Yes - give it up
	JMP	6$.S

;Here if the interface exists

12$:	CALL	knlGetXRes##		;Get the exec memory resource
	MOVB	AL, vau_unit.B[EBP]	;Get unit number
	MOVB	AH, vau_kbint.B[EBP]	;Get keyboard interrupt number
	MOVL	EBX, #'VGAA'		;Get type name for console driver
	MOVL	ECX, vau_kbtype.B[EBP]	;Get type name for keyboard driver
	MOVL	ESI, vau_kbioreg.B[EBP]	;Get keyboard base IO register
	CALL	xosconMakeDhdb##	;Create the DHDB if don't have it
	JC	10$.S			;If error
	JE	16$			;If already had a DHDB
	MOVL	EAX, #DISP_VGA
	MOVL	dhdb_dispname.B[EDI], #stdtype
	MOVB	AL, vau_adapter.B[EBP]
	MOVL	dhdb_disptype.B[EDI], EAX
	MOVL	dhdb_bioreg.B[EDI], #P_EGABASE
	MOVL	dhdb_ptaddr.B[EDI], #0A0000h
	MOVL	dhdb_npages.B[EDI], #16t

	MOVL	EBX, #hwname+3		;Register our IO registers
	MOVZBL	EAX, dhdb_unit.B[EDI]
	CALL	knlPutDecNmbr##
	MOVL	EBX, #hwname
	MOVL	EDX, dhdb_bioreg.B[EDI]
	LEAL	ECX, 1F.B[EDX]
	CALL	knlRegIORegs##
	JC	10$.S
	PUSHL	EDI
	MOVL	ECX, #10000h		;Allocate address space
	CALL	knlGetXSpace##
	MOVL	EBX, EDI
	POPL	EDI
	JC	10$			;If error
	MOVL	dhdb_vtaddr.B[EDI], EBX	;Save virtual address
	ADDL	EBX, #la_data		;Get linear address for screen buffer
	MOVL	EDX, dhdb_ptaddr.B[EDI]	;Get physical address
	MOVL	ECX, #16t		;Get number of pages needed
	MOVL	EAX, #27h
	PUSHL	EDI
	MOVL	EDI, #-1
	CALL	knlMapPhyPages##	;Map the pages
	POPL	EDI
	JC	10$			;If error
16$:	MOVL	EAX, vau_inrbs.B[EBP]
	SHLL	EAX, #16t
	MOVW	AX, vau_inlbs.B[EBP]
	MOVB	DH, vau_screen.B[EBP]
	MOVL	ECX, #tdb_vgaSIZE	;Get size for a TDB
	CALL	xosconMakeTdb##		;Make the TDB
	JC	10$			;If error
	MOVL	EAX, dhdb_disptype.B[EDI]
	MOVL	tdb_disptype.B[ESI], EAX
	MOVL	tdb_bioreg[ESI], #P_EGABASE
	MOVL	EAX, dhdb_vgaddr.B[EDI]	;For now, just use the base mapping
	MOVL	tdb_vgaddr.B[ESI], EAX	;  for the graphics buffer
	MOVL	EAX, dhdb_gbfrsize.B[EDI]
	MOVL	tdb_gbfrsize[ESI], EAX
	PUSHL	EDI
	MOVL	ECX, #20000h		;Allocate address space
	CALL	knlGetXSpace##
	MOVL	EBX, EDI
	POPL	EDI
	JC	10$			;If error
	MOVL	tdb_vtaddr.B[ESI], EBX	;Save virtual address
	ADDL	EBX, #la_data		;Get linear address for screen buffer
	MOVL	EDX, dhdb_ptaddr.B[EDI]	;Get physical address
	MOVL	ECX, #16t		;Get number of pages needed
	MOVL	EAX, #27h
	PUSHL	EBX
	PUSHL	EDI
	MOVL	EDI, #-1
	CALL	knlMapPhyPages##	;Map the pages
	POPL	EDI
	POPL	EBX
	JC	10$			;If error
	ADDL	EBX, #10000h		;Get linear address for character
					;  generator buffer
	MOVL	EDX, dhdb_ptaddr.B[EDI]	;Get physical address
	MOVL	ECX, #16t		;Get number of pages needed
	MOVL	EAX, #27h
	PUSHL	EDI
	MOVL	EDI, #-1
	CALL	knlMapPhyPages##	;Map the pages
	POPL	EDI
	JC	10$			;If error
	CMPL	dhdb_curtdb.B[EDI], #0.B ;Have an active TDB now?
	JNE	17$.S			;Yes
	MOVL	dhdb_curtdb.B[EDI], ESI	;No - make this the active one
	ORB	tdb_stsdsp+1.B[ESI], #TSD$ACTDSP>8
17$:	PUSHL	EDI
	MOVL	tdb_ddisp.B[ESI], #vgadsp ;Store offset of console function
					  ;  dispatch table
	MOVL	tdb_dspchr.B[ESI], #vgachratr# ;Store offset of character output
	MOVL	EAX, #DM$NOCLEAR	       ;  routine
	TOFORK
	CALL	vgadspmode#		;Set up parameters for default mode
	FROMFORK
	MOVL	EAX, #DM_SETBASE	;Set up the base parameters
	CALL	xosconChkBiosMd##
	POPL	EDI
	MOVB	tdb_ifdsp.B[ESI], #0	;Indicate can not do queued output
	CALL	knlGiveXRes##		;Give up the exec memory resource
	MOVL	EDX, vau_ioreg.B[EBP]
	MOVL	tdb_bioreg[ESI], EDX	;Store base IO registser number
24$:	MOVL	EAX, tdb_irsize[ESI]	;Calculate input buffer stop level
	CMPL	EAX, #1024t
	JBE	28$.S
	MOVL	EAX, #512t
28$:	SHRL	EAX, #2
	MOVL	tdb_irbsl[ESI], EAX
	SHRL	EAX, #2			;Calculate input buffer panic level
	MOVL	tdb_irbpl[ESI], EAX
	POPL	ECX			;Get our return value
	CLRL	EAX
	MOVL	EBX, #QSTS$DONE
	LEAVE
	TOFORK
	RET
.PAGE
;Subroutine called by addunitchar for the "SCREEN" characteristic (we have
;  already stored the value which was passed to us by the caller - we do this
;  check here so the error bit will be set for the characteristic!)

vgaaauscreen:
	CMPL	EAX, #VDSPMAX+1.B
	JMP	8$.S

;Subroutine called by addunitchar for the "ADAPTER" characteristic

vgaaauadapter:
	MOVL	EBX, #adpttbl
	MOVL	ECX, #ADPTSZ
	CALL	knlGetDcVal1##
	JC	2$.S
	MOVB	vau_adapter.B[EBP], AL
2$:	RET

;Subroutine called by addunitchar for the "KBTYPE" characteristic

vgaaaukbtype:
	MOVL	vau_kbtype.B[EBP], EAX
	CLC
	RET

;Subroutine called by addunitchar for the "IOREG" characteristic

vgaaauioreg:
	CMPL	EAX, #100h		;Reasonable value?
4$:	JB	knlBadCharV##		;No
	MOVL	vau_ioreg.B[EBP], EAX	;Store value
6$:	CMPL	EAX, #1000h		;Is this a reasonable value?
8$:	JAE	knlBadCharV##		;No - fail
retclc:	CLC
ret002:	RET

;Subroutine called by addunitchar for the "KBIOREG" characteristic

vgaaaukbioreg:
	CMPL	EAX, #60h.B
	JE	10$.S
	CMPL	EAX, #100h		;Reasonable value?
	JB	4$.S			;No
10$:	MOVL	vau_kbioreg.B[EBP], EAX	;Store value
	JMP	6$.S

;Subroutine called by addunitchar for the "KBINT" characteristic

vgaaaukbint:
	CMPL	EAX, #1.B		;Valid interrupt level?
	JB	4$.S			;No - too small
	CMPL	EAX, #2.B		;Level 2?
	JNE	12$.S			;No
	MOVB	AL, #9			;Yes - change it to level 9
12$:	MOVL	vau_kbint.B[EBP], EAX	;Store interrupt level
	CMPL	EAX, #15t.B		;Too large?
	JMP	8$.S
 
;Subroutine called by addunitchar for the "INRBS" characteristic

vgaaauinrbs:
	ANDB	AL, #0FCh		;Make sure even number of longs
	CMPL	EAX, #40t.B		;Is it too small?
	JA	14$.S			;No
	MOVB	AL, #40t		;Yes - use minimum
14$:	MOVL	vau_inrbs.B[EBP], EAX
	JMP	6$.S

;Subroutine called by addunitchar for the "INLBS" characteristic

vgaaauinlbs:
	ANDB	AL, #0FCh		;Make sure even number of longs
	CMPL	EAX, #40t.B		;Is it too small?
	JA	16$.S			;No
	MOVB	AL, #40t		;Yes - use minimum
16$:	MOVL	vau_inlbs.B[EBP], EAX
	JMP	6$.S
.PAGE
	.SBTTL	vgadisable - Subroutine to disable the screen

;Subroutine to disable the screen
;	c{EDI} = Offset of DHDB
;	c{ESI} = Offset of TDB
;	CALL	vgadisable

vgadisable:
	MOVB	AH, #20h		;Get value for bit
	JMP	4$.S			;Continue

	.SBTTL	vgaenable - Subroutine to enable the screen

;Subroutine to enable the screen
;	c{EDI} = Offset of DHDB
;	c{ESI} = Offset of TDB
;	CALL	vgaenable

vgaenable:
	MOVB	AH, #0			;Get value for bit
4$:	MOVL	EDX, tdb_bioreg[ESI]	;Point to sequencer index register
	ADDL	EDX, #P_EGASEQINDX-P_EGABASE.B
	INB	[DX]			;Save current index value
	IOPAUSE
	PUSHL	EAX
	MOVB	AL, #0			;Set to address the reset register
	OUTB	[DX]
	IOPAUSE
	INCL	EDX
	INB	[DX]
	IOPAUSE
	ANDB	AL, #0FDh		;Do synchronous reset
	OUTB	[DX]
	MOVL	ECX, #2
	CALL	knlSDelay##
	ORB	AL, #02h
	OUTB	[DX]
	IOPAUSE
	DECL	EDX			;Set to address the clocking mode
	MOVB	AL, #1			;  register
	OUTB	[DX]
	IOPAUSE
	INCL	EDX
	INB	[DX]			;Get current value
	IOPAUSE
	ANDB	AL, #0DF		;Remove bit 5
	ORB	AL, AH			;Put in the new value
	OUTB	[DX]			;Output the new value
	IOPAUSE
	POPL	EAX			;Restore old index value
	DECL	EDX
	OUTB	[DX]
	RET
.PAGE
	.SBTTL	Routines to handle accesses to display controller registers

;We provide limited support for direct access to the VGA registers, mostly
;  to support DOS programs that do limited direct access.  We allow all of
;  the CRTC registers to be read and allow the CRTC registers which control
;  cursor shape and position to be written.  All other VGA register accesses
;  are quietly ignored.  Output does nothing and input always returns all 1's.

	.SBTTL	vgavdinb - INB instruction to display controller

;Here when have INB instruction to the display controller
;	c{EDX} = IO port (between 3B0 and 3DF)

vgavdinb:
	CMPB	DL, #0D4h
	JE	inreg3D4.S
	CMPB	DL, #0D5h
	JE	inreg3D5.S
	MOVB	AL, #0FFh
	CLC
	RET

;Here for INB instruction to the CRT controller index register (3D4) - we
;  return the last value he gave us

inreg3D4:
	MOVB	AL, tdb_crtcregn.B[ESI]
	CLC
	RET

;Here for INB instruction to the CRT controller index or data register (3D5)
;  - We just read the register he wants

inreg3D5:
	DECL	EDX
	MOVB	AL, tdb_crtcregn.B[ESI]
	TOFORK
	OUTB	[DX]
	IOPAUSE
	INCL	EDX
	INB	[DX]
	FROMFORK
	CLC
	RET
.PAGE
	.SBTTL	vgavdoutb - OUTB instruction to display controller

;Here on OUTB instruction to display controller
;	c{EDX} = IO port (between 3B0 and 3DF)

vgavdoutb:
	CMPB	DL, #0D4h
	JE	outreg3D4.S
	CMPB	DL, #0D5h
	JE	outreg3D5.S
	CLC
	RET

;Here for OUTB instruction to the CRT controller index register (3D4) - We
;  just save his value to use when he accesses the data register

outreg3D4:
	ANDB	AL, #1Fh		;Make sure no junk
	MOVB	tdb_crtcregn.B[ESI], AL	;Store value in our TDB
	RET				;Thats all

;Here for OUTB instruction to the CRT controller data register (3D5)

outreg3D5:
	RET

	DATA

hwname:	.LONG	'TRM', 0

	END

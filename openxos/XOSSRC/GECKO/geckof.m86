	.TITLE	GECKOF

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386
	.INCLUD	GECKO.PAR
	.INCLUD	XOSINC:/XMAC/XOS.PAR
	.INCLUD	XOSINC:/XMAC/XOSTRM.PAR
	.INCLUD	XOSINC:/XMAC/XOSRUN.PAR
	.INCLUD	XOSINC:/XMAC/CLIBX.PAR
	.INCLUD	XOSINC:/XMAC/PROCARG.PAR

GS_EXPORT=0C0h

	.STDSEGS

rld    =!10h
symbufr=!0E00h

	.PSECT	_DATA_p

;Define the procarg table

optword:.LONG	sques, 0                   , 0, fnchelp, 0
	.LONG	sh   , 0                   , 0, fnchelp, 0
	.LONG	shel , 0                   , 0, fnchelp, 0
	.LONG	shelp, 0                   , 0, fnchelp, 0
	.LONG	sbas , ASF$VALREQ|ASF$NVAL , 0, fncbase, 0
	.LONG	sbase, ASF$VALREQ|ASF$NVAL , 0, fncbase, 0
	.LONG	0

;Option name strings for procarg

sques:	 .ASCIZ  "?"
sh:	 .ASCIZ  "H"
shel:	 .ASCIZ  "HEL"
shelp:	 .ASCIZ  "HELP"
sbas:	 .ASCIZ  "BAS"
sbase:	 .ASCIZ  "BASE"
.PAGE
	.PSECT	_TEXT_p

mainalt::
	CLRL	EAX
	PUSHL	EAX			;Search for our environment string
	PUSHL	DS
	PUSHL	#envname
	PUSHL	EAX
	PUSHL	EAX
	PUSHL	DS
	PUSHL	#blkbufr
	PUSHL	#1024t
	PUSHL	EAX
	PUSHL	EAX
	CALLF	svcSysFindEnv##
	ORL	EAX, EAX
	JS	4$.S			;If not found
	CLRL	EAX			;Found it - process value as arguments
	PUSHL	EAX			;No default extension for indirect file
	PUSHL	EAX			;No next line function
	PUSHL	EAX			;Error function
	PUSHL	EAX			;No function for non-keyword args
	PUSHL	EAX			;Offset of keyword table
	PUSHL	#optword		;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#envpntr		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
4$:	MOVL	ESI, 4.B[ESP]		;Get offset of argument msect
	PUSHL	ESI
	CALL	getfarg#		;Get offset of first argument
	POPL	ECX
	MOVL	argpntr, EAX		;Store it for procarg
	CLRL	EAX
	PUSHL	EAX			;No default extension for indirect file
	PUSHL	EAX			;No next line function
	PUSHL	EAX			;Error function
	PUSHL	#filename		;Function called for non-keyword args
	PUSHL	EAX			;Offset of keyword table
	PUSHL	#optword		;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#argpntr		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	PUSHL	DS			;Give up the argument data
	PUSHL	ESI
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
	CMPL	filespec, #0.B
	JE	nofile

;Here when ready to open the file

	PUSHL	#O$IN|O$OUT.B
	PUSHL	DS
	PUSHL	filespec
	PUSHL	DS
	PUSHL	#opnparms
	CALLF	svcIoOpen##
$$$$oo::
	TESTL	EAX, EAX
	JS	10$.S

;Here with program to be examined opened

	MOVL	fhndl#, EAX		;Store the file handle
	MOVL	EAX, baseval#
	ADDL	EAX, length
	DECL	EAX
	MOVL	topval#, EAX
	PUSHL	filespec
	PUSHL	#fmtline1
	PUSHL	#line1msg
	CALL	sprintf#
	PUSHL	topval#
	PUSHL	baseval#
	PUSHL	#fmtline2
	PUSHL	#line2msg
	CALL	sprintf#
	ADDL	ESP, #28t.B
	CALLF	geckoentr#		;Go to GECKO
	PUSHL	#0.B
	CALL	exit#

;Here if error opening the file

10$:	PUSHL	EAX
	PUSHL	#03h.B
	PUSHL	DS
	PUSHL	#blkbufr
	CALLF	svcSysErrMsg##

$$$$xx::
	PUSHL	#blkbufr
	PUSHL	filespec
	PUSHL	#fmtoemsg
	PUSHL	#_stderr#
	CALL	fprintf#
	PUSHL	#1.B
	CALL	exit#
.PAGE
;Function called by procarg for the HELP option

fnchelp:PUSHL	#_stdout#
	PUSHL	#helpmsg
	CALL	fputs#
	PUSHL	#0.B
	CALL	exit#

;Function called by procarg for the BASE option

fncbase:MOVL	EBX, 4.B[ESP]		;Point to argument data
	MOVL	EAX, argdata_value.B[EBX] ;Save the value
	MOVL	baseval#, EAX
rtntrue:MOVL	EAX, #1
	RET

;Function called by procarg for non-keyword arguments - this must be our file
;  specification

filename:
	PUSHL	ESI
	CMPL	filespec, #0.B		;Already have a file name?
	JNE	10$.S			;Yes - fail
	MOVL	ESI, 8.B[ESP]		;Get offset of the argument string
	PUSHL	ESI			;Get length of the string
	CALL	strlen#
	POPL	ECX
	INCL	EAX
	PUSHL	EAX			;Get space for the name
	CALL	sbrk#
	POPL	ECX
	MOVL	filespec, EAX
	PUSHL	ESI			;Copy the name
	PUSHL	EAX
	CALL	strmov#
	ADDL	ESP, #8.B
	POPL	ESI
	JMP	rtntrue.S

;Here if more than one file specified

10$:	MOVL	EBX, #msgmfn
	JMP	14$.S

;Here if no file specified

nofile:	MOVL	EBX, #noprog
14$:	PUSHL	#_stderr#
	PUSHL	EBX
	CALL	fputs#
	PUSHL	#0.B
	CALL	exit#
.PAGE
	.SBTTL	Data

	.PSECT	_DATA_p

prgname:: .ASCIZ "GECKOF"
envname:  .ASCIZ "^XOS^GECKOF^OPT"
noprog:	  .ASCIZ "? GECKOF: No file specified"{CR,LF}
msgmfn::  .ASCIZ "? GECKOF: More than one file specified"{CR,LF}
fmtoemsg: .ASCIZ "? GECKOF: Error opening file %s"{LF}"          %s"{LF}
fmtline1: .ASCIZ "File %s opened"{CR,LF}
fmtline2: .ASCIZ "Base address = 0x%8.8X, highest address = 0x%8.8X"{CR,LF}

helpmsg:  .ASCII {LF}"This program allows a file to be examined as instructions"
	  .ASCII " or data. Command"{LF}"format is:"{LF,LF}
	  .ASCII "    GECKOF filespec {/BASE=offset} {/SIZE=size}"{LF,LF}
	  .ASCII "where: filespec = File specification"{CR,LF}
	  .ASCII "       offset   = Memory offset of start of file"{LF}
	  .ASCIZ "       size     = Segment size (16 or 32)"{LF,LF}

	.MOD	4
argpntr:  .LONG 0, 0		;Argument pointer for procarg
envpntr:  .LONG blkbufr, 0	;Array used by procarg
filespec: .LONG 0
line1pnt::.LONG	line1msg	;Offset of message for line 1
line2pnt::.LONG	line2msg	;Offset of message for line 2

geckosymcnt::
	 .LONG	0		;Number of symbol table entries
geckosymtbl::
	 .LONG	0
v86sel:: .LONG	0		;Selector for segment linked to V86 space


opnparms:.BYTE	PAR$GET|REP_DECV, 4t
	 .WORD	IOPAR_LENGTH
length:  .LONG	0
	 .BYTE	0

	.MOD	4
line1msg: .BLKB 80t
line2msg: .BLKB 80t
blkbufr::.BLKB  1024t

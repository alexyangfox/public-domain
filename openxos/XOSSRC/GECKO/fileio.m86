	.SBTTL	USERIO  - Character I/O routines using user mode IO for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;This version of the IO module uses the VGA display in XOS text mode (mode 1)
;  or XOS graphic mode (mode 2)

VRTLIN =!0B3h		;Character to use as vertical line in dump output
BRDATR =!06h		;Attribute byte for border
INVBRD =!BRDATR*10h
TXTATR =!02h		;Attribute byte for normal text
INVATR =!20h		;Attribute byte for inverse text
ERRATR =!0Ch		;Attribute byte for error message text

GBLACK =!02104h		;"Black" color for graphic mode

textbufr =!3F0000h	;Offset for text mode screen buffer
graphbufr=!400000h	;Offset for graphic mode screen buffer

tsclladdr=!textbufr+7000h+6*160t ;Offset of text mode scrolling area
tnscladdr=!textbufr+7000h+160t ;Offset of text mode nonscrolling area
tscllsize=!18t		;Size of text mode scrolling area (lines)

txscrlbf =!txdispbf+6*160t ;Address of scrolling region in save buffer
txnsclbf =!txdispbf+160t ;Address of nonscrolling region in save buffer

CCHR =!' '+TXTATR*100h	;Character + attributes to clear screen
VBCHR=!0BAh+BRDATR*100h	;Character + attributes for vertical border
HBCHR=!0CDh+BRDATR*100h	;Character + attributes for horizontal border

	.SBTTL	swterm - TRM command - switch to or from a serial port

swterm:	MOVL	EBX, #niytmsg
	JMP	outstrcca
.PAGE
	.SBTTL	setdisp - Subroutine to set up our display routine

;Subroutine to set up our display routine
;	CALL	setdisp

setdisp:PUSHL	#DH_STDTRM.B		;Get current mode
	PUSHL	#DM$RTNDATA
	PUSHL	DS
	PUSHL	#userdata
	CALLF	svcTrmDspMode##
	TESTL	EAX, EAX		;Serial terminal?
	JG	initdisp.S		;No
2$:	DECB	serterm			;Yes
	RET

;Here if not serial terminal

initdisp:
	CMPB	AL, #DM_TEXT		;Text mode display
	JNE	initgraph.S		;No
inittext:
	PUSHL	#DH_STDTRM.B		;Yes - get text mode screen buffer
	PUSHL	DS
	PUSHL	#textbufr
	PUSHL	#8000h
	PUSHL	#0.B
	CALLF	svcTrmMapScrn##
	TESTL	EAX, EAX
	JS	2$.S			;If error, assume serial terminal
	MOVB	gmode, #0
	JMP	6$.S

;Here if in graphic mode

initgraph:
	PUSHL	#DH_STDTRM.B		;Yes - get graphic mode screen buffer
	PUSHL	DS
	PUSHL	#graphbufr
	PUSHL	#400000h
	PUSHL	#0.B
	CALLF	svcTrmMapScrn##
	TESTL	EAX, EAX
	JS	2$			;If error, assume serial terminal
	MOVB	gmode, #1
	CALL	rgnclear
6$:	MOVL	EAX, #CCHR+CCHR*10000h	;Fill buffer with spaces
	MOVL	EDI, #txdispbf
	MOVL	ECX, #400h
	CLD
	RSTOSL	[EDI]
	MOVL	EDI, #txdispbf		;Set up our frame
	MOVL	ESI, #lblmsg		;Top line
	MOVL	EDX, #LBLSIZE
	CALL	mline
	MOVL	EDI, #txdispbf+160t*5	;Middle line
	CALL	fline
	MOVL	EDI, #txdispbf+160t*24t	;Bottom line
	MOVL	ESI, #cprmsg
	MOVL	EDX, #CPRSIZE
	CALL	mline
	MOVL	EDI, #txdispbf+158t	;Left and right sides
	MOVL	ECX, #24t
	MOVL	EAX, #VBCHR+VBCHR*10000h
8$:	STOSL	[EDI]
	ADDL	EDI, #156t
	LOOP	ECX, 8$
	MOVW	txdispbf+0, #0C9h+BRDATR*100h ;Corners
	MOVW	txdispbf+158t, #0BBh+BRDATR*100h
	MOVW	txdispbf+800t, #0CCh+BRDATR*100h
	MOVW	txdispbf+958t, #0B9h+BRDATR*100h
	MOVW	txdispbf+3840t, #0C8h+BRDATR*100h
	MOVW	txdispbf+3998t, #0BCh+BRDATR*100h
	RET				;Finished
.PAGE
	.SBTTL	mline - Subroutine to display message in frame border

;Subroutine to display message in frame border
;	c[EDX] = Length of message (number of words)
;	c[EDI] = Offset for place to start border in screen save buffer
;	c[ESI] = Offset for message string in code segment (includes
;		   attribute bytes)
;	CALL	mline

mline:	CALL	fline			;Put border line in buffer
	SUBL	EDI, #80t		;Calculate address for message
	SUBL	EDI, EDX
	ANDL	EDI, #0FFFFFFFEh.B	;Make sure word address
	MOVL	ECX, EDX
	RMOVSW	[EDI], CS:[ESI]		;Put message in buffer
	RET				;Finished

	.SBTTL	fline - Subroutine to store horizontal border line in screen save buffer

;Subroutine to store horizontal border line in screen save buffer
;	c[DI] = Offset for place to start border in screen save buffer
;	CALL	fline

fline:	MOVL	ECX, #40t		;Border is 80 characters
	MOVL	EAX, #HBCHR+HBCHR*10000h ;Get attribute byte and character
	RSTOSL	[EDI]			;Put border in buffer
	RET				;Thats all
.PAGE
	.SBTTL	setvec - Subroutine to set up GECKO's vectors

;Subroutine to set up GECKO's vectors
;	CALL	setvec

setvec:	RET

	.SBTTL	intusr - Subroutine to initialize user environment when GECKO is started

;Subroutine to initialize the user environment when GECKO is started
;	CALL	intusr

intusr:	RET
.PAGE
	.SBTTL	entgecko - Subroutine to set up for entry to GECKO

;Subroutine to set up for entry to GECKO
;	CALL	entgecko

entgecko:
	CLD
	PUSHL	#!value
	POPL	DS
	POPL	entrtn			;Save our return address
	POPL	uregGS			;Save segment registers
	POPL	uregFS
	POPL	uregES
	POPL	uregDS
	POPL	uregEIP	 		;Save user IP
	POPL	uregCS			;Save user CS
	POPL	uregEFR			;And save user flags
	ADDL	ESP, #4.B		;Discard stack count/interrupt number
	TESTB	uregEFR+2, #02		;Trap from V86 mode?
	JE	2$.S			;No
	POPL	uregESP			;Yes - save V86 stack pointer
	POPL	uregSS
	MOVL	uESP, ESP
	MOVL	uSS, SS
	JMP	4$.S

2$:	MOVL	uregESP, ESP		;Save user stack pointer
	MOVL	uregSS, SS
4$:	PUSHL	DS			;Set up the GECKO stack pointer
	POPL	SS

	CMPL	xESP, #0.B
	JE	5$.S

	MOVL	ESP, xESP
	MOVL	xESP, #0
	JMP	55$.S

5$:	MOVL	horpsn, #0
	MOVL	verpsn, #0
	MOVW	curlin, #0

55$:


	CALL	savusr
	CALL	xscreen			;Set up GECKO's screen
	CALL	xregdmp			;Update register display
	MOVL	EDI, #bpttbl		;Point to breakpoint table
	MOVL	ECX, #BPTNUM
	CLRL	ESI
6$:	CMPB	[EDI], #0		;Is this entry in use?
	JE	12$.S			;No - go on
	MOVL	EBX, bt_ofs.B[EDI]	;Yes - get address
	MOVL	EDX, bt_seg.B[EDI]
	INCL	EBX
	CMPL	EBX, uregEIP		;Now stopped at this breakpoint?
	JNE	10$.S			;No
	MOVL	EAX, uregCS		;Maybe
	BTL	EAX, #16t
	JC	8$.S
	ANDB	AL, #0FCh
8$:	CMPL	EDX, EAX
	JNE	10$.S			;No
	MOVL	ESI, EDI		;Yes - remember it
10$:	DECL	EBX
	MOVB	AL, bt_ins.B[EDI]	;Get instruction
	CALL	putmbyte		;Restore instruction
12$:	ADDL	EDI, #bt_ENSZ
	LOOP	ECX, 6$
	MOVL	EAX, oradix		;Reset temporary output radix
	MOVL	tradix, EAX
	MOVB	AL, poutmd		;And reset temporary output mode
	MOVB	toutmd, AL
	JMPIL	entrtn			;Return from entgecko
.PAGE
savusr:	MOVL	uregEAX, EAX		;Save EAX
	PUSHL	#8.B			;Disable signals
	CALLF	svcSchSetLevel##
	MOVL	uregEBX, EBX		;Save other registers
	MOVL	uregECX, ECX
	MOVL	uregEDX, EDX
	MOVL	uregEDI, EDI
	MOVL	uregESI, ESI
	MOVL	uregEBP, EBP
	CLRL	EAX
	TESTB	uregEFR+2, #02		;From V86 mode?
	JE	4$.S			;No
	INCL	EAX			;Yes
4$:	MOVW	uregSS+2, AX
	MOVW	uregES+2, AX
	MOVW	uregDS+2, AX
	MOVW	uregFS+2, AX
	MOVW	uregGS+2, AX
	MOVW	uregCS+2, AX
	PUSHL	#80000000h		;Disable watchpoints
	CALLF	svcMemWPCntl##
	PUSHL	#DH_STDTRM.B		;Get user's terminal state
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	DS
	PUSHL	#trmgetparm
	CALLF	svcIoInBlockP##
	MOVL	inpbits, #TIM$IMAGE|TIM$DEBUG ;Set up GECKO's terminal state
	MOVL	outbits, #TOM$IMAGE
	PUSHL	#DH_STDTRM.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	DS
	PUSHL	#trmsetparm
	CALLF	svcIoInBlockP##
	RET
.PAGE
	.SBTTL	xscreen - Subroutine to display GECKO's screen

;Subroutine to display GECKO's screen
;	CALL	xscreen

xscreen:CMPB	serterm, #0		;Using memory mapped display?
	JNE	4$			;No - nothing needed here
	PUSHL	#DH_STDTRM.B		;Get current display mode data
	PUSHL	#DM$RTNDATA
	PUSHL	DS
	PUSHL	#userdata
	CALLF	svcTrmDspMode##
	MOVL	usermode, EAX
	CMPB	AL, #DM_TEXT		;Text mode?
	JNE	8$			;No
	PUSHL	#DH_STDTRM.B		;Yes - set GECKO display mode
	PUSHL	#DM$NOCLEAR|DM$USEDATA|DM_TEXT
	PUSHL	DS
	PUSHL	#gecdata
	CALLF	svcTrmDspMode##
	PUSHL	#DH_STDTRM.B
	PUSHL	#7.B
	CALLF	svcTrmDspPage##
	MOVL	userpage, EAX
	MOVL	EDI, DS			;Save user's screen
	MOVL	ES, EDI
	MOVL	EDI, #tudispbf
	MOVL	ESI, #textbufr+7000h
	MOVL	ECX, #1024t
	CLD
	RMOVSL	[EDI], [ESI]
	PUSHL	#DH_STDTRM.B		;Save user's cursor position
	PUSHL	userpage
	PUSHL	#-1.B
	PUSHL	#-1.B
	CALLF	svcTrmCurPos##
	MOVW	ucursor, AX
	PUSHL	#DH_STDTRM.B		;Set GECKO cursor position
	PUSHL	#7.B
	MOVZBL	EAX, xcursor+0
	PUSHL	EAX
	MOVZBL	EAX, xcursor+1
	PUSHL	EAX
	CALLF	svcTrmCurPos##
	MOVL	EDI, #textbufr+7000h	;Set up GECKO's screen
	MOVL	ESI, #txdispbf
	MOVL	ECX, #1024t
	RMOVSL	[EDI], [ESI]
	MOVB	screen, #1		;Remember displaying GECKO's screen
4$:	RET				;Thats all

;Here if not now in text mode

8$:	MOVL	EBX, userdata+dm_horiz	;Get current screen width
	MOVL	gwidth, EBX		;Save new width
	IMULL	EAX, EBX, #28t.B	;Update the non-scrolling and
	IMULL	ECX, EAX, #5t		;  scrolling area offsets
	ADDL	EAX, #graphbufr
	ADDL	EAX, userdata+dm_pagesize
	MOVL	gnscladdr, EAX
	ADDL	EAX, ECX
	MOVL	gsclladdr, EAX
	ADDL	EBX, EBX		;Get number of bytes per scan line
	CMPB	gmode, #0		;Did we just switch modes?
	JNE	10$.S			;No
	PUSHL	DS			;Yes - give up the text mode screen
	PUSHL	#textbufr		;  screen mapping
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
	PUSHL	#DH_STDTRM.B		;Map the graphic mode screen buffer
	PUSHL	DS
	PUSHL	#graphbufr
	PUSHL	#400000h
	PUSHL	#0.B
	CALLF	svcTrmMapScrn##
	TESTL	EAX, EAX
	JS	20$			;If error, bail out!
	MOVB	gmode, #1
	CALL	rgnclear
10$:	PUSHL	#DH_STDTRM.B		;Switch to display page 1
	PUSHL	#1.B
	CALLF	svcTrmDspPage##
	MOVB	screen, #1		;Remember displaying GECKO's screen
	PUSHL	#DH_STDTRM.B		;Disable the graphics cursor
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcTrmGSetCurPos##
xscreen2:
	PUSHL	verpsn			;Regenerate the Gecko screen
	PUSHL	horpsn
	MOVB	AL, nonscrl
	PUSHL	EAX
	PUSHL	#25t.B
	MOVB	nonscrl, #1
	MOVL	verpsn, #-1
	MOVL	horpsn, #0
	MOVL	ESI, #txdispbf
14$:	MOVL	ECX, #80t
16$:	LODSW	[ESI]
	CALL	onscrn4
	INCL	horpsn
	LOOP	ECX, 16$
	MOVL	horpsn, #0
	INCL	verpsn
	DECL	[ESP]
	JNE	14$.S
	POPL	EAX
	MOVL	EAX, horcur		;Now display the cursor if we need to
	CMPL	EAX, #-1.B
	JE	18$.S
	MOVB	nonscrl, #0
	DECL	EAX
	MOVL	horpsn, EAX
	MOVL	EAX, vercur
	MOVL	verpsn, EAX
	CALL	putgcur
18$:	POPL	EAX
	MOVB	nonscrl, AL
	POPL	horpsn
	POPL	verpsn
	RET

20$:	PUSHL	#0FFF
	CALL	svcSchExit##
.PAGE
	.SBTTL	rstusr - Subroutine to restore user state

;Subroutine to restore user state
;	CALL	rstusr

rstusr:	CMPB	screen, #0		;Need to switch screens?
	JE	rstus2.S		;No
	CALL	uscreen			;Yes - restore user screen
rstus2:	MOVL	EAX, inpbitg		;Restore user's terminal state
	MOVL	inpbits, EAX
	MOVL	EAX, outbitg
	MOVL	outbits, EAX
	PUSHL	#DH_STDTRM.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	DS
	PUSHL	#trmsetparm
	CALLF	svcIoInBlockP##
	PUSHL	#40000000h		;Enable watchpoints
	CALLF	svcMemWPCntl##
	MOVL	EDI, uregEDI
	MOVL	ESI, uregESI
	MOVL	EBP, uregEBP
	MOVL	EDX, uregEDX
	MOVL	ECX, uregECX
	MOVL	EBX, uregEBX
	MOVL	EAX, uregEAX
retio06:RET				;Finished
.PAGE
	.SBTTL	uscreen - Subroutine to save GECKO screen and display user screen

;Subroutine to save GECKO screen and display user screen
;	CALL	uscreen

uscreen:CMPB	serterm, #0		;Using memory mapped display?
	JNE	retio06.S		;No - nothing needed here
	CMPB	gmode, #0		;Yes - graphic mode?
	JNE	4$			;Yes - go handle that
	MOVL	EDI, DS			;No - save GECKO's screen
	MOVL	ES, EDI
	MOVL	EDI, #txdispbf
	MOVL	ESI, #textbufr+7000h
	MOVL	ECX, #1024t
	CLD
	RMOVSL	[EDI], [ESI]
	PUSHL	#DH_STDTRM.B		;Restore user's display mode
	MOVL	EAX, usermode
	ORL	EAX, #DM$NOCLEAR|DM$USEDATA
	PUSHL	EAX
	PUSHL	DS
	PUSHL	#userdata
	CALLF	svcTrmDspMode##
	PUSHL	#DH_STDTRM.B
	PUSHL	userpage
	CALLF	svcTrmDspPage##
	PUSHL	#DH_STDTRM.B		;Save GECKO cursor position
	PUSHL	#7.B
	PUSHL	#-1.B
	PUSHL	#-1.B
	CALLF	svcTrmCurPos##
	MOVW	xcursor, AX
	PUSHL	#DH_STDTRM.B		;Restore user's cursor position
	PUSHL	userpage
	MOVZBL	EAX, ucursor+0
	PUSHL	EAX
	MOVZBL	EAX, ucursor+1
	PUSHL	EAX
	CALLF	svcTrmCurPos##
	MOVL	EDI, #textbufr+7000h	;Set up user's screen
	MOVL	ESI, #tudispbf
	MOVL	ECX, #1024t
	RMOVSL	[EDI], [ESI]
	JMP	10$.S

;Here if graphic mode

4$:	PUSHL	#DH_STDTRM.B		;Switch to display page 0
	PUSHL	#0.B
	CALLF	svcTrmDspPage##
	PUSHL	#DH_STDTRM.B		;Restore the graphics cursor
	PUSHL	#1.B
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcTrmGSetCurPos##
10$:	MOVB	screen, #0		;Remember displaying user's screen
	RET				;Thats all
.PAGE
;Here for exit command

goexit:	CALL	outcrl
	CMPB	screen, #0		;Need to switch screens?
	JE	2$.S			;No
	CALL	uscreen			;Yes - restore user screen
2$:	PUSHL	#0.B
exit2:	CALLF	svcSchExit##
4$:	JMP	4$.S
.PAGE
;Here on terminal ^P interrupt

cpent:	CALL	entgecko   		;Do common entry stuff
	MOVL	curbpt, #0		;No current breakpoint now
	MOVL	EBX, #ci0msg		;No
	JMP	bpten6
.PAGE
	.SBTTL	getmtype - Subroutine to get memory segment type

;Subroutine to get memory segment type (for file access, this always returns
;  10t to indicate a 16-bit data segment)
;	c[DX] = Segment selector
;	CALL	getmtype
;	c(AL)  = Segment type
;		    2t = 32-bit data segment
;		    5t = 32-bit code segment
;		   10t = 16-bit data segment
;		   13t = 16-bit code segment

getmtype:
	MOVB	AL, #10t		;Get memory type from last access
	RET
.PAGE
	.SBTTL	getmbyte - Subroutine to get byte from the file

;Subroutine to get byte from the file
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	getmbyte
;	c{EAX} = Value (byte zero extended to 32 bits)

getmbyte:
	CALL	setfpos			;Set file position
	JC	4$.S			;If error
	MOVL	ECX, boffset
	MOVZBL	EAX, blkbufr#[ECX]
	RET

	.SBTTL	getmword - Subroutine to get word from memory

;Subroutine to get word from memory
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	getmword
;	c{EAX} = Value (word zero extended to 32 bits)

getmword:
	CALL	getmbyte
	JC	4$.S
	PUSHL	EAX
	PUSHL	EBX
	INCL	EBX
	CALL	getmbyte
	POPL	EBX
	POPL	ECX
	JC	4$.S
	MOVB	AH, AL
	MOVB	AL, CL
4$:	RET

	.SBTTL	getmlong - Subroutine to get long from memory

;Subroutine to get long from memory
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	getmlong
;	c{EAX} = Value

getmlong:
	CALL	getmword
	JC	4$.S
	PUSHL	EAX
	PUSHL	EBX
	ADDL	EBX, #2t.B
	CALL	getmword
	POPL	EBX
	POPL	ECX
	JC	4$.S
	SHLL	EAX, #16t
	ORL	EAX, ECX
	RET

	.SBTTL	putmbyte - Subroutine to store byte in memory

;Subroutine to store byte in memory
;	c(AL)  = Value
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	putmbyte

putmbyte:
	PUSHL	EAX
	CALL	setfpos
	POPL	EAX
	JC	6$.S
	MOVL	ECX, boffset
	MOVB	blkbufr#[ECX], AL
	MOVB	modified, #1
6$:	RET

	.SBTTL	putmword - Subroutine to store word in memory

;Subroutine to store word in memory
;	c[AX]  = Value
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	putmbyte

putmword:
	PUSHL	EAX
	CALL	putmbyte
	POPL	ECX
	JC	4$.S
	MOVB	AL, CH
	CALL	putmbyte
	JC	4$.S
	JMP	10$.S

	.SBTTL	putmlong - Subroutine to store long in memory

;Subroutine to store long in memory
;	c{EAX} = Value
;	c[DX]  = Segment selector
;	c{EBX} = Segment offset
;	CALL	putmbyte

putmlong:
	PUSHL	EAX
	CALL	putmword
	POPL	ECX
	JC	4$.S
	SHRL	ECX, #16t
	MOVL	EAX, ECX
	CALL	putmword
	JC	4$.S
10$:	CMPB	modified, #0
	JE	12$.S
	MOVB	modified, #0
	PUSHL	fhndl
	PUSHL	DS
	PUSHL	#blkbufr#
	PUSHL	blksize
	PUSHL	DS
	PUSHL	#posparms
	CALLF	svcIoOutBlockP##
	BTL	EAX, #31t
12$:	RET
.PAGE

;	c[DX]  = Segment selector
;	c{EBX} = Segment offset

setfpos:MOVZWL	EAX, DX
	SHLL	EAX, #4t
	ADDL	EAX, EBX
	CMPL	EAX, baseval
	JB	12$
	CMPL	EAX, topval
	JA	12$.S
	MOVL	boffset, EAX		;Store offset in buffer
	ANDL	boffset, #03FFh
	ANDL	EAX, #0FFFFFC00h	;Get position of start of buffer
	CMPL	EAX, foffset		;Do we have it in the buffer now?
	JE	10$.S			;Yes
	CMPB	modified, #0		;Has the buffer been modified?
	JE	6$.S			;No - go on
	PUSHL	EAX			;Yes - write it out
	PUSHL	fhndl
	PUSHL	DS
	PUSHL	#blkbufr#
	PUSHL	#1024t
	PUSHL	DS
	PUSHL	#posparms
	CALLF	svcIoOutBlockP##
	TESTL	EAX, EAX
	JS	8$.S			;If error writing the file
	MOVL	blksize, EAX
	POPL	EAX
6$:	MOVL	foffset, EAX		;Store new position in file
	PUSHL	fhndl			;Fill the buffer from the new position
	PUSHL	DS
	PUSHL	#blkbufr#
	PUSHL	#1024t
	PUSHL	DS
	PUSHL	#posparms
	CALLF	svcIoInBlockP##
8$:	BTL	EAX, #31t
10$:	RET

;Here if address is out of range

12$:	STC
	RET
.PAGE
	.SBTTL	memfunc - Subroutine to do memory debug function

;Subroutine to do memory debug function
;	c(AL) = Function
;	CALL	memfunc
;	c{EAX} = Returned value

memfunc:MOVZBL	EAX, AL
	PUSHL	EAX
	BTL	EDX, #16t		;V86 mode address?
	JNC	10$.S			;No
	MOVZWL	EAX, DX			;Yes
	SHLL	EAX, #4
	ADDL	EAX, EBX
	PUSHL	#GS_REAL16.B
	PUSHL	EAX
	JMP	12$.S

10$:	PUSHL	EDX
	PUSHL	EBX
12$:	PUSHL	DS
	PUSHL	#memval
	CALLF	svcMemDebug##
	BTL	EAX, #31t
	RET
.PAGE
	.SBTTL	wptsetclr - Subroutine to set or clear a watchpoint

;Subroutine to set or clear a watchpoint
;	c(AL)     = Trap number (0 to 3)
;	c(CL)     = Type type:
;		      0 = None (clear trap)
;		      1 = Instruction
;		      2 = Data write
;		      3 = Data access
;	c(CH)     = Trap size:
;		      1 = Byte
;		      2 = Word
;		      3 = Long
;	c{DX:EBX} = Address
;	CALL	wptsetclr
;	C:set = Error
;	C:clr = Normal

wptsetclr:
	MOVZBL	EAX, AL
	PUSHL	EAX
	MOVB	AL, CL
	PUSHL	EAX
	MOVB	AL, CH
	PUSHL	EAX
	BTL	EDX, #16t		;V86 mode address?
	JNC	2$.S			;No
	MOVZWL	EAX, DX			;Yes
	SHLL	EAX, #16t
	MOVW	AX, BX
	PUSHL	#0.B
	PUSHL	EAX
	JMP	4$.S

2$:	PUSHL	EDX
	PUSHL	EBX
4$:	CALLF	svcMemWPSet##
	BTL	EAX, #31t
	RET
.PAGE
	.SBTTL	outchx - Internal subroutine to output character to scrolling region

;Internal subroutine to output character to scrolling region
;	c(AL) = Character to output
;	CALL	outchx

outchx:	CMPB	stpflg, #0		;Want to stop output?
	JNE	outchx.S		;Yes - wait
	MOVB	nohalt, #1		;No - indicate should not stop now
	PUSHL	EBX
	PUSHL	EDX
	CMPB	AL, #' '		;Printing character?
	JNC	20$			;Yes
	CMPB	AL, #CR			;No - return?
	JNE	2$.S			;No
	MOVB	horpsn, #0		;Yes - reset position
	CMPB	serterm, #0		;Using memory mapped display?
	JNE	5$.S			;No
	JMP	dspcur			;Yes

2$:	CMPB	AL, #LF			;Line feed?
	JNE	4$.S			;No
	CMPB	serterm, #0		;Yes - using memory mapped display?
	JNE	5$.S			;No - just output character
	JMP	scrollup		;Yes - go scroll screen

;Here if not line feed

4$:	CMPB	AL, #BS			;Backspace?
	JNE	8$.S			;No
	CMPB	horpsn, #0		;Yes - at beginning of line?
	JE	6$.S			;Yes
	DECB	horpsn			;No - reduce position
	CMPB	serterm, #0		;Using memory mapped display?
5$:	JNE	32$			;No - just output character
	JMP	dspcur			;Yes - go display updated cursor

6$:	CMPB	serterm, #0		;Using memory mapped display?
	JNE	disdone			;No - do nothing
	DECL	verpsn			;Yes - backup to end of previous line
	DECB	curlin
	MOVB	horpsn, #77t
	JMP	dspcur

;Here if not backspace

8$:	CMPB	AL, #HT			;Horizontal tab?
	JNE	12$.S			;No
10$:	MOVB	AL, #' '		;Yes - output space
	INCB	horpsn
	CALL	onscrn
	TESTB	horpsn, #7		;At tab stop yet?
	JNE	10$.S			;No - contin;ue
	JMP	34$			;Yes - finished

;Here if not horizontal tab

12$:	CMPB	serterm, #0
	JNE	30$
	CMPB	AL, #ERR		;Change color for error text?
	JNE	14$.S			;No
	MOVB	attrib, #ERRATR		;Yes
	JMP	16$.S

14$:	CMPB	AL, #TXT		;Change color for normal text?
	JNE	18$.S			;No
	MOVB	attrib, #TXTATR		;Yes
16$:	JMP	disdone

18$:	CMPB	AL, #INV		;Change to inverse video?
	JNE	20$.S			;No
	MOVB	attrib, #INVATR
	JMP	16$.S

20$:	CMPB	AL, #CLR		;Clear line?
	JNE	30$			;No
	PUSHL	EDI			;Yes
	PUSHL	ES
	MOVB	horpsn, #0		;Reset position
	IMULL	EDI, verpsn, #80t.B	;Point to beginning of line
	INCL	EDI
	ADDL	EDI, EDI
	CMPB	gmode, #0
	JNE	22$.S
	CMPB	screen, #0
	JE	22$.S
	ADDL	EDI, #tsclladdr
	JMP	24$.S

22$:	ADDL	EDI, #txscrlbf
24$:	PUSHL	DS
	POPL	ES
	MOVB	AH, #TXTATR
	MOVB	AL, #' '
	MOVL	ECX, #78t
	CLD
	RSTOSW	[EDI]
	CMPB	gmode, #0
	JE	28$.S
	PUSHL	EDX
	PUSHL	ESI
	IMULL	EDI, verpsn, #28t.B	;Yes - now put it on the graphic mode
	IMULL	EDI, gwidth		;  screen
	ADDL	EDI, #16t
	ADDL	EDI, gsclladdr
	MOVL	EAX, #GBLACK+{GBLACK<16t} ;Clear the last line
	MOVL	EDX, #14t
26$:	MOVL	ECX, #78t*4t
	IMULL	ESI, gwidth, #2t.B
	ADDL	ESI, EDI
	RSTOSL	[EDI]
	MOVL	EDI, ESI
	DECL	EDX
	JNE	26$.S
	POPL	ESI
	POPL	EDX
28$:	POPL	ES
	POPL	EDI
	JMP	dspcur

;Here with printing character

30$:	INCB	horpsn			;Bump horizontal position
32$:	CALL	onscrn			;Put character on screen
34$:	CMPB	serterm, #0
	JNE	16$
.PAGE
;Here to update cursor position

dspcur:	CMPB	screen, #0		;Displaying GECKO's screen?
	JE	4$.S			;No
	CMPB	gmode, #0		;Yes - text mode?
	JNE	6$.S			;No
	PUSHL	#DH_STDTRM.B		;Yes
	PUSHL	#7.B
	MOVZBL	EAX, horpsn		;Get column number
	INCL	EAX
	PUSHL	EAX
	MOVL	EAX, verpsn		;Set GECKO cursor position
	ADDL	EAX, #6.B
	PUSHL	EAX
	CALLF	svcTrmCurPos##
4$:	JMP	disdone			;Thats all

;Here to display graphic mode text cursor

6$:	CMPL	horcur, #-1.B		;Have a cursor on screen now?
	JE	8$.S			;No
	CALL	rmvgcur
8$:	CALL	putgcur
	JMP	disdone
.PAGE
;Here to scroll screen up one line

scrollup:
	CMPB	nonscrl, #0		;Output to nonscrolling region?
	JNE	2$.S			;Yes
	MOVB	AL, curlin		;No - on last line now?
	INCB	AL
	CMPB	AL, #tscllsize
	JAE	4$.S			;Yes
	MOVB	curlin, AL		;No - just move down a line
2$:	INCL	verpsn
	JMP	dspcur			;And go update cursor

;Here if now on last line of scrolling region

4$:	PUSHL	ESI
	PUSHL	EDI
	PUSHL	ECX
	PUSHL	ES
	CMPB	gmode, #0		;Graphic mode?
	JNE	6$.S			;Yes
	CMPB	screen, #0		;No - displaying GECKO's screen?
	JE	8$.S			;No
	MOVL	EDI, #tsclladdr		;Yes - scroll the real display
	JMP	10$.S

6$:	CMPL	horcur, #-1.B		;Have a cursor on the graphic screen?
	JE	8$.S			;No
	CALL	rmvgcur			;Yes - remove it
8$:	MOVL	EDI, #txscrlbf		;Scroll the saved display
10$:	MOVL	ECX, #tscllsize		;Get size of scrolling area (lines)
	DECL	ECX			;Minus one
	IMULL	ECX, #40t		;Change to number of longs
	MOVL	ESI, DS
	MOVL	ES, ESI
	LEAL	ESI, 160t[EDI]
	CLD
	RMOVSL	[EDI], [ESI]		;Move screen up one line
	MOVW	AX, #VBCHR
	STOSW	[EDI]
	MOVL	EAX, #CCHR+CCHR*10000h	;Fill last line with spaces
	MOVL	ECX, #39t
	RSTOSL	[EDI]
	MOVW	AX, #VBCHR
	STOSW	[EDI]
	CMPB	gmode, #0		;Graphic mode?
	JE	16$.S			;No - finished now
	CMPB	screen, #0		;Yes - displaying GECKO's screen?
	JE	16$.S			;No - finished now
	MOVL	EDI, gsclladdr		;Scroll the graphic mode display
	ADDL	EDI, #16t.B
	PUSHL	DS
	POPL	ES
	CLD
	MOVL	EDX, #{tscllsize-1}*14t
12$:	MOVL	ECX, #78t*4t		;Get number of longs in one scan line
	IMULL	ESI, gwidth, #28t.B
	ADDL	ESI, EDI
	MOVL	EAX, EDI
	RMOVSL	[EDI], [ESI]
	IMULL	EDI, gwidth, #2t
	ADDL	EDI, EAX
	DECL	EDX
	JNE	12$.S
	MOVL	EAX, #GBLACK+{GBLACK<16t} ;Clear the last line
	MOVL	EDX, #14t
14$:	MOVL	ECX, #78t*4t
	IMULL	ESI, gwidth, #2t.B
	ADDL	ESI, EDI
	RSTOSL	[EDI]
	MOVL	EDI, ESI
	DECL	EDX
	JNE	14$.S
16$:	POPL	ES
	POPL	ECX
	POPL	EDI
	POPL	ESI
disdone:POPL	EDX
	POPL	EBX
	MOVB	nohalt, #0		;Allow stopping now
	CMPB	hltflg, #0		;Should we stop now?
	JE	18$.S
	MOVB	hltflg, #0		;Yes - only once!

;NEED TO ADD CODE HERE TO STOP!!

18$:	RET
.PAGE
	.SBTTL	onscrn - Subroutine to place character on screen

;Subroutine to place character on screen
;	c(AL) = Character
;	CALL	onscrn

onscrn:	MOVB	AH, attrib
	CMPB	horpsn, #78t		;Too far right?
	JBE	2$.S			;No
	PUSHL	EAX			;Yes - save character
	CALL	outcrl			;Go to next line
	POPL	EAX
	INCB	horpsn
2$:	CMPB	serterm, #0		;Using memory mapped display?
	JE	6$.S			;Yes
	CMPB	nonscrl, #0		;Write to non-scrolling region?
	JNE	4$.S			;Yes - ignore it!
	PUSHL	#DH_STDTRM.B		;No - just output character to terminal
	PUSHL	EAX
	CALLF	svcIoOutSingle##
4$:	RET

;Here if using memory mapped display

6$:	IMULL	EBX, verpsn, #80t.B
	ADDL	EBX, horpsn
	ADDL	EBX, EBX
	CMPB	gmode, #0		;Graphic mode display?
	JNE	onsgm.S			;Yes
	CMPB	nonscrl, #0		;No - write to non-scrolling region?
	JE	10$.S			;No
	CMPB	screen, #0
	JE	8$.S
	ADDL	EBX, #tnscladdr
	JMP	16$.S

8$:	ADDL	EBX, #txnsclbf
	JMP	16$.S

10$:	CMPB	screen, #0
	JE	14$.S
	ADDL	EBX, #tsclladdr
	JMP	16$.S

14$:	ADDL	EBX, #txscrlbf
16$:	MOVW	[EBX], AX
retio10:RET
.PAGE
;Here if in graphic mode

onsgm:	CMPB	nonscrl, #0		;Write to non-scrolling region?
	JE	2$.S			;No
	ADDL	EBX, #txnsclbf
	JMP	4$.S

2$:	ADDL	EBX, #txscrlbf		;Yes
4$:	MOVW	[EBX], AX		;Store character and attribute
	CMPB	screen, #0		;Is our screen displayed?
	JE	retio10.S		;No - nothing else needed here
onscrn4:PUSHL	EDX
	IMULL	EBX, verpsn, #28t.B	;Now put it on the graphic mode
	IMULL	EBX, gwidth		;  screen
	IMULL	EDX, horpsn, #16t.B
	ADDL	EBX, EDX
	CMPB	nonscrl, #0		;Write to non-scrolling region?
	JE	10$.S			;No
	ADDL	EBX, gnscladdr
	JMP	12$.S

10$:	ADDL	EBX, gsclladdr
12$:	CALL	putgchr
	POPL	EDX
	RET
.PAGE
	.SBTTL	rmvgcur - Subroutine to remove cursor from graphic mode screen

;Subroutine to remove cursor from graphic mode screen
;	CALL	rmvgcur

rmvgcur:IMULL	EBX, vercur, #80t.B	;Get character under cursor
	ADDL	EBX, horcur
	MOVW	AX, txscrlbf[EBX*2]
	CALL	4$
	MOVL	horcur, #-1
	MOVL	vercur, #-1
	RET

	.SBTTL	putgcur - Subroutine to put cursor on graphic mode screen

;Subroutine to put cursor on graphic mode screen
;	CALL	putgcur

putgcur:MOVL	EAX, horpsn
	INCL	EAX
	MOVL	horcur, EAX
	MOVL	EBX, verpsn
	MOVL	vercur, EBX
	IMULL	EBX, #80t.B		;Get character under cursor
	ADDL	EBX, EAX
	MOVW	AX, txscrlbf[EBX*2]
	ORB	AH, #070h		;Change background to white
	ANDB	AH, #07Fh
4$:	IMULL	EBX, vercur, #28t.B
	IMULL	EBX, gwidth
	IMULL	EDX, horcur, #16t.B
	ADDL	EBX, EDX
	ADDL	EBX, gsclladdr
					;Fall into putgcchr

	.SBTTL	putgchr - Subroutine to put character on graphic mode screen

;Subroutine to put character on graphic mode screen
;	c[AX]  = Attribute and character
;	c{EBX} = Offset of first pixel in character cell
;	CALL	putgchr

putgchr:PUSHL	ECX
	PUSHL	ESI
	PUSHL	EDI
	PUSHL	EBP
	MOVL	EDI, gwidth
	ADDL	EDI, EDI
	SUBL	EDI, #16t.B
	MOVB	DL, AH
	ANDL	EDX, #0Fh.B		;Get the foreground attribute value
	MOVW	BP, coltbl[EDX*2]	;Get the corresponding pixel value
	MOVZBL	ESI, AH			;Get the background attribute value
	SHRL	ESI, #4t
	MOVW	SI, coltbl[ESI*2]	;Get the corresponding pixel value
	MOVZBL	EDX, AL			;Calculate offset in the font table
	IMULL	EDX, #14t.B
	ADDL	EDX, #fonttbl
	MOVB	CL, #14t
10$:	MOVB	CH, #8t
	MOVB	AL, [EDX]
	INCL	EDX
12$:	RCLB	AL, #1t
	JC	14$.S
	MOVW	[EBX], SI
	JMP	16$.S

14$:	MOVW	[EBX], BP
16$:	ADDL	EBX, #2t.B
	DECB	CH
	JNE	12$.S
	ADDL	EBX, EDI
	DECB	CL
	JNE	10$.S
	POPL	EBP
	POPL	EDI
	POPL	ESI
	POPL	ECX
	RET
.PAGE
	.SBTTL	inpchx - Subroutine to get input character from terminal

;Subroutine to get input character from terminal
;	CALL	inpchx
;	c(AL) = Character

inpchx:	CALL	inpchxx
	CMPB	AL, #0			;Special character?
	JE	4$.S			;Yes
	ANDB	AL, #7Fh		;Only 7 bits
	RET

;Here if have special character

4$:	CALL	inpchxx			;Get next byte
	ORB	AL, #80h
	PUSHL	EAX
	CALL	inpchxx			;Get first flag byte
	TESTB	AL, #11h		;Either shift key pressed?
	JE	6$.S			;No
	ORB	[ESP], #10h		;Yes
6$:	CALL	inpchxx			;Discard second flag byte
	POPL	EAX			;Get the byte
	RET				;And return

inpchxx:PUSHL	DS			;Get single input character using
	PUSHL	#inpqab			;  direct (not queued) IO
	CALLF	svcIoQueue##
	TESTL	EAX, EAX		;See if error
	JS	10$.S
	ORL	EAX, inpqab+qab_error
	JS	10$.S
	MOVB	AL, inpbuf		;OK - get the character
	RET

;Here if error reading console input - this is a serious problem so just tell
;  him as best we can and exit quickly!

10$:	SUBL	ESP, #100t
	MOVL	EDX, ESP
	PUSHL	EAX
	PUSHL	#3.B
	PUSHL	SS
	PUSHL	EDX
	MOVL	EBX, #ciemsg
	CALL	outstrc
	CALLF	svcSysErrMsg##
	ADDL	EAX, ESP
	MOVL	[EAX], #CR+{LF<8}
	MOVL	EBX, ESP
	CALL	outstrd
	PUSHL	#1.B
	JMP	exit2

ciemsg:	.ASCIZ	{LF,CLR,ERR}"? Error reading console input - fatal"{CR,LF}"  "
.PAGE
	.SBTTL	debugtrapu - User mode debug trap signal routine

;Here on a debug trap

debugtrapu:
	CALL	entgecko		;Do common GECKO entry stuff
	PUSHL	#400Fh
	CALLF	svcMemWPCntl##
	JMP	debugtrap
.PAGE
	.MOD	4
lit80:	.LONG	80t

	.MACRO	& SCNMSG  attr, string
	.IRPC	&& qq,{string}
	.BYTE	'qq', attr
	.ENDR
	.ENDM

	.RADIX	10t
	.IRP	maj, >MAJVER
	.IRP	min, >MINVER
	.IRP	& edit, >EDITNUM
lblmsg:	SCNMSG	INVBRD, { GECKOF (file access) v&maj.&min.&edit }
	.ENDR
	.ENDR
	.ENDR
LBLSIZE=!{$-lblmsg}/2
	.RADIX	16t

cprmsg:	SCNMSG	BRDATR, {1}
	SCNMSG	INVBRD, {Help}
	SCNMSG	BRDATR, { 2}
	SCNMSG	INVBRD, {      }
	SCNMSG	BRDATR, { 4}
	SCNMSG	INVBRD, {ExmEIP}
	SCNMSG	BRDATR, { 5}
	SCNMSG	INVBRD, {ExmPrev}
	SCNMSG	BRDATR, { 6}
	SCNMSG	INVBRD, {ExmSame}
	SCNMSG	BRDATR, { 7}
	SCNMSG	INVBRD, {ExmNext}
	SCNMSG	BRDATR, { 8}
	SCNMSG	INVBRD, {    }
	SCNMSG	BRDATR, { 9}
	SCNMSG	INVBRD, {     }
	SCNMSG	BRDATR, {10}
	SCNMSG	INVBRD, {  }
CPRSIZE=!{$-cprmsg}/2

ci0msg:	.ASCIZ	{CR,LF}"User interrupt at ES:EIP} "

	DATA

	.MOD	4
fhndl::  .LONG	0
boffset: .LONG	-1
baseval::.LONG	0
topval:: .LONG	0
blksize: .LONG	0
modified:.BYTE	0
gmode:	 .BYTE	0	;Non-zero if have graphic mode display
nonscrl: .BYTE	0	;Non-zero to output to nonscrolled region
attrib:	 .BYTE	TXTATR	;Current character attributes
memtype: .BYTE	0	;Type of last segment read

	.MOD	4
uESP::	.LONG	0	;Actual user stack pointer when called from V86 mode
uSS::	.LONG	0
v86img::.LONG	0	;Bit 16 set if V86 program loaded, all 0 otherwise
memval:	.LONG	0, 0	;Memory value for svcMemDebug SVCs
inpbuf:	.WORD	0	;Consol character input buffer
ucursor:.WORD	0	;User cursor location while GECKO screen is displayed
xcursor:.WORD	0	;GECKO cursor location while user screen is displayed
curlin:	.WORD	0	;Current line in scrolling region
horpsn:	.LONG	0	;Horizontal position in current line
verpsn:	.LONG	0	;Vertical position of start of current line
horcur:	.LONG	-1
vercur:	.LONG	-1
screen:	.WORD	0	;Non-zero when GECKO's screen is displayed

	.MOD	4
gnscladdr:
	.LONG	graphbufr
gsclladdr:
	.LONG 	graphbufr

gwidth:	.LONG 1600t

hltflg:	.WORD	0	;Non-zero if need to halt GECKO
nohalt:	.WORD	0	;Non-zero if cannot halt because in critical code
stpflg:	.WORD	0	;Non-zero to stop output

	.MOD	4
trmsetparm:				;Parameter list for setting terminal
	.BYTE	PAR$SET|REP_HEXV, 4	;  parameters
	.WORD	IOPAR_TRMCINPMODE
	.LONG	0FFFFFFFFh
	.BYTE	PAR$SET|REP_HEXV, 4
	.WORD	IOPAR_TRMSINPMODE
inpbits:.LONG	0
	.BYTE	PAR$SET|REP_HEXV, 4
	.WORD	IOPAR_TRMCOUTMODE
	.LONG	0FFFFFFFFh
	.BYTE	PAR$SET|REP_HEXV, 4
	.WORD	IOPAR_TRMSOUTMODE
outbits:.LONG	0
	.BYTE	0

	.MOD	4
tvparm:	.BYTE	PAR$SET|REP_TEXT, 4
	.WORD	IOPAR_CLASS
	.LONG	'TRM'
	.BYTE	0

	.MOD	4
tvqab:	.WORD	QFNC$WAIT|QFNC_SPECIAL	;qab_func    - Function
	.WORD	0			;qab_status  - Returned status
	.LONG	0			;qab_error   - Error code
	.LONG	0			;qab_amount  - Amount
	.LONG	DH_STDTRM		;qab_handle  - Device handle
	.BYTE	0			;qab_vector  - Vector for interrupt
	.BYTE	0, 0, 0			;            - Reserved
	.LONG	TSF_SETCPI		;qab_option  - Options or command
	.LONG   31t			;qab_count   - Count
	.LONG	0, 0			;qab_buffer1 - Pointer to file spec
	.LONG	0, 0			;qab_buffer2 - Unused
	.LONG	tvparm, !tvparm		;qab_parm    - Pointer to parameter area

inpqab:	.WORD	QFNC$WAIT|QFNC$DIO|QFNC_INBLOCK
					;qab_func    - Function
	.WORD	0			;qab_status  - Returned status
	.LONG	0			;qab_error   - Error code
	.LONG	0			;qab_amount  - Amount
	.LONG	DH_STDTRM		;qab_handle  - Device handle
	.BYTE	0			;qab_vector  - Vector for interrupt
	.BYTE	0, 0, 0			;            - Reserved
	.LONG	0			;qab_option  - Options or command
	.LONG   1t			;qab_count   - Count
	.LONG	inpbuf, !inpbuf		;qab_buffer1 - Pointer to buffer
	.LONG	0, 0			;qab_buffer2 - Unused
	.LONG	0, 0			;qab_parm    - Pointer to parameter area

	.MOD	4
trmgetparm:				;Parameter list for getting terminal
	.BYTE	PAR$GET|REP_HEXV, 4	;  parameters
	.WORD	IOPAR_TRMSINPMODE
inpbitg:.LONG	0
	.BYTE	PAR$GET|REP_HEXV, 4
	.WORD	IOPAR_TRMSOUTMODE
outbitg:.LONG	0
	.BYTE	0

	.MOD	5
posparms:.BYTE	PAR$SET|REP_DECV, 4t
	.WORD	IOPAR_ABSPOS
foffset:.LONG	0
	.BYTE	0

	.MOD	4
userpage:.LONG	0
usermode:.LONG	0
userdata:.BLKB	dm_SIZE
gecdata: .LONG	0
	 .LONG	80t		;dm_columns
	 .LONG	25t		;dm_rows
	 .LONG	0		;dm_horiz
	 .LONG	0		;dm_vert
	 .LONG	0		;dm_dsptype
	 .LONG	0		;dm_curmode
	 .LONG	0

coltbl:	.WORD	GBLACK		;0 - Black
	.WORD	00015h		;1 - Blue
	.WORD	00540h		;2 - Green
	.WORD	00555h		;3 - Cyan
	.WORD	0A800h		;4 - Red
	.WORD	0A815h		;5 - Magenta
	.WORD	0AAA0h		;6 - Brown
	.WORD	0AD55h		;7 - White
	.WORD	052CAh		;8 - Gray
	.WORD	052DFh		;9 - Light blue
	.WORD	057EAh		;A - Light green
	.WORD	057FFh		;B - Light cyan
	.WORD	0FAAAh		;C - light red
	.WORD	0FADFh		;D - Light magenta
	.WORD	0FFEAh		;E - Light brown (yellow)
	.WORD	0FFFFh		;F - Bright white

txdispbf:.BLKW	4*1024t	;GECKO text mode display buffer
tudispbf:.BLKW	4*1024t	;User text mode display buffer

	CODE
.PAGE

	.SBTTL	DATA - Data area for GECKO

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

.IF EQ $$USERMODE|$$REALMODE
	.PSECT	_symbols_p

  geckosymcnt:.LONG 0
  geckoextcnt:.LONG 0
  geckosymtbl:
.ENDC

	CODE

bcmmsg:	.ASCIZ	{ERR,LF,CLR}"? Unknown command"{TXT}
bswmsg:	.ASCIZ	{ERR,LF,CLR}"? Unknown switch"{TXT}
tmamsg:	.ASCIZ	{ERR,LF,CLR}"? Too many arguments for command"{TXT}
rngmsg:	.ASCIZ	{ERR,LF,CLR}"? Value or offset is too large"{TXT}
syemsg:	.ASCIZ	{ERR,LF,CLR}"? Syntax error"{TXT}
szemsg:	.ASCIZ	{ERR,LF,CLR}"? Register size is incorrect"{TXT}
underr:	.ASCIZ	{ERR,LF,CLR}"? Undefined symbol"{TXT}
noamsg:	.ASCIZ	{ERR,LF,CLR}"? No address specified"{TXT}
tmbmsg:	.ASCIZ	{ERR,LF,CLR}"? Too many breakpoints"{TXT}
nbpmsg:	.ASCIZ	{ERR,LF,CLR}"? No breakpoint set at address"{TXT}
tmwmsg:	.ASCIZ	{ERR,LF,CLR}"? Too many watchpoints"{TXT}
nwpmsg:	.ASCIZ	{ERR,LF,CLR}"? No watchpoint set at address"{TXT}
escwmsg:.ASCIZ	{ERR,LF,CLR}"? Error setting or clearing hardware watchpoint"{TXT}
adrmsg:	.ASCIZ	{ERR,LF,CLR}"? Illegal address"{TXT}
icvmsg:	.ASCIZ	{ERR,LF,CLR}"? Illegal count value"{TXT}
iiomsg:	.ASCIZ	{ERR,LF,CLR}"? Illegal IO register number"{TXT}
xermsg:	.ASCIZ	{ERR,LF,CLR}"? Expression error"{TXT}
nonmsg:	.ASCIZ	{ERR,LF,CLR}"? No name given"{TXT}
normsg:	.ASCIZ	{ERR,LF,CLR}"? Not a register"{TXT}
nsvmsg:	.ASCIZ	{ERR,LF,CLR}"? Value cannot be an instruction"{TXT}
niytmsg:.ASCIZ	{ERR,LF,CLR}"? Not implemented yet"{TXT}
spequsp:.ASCIZ	" = "
exems1:	.ASCIZ	"*** CS:EIP{ "
permsg:	.ASCIZ	"*** Protection error at CS:EIP{ "
fermsg:	.ASCIZ	"*** Page fault error at CS:EIP{ "
nermsg:	.ASCIZ	"*** Segment not present error at CS:EIP{ "
bp0msg:	.ASCIZ	"*** "
unxmsg:	.ASCIZ	"Unexpected b"
bp1msg:	.ASCII	"B"
bp2msg:	.ASCIZ	"reakpoint at CS:EIP{ "
inwpmsg:.ASCIZ	{CLR}"*** Instruction watchpoint at CS:EIP{ "
acwpmsg:.ASCIZ	{CLR}"*** Access "
wrwpmsg:.ASCIZ	{CLR}"*** Write "
bwpmsg:	.ASCIZ	"byte"
wwpmsg:	.ASCIZ	"word"
lwpmsg:	.ASCIZ	"long"
wp0msg:	.ASCIZ	" watchpoint ("
wp1msg:	.ASCIZ	") at CS:EIP{ "
dbxmsg:	.ASCIZ	"*** Spurious debug trap at CS:EIP{ "
in0msg:	.ASCII	"*** Interrupted at CS:EIP{ "
uxttmsg:.ASCIZ	"Unexpected trace trap at CS:EIP{ "
lsbmsg:	.ASCII	{LF,CLR}"Breakpoints:"
	.ASCIZ	{LF,CLR}"Count   Address"
nobmsg:	.ASCIZ	{LF,CLR}"No breakpoints set"
lswmsg:	.ASCII	{LF,CLR}"Watchpoints:"
	.ASCIZ	{LF,CLR}"Type Count     Data     Address"
lswndv:	.ASCIZ	"  None  "
nowmsg:	.ASCIZ	{LF,CLR}"No watchpoints set"
nommsg:	.ASCIZ	{LF,CLR}"No match found"
vhdmsg:	.ASCIZ	{LF,CLR}"     Value        Symbol"
sp5str:	.ASCII	" "
sp4str:	.ASCII	" "
sp3str:	.ASCII	" "
sp2str:	.ASCIZ	"  "
iirmsg:	.ASCIZ	{CLR,ERR}"? Illegal input radix specified"{TXT}
imrmsg:	.ASCIZ	{CLR}"Input radix is "
iosmsg:	.ASCIZ	{CLR,ERR}"? Illegal output mode or radix specified"{TXT}
om1msg:	.ASCIZ	{CLR}"Output mode is "
omsmsg:	.ASCIZ	"Symbolic, "
omnmsg:	.ASCIZ	"Non-symbolic, "
omamsg:	.ASCIZ	"Character"
omvmsg:	.ASCIZ	"by Value"
omrmsg:	.ASCIZ	{LF,CLR}"Output radix is "
r2msg:	.ASCIZ	"Binary"
r8msg:	.ASCIZ	"Octal"
r10msg:	.ASCIZ	"Decimal"
r16msg:	.ASCIZ	"Hexadecimal"
limmsg:	.ASCII	{CLR,INV}"<space> for next screen, L for next line, G for rest,"
	.ASCIZ	" Q to abandon output "{TXT}
trnmsg:	.ASCIZ	{ERR,LF,CLR}"New item longer - truncated"{TXT}
nilmsg:	.ASCIZ	{ERR,LF,CLR}"New item longer than old"{TXT}
nismsg:	.ASCIZ	{ERR,LF,CLR}"New item shorter than old"{TXT}
bs1msg:	.ASCIZ	{LF,CLR}"Stopped at breakpoint at CS:EIP} "
bs2msg:	.ASCIZ	{CR,LF}"Not currently stopped at a breakpoint"
cstms1:	.ASCIZ	{CR,LF}"Symbol table selected for module "
cstms2:	.ASCIZ	{CR,LF}"No symbol table selected"
opnpmt:	.ASCIZ	"	%%"
nmnmsg:	.ASCIZ	"??????"
flglbl:	.ASCIZ	"     EFR{"

;Table of register save locations

	.MOD	4
rgltbl:	.BYTE	uregAL-uregbase		;RG_AL   = 0.
	.BYTE	uregAH-uregbase		;RG_AH   = 1.
	.BYTE	uregBL-uregbase		;RG_BL   = 2.
	.BYTE	uregBH-uregbase		;RG_BH   = 3.
	.BYTE	uregCL-uregbase		;RG_CL	 = 4.
	.BYTE	uregCH-uregbase		;RG_CH   = 5.
	.BYTE	uregDL-uregbase		;RG_DL   = 6.
	.BYTE	uregDH-uregbase		;RG_DH   = 7.
	.BYTE	uregAX-uregbase		;RG_AX   = 8.
	.BYTE	uregBX-uregbase		;RG_BX   = 9.
	.BYTE	uregCX-uregbase		;RG_CX   = 10.
	.BYTE	uregDX-uregbase		;RG_DX   = 11.
	.BYTE	uregSI-uregbase		;RG_SI   = 12.
	.BYTE	uregDI-uregbase		;RG_DI   = 13.
	.BYTE	uregBP-uregbase		;RG_BP   = 14.
	.BYTE	uregSP-uregbase		;RG_SP   = 15.
	.BYTE	uregEAX-uregbase	;RG_EAX  = 16.
	.BYTE	uregEBX-uregbase	;RG_EBX  = 17.
	.BYTE	uregECX-uregbase	;RG_ECX  = 18.
	.BYTE	uregEDX-uregbase	;RG_EDX  = 19.
	.BYTE	uregESI-uregbase	;RG_ESI  = 20.
	.BYTE	uregEDI-uregbase	;RG_EDI  = 21.
	.BYTE	uregEBP-uregbase	;RG_EBP  = 22.
	.BYTE	uregESP-uregbase	;RG_ESP  = 23.
	.BYTE	uregCS-uregbase		;RG_CS   = 24.
	.BYTE	uregDS-uregbase		;RG_DS   = 25.
	.BYTE	uregSS-uregbase		;RG_SS   = 26.
	.BYTE	uregES-uregbase		;RG_ES   = 27.
	.BYTE	uregFS-uregbase		;RG_FS   = 28.
	.BYTE	uregGS-uregbase		;RG_GS   = 29.
	.BYTE	uregIP-uregbase		;RG_IP   = 30.
	.BYTE	uregEIP-uregbase	;RG_EIP  = 31.
	.BYTE	uregFR-uregbase		;RG_FR	 = 32.
	.BYTE	uregEFR-uregbase	;RG_EFR  = 33.
	.BYTE	uregldtr-uregbase	;RG_LDTR = 34.
	.BYTE	uregmsw-uregbase	;RG_MSW  = 35.
	.BYTE	uregTR-uregbase		;RG_TR   = 36.
	.BYTE	ureggdtr-uregbase	;RG_GDTR = 37.
	.BYTE	uregidtr-uregbase	;RG_IDTR = 38.

;Generate table used when dumping registers

	.ALMEX
	.MACRO	DRG  name, size, str
$$$=$
	.ASCIZ	str
	.BLKB	14t-{$-$$$}
	.BYTE	size
	.BYTE	ureg'name-uregbase
	.ENDM

rt_size =!14t
rt_ofset=!15t
rt_ENSIZ=!16t

	.MOD	4
dmpreg:	DRG	EAX, 4, {"     EAX"}
	DRG	EBX, 4, {"     EBX"}
	DRG	ECX, 4, {"     ECX"}
	DRG	EDX, 4, {"     EDX"}
	DRG	ESP, 4, {{CR,LF}"     ESP"}
	DRG	EBP, 4, {"     EBP"}
	DRG	EDI, 4, {"     EDI"}
	DRG	ESI, 4, {"     ESI"}
	DRG	CS , 2, {{CR,LF}"     CS"}
	DRG	SS , 2, {"    SS"}
	DRG	DS , 2, {"    DS"}
	DRG	ES , 2, {"    ES"}
	DRG	FS , 2, {"    FS"}
	DRG	GS , 2, {"    GS"}
	DRG	EIP, 4, {{CR,LF}"     EIP"}
DMPSIZE={$-dmpreg}/rt_ENSIZ
	.SLMEX

	.MACRO	FLGS  s0, s1, s2, s3, s4, s5, s6, s7, pos, mask
	.ASCII	"s0"
	.ASCII	"s1"
  .IF NB {s2}
	.ASCII	"s2"
  .IFF
	.BYTE	0, 0
  .ENDC
  .IF NB {s3}
	.ASCII	"s3"
  .IFF
	.BYTE	0, 0
  .ENDC
  .IF NB {s4}
	.ASCII	"s4"
  .IFF
	.BYTE	0, 0
  .ENDC
  .IF NB {s5}
	.ASCII	"s5"
  .IFF
	.BYTE	0, 0
  .ENDC
  .IF NB {s6}
	.ASCII	"s6"
  .IFF
	.BYTE	0, 0
  .ENDC
  .IF NB {s7}
	.ASCII	"s7"
  .IFF
	.BYTE	0, 0
  .ENDC
	.BYTE	pos't
	.BYTE	0
	.LONG	mask'h
	.ENDM

	.MOD	4
flgtbl:
.IF EQ $$USERMODE
	FLGS	vm, VM,   ,   ,   ,   ,   ,   , 17, 00020000
	FLGS	rf, RF,   ,   ,   ,   ,   ,   , 16, 00010000
	FLGS	nt, NT,   ,   ,   ,   ,   ,   , 14, 00004000
	FLGS	P0, P1, P2, P3,   ,   ,   ,   , 12, 00003000
	FLGS	ov, OV,   ,   ,   ,   ,   ,   , 11, 00000800
	FLGS	UP, DN,   ,   ,   ,   ,   ,   , 10, 00000400
	FLGS	ei, IE,   ,   ,   ,   ,   ,   ,  9, 00000200
	FLGS	tp, TP,   ,   ,   ,   ,   ,   ,  8, 00000100
	FLGS	sn, SN,   ,   ,   ,   ,   ,   ,  7, 00000080
	FLGS	zr, ZR,   ,   ,   ,   ,   ,   ,  6, 00000040
	FLGS	ac, AC,   ,   ,   ,   ,   ,   ,  4, 00000010
	FLGS	pe, PE,   ,   ,   ,   ,   ,   ,  2, 00000004
	FLGS	cy, CY,   ,   ,   ,   ,   ,   ,  0, 00000001
  FLGTSZ={$-flgtbl}/fst_ENSZ
.IFF
	FLGS	vm, VM,   ,   ,   ,   ,   ,   , 17, 00020000
	FLGS	rf, RF,   ,   ,   ,   ,   ,   , 16, 00010000
	FLGS	S0, S1, S2, S3, S4, S5, S6, S7, 12, 00007000
	FLGS	ov, OV,   ,   ,   ,   ,   ,   , 11, 00000800
	FLGS	UP, DN,   ,   ,   ,   ,   ,   , 10, 00000400
	FLGS	ei, IE,   ,   ,   ,   ,   ,   ,  9, 00000200
	FLGS	tp, TP,   ,   ,   ,   ,   ,   ,  8, 00000100
	FLGS	sn, SN,   ,   ,   ,   ,   ,   ,  7, 00000080
	FLGS	zr, ZR,   ,   ,   ,   ,   ,   ,  6, 00000040
	FLGS	ac, AC,   ,   ,   ,   ,   ,   ,  4, 00000010
	FLGS	pe, PE,   ,   ,   ,   ,   ,   ,  2, 00000004
	FLGS	cy, CY,   ,   ,   ,   ,   ,   ,  0, 00000001
  FLGTSZ={$-flgtbl}/fst_ENSZ
.ENDC

	DATA

	.MOD	4
lit10:	.LONG	10t

uregbase:
uregEAX:
uregAX:
uregAL:	.BYTE	0
uregAH:	.BYTE	0
	.WORD	0
uregEBX:
uregBX:
uregBL:	.BYTE	0
uregBH:	.BYTE	0
	.WORD	0
uregECX:
uregCX:
uregCL:	.BYTE	0
uregCH:	.BYTE	0
	.WORD	0
uregEDX:
uregDX:
uregDL:	.BYTE	0
uregDH:	.BYTE	0
	.WORD	0
uregESI:
uregSI:	.LONG	0
uregEDI:
uregDI:	.LONG	0
uregEBP:
uregBP:	.LONG	0
uregESP:
uregSP:	.LONG	0
uregES:	.LONG	0	;WARNING - ureges, uregcs, uregss, uregds, ureggs,
uregCS:	.LONG	0	;  and ureggs must be in this order!
uregSS:	.LONG	0
uregDS: .LONG	0
uregFS:	.LONG	0
uregGS:	.LONG	0
uregEIP:
uregIP:	.LONG	0
uregEFR:
uregFR:	.LONG	0
uregTR:	.LONG	0
uregmsw:.LONG	0
ureggdtr:
	.LONG	0, 0
uregidtr:
	.LONG	0, 0
uregldtr:
	.LONG	0

ncmdESP:.LONG	0	;ESP at entry to nxtcmd
ncmdSS:	.LONG	0	;SS at entry to nxtcmd
xESP:	.LONG	0	;GECKO stack pointer while in user state
dheight:.LONG	MAXLINES;Available scrolling height

dascii:	.ASCII	"  "{VRTLIN}
xascii:	.ASCII	"................"
easci2:	.ASCIZ	"."

	.MOD	4
.IF EQ $$USERMODE
  keyscnt:.LONG 400000t ;Initial input timeout counter
.ENDC
fstclr:			;First location to clear when resetting GECKO
value:
valofs:	.LONG	0	;Offset part of value
valseg:	.LONG	0	;Segment part of value
	.LONG	0
valstate:		;The following 4 items must stay together in this order
			;  - they are saved and restored as a single long using
			;  valstate
valsiz:	.BYTE	0	;Size of current value (in bytes)
valtyp:	.BYTE	0	;Type of current value
valreg:	.BYTE	0	;Register index for offset part of value when it is
			;  contained in register
valsrg:	.BYTE	0	;Register index for segment part of value when it is
			;  contained in register
mode:	.BYTE	0	;Instruction mode byte
oprtyp:	.BYTE	0	;Operand type

	.MOD	4
lftofs:	.LONG	0	;Offset part of left operand value
lftseg:	.LONG	0	;Segment part of left operand value
iradix:	.LONG	0	;Default input radix
cradix:	.LONG	0	;Current input radix
oradix:	.LONG	0	;Default output radix
tradix:	.LONG	0	;Current output radix
repcnt:	.LONG	0	;Repition counter for trace, exe & breakpoints

findtmp:  .LONG 0
findval:  .LONG 0
findaddr: .LONG 0, 0
findlimit:.LONG 0
findincr: .LONG 0
findmask: .LONG -1

dmplen:	.LONG	0	;Dump length counter
dmpnxt:	.LONG	0	;Offset of the next location to be dumped
dmpseg:	.LONG	0	;Segment selector of next location to be dumped

ESIsrch:.LONG	0
EDIsrch:.LONG	0
opxofs:	.LONG	0	;Offset of actual start of instruction being displayed
opnofs:	.LONG	0	;Offset in segment of open item
opnseg:	.LONG	0	;Segment selector of open item
opnstate:		;The following 4 items must stay together in this order
			;  - they are saved and restored as a single long using
			;  opnstate
opnsiz:	.BYTE	0	;Size of open item
opntyp:	.BYTE	0	;Type of open item
opnreg:	.BYTE	0	;Index for open offset register, 0FFh if not register
opnsrg:	.BYTE	0	;Index for open segment register, 0FFh if not register

entrtn:	.LONG	0	;Return offset for entgecko
curmod:	.LONG	0	;Offset for symbol entry for name of current module
.IF EQ $$USERMODE
	.LONG	0
.ENDC
opnmod:	.LONG	0	;Offset for symbol entry for name of open module
.IF EQ $$USERMODE
	.LONG	0
nextlke:.LONG	0
.ENDC
linepnt:.LONG	0	;Character pointer (for getchr)
stoper:	.BYTE	0	;Stopper character
notnul:	.BYTE	0	;Flag that value is not null
notfst:	.BYTE	0	;Flag that field is not first field
clnflg:	.BYTE	0	;Non-zero if have final colon or semi-colon after field
iflag:	.BYTE	0	;Index flag (for opout)
opcbyt:	.BYTE	0	;Opcode byte (for opout)
opcext:	.BYTE	0	;Opcode extension byte (for opout)
outflg:	.BYTE	0	;Suppress output flag
linelim:.BYTE	0	;Line limit counter
segchgd:.BYTE	0	;Set to 1 by opout when instruction is displayed
			;  which changes a segment register
lnsflg:	.BYTE	0	;Non-zero if value obtained from non-exact line number
			;  symbol match
trctrpf:.BYTE	0	;Non-zero if expecting trace trap
rszflg:	.BYTE	0	;Non-zero to bypass register size check in getopr
segovr:	.BYTE	0	;Register code for segment override register, 0 if none
xdxflg:	.BYTE	0	;Non-zero if should allow [DX] addressing mode
hdrflg:	.BYTE	0	;Non-zero if header has been output
geckoflg:
	.BYTE	0	;Non-zero if GECKO is running
cciflg:	.BYTE	0	;Non-zero if ^C seen
lfttyp:	.BYTE	0	;Type of left operand
validi:	.BYTE	0	;Cleared if invalid instruction is displayed
prtflg:	.BYTE	0	;Printer output flag
dmpwid:	.BYTE	0	;Dump width counter
poutmd:	.BYTE	0	;Perm. output mode
toutmd:	.BYTE	0	;Temp. output mode
numcnt:	.BYTE	0	;Number of digits in number
CLsrch:	.BYTE	0
BLsrch:	.BYTE	0
digcnt:	.BYTE	0	;Digit counter
linecnt:.BYTE	0	;Character counter (for getchr)
quotflg:.BYTE	0
spkhold:.BYTE	0
datareq:.BYTE	0	;Non-zero if requesting data (instead of command)
wptgrnt:.BYTE	0	;Non-zero if found watchpoint to grant
serterm:.BYTE	0	;0 if using console, 0FFh if using serial terminal,
			;  0FEh if using Gecko serial client
serset: .BYTE	0	;Non-zero if serial terminal has been set up
serok:	.BYTE	0	;Non-zero if serial terminal is available
conok:	.BYTE	0	;Non-zero if console display is available
heldchr:.BYTE	0	;Held input character

	.MOD	4
linebuf:.BLKB	100t	;Input character buffer

	.MOD	4
symbfs:	.BLKB	SYMLEN	;Symbol name buffer for SS command
symbfx:	.BLKB	8	;First 7 characters of symbol name converted to upper
			;  case
symbuf:	.BLKB	SYMLEN	;Symbol name buffer (for getatm)
symsiz:	.BYTE	0	;Symbol name size (for getatm) - must immediately follow
			;  symbuf!
symszs:	.BYTE	0	;Symbol name size for SS command
	.MOD	4
modbuf:	.BLKB	SYMLEN	;Module name buffer
modsiz:	.BYTE	0	;Module name size
symloc:	.BYTE	0	;Non-zero if have collected local symbol name

	.MOD	4
digpnt:	.LONG	0	;Pointer to DIGBUF (for getatm)
fndbkt:	.LONG	0	;Offset of hole in breakpoint table
tmppnt:	.LONG	0	;Temp. symbol table pointer (for symout)
.IF EQ $$USERMODE
	.LONG	0
.ENDC
tmpdif:	.LONG	0	;Difference of best symbol match
tmpmod:	.LONG	0	;Offset for module name for best match
.IF EQ $$USERMODE
	.LONG	0
.ENDC
curbpt:	.LONG	0	;Offset of entry for current breakpoint
cbpofs:	.LONG	0	;Offset for current breakpoint
cbpseg:	.LONG	0	;Selector for current breakpoint
bpttbl:	.BLKB	BPTNUM*bt_ENSZ ;Breakpoint table
wpttbl: .BLKB	4*wt_ENSZ ;Watchpoint table

digbuf:	.BLKB	MXDGLN ;Digit buffer (for getatm)

lstclr:			;Last location + 1 to clear when restarting GECKO
SIZCLR=!{lstclr-fstclr}/4

	.MOD	4
	.BLKB	512t
xstack: .WORD	0	;GECKO internal stack
.PAGE

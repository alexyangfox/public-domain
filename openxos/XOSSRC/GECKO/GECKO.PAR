	.SBTTL	Parameter file GECKO.PAR

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.NLMEX
	.NLBEX
	.PARM

;Revision history
; 1.3.4 - 2-Oct-91
;	Fixed several bugs in inputting and displaying registers and addresses,
;	changed output quit character to Q from ^C.
; 1.3.5 - ???
;	Added auto-start-up feature in PROTIO.M86.
; 1.3.6 - 13-Dec-91
;	Added ability to detect and respond to CTL-ALT-DEL in PROTIO.M86.
; 1.3.7 - 8-Jun-92
;	Fixed minor bug in getting address and repeat count.
; 1.3.8 - 16-Jul-92
;	Added XDTR, a real mode version which will run under DOS (requires
;	386 however).
; 1.3.9 - 24-Oct-92
;	Added support for new style reboot stuff in XDTXP.
; 1.3.10 - 20-Dec-92
;	Finished the OUTx commands.
; 1.3.11 - 8-Feb-93
;	Fixed problems with saving SS and ESP on user or V86 mode break-points
;	in exec or user mode XDT.
; 1.3.12 - 13-Mar-93
;	Fixed minor bug in watchpoint routine, bad message was displayed on
;	watchpoint.
; 1.3.13 - 29-Mar-93
;	Added most of the rest of the floating point instructions.
; 1.3.14 - 2-Apr-93
;	Fixed problem with accessing locations for XDT with watchpoints set.
; 1.3.15 - 10-May-93
;	Changed to not use selector 0004 in exec mode to map the LDT (XOS kernel
;	no longer supports this use for this selector).
; 1.3.16 - 2-Oct-93
;	Changed EFR display.
; 1.3.17 - 11-Feb-94
;	Added watchpoint data logic.
; 1.3.18 - 20-Feb-94
;	Fixed problem with getting segment type in PROTIO, fixed problem with
;	changing user level selectors in PROTIO.
; 1.3.19 - 4-Mar-94
;	Fixed error in opcode output table for LARW/LARL.
; 1.3.20 - 22-May-94
;	Minor exec mode changes to match XOS 1.8.93+.
; 1.3.21 - 9-Aug-94
;	Fixed some problems with floating point op-codes FINIT, FCLEX, FDISI,
;	and FNENI
; 1.3.22 - 3-Oct-94
;	Fixed bug in EXPRSN for user mode, was using DI instead of EDI to
;	reference symbol table.
; 1.3.23 - 3-Dec-94
;	Fixed problem with determining display adapter type in PROTIO.
; 1.3.24 - 3-Jan-95
;	Added support for user mode watchpoints.
; 1.3.25 - 19-Jan-95
;	Added code to display detail error message when get console input
;	error in USERIO.
; 1.3.26 - 22-Jan-95
;	Fixed bug in PROTIO relating to setting exec mode watchpoings
;	introduced when adding user mode watchpoints.
; 1.4.0 - 29-Jan-98
;	Added support for XOS graphic display mode 2 to user mode GECKO
; 1.4.1 - 3-Nov-98
;	Made several enhancements to terminal support in GECKOX; fixed problem
;	with storing incorrect word and long values in GECKOX.

;Define version number

MAJVER =!1t		;Major version number
MINVER =!4t		;Minor version number
EDITNUM=!1t		;Edit number

;Define general parameters

SYMLEN  =!32t		;Maximum symbol length
BPTNUM  =!16t		;Number of breakpoints
MXDGLN  =!16t		;Maximum number of digits in numeric input value
MAXLINES=!16t

;Define ASCII characters

ERR=!01h		;Change color for error message
TXT=!02h		;Change color for normal text
INV=!03h		;Inverse text
CLR=!04h		;Clear line
BS =!08h
HT =!09h
LF =!0Ah
CR =!0Dh
ESC=!1Bh
DEL=!7Fh

;Define special characters

XC_HELP=!81h		;Help
XC_SS  =!82h		;Switch screens
XC_EEIP=!84h		;Examine instruction at CS:EIP
XC_EP  =!85h		;Examine previous
XC_ES  =!86h		;Examine same
XC_EN  =!87h		;Examine next
XC_X   =!88h		;Execute instruction
XC_T   =!89h		;Trace instruction
XC_G   =!8Ah		;Begin execution
XC_REGS=!8Ch		;Update register display
XC_OEIP=!94h		;Open instruction at CS:EIP
XC_OP  =!95h		;Open previous
XC_OS  =!96h		;Open same
XC_ON  =!97h		;Open next

;Define output modes

OM$NUM=!02h		;Numeric
OM$ALF=!01h		;Alpha (ASCII)

;Define FLAG bit values

FLAG$N  =!4000h		;Nested task flag
FLAG$O  =!0800h		;Overflow flag
FLAG$D  =!0400h		;Direction flag
FLAG$I  =!0200h		;Interrupt flag
FLAG$T  =!0100h		;Trap flag
FLAG$S  =!0080h		;Sign flag
FLAG$Z  =!0040h		;Zero flag
FLAG$A  =!0010h		;Half-carry (auxillary carry) flag bit
FLAG$P  =!0004h		;Parity flag
FLAG$C  =!0001h		;Carry flag bit
FLAG$ALL=!4FD5h		;All flag bits

;Define offsets in the flag symbol table

fst_sym0=!0t		;Symbol for value = 0
fst_sym1=!2t		;Symbol for value = 1
fst_sym2=!4t		;Symbol for value = 2
fst_sym3=!6t		;Symbol for value = 3
fst_sym4=!8t		;Symbol for value = 4
fst_sym5=!10t		;Symbol for value = 5
fst_sym6=!12t		;Symbol for value = 6
fst_sym7=!14t		;Symbol for value = 7
fst_pos =!16t		;Amount to shift field to get value
fst_mask=!18t		;Mask for field
fst_ENSZ=!22t		;Size of table entry

;Define breakpoint flag bits

BP$BRK=!1		;Breakpoint
BP$TRC=!2		;Tracing across a subroutine
BP$EXE=!4		;Executing across a subroutine
BP$PRC=!8		;Proceed from this point

;Define values for registers "values"

RG_AL  =!0t		;Register AL (8 bit)
RG_AH  =!1t		;Register AH (8 bit)
RG_BL  =!2t		;Register BL (8 bit)
RG_BH  =!3t		;Register BH (8 bit)
RG_CL  =!4t		;Register CL (8 bit)
RG_CH  =!5t		;Register CH (8 bit)
RG_DL  =!6t		;Register DL (8 bit)
RG_DH  =!7t		;Register DH (8 bit)
RG_AX  =!8t		;Register AX (16 bit)
RG_BX  =!9t		;Register BX (16 bit)
RG_CX  =!10t		;Register CX (16 bit)
RG_DX  =!11t		;Register DX (16 bit)
RG_SI  =!12t		;Register SI (16 bit)
RG_DI  =!13t		;Register DI (16 bit)
RG_BP  =!14t		;Register BP (16 bit)
RG_SP  =!15t		;Register SP (16 bit)
RG_EAX =!16t		;Register EAX (32 bit)
RG_EBX =!17t		;Register EBX (32 bit)
RG_ECX =!18t		;Register ECX (32 bit)
RG_EDX =!19t		;Register EDX (32 bit)
RG_ESI =!20t		;Register ESI (32 bit)
RG_EDI =!21t		;Register EDI (32 bit)
RG_EBP =!22t		;Register EBP (32 bit)
RG_ESP =!23t		;Register ESP (32 bit)
RG_CS  =!24t		;Register CS (16 bit)
RG_DS  =!25t		;Register DS (16 bit)
RG_SS  =!26t		;Register SS (16 bit)
RG_ES  =!27t		;Register ES (16 bit)
RG_FS  =!28t		;Register FS (16 bit)
RG_GS  =!29t		;Register GS (16 bit)
RG_IP  =!30t		;Register IP (16 bit)
RG_EIP =!31t		;Register EIP (32 bit)
RG_FR  =!32t		;Register FR (16 bit, flag register)
RG_EFR =!33t		;Register EFR (32 bit, flag register)
RG_LDTR=!34t		;Register LDTR (16 bit, system level)
RG_MSW =!35t		;Register MSW (16 bit, system level)
RG_TR  =!36t		;Register TR (16 bit, system level)
RG_GDTR=!37t		;Register GDTR (48 bit, system level)
RG_IDTR=!38t		;Register IDTR (48 bit, system level)

;Define values for the valtyp and opntyp bytes

VL_LADDR=!0t		;Long address
VL_WADDR=!1t		;Word address
VL_LONG =!2t		;Long
VL_WORD =!3t		;Word
VL_BYTE =!4t		;Byte
VL_INS  =!5t		;Instruction
VL_REG  =!6t		;Register

;Define values for the oprtyp byte

OP_ADDR=!0t		;Memory address
OP_REG =!1t		;Register
OP_IRG =!2t		;Indexed by register(s)
OP_IRO =!3t		;Indexed by register(s) with offset
OP_IMED=!4t		;Immediate value

;Define offsets for the 16 bit symbol table

sym16_size=!0t		;Length of symbol name in bytes
sym16_flag=!1t		;Flag bits
sym16_ofs =!2t		;Offset value
sym16_seg =!4t		;Segment part value
sym16_name=!6t		;Start of symbol name string

;Define offsets for the 32 bit symbol table

sym32_size=!0t		;Length of symbol name in bytes
sym32_flag=!1t		;Flag bits
sym32_ofs =!2t		;Offset value
sym32_seg =!6t		;Segment part value
sym32_name=!8t		;Start of symbol name string

;Define bits for the flag byte in the symbol table

SF$SEL=!80h		;Symbol is a segment selector value
SF$IMP=!40h		;Symbol is imported
SF$ADR=!20h		;Symbol is an address
SF$SUP=!10h		;Symbol is suppressed
SF$GLB=!08h		;Symbol is global
SF$MSC=!04h		;Symbol is a msect selector/offset value
SF$MOD=!02h		;Symbol is a module name
SF$REL=!01h		;Symbol is relocatable
SF$V86=!01h		;Symbol is a V86 address

;Define offsets in the opcode input table

opi_name=!0t		;Opcode string
opi_val1=!8t		;First value byte
opi_val2=!9t		;Second value byte
opi_val3=!10t		;Third value byte
opi_val4=!11t		;Fourth value byte
opi_size=!12t		;Size
opi_flag=!13t		;Flag byte
opi_disp=!14t		;Dispatch address
opi_ENSZ=!16t		;Size of table entry

;Define bits for the OPI_FLAG byte

OF$MS=!80h		;Two operand instruction can have memory field as
			;  source
OF$RS=!40h		;Source memory field can be register
OF$MD=!20h		;Two operand instruction can have memory field as
			;  destination
OF$BI=!04h		;Immediate value is always single byte
OF$DB=!02h		;Instruction uses direction bit
OF$SB=!01h		;Instruction uses size bit

;Define offsets in the opcode output table

opo_byt0  =!0t		;Contents for first byte
opo_msk0  =!1t		;Mask for first byte
opo_byt1  =!2t		;Contents for second byte
opo_msk1  =!3t		;Mask for second byte
opo_byt2  =!4t		;Contents for third byte
opo_msk2  =!5t		;Mask for third byte
opo_name16=!6t		;Address of opcode string for 16 bit operand size
opo_name32=!8t		;Address of opcode string for 32 bit operand size
opo_disp  =!10t		;Dispatch address
opo_ENSZ  =!12t		;Size of table entry

;Define bits for the regbits table

RB$IX1 =!8000h		;Set if register is valid as "first" index register
			;  (set for BX and BP)
RB$IX2 =!4000h		;Set if register is valid as "second" index register
			;  (set for SI and DI)
RB$2OP =!2000h		;Set if register is valid for operand for general two
			;  operand instruction
RB$SEG =!1000h		;Set if register is a segment register
RB$8B  =!0800h		;Set if 8 bit register
RB$48B =!0400h		;Set if 48 bit register
RB$AX  =!0200h		;Set if register is AL or AX
RB$1XRM=!0060h		;Low 2 bits for r/m field to specify index register
			;  when using single index register
RB$2XRM=!0018h		;Low 2 bits for r/m field to specify index register
			;  when using two index registers
RB$11RM=!0007h		;Value for r/m field to specify register when
			;  mod = 11, also gives value for reg field

;Define offset of each entry in the breakpoint table (bpttbl)

bt_sts =!0t		;(1) Breakpoint status
bt_ins =!1t		;(1) Breakpoint instruction value
			;(2) Not used
bt_cnt =!4t		;(4) Breakpoint repeat count
bt_ofs =!8t		;(4) Breakpoint address offset
bt_seg =!12t		;(4) Breakpoint address selector
bt_ENSZ=!16t		;(4) Entry size

;Define offset of each entry in the watchpoint table (wpttbl)

wt_sts =!0t		;(1) Watchpoint status
wt_type=!1t		;(1) Watchpoint type
wt_size=!2t		;(1) Watchpoint size
			;(1) Not used
wt_cnt =!4t		;(4) Watchpoint repeat count
wt_data=!8t		;(4) Watchpoint data value
wt_ofs =!12t		;(4) Watchpoint address offset
wt_seg =!16t		;(4) Watchpoint address selector
wt_ENSZ=!20t		;Entry size

;Define flags bits for wt_sts

WP$ACT =!80h		;Watchpoint is active
WP$DATA=!40h		;Data value specified

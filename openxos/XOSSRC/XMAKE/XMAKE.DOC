XMAKE is invoked with the command:

XMAKE -options target

Options may be any of the following:

-? or -(H)ELP	: Display a list of the available options
-FILE:makefile	: Set the filename which is used for the Makefile.  A null
		  filename denotes the standred input.
-(P)RINT	: Print out the Makefile after external macros have been
		  processed.
-(I)GNORE	: Ignore error codes returned by invoked commands.
-(S)ILENT	: Silent mode.  Do not print commands lines before execution.
-(N)OEXEC	: No execute mode.  Print commands, but do not execute them.
		  Even lines beginning with '@' are printed.
-(E)NVIROMENT	: Do not re-define enviroment variables from within the
		  Makefile.
-(D)EBUG	: Debug mode.  Print out detailed information whie processing.
-(Q)UESTION	: Question mode.  Returns a zero or non-zero status code
		  depending on whether the target file is or is not up-to-date.

Target is the name of the entry in the MAKEFILE which is to be processed.
The target may be specified without an extension, in which case the first match
for the main part of the name will be used.  If no target is specified, the
first dependency is used.
MAKEFILE.MAK must be present in the current default directory.
Physical lines in the Makefile may be a maxium of 512 characters long.  You
may create longer logical lines if needed by escaping the newline with a
backslash.

XMAKE supports the following entries in the MAKEFILE at the present time:

Dependancy:

FOO.OBJ: FOO.C
	Optional commands

The colon in a dependancy specification must be followed by a whitespace
character.  All commands must begin on a new line, and begin with a horizontal
tab.  More than one dependancy may be specified for a given target.  If the
dependancy is seperated by a single-colon, the dependencies are concatenated
into a single dependency, and only one dependency may have a command list
associated with it.  If the dependency is seperated by a double-colon, each
dependency is processed seperately, each dependency may have a command list
associated with it, and each dependency is processed for the target.

Default Rule:

.C.OBJ:
	Required commands

The colon must be the last character on the first line of the rule.  There
must be at least one command associated with a rule.

Macro definition:

STRING = BODY OF MACRO

Macros are not restricted as to length.  A macro is invoked by placing
the $ character in the Makefile, followed by the name of the macro.
Macro names of more than a single character must be surrounded by
paranthesis.  To insert a '$' in the Makefile, use '$$'.

Internal macros:
The following special macros are valid for any command, but are ignored
elsewhere:

$* - List of all dependents
$@ - Name of the target
$? - List of all out-of-date dependents

These macros may be modifed with the following characters:

D - Device part of the file specification
P - Path part of the file specification
N - Name part of the file specification
E - Extension of the file specification

If none of these are specified, all are assumed.

Additionally, these macros may be modified with a '1', which will cause
a list of filenames to generate only the first filename in the list.
After all options have been specified, you may optionally enter a
colon.  The character following the colon will be taken as the seperator
character for the macros that generate a list of filenames.  For example:

$(*DPN1:+)

will generate the name of the first dependant without an extension.  '+'
will be used as the seperator character.  These macros somewhat follow the
Unix version of Make, but are not fully compatable.  Internal macros
$< and $% are not supported or recognized.

Restrictions:
All commands in the Makefile must be specified with a full pathname and
extension.  There is presently no ability to search for commands using
the PATH variable.  BAT files as commands is not currently supported.
The ability to place a command on the same line as a rule or dependency
by using a semicolon as a seperator is not yet implemented.  The enviroment
is not yet available as macros.

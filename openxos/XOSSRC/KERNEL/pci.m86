	.TITLE	PCI - Routines to handle the PCI bus controller

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR

	DATA
	CODE

	.SBTTL	knlPciFindVendor - Find a PCI device given the vendor ID

;Subroutine to find a PCI device given the vendor ID
;	c(BH) = Device and function number to start searching at
;	c[CX] = Vendor ID
;	CALL	knlPciFindVendor
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c(BH) = Device and function number found
;	  c[AX] = Device ID
;

knlPciFindVendor::
	ANDL	EBX, #0FF00h
	BTSL	EBX, #31t
	MOVL	EDX, #0CF8h
	CALL	verify
	JNE	notdef.S
4$:	MOVL	EAX, EBX
	OUTL	[DX]			;Write the address register
	IOPAUSE
	A2IOP	4
	INL	[DX]			;Read the data from register 0
	CMPW	AX, CX			;This one?
	JE	6$.S			;Yes
	A2IOP	-4
	INCB	BH			;Bump the device/function
	JNE	4$.S			;Continue if not finished
	JMP	notdef.S		;Didn't find it - fail

;Here if found a device with a matching vendor ID

6$:	SHRL	EAX, #16t		;Get the device ID in AX
	CLC
	RET
.PAGE
	.SBTTL	knlPciFindType - Find a PCI device given the device type

;Subroutine to find a PCI device given the device type
;	c(BH) = Device and function number to start searching at
;	c(CL) = Device type
;	CALL	knlPciFindVendor
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c(BH)  = Device and function number found
;	  c{EAX} = Device ID,,vendor ID
;

knlPciFindType::
	ANDL	EBX, #0FF00h
	MOVB	BL, #08h		;Point to the device type byte
	BTSL	EBX, #31t
	MOVL	EDX, #0CF8h
	CALL	verify
	JNE	notdef.S
4$:	MOVL	EAX, EBX
	OUTL	[DX]			;Write the address register
	IOPAUSE
	A2IOP	4
	INL	[DX]			;Read the data from register 0Bh
	A2IOP	-4
	SHRL	EAX, #16t
	CMPB	AH, CL			;This one?
	JE	6$.S			;Yes
	INCB	BH			;Bump the device/function
	JNE	4$.S			;Continue if not finished
notdef:	MOVL	EAX, #ER_NTDEF		;Didn't find it - fail
	STC
	RET

;Here if found a device with a matching device type

6$:	MOVL	EAX, EBX
	MOVB	AL, #0			;Read register 0
	OUTL	[DX]
	IOPAUSE
	A2IOP	4
	INL	[DX]
	CLC
	RET
.PAGE
	.SBTTL	knlPciReadConfig - Read a PCI device configuration register

;Subroutine to read a PCI configuration register
;	c(BL) = Register number (low 2 bits must be 0)
;	c(BH) = Device/function
;	CALL	knlPciReadConfig
;	c{EAX} = Data

knlPciReadConfig::
	MOVZWL	EAX, BX
	BTSL	EAX, #31t
	MOVL	EDX, #0CF8h
	OUTL	[DX]
	IOPAUSE
	A2IOP	4
	INL	[DX]
	CLC
	RET

;Subroutine to verify that we can access the PCI registers (This may not be
;  right, but it works on the machines we have tried so far!)
;	CALL	verify
;	Z: set = OK
;	Z: clr = Cannot access PCI registers

verify:	MOVL	EAX, #80000004h
	OUTL	[DX]
	IOPAUSE
	INL	[DX]
	CMPL	EAX, #80000004h
	RET

	END

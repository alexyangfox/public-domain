	.TITLE	PROTBIOS - Protected mode BIOS emulation routines for Allegro
	.SBTTL	Copyright (c) 1987-1994, Saguaro Software, Ltd.

	.PROC	80486
	.INCLUD	ALGINC:\AMAC\ALLEGRO.PAR
	.INCLUD	ALGINC:\AMAC\ALLEGROX.PAR
	.INCLUD	ALGINC:\AMAC\ALGERR.PAR
	.INCLUD	ALGINC:\AMAC\ALGDOS.PAR
	.INCLUD	ALGINC:\AMAC\ALGTRM.PAR
	.INCLUD	ALGINC:\AMAC\ALGXTRM.PAR
	.INCLUD	PROT.INC

	USERCODE

	.SBTTL	protbios10 - Routine to handle INT 10 in protected mode - Console display functions

;Default protected mode INT 10 handler

	PROTINT	10

pintv10:MOVZBL	EAX, dff_EAX+1.B[EBP]	;Get the function
	CMPL	EAX, #I10MAX.B		;Valid function?
	JA	pbadi10.S		;No
	JMPIL	CS:int10tbl[EAX*4]	;Yes - dispatch on the function


pbadi10:MOVB	DL, #10h
	JMP	pbadint#

;INT 10 function dispatch table

	.MOD	4
int10tbl:
	.LONG	psetvmod	; 00 - Set video mode
	.LONG	pcurtype	; 01 - Set cursor type
	.LONG	psetcpos	; 02 - Set cursor position
	.LONG	pgetcpos	; 03 - Get cursor position
	.LONG	ret002		; 04 - Get light pen position
	.LONG	psetdpage	; 05 - Set display page
	.LONG	pwindup		; 06 - Initialize window or scroll window up
	.LONG	pwinddn		; 07 - Initialize window or scroll window down
	.LONG	pgetatch	; 08 - Get attribute and character at cursor
	.LONG	psetatch	; 09 - Set attribute and character at cursor
	.LONG	psetchar	; 0A - Set character only at cursor
	.LONG	psetcpal	; 0B - Set color palette
	.LONG	psetgpix	; 0C - Set graphics pixel
	.LONG	pgetgpix	; 0D - Get graphics pixel
	.LONG	psettext	; 0E - Write text in teletype mode
	.LONG	pgetdmod	; 0F - Get current display mode
	.LONG	psetpreg	; 10 - Set palette registers
	.LONG	pchargen	; 11 - Character generator functions
	.LONG	pmisc		; 12 - Misc. functions
	.LONG	pwrtstr		; 13 - Write string
	.LONG	ret002		; 14
	.LONG	ret002		; 15
	.LONG	ret002		; 16
	.LONG	ret002		; 17
	.LONG	ret002		; 18
	.LONG	ret002		; 19
	.LONG	pcombinc	; 1A - Get or set display combination code
	.LONG	ret002		; 1B - Get functionality/state information
	.LONG	ret002		; 1C - Save or restore video state
I10MAX=!{$-int10tbl}/4-1
.PAGE
	.SBTTL	psetvmod - INT 10 function 00 - Set video mode

;Here for INT 10 function 00 - Set video mode
;	c(AL) = New video mode
;		  00h = 40x25 text
;		  01h = 40x25 text
;		  02h = 80x25 text
;		  03h = 80x25 text
;		  04h = 320x200x4 graphics (CGA mode)
;		  05h = 320x200x4 graphics (CGA mode)
;		  06h = 640x200x2 graphics (CGA mode)
;		  07h = 80x25 text (monochrome addapter)
;		  08h = Illegal
;		  09h = Illegal
;		  0Ah = Illegal
;		  0Bh = Illegal
;		  0Ch = Illegal
;		  0Dh = 320x200x16 graphics (EGA mode)
;		  0Eh = 640x200x16 graphics (EGA mode)
;		  0Fh = 640x350x1 graphics (EGA mode)
;		  10h = 640x350x16 graphics (EGA mode)
;	c(AH) = 00h
;	INT	10h
;	Nothing is returned!

psetvmod:
	MOVZBL	EAX, dff_EAX.B[EBP]	;Get new mode value
	ORB	AH, #DM$BIOSMODE/100h	;Indicate BIOS value
	PUSHL	#DH_STDTRM.B
	PUSHL	EAX
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcTrmDspMode#		;Set the mode
	RET
.PAGE
	.SBTTL	pcurtype - INT 10 function 01 - Set cursor type

;Here for INT 10 function 01 - Set cursor type
;	c(AH) = 01h
;	c(CL) = Ending scan line
;	c(CH) = Beginning scan line
;	INT	10h
;	Nothing is returned!

pcurtype:
	MOVL	EAX, dff_ECX.B[EBP]	;Get his arguments
	XCHGB	AL, AH
	PUSHL	#DH_STDTRM.B
	PUSHL	EAX
	CALLF	svcTrmCurType#
	RET
.PAGE
	.SBTTL	psetcpos - INT 10 function 02 - Set cursor position

;Here for INT 10 function 02 - Set cursor position
;	c(AH) = 02h
;	c(BH) = Display page number
;	c(DL) = Character number
;	c(DH) = Line number
;	INT	10h
;	c[AX] = 0

psetcpos:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]	;Get display page number
	PUSHL	EAX
	MOVB	AL, dff_EDX+0.B[EBP]	;Get character number
	PUSHL	EAX
	MOVB	AL, dff_EDX+1.B[EBP]	;Get line number
	PUSHL	EAX
	CALLF	svcTrmCurPos#

;;;;;;;	MOVW	dff_EAX.B[EBP], #0

	RET

	.SBTTL	pgetcpos - INT 10 function 03 - Get cursor position

;Here for INT 10 function 03 - Get cursor position
;	c(AH) = 03h
;	c(BH) = Page number
;	INT	10h
;	c[AX] = 0
;	c(CL) = Ending line number for cursor
;	c(CH) = Starting line number for cursor
;	c(DL) = Character number
;	c(DH) = Line number

pgetcpos:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]
	PUSHL	EAX
	PUSHL	#-1.B
	PUSHL	#-1.B
	CALLF	svcTrmCurPos#
	TESTL	EAX, EAX
	JNS	4$.S
	CLRL	EAX
4$:	MOVW	dff_EDX.B[EBP], AX	;Return cursor position values
	MOVW	AX, bda_vcurmode	;Return cursor type values
	MOVW	dff_ECX.B[EBP], AX

;;;;;;;	MOVW	dff_EAX.B[EBP], #0

	RET
.PAGE
	.SBTTL	psetdpag - INT 10 function 05 - Set display page

;Here for INT 10 function 05 - Set display page - this sets the both the
;  display and access pages
;	c(AL) = New page value
;	c(AH) = 05h
;	INT	10h
;	Nothing is returned!

psetdpage:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, SS:pdaURegEAX#+0	;Get page number
	PUSHL	EAX
	CALLF	svcTrmDspPage#
	RET
.PAGE
	.SBTTL	pwindup - INT 10 function 06 - Initialize window or scroll up

;Here for INT 10 function 06 - Initialize window or scroll window up
;	c(AL) = Number of lines
;	c(AH) = 06h
;	c(BH) = Attribute byte for blank fill
;	c(CL) = X coordinate, upper left corner of window
;	c(CH) = Y coordinate, upper left corner of window
;	c(DL) = X coordinate, lower right corner of window
;	c(DH) = Y coordinate, lower right corner of window
;	INT	10h
;	Nothing is returned!

pwindup:CLRL	EAX
	JMP	2$.S

	.SBTTL	pwinddn - INT 10 function 07 - Initialize window or scroll down

;Here for INT 10 function 07 - Initialize window or scroll down
;	c(AL) = Number of lines
;	c(AH) = 07h
;	c(BH) = Attribute byte for blank fill
;	c(CL) = X coordinate, upper left corner of window
;	c(CH) = Y coordinate, upper left corner of window
;	c(DL) = X coordinate, lower right corner of window
;	c(DH) = Y coordinate, lower right corner of window
;	INT	10h
;	Nothing is returned!

pwinddn:MOVL	EAX, #1
2$:	PUSHL	#DH_STDTRM.B
	PUSHL	#-1.B			;Always use current page
	MOVB	AL, dff_ECX+0.B[EBP]	;Get X coordinate of upper left corner
	PUSHL	EAX
	MOVB	AL, dff_ECX+1.B[EBP]	;Get Y coordinate of upper left corner
	PUSHL	EAX
	MOVB	AL, dff_EDX+0.B[EBP]	;Get X coordinate of lower right corner
	PUSHL	EAX
	MOVB	AL, dff_EDX+1.B[EBP]	;Get Y coordinate of lower right corner
	PUSHL	EAX
	MOVB	AL, dff_EAX+0.B[EBP]	;Get number of lines
	PUSHL	EAX
	MOVB	AL, dff_EBX+1.B[EBP]	;Get foreground color for filling
	ANDB	AL, #0Fh
	PUSHL	EAX
	MOVB	AL, dff_EBX+1.B[EBP]	;Get background color for filling
	SHRL	EAX, #4t
	PUSHL	EAX
	CALLF	svcTrmScroll#
	RET
.PAGE
	.SBTTL	pgetatch - INT 10 function 08 - Get attribute and character

;Here for INT 10 function 08 - Get attribute and character at cursor
;	c(AH) = 08h
;	c(BH) = Display page
;	INT	10h
;	c(AL) = Character
;	c(AH) = Attribute

pgetatch:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, SS:pdaURegEBX#+1	;Get display page
	PUSHL	EAX
	CALLF	svcTrmGetAtChr#
	TESTL	EAX, EAX
	JNS	2$.S
	CLRL	EAX
2$:	MOVW	dff_EAX.B[EBP], AX	;Return result
	RET				;Done

	.SBTTL	psetatch - INT 10 function 09 - Set attribute and character

;Here for INT 10 function 09 - Set attribute and character at cursor
;	c(AL) = Character
;	c(AH) = 09h
;	c(BL) = Attribute byte, XOR flag in graphics modes
;	c(BH) = Display page
;	c[CX] = Character count
;	INT	10h
;	Nothing is returned!

psetatch:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]	;Get display page
	PUSHL	EAX
	MOVB	AL, dff_EAX+0.B[EBP]	;Get character
	PUSHL	EAX
	MOVB	AL, dff_EBX+0.B[EBP]	;Get attribute byte
	PUSHL	EAX
	MOVW	AX, dff_ECX.B[EBP]	;Get count
	PUSHL	EAX
	CALLF	svcTrmSetAtChr#
	RET

	.SBTTL	psetchar - INT 10 function 0A - Set character only

;Here for INT 10 function 0A - Set character only at cursor
;	c(AL) = Character
;	c(AH) = 0Ah
;	c(BL) = Attribute byte for graphics modes
;	c(BH) = Display page
;	c[CX] = Character count
;	INT	10h
;	Nothing is returned!

psetchar:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]	;Get display page
	PUSHL	EAX
	MOVB	AL, dff_EAX+0.B[EBP]	;Get character
	PUSHL	EAX
	MOVB	AL, dff_EBX+0.B[EBP]	;Get attribute byte for graphics modes
	PUSHL	EAX
	MOVW	AX, dff_ECX.B[EBP]	;Get count
	PUSHL	EAX
	CALLF	svcTrmSetChr#
ret002:	RET
.PAGE
	.SBTTL	psetcpal - INT 10 function 0B - Set CGA mode color palette

;Here for INT 10 function 0B - Set CGA mode color palette
;	c(AH) = 0Bh
;	c(BL) = Color value or palette set number
;	c(BH) = Function:
;		  0 = Set background and border color
;		  1 = Select CGA palette set
;	INT	10h
;	Nothing is returned!

psetcpal:
	CMPB	BH, #2			;Valid function?
	JAE	ret002.S		;No - do nothing!
	SUBL	ESP, #40t.B		;Yes - get space for a palette list
	MOVL	EBP, ESP		;Get offset of the list
	MOVL	EDI, ESP
	CMPB	BH, #0			;Want to set background and border?
	JNE	4$.S			;No - want to select pallet set
	MOVL	0.B[EBP], #80010000h	;Specify the border register
	ANDL	EBX, #0Fh.B		;Get color value wanted
	MOVL	EAX, CS:cgacol[EBX*4]
	MOVL	4.B[EBP], EAX
	TESTB	tdb_stsdsp.B[ESI], #TSD$TEXT ;In a text mode?
	JNE	2$.S			;Yes - don't change pallet 0 color
	ADDL	EBP, #8.B		;No - change pallet 0 too
	MOVL	0.B[EBP], #80000000h
	MOVL	4.B[EBP], EAX
2$:	MOVL	8.B[EBP], #0FFFFFFFFh	;Indicate end
	JMP	10$.S			;Continue

;Here if want to select CGA pallet set

4$:	TESTB	BL, BL			;See which pallet set he wants
	MOVL	EBX, cgapal0		;Assume wants pallet 0
	JE	6$.S			;If right
	ADDL	EBX, #cgapal1-cgapal0	;Wrong - he wants pallet 1
6$:	MOVL	ECX, #3			;Copy 4 entries to the pallet list
	MOVL	EDX, #80000001h		;Start with pallet 1
8$:	MOVL	0.B[EBP], EDX
	MOVL	EAX, CS:[EBX]
	MOVL	4.B[EBP], EAX
	INCL	EDX
	ADDL	EBX, #4.B
	ADDL	EBP, #4.B
	LOOP	ECX, 8$
	MOVL	0.B[EBP], #0FFFFFFFFh	;Flag end of pallet list
10$:	PUSHL	#DH_STDTRM.B
	PUSHL	SS
	PUSHL	EDI
	CALLF	svcTrmEgaPalet#
	ADDL	ESP, #40t.B		;Fix up the stack
	RET				;And return

;Color data

;Translation for background colors

	.MOD	4
cgacol:	.LONG	0000000		; 0 - red = 00, green = 00, blue = 00
	.LONG	0000080		; 1 - red = 00, green = 00, blue = 80
	.LONG	0008000		; 2 - red = 00, green = 80, blue = 00
	.LONG	0008080		; 3 - red = 00, green = 80, blue = 80
	.LONG	0800000		; 4 - red = 80, green = 00, blue = 00
	.LONG	0800080		; 5 - red = 80, green = 00, blue = 80
	.LONG	0804000		; 6 - red = 80, green = 40, blue = 00
	.LONG	0808080		; 7 - red = 80, green = 80, blue = 80
	.LONG	0404040		; 8 - red = 40, green = 40, blue = 40
	.LONG	04040C0		; 9 - red = 40, green = 40, blue = C0
	.LONG	040C040		; A - red = 40, green = C0, blue = 40
	.LONG	040C0C0		; B - red = 40, green = C0, blue = C0
	.LONG	0C04040		; C - red = C0, green = 40, blue = 40
	.LONG	0C040C0		; D - red = C0, green = 40, blue = C0
	.LONG	0C0C040		; E - red = C0, green = C0, blue = 40
	.LONG	0C0C0C0		; F - red = C0, green = C0, blue = C0

;Colors for CGA pallet 0

cgapal0:.LONG	0008000		; 1 - color = 2 (green)
	.LONG	0800000		; 2 - color = 4 (red)
	.LONG	0804000		; 3 - color = 6 (brown)

;Colors for CGA pallet 1

cgapal1:.LONG	0008080		; 1 - color = 3 (cyan)
	.LONG	0800080		; 2 - color = 5 (magenta)
	.LONG	0808080		; 3 - color = 7 (white)
.PAGE
	.SBTTL	psetgpix - INT 10 function 0C - Set graphics pixel

;Here for INT 10 function 0C - Set graphics pixel
;	c(AL) = Color value
;	c(AH) = 0Ch
;	c(BH) = Page number
;	c[CX] = X coordinate
;	c[DX] = Y coordinate
;	INT	10h
;	Nothing is returned!

psetgpix:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]	;Get display page
	PUSHL	EAX
	MOVW	AX, dff_ECX.B[EBP]	;Get X coordinate
	PUSHL	EAX
	MOVW	AX, dff_EDX.B[EBP]	;Get Y coordinate
	PUSHL	EAX
	MOVZBL	EAX, dff_EAX+0.B[EBP]	;Get value for pixel
	PUSHL	EAX
	CALLF	svcTrmSetPixel#
	RET

	.SBTTL	pgetgpix - INT 10 function 0D - Get graphics pixel

;Here for INT 10 function 0D - Get graphics pixel
;	c(AH) = 0Dh
;	c(BH) = Page number
;	c[CX] = X coordinate
;	c[DX] = Y coordinate
;	INT	10h
;	c(AL) = Color value

pgetgpix:
	PUSHL	#DH_STDTRM.B
	MOVZBL	EAX, dff_EBX+1.B[EBP]	;Get display page
	PUSHL	EAX
	MOVW	AX, dff_ECX.B[EBP]	;Get X coordinate
	PUSHL	EAX
	MOVW	AX, dff_EDX.B[EBP]	;Get Y coordinate
	PUSHL	EAX
	CALLF	svcTrmGetPixel#
	TESTL	EAX, EAX
	JNS	4$.S
	CLRL	EAX
4$:	MOVB	dff_EAX+0.B[EBP], AL
	RET

	.SBTTL	psettext - INT 10 function 0E - Write text in teletype mode

;Here for INT 10 function 0E - Write text in teletype mode
;	c(AL) = Character to output
;	c(AH) = 0Eh
;	c(BL) = Foreground color in graphics modes
;	INT	10h
;	Nothing is returned

psettext:
	JMP	pbadi10

;;;	TOFORK
;;;	TESTB	tdb_sts2.B[ESI], #TS2$TEXT ;Graphics mode?
;;;	JNE	2$.S			;No
;;;	PUSHL	tdb_gfgcolor[ESI]	;Yes - save current colors
;;;	PUSHL	tdb_gbgcolor[ESI]
;;;	PUSHL	tdb_gfgfill[ESI]
;;;	PUSHL	tdb_gbgfill[ESI]
;;;	MOVL	EAX, SS:pdaURegEBX#+0
;;;	MOVL	tdb_gfgcolor[ESI], EAX	;Store specified foreground color
;;;	MOVL	tdb_gfgfill[ESI], EAX
;;;	CLRL	EAX
;;;	MOVL	tdb_gbgcolor[ESI], EAX	;Background is always 0
;;;	MOVL	tdb_gbgfill[ESI], EAX
;;;2$:	MOVB	AL, SS:pdaURegEAX#	;Get character
;;;	MOVL	EBX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
;;;	CALLI	CS:tf_doutchr.B[EBX]
;;;	TESTB	tdb_sts2.B[ESI], #TS2$TEXT ;Graphics mode?
;;;	JNE	4$.S			;No
;;;	POPL	tdb_gbgfill[ESI]	;Yes - restore colors
;;;	POPL	tdb_gfgfill[ESI]
;;;	POPL	tdb_gbgcolor[ESI]
;;;	POPL	tdb_gfgcolor[ESI]
;;;4$:	FROMFORK
;;;	RET				;Thats all

	.SBTTL	pgetdmod - INT 10 function 0F - Get current display mode

;Here for INT 10 function 0F - Get current display mode
;	c(AH) = 0Fh
;	INT	10h
;	c(AL) = Current video mode
;	c(AH) = Current screen width
;	c(BH) = Active page

pgetdmod:
	SUBL	ESP, #dm_SIZE.B		;Allocate space for the data block
	MOVL	EBP, ESP
	PUSHL	#DH_STDTRM.B
	PUSHL	#DM$RTNDATA|DM$BIOSMODE|0FFh ;Return BIOS mode value
	PUSHL	SS
	PUSHL	EBP
	CALLF	svcTrmDspMode#
	MOVB	dff_EAX+0.B[EBP], AL	;Give him the BIOS mode value
	MOVL	EAX, dm_columns.B[EBP]	;Give him the number of columns
	MOVB	dff_EAX+1.B[EBP], AL
	MOVB	AL, dm_actpage.B[EBP]	;Give him the active page
	MOVB	dff_EBX+1.B[EBP], AL
	RET				;Thats all

	.SBTTL	psetpreg - INT 10 function 10 - Set palette registers

;Here for INT 10 function 10 - Set palette registers
;	c(AL)    = Sub-function:
;		     0 = Set palette register
;		     1 = Set border color register
;		     2 = Set all palette registers and border register
;		     3 = Toggle/blink intensity bit
;	c(BL)    = Palette register if c(AL) = 0
;		   Blink/intensity bit if c(AL) = 3
;	c(BH)    = Color value if c(AL) = 0 or 1
;	c[ES:DX] = Address of color list if c(AL) = 2
;	INT	10h
;	Nothing is returned!

psetpreg:
	JMP	pbadi10

	MOVZBL	ECX, SS:pdaURegEAX#	;Get sub-function
	CMPL	ECX, #3.B		;Valid?
	JA	ret004.S		;No - just do nothing!
	JMPIL	CS:pregdsp[ECX*4]	;Yes - dispatch on function

	.MOD	4
pregdsp:.LONG	setone		; 0 - Set single palette register
	.LONG	setbrdr		; 1 - Set border color
	.LONG	setall		; 2 - Set all palette registers
	.LONG	setblnk		; 3 - Select blink/intensity control
.PAGE
;Here for INT 10, function 10, subfunction 0 - set single palette register

setone:	MOVZBL	EAX, SS:pdaURegEBX#+0	;Get register number
	ORL	EAX, #80000000h		;Indicate should change register
	JMP	2$.S			;Continue

;Here for INT 10, function 10, subfunction 1 - set border color

setbrdr:MOVL	EAX, #80010000h
2$:	SUBL	ESP, #12t.B
	MOVL	EDI, ESP
	PUSHL	SS
	POPL	ES
	MOVL	ES:[EDI], EAX		;Store value
	MOVZBL	EAX, SS:pdaURegEBX#+1	;Get color value
	ANDB	AL, #03Fh
	MOVL	EAX, palxlt[EAX*4]	;Translate it
	MOVL	ES:4.B[EDI], EAX	;Store it
	MOVL	ES:8.B[EDI], #0FFFFFFFFh ;Indicate end
	MOVL	EBX, tdb_ddisp.B[ESI]	;Dispatch to driver
	CALLI	CS:tf_palreg.B[EBX]
	JC	4$.S
	ADDL	ESP, #12t.B
ret004:	RET

4$:	ADDL	ESP, #12t.B
	STC
	RET

;Here for INT 10, function 10, subfunction 2 - set all palette registers

setall:	MOVZWL	EAX, SS:pdaVRegES#	;Get address of palette list
	SHLL	EAX, #4
	SUBL	ESP, #144t		;Allocate space on the stack for our
	MOVL	EDI, ESP		;  list
	PUSHL	ESI
	MOVZWL	ESI, DX
	ADDL	ESI, EAX
	PUSHL	SS
	POPL	ES
	MOVL	ECX, #17t		;The list always contains 17 colors
	MOVL	EDX, #80000000		;Start with register 0
6$:	MOVL	EAX, EDX		;Get register number
	STOSL	[EDI]			;Store it
	IFFAULT	10$
	LODSB	GS:[ESI]		;Get user's color value
	ANDL	EAX, #03Fh.B
	MOVL	EAX, palxlt[EAX*4]	;Get translated value
	STOSL	[EDI]			;Store it
	INCL	EDX			;Bump register number
	LOOP	ECX, 6$			;Continue if more to do
	MOVL	ES:-8.B[EDI], #80010000h ;Fix up last register number
	MOVL	ES:[EDI], #0FFFFFFFFh	;Indicate end of list
	POPL	ESI
	MOVL	EDI, ESP		;Restore offset for data
	MOVL	EBX, tdb_ddisp.B[ESI]	;Dispatch to driver
	CALLI	CS:tf_palreg.B[EBX]
	JC	12$.S
	ADDL	ESP, #144t
	RET

;Here if address error

	FAULTHDR
10$:	POPL	ESI
	MOVL	EAX, #ER_ADRER
12$:	ADDL	ESP, #144t
	STC
	RET

;Here for INT 10, function 10, subfunction 3 - select blink/intensity control

setblnk:JMP	pbadi10
.PAGE
;Translation table from EGA color values to Allegro color values

	.MOD	4
palxlt:	.LONG	0000000h		; ......
	.LONG	0000080h		; .....B
	.LONG	0008000h		; ....G.
	.LONG	0008080h		; ....GB
	.LONG	0800000h		; ...R..
	.LONG	0800080h		; ...R.B
	.LONG	0808000h		; ...RG.
	.LONG	0808080h		; ...RGB
	.LONG	0000040h		; ..b...
	.LONG	00000C0h		; ..b..B
	.LONG	0008040h		; ..b.G.
	.LONG	00080C0h		; ..b.GB
	.LONG	0800040h		; ..bR..
	.LONG	08000C0h		; ..bR.B
	.LONG	0808040h		; ..bRG.
	.LONG	08080C0h		; ..bRGB
	.LONG	0004000h		; .g....
	.LONG	0004080h		; .g...B
	.LONG	000C000h		; .g..G.
	.LONG	000C080h		; .g..GB
	.LONG	0804000h		; .g.R..
	.LONG	0804080h		; .g.R.B
	.LONG	080C000h		; .g.RG.
	.LONG	080C080h		; .g.RGB
	.LONG	0004040h		; .gb...
	.LONG	00040C0h		; .gb..B
	.LONG	000C040h		; .gb.G.
	.LONG	000C0C0h		; .gb.GB
	.LONG	0804040h		; .gbR..
	.LONG	08040C0h		; .gbR.B
	.LONG	080C040h		; .gbRG.
	.LONG	080C0C0h		; .gbRGB
	.LONG	0400000h		; r.....
	.LONG	0400080h		; r....B
	.LONG	0408000h		; r...G.
	.LONG	0408080h		; r...GB
	.LONG	0C00000h		; r..R..
	.LONG	0C00080h		; r..R.B
	.LONG	0C08000h		; r..RG.
	.LONG	0C08080h		; r..RGB
	.LONG	0400040h		; r.b...
	.LONG	04000C0h		; r.b..B
	.LONG	0408040h		; r.b.G.
	.LONG	04080C0h		; r.b.GB
	.LONG	0C00040h		; r.bR..
	.LONG	0C000C0h		; r.bR.B
	.LONG	0C08040h		; r.bRG.
	.LONG	0C080C0h		; r.bRGB
	.LONG	0404000h		; rg....
	.LONG	0404080h		; rg...B
	.LONG	040C000h		; rg..G.
	.LONG	040C080h		; rg..GB
	.LONG	0C04000h		; rg.R..
	.LONG	0C04080h		; rg.R.B
	.LONG	0C0C000h		; rg.RG.
	.LONG	0C0C080h		; rg.RGB
	.LONG	0404040h		; rgb...
	.LONG	04040C0h		; rgb..B
	.LONG	040C040h		; rgb.G.
	.LONG	040C0C0h		; rgb.GB
	.LONG	0C04040h		; rgbR..
	.LONG	0C040C0h		; rgbR.B
	.LONG	0C0C040h		; rgbRG.
	.LONG	0C0C0C0h		; rgbRGB
.PAGE
	.SBTTL	pchargen - INT 10 function 11 - Character generator functions

;Here for INT 10 function 11 - Character generator functions
;	c(AL) = Sub-function:
;		  0h  = Load user text character set
;		  1h  = Load ROM monochrome character set
;		  2h  = Load ROM double dot character set
;		  3h  = Set block specifier
;		  10h = Load user text character set
;		  11h = Load ROM monochrome character set
;		  12h = Load ROM double-dot character set
;		  20h = Load user graphics 8x8 character set
;		  21h = Load user graphics general character set
;		  22h = Load graphics ROM 8x14 character set
;		  23h = Load graphics ROM 8x8 double dot character set
;		  30h = Return font information
;	c(AH) = 11h
;	INT	10h
;	Nothing is returned

pchargen:
	JMP	pbadi10

	MOVZBL	EBX, SS:pdaURegEAX#+0	;Get sub-function
	CMPB	BL, #CHRGENMAX		;Valid?
	JA	ret008			;No - do nothing!
	CLRL	EAX			;Yes
	JMPIL	CS:chrgendsp[EBX*4]	;Dispatch on the function

ret008:	RET

;INT 10h function 11h dispatch table

	.MOD	4
chrgendsp:
	.LONG	loadutext	; 0h = Load user text character set
	.LONG	loadrt8x14	; 1h = Load ROM 8x14 character set
	.LONG	loadrt8x8	; 2h = Load ROM 8x8 character set
	.LONG	setblk		; 3h = Set block specifier
	.LONG	loadrt8x16	; 4h = Load ROM 8x16 character set
	.LONG	ret008		; 5h = Illegal
	.LONG	ret008		; 6h = Illegal
	.LONG	ret008		; 7h = Illegal
	.LONG	ret008		; 8h = Illegal
	.LONG	ret008		; 9h = Illegal
	.LONG	ret008		;0Ah = Illegal
	.LONG	ret008		;0Bh = Illegal
	.LONG	ret008		;0Ch = Illegal
	.LONG	ret008		;0Dh = Illegal
	.LONG	ret008		;0Eh = Illegal
	.LONG	ret008		;0Fh = Illegal
	.LONG	loadutextx	;10h = Load user text character set
	.LONG	loadrt8x14x	;11h = Load ROM 8x14 character set
	.LONG	loadrt8x8x	;12h = Load ROM 8x8 character set
	.LONG	ret008		;13h = Illegal
	.LONG	loadrt8x16x	;14h = Load ROM 8x16 character set
	.LONG	ret008		;15h = Illegal
	.LONG	ret008		;16h = Illegal
	.LONG	ret008		;17h = Illegal
	.LONG	ret008		;18h = Illegal
	.LONG	ret008		;19h = Illegal
	.LONG	ret008		;1Ah = Illegal
	.LONG	ret008		;1Bh = Illegal
	.LONG	ret008		;1Ch = Illegal
	.LONG	ret008		;1Dh = Illegal
	.LONG	ret008		;1Eh = Illegal
	.LONG	ret008		;1Fh = Illegal
	.LONG	loadug8x8	;20h = Load user 8x8 graphics character set
	.LONG	loadugrph	;21h = Load user general graphics character set
	.LONG	loadrg8x14	;22h = Load ROM 8x14 graphics character set
	.LONG	loadrg8x8	;23h = Load ROM 8x8 graphics character set
	.LONG	loadrg8x16	;24h = Load ROM 8x16 graphics character set
	.LONG	ret008		;25h = Illegal
	.LONG	ret008		;26h = Illegal
	.LONG	ret008		;27h = Illegal
	.LONG	ret008		;28h = Illegal
	.LONG	ret008		;29h = Illegal
	.LONG	ret008		;2Ah = Illegal
	.LONG	ret008		;2Bh = Illegal
	.LONG	ret008		;2Ch = Illegal
	.LONG	ret008		;2Dh = Illegal
	.LONG	ret008		;2Eh = Illegal
	.LONG	ret008		;2Fh = Illegal
	.LONG	fontinfo	;30h = Return font information
CHRGENMAX=!{$-chrgendsp}/4-1
.PAGE
;Here for the load user text character set function

loadutextx:
	INCL	EAX
loadutext:
	MOVL	EDI, dff_EBP.B[EBP]	;Get address of user's buffer
	CMPB	dda_dpmitype, #DPMIT_32B
	JE	2$.S
	MOVZWL	EDI, DI
2$:	MOVL	ES, dff_ES.B[EBP]
	MOVZBL	EDX, dff_EBX+0.B[EBP]	;Get block number
	MOVZBL	EBX, dff_EBX+1.B[EBP]	;Get bytes per character
	MOVZWL	ECX, dff_ECX.B[EBP]	;Get number of characters to load
	MOVZWL	ESI, SS:pdaURegEDX#	;Get character offset
	JMP	12$.S

;Here for the load 8x8 ROM text character set function

loadrt8x8x:
	INCL	EAX
loadrt8x8:
	MOVL	EDI, #-1t		;Indicate want standard 8x8 table
	MOVL	EBX, #8t		;8 bytes per character
	JMP	10$

;Here for the load 8x14 ROM text character set function

loadrt8x14x:
	INCL	EAX
loadrt8x14:
	MOVL	EDI, #-3t		;Indicate want standard 8x14 table
	MOVL	EBX, #14t		;14 bytes per character
	JMP	10$

;Here for the load 8x16 ROM text character set function

loadrt8x16x:
	INCL	EAX
loadrt8x16:
	MOVL	EDI, #-4t		;Indicate want standard 8x16 table
	MOVL	EBX, #16t		;16 bytes per character
10$:	MOVZBL	EDX, dff_EBX+0.B[EBP]	;Get block number
	MOVL	ECX, #256t
	CLRL	ESI
	MOVL	ES, ESI
12$:	PUSHL	#DH_STDTRM.B		;Stack console handle
	PUSHL	EAX			;Stack function
	PUSHL	EDX			;Stack block number
	PUSHL	EBX			;Stack bytes per character
	PUSHL	ECX			;Stack count
	PUSHL	ESI			;Stack offset
	PUSHL	ES			;Stack font buffer address
	PUSHL	EDI
	PUSHL	#0.B			;No data buffer
	PUSHL	#0.B
	CALLF	svcTrmLoadFont#		;Do it
	RET

;Here for the load 8x8 user graphics character set function

loadug8x8:
	JMP	pbadi10

;Here for the load general user graphics character set function

loadugrph:
	JMP	pbadi10

;Here for the load 8x16 ROM graphics character set function

loadrg8x16:
	JMP	pbadi10

;Here for the load 8x14 ROM graphics character set function

loadrg8x14:
	JMP	pbadi10

;Here for the load 8x8 ROM graphics character set function

loadrg8x8:
	JMP	pbadi10

;Here for the set block specifier function

setblk:	JMP	pbadi10

.PAGE
;Here for the get font information function (subfunction 30h)

fontinfo:
	MOVZBL	EBX, SS:pdaURegEBX#+1	;See which pointer he wants
	CMPL	EBX, #5.B
	JA	1$.S
	JMPIL	CS:fpntdsp[EBX*4]

1$:	RET

;Font pointer dispatch table

	.MOD	4
fpntdsp:.LONG	pntINT1F	;0 = INT 1Fh pointer
	.LONG	pntINT43	;1 = INT 43h pointer
	.LONG	pntr8x14	;2 = ROM 8x14 font
	.LONG	pntr8x8		;3 = ROM 8x8 double-dot font
	.LONG	pntr8x8u	;4 = ROM 8x8 upper-128 double-dot font
	.LONG	pntr9x14a	;5 = ROM 9x14 alternate text font

pntINT1F:
	MOVL	EAX, SS:pdaRMPage0#+1Fh*4
	JMP	2$.S

pntINT43:
	MOVL	EAX, SS:pdaRMPage0#+43h*4
2$:	MOVZBL	ECX, tdb_charch[ESI]	;Get number of scan lines per character
	MOVB	DL, tdb_rows[ESI]	;Get number of lines on screen
	MOVL	EBX, EAX
	SHRL	EBX, #16t
	JMP	10$.S

pntr8x8:MOVL	EAX, knlFont8x8L#
	JMP	4$.S

pntr8x8u:
	MOVL	EAX, knlFont8x8H#
4$:	MOVW	CX, #8			;Get number of scan lines per character
	MOVB	DL, #50t		;;;;;;;;;;
	JMP	8$.S			;Continue

pntr8x14:
	MOVL	EAX, knlFont8x14L#
	JMP	6$.S

pntr9x14a:
	MOVL	EAX, knlFont9x14F#
6$:	MOVW	CX, #14t		;Get number of scan lines per character
7$:	MOVB	DL, #24t		;Get number of lines on screen
8$:	MOVW	BX, #0C000h
	SUBL	EAX, #egarom
10$:	MOVW	SS:pdaURegECX#, CX	;Store byte per character
	DECL	EDX
	MOVB	SS:pdaURegEDX#, DL	;Store number of lines on screen - 1
	MOVL	SS:pdaVRegES#, EBX	;Store character table address
	MOVW	SS:pdaURegEBP#, AX
	RET
.PAGE
	.SBTTL	paltsel - INT 10 function 12 - Misc. functions

;Here for INT 10 function 12 - Misc functions
;	c(AH) = 12h
;	c(BL) = Sub-function:
;		  10h = Return EGA/VGA information
;		  20h = Select alternate print screen routine
;		  30h = Set scan lines
;		  31h = Enable/disable default palette loading
;		  32h = Enable/disable video
;		  33h = Enable/disable gray-scale summing
;		  34h = Enable/disable cursor emulation
;		  35h = Switch active display
;		  36h = Enable/disable screen refresh
;	INT	10h
;	For c(BL) >= 30h, AL is set to 12h, otherwise nothing is returned

pmisc:	
	JMP	pbadi10


	MOVZBL	EAX, SS:pdaURegEBX#+0	;Get sub-function
	CMPB	AL, #10h		;Return EGA/VGA information?
	JNE	4$.S			;No
	MOVW	AX, #0003h		;Yes - assume color with 256k
	MOVW	CX, #0009h
	BTL	tdb_dspmode[ESI], #DM%MONOADPT ;Right?
	JNC	2$.S			;Yes
	MOVB	AH, #01h		;No - its monochrome
	MOVB	CL, #0Bh
2$:	MOVW	SS:pdaURegEBX#+0, AX
	MOVW	SS:pdaURegECX#+0, CX
	MOVB	SS:pdaURegEAX#+0, #12h
	RET

;Here if function not return EGA information

4$:	CMPB	AL, #20h		;Select alternate print screen routine?
	JNE	retc10.S		;No - ignore this
	NOP				;Do this soon!!
retc10:	CLC
ret010:	RET
.PAGE
	.SBTTL	pwrtstr - INT 10 function 13 - Write string

;Here for INT 10 function 13 - Write string
;	c(AL)    = Write mode
;		     0 = Attribute in c(BL), string contains characters only,
;			   cursor is not advanced
;		     1 = Same as 0 except cursor is advanced
;		     2 = String contains alternating characters and attribute
;			   bytes, cursor is not advanced
;		     3 = Same as 2 except cursor is advanced
;	c(AH)    = 13h
;	c(BH)    = Page
;	c(BL)    = Attribute byte (if c(AL) = 0 or 1)
;	c[CX]    = Length of string
;	c(DL)    = X coordinate for starting position
;	c(DH)    = Y coordinate for starting position
;	c[ES:BP] = Address of strinag
;	INT	10h
;	Nothing is returned

pwrtstr:
	JMP	pbadi10

	CMPB	SS:pdaURegEAX#+0, #3	;Check for valid function
	JA	retc10.S		;Ignore this if function not valid
	MOVZBL	ECX, SS:pdaURegEDX#+0	;Get character number
	MOVZBL	EDX, SS:pdaURegEDX#+1	;Get line number
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver to set position
	CALLI	CS:tf_curpos.B[EAX]
	JC	1$.S			;Forget it if error
	TESTB	tdb_stsdsp.B[ESI], #TSD$TEXT ;Graphics mode?
	JE	2$.S			;Yes
	MOVZWL	EAX, tdb_tattrval[ESI]	;No - save current text attributes
	PUSHL	EAX
	JMP	4$.S

1$:
;;;;;	FROMFORK
	STC
	RET

2$:	PUSHL	tdb_gfgcolor[ESI]
	PUSHL	tdb_gbgcolor[ESI]
	PUSHL	tdb_gfgfill[ESI]
	PUSHL	tdb_gbgfill[ESI]
4$:	MOVZWL	EBX, SS:pdaURegEBP#	;Get address of string
	MOVZWL	EAX, SS:pdaVRegES#
	SHLL	EAX, #4
	ADDL	EBX, EAX
	PUSHL	#GS_REAL16
	POPL	ES
	MOVZWL	ECX, SS:pdaURegECX#	;Get length of string
	TESTB	SS:pdaURegEAX#+0, #02	;Have attributes in string?
	JNE	10$.S			;Yes
	MOVB	AH, SS:pdaURegEBX#+0	;No - get attribute byte for entire
;;;;;;;	CALL	setattrib		;  string
	IFFAULT	14$
6$:	MOVB	AL, ES:[EBX]		;Get character
	INCL	EBX
	PUSHL	EBX
	PUSHL	ES
	PUSHL	ECX
	MOVL	EDX, tdb_ddisp.B[ESI]	;Dispatch to driver to display character
	CALLI	CS:tf_doutchr.B[EDX]
;;;;;;;	FROMFORK
	POPL	ECX
	POPL	ES
	POPL	EBX
	LOOP	ECX, 6$			;Continue if more to do
	JMP	14$.S			;Done

;Here to write string with alternate attribute bytes

	IFFAULT	14$
10$:	MOVW	AX, ES:[EBX]		;Get character and attribute byte
	ADDL	EBX, #2.B		;Bump pointer
;;;;;;;	CALL	setattrib		;Store attribute value
	PUSHL	EBX
	PUSHL	ES
	PUSHL	ECX
	TOFORK
	MOVL	EDX, tdb_ddisp.B[ESI]	;Dispatch to driver to display character
	CALLI	CS:tf_doutchr.B[EDX]
;;;;;;;	FROMFORK
	POPL	ECX
	POPL	ES
	POPL	EBX
	LOOP	ECX, 10$		;Continue if more to do
	FAULTHDR
14$:	TESTB	tdb_stsdsp.B[ESI], #TSD$TEXT ;Graphics mode?
	JE	16$.S			;Yes
	POPL	EAX			;No - restore text attributes
	MOVW	tdb_tattrval[ESI], AX
	JMP	18$.S

16$:	POPL	tdb_gbgfill[ESI]	;Yes - restore colors
	POPL	tdb_gfgfill[ESI]
	POPL	tdb_gbgcolor[ESI]
	POPL	tdb_gfgcolor[ESI]
18$:	TESTB	SS:pdaURegEAX#+0, #01	;Need to restore cursor position?
	JNE	24$.S			;No
	MOVZBL	ECX, SS:pdaURegEDX#+0	;Yes - get character number
	MOVZBL	EDX, SS:pdaURegEDX#+1	;Get line number
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver to set position
	CALLI	CS:tf_curpos.B[EAX]
;;;;;;;	FROMFORK
	CLC
	RET

;Subroutne to set attribute values
;	c(AH) = BIOS attribute byte
;	CALL	setattrib

setattrib:
	TESTB	tdb_stsdsp.B[ESI], #TSD$TEXT ;Text mode?
	JE	22$.S			;No
	MOVB	tdb_tattrval[ESI], AH	;Yes
	MOVB	tdb_tattrfil[ESI], AH
	RET

;Here if graphics mode

22$:	MOVZBL	EDX, AL
	ANDL	EAX, #0Fh
	SHRL	EDX, #4t
	MOVL	tdb_gfgcolor[ESI], EAX
	MOVL	tdb_gfgfill[ESI], EAX
	MOVL	tdb_gbgcolor[ESI], EDX
	MOVL	tdb_gbgfill[ESI], EDX
24$:	RET
.PAGE
	.SBTTL	pcombinc - INT 10 function 1A - Get or set display combination code

;Here for INT 10 function 1A - Get or set display combination code
;	c(AL) = Subfunction:
;		  0 = Get display combination code
;		  1 = Set display combination code
;	c(AH) = 1Ah
;	c(BH) = Inactive display code (if c(AL) = 1)
;	c(BL) = Active display code (if c(AL) = 1)
;	INT	10h
;	c(AL) = 1Ah
;	c(BH) = Inactive display code (if c(AL) = 0)
;	c(BL) = Active display code (if c(AL) = 0)

;Display codes are defined as follows:
;	00h	  = * No display
;	01h	  = * MDA
;	02h	  =   CGA
;	03h	  =   Reserved
;	04h	  = * EGA with 5153 or 5154 monitor
;	05h	  = * EGA with 5151 monitor
;	06h	  =   PGA
;	07h	  = * VGA with analog monochrome monitor
;	08h	  = * VGA with analog color monitor
;	09h	  =   Reserved
;	0Ah	  =   MCGA with digital color monitor
;	0Bh	  =   MCGA with analog monochrome monitor
;	0Ch	  =   MCGA with analog color monitor
;	0Dh - FEh =   Reserved
;	FFh	  =   Unknown

pcombinc:
	JMP	pbadi10

	CMPB	SS:pdaURegEAX#+0, #0	;Is this a get call?
	JNE	4$.S			;No - do nothing!
	MOVZBL	EAX, tdb_disptype+3.B[ESI] ;Yes - get current display type
	MOVB	DL, tdb_disptype+0.B[ESI]
	ADDL	EAX, EAX
	ANDB	DL, #01h
	ORB	AL, DL
	MOVB	AL, combtbl[EAX]	;Get value to return
	MOVW	SS:pdaURegEBX#+0, AX	;Give it to him
	MOVB	SS:pdaURegEAX#+0, #1Ah	;Also indicate we did this
4$:	RET				;Thats all

combtbl:.BYTE	0FFh	;DISP_SERIAL =  0 - Serial terminal
	.BYTE	0FFh
	.BYTE	1	;DISP_MDA    =  1 - Monochrome display adapter
	.BYTE   0FFh
	.BYTE	4	;DISP_EGA    =  2 - Monochrome EGA
	.BYTE	5	;		  - Color EGA
	.BYTE	7	;DISP_VGA    =  3 - Monochrome VGA
	.BYTE	8	;		  - Color VGA
.PAGE
	.SBTTL	protdos14 - Routine to handle INT 14 in protcted mode - Serial port functions

;Routine to handle INT 14 in protected mode - Serial port functions

protbios14::

pbadi14:MOVB	DL, #14h
	JMP	pbadint#
.PAGE
	.SBTTL	protdos15 - Routine to handle INT 15 in protected mode - Misc. functions

;Routine to handle INT 15 in protected mode - Misc. functions

protbios15::
	MOVB	DL, #15h
	JMP	pbadint#

	MOVB	AL, SS:pdaURegEAX#+1	;Get function
	CMPB	AL, #88h		;Return extended memory size?
	JE	b15xmemsz.S		;Yes
	CMPB	AL, #0C0h		;Return pointer to environment data?
	JE	b15sysenv.S		;Yes
	CMPB	AL, #0C1h		;Return address of extended BIOS data?
	JE	b15xbiosdata.S		;Yes
	CLC				;No - just fail quietly!
	RET

;Here for INT 15, function 88h - Get extended memory size

b15xmemsz:
	MOVW	dff_EAX.B[EBP], #0h	;Always say no extended memory!
	RET

;Here for INT 15, function 0C0h - Return pointer to environment data

b15sysenv:
	MOVL	EAX, #bda_vcnfgdata-400h
	MOVW	SS:pdaURegEBX#, AX
	MOVW	SS:pdaVRegES#, #40h
	RET

;Here for INT 15, function 0C1h - Return address of extended BIOS data

b15xbiosdata:
	MOVW	SS:pdaVRegES#, #0F000h	;Give him some likely value!
	RET
.PAGE
	.SBTTL	protbios16 - Routine to handle INT 16 in protected mode - Keyboard functions

;Routine to handle INT 16 in protected mode - Keyboard functions

protbios16::
	MOVL	SS:pdaRMIndex#, #16h*4 ;Store index for waits
	MOVZBL	EAX, SS:pdaURegEAX#+1	;Get the INT 16 function
	CMPB	AL, #I16MAX		;Legal function?
	JA	int16bad.S		;No
	JMPIL	CS:int16tbl[EAX*4]	;Yes - dispatch to routine for function

;Here if illegal INT 16 function - we just ignore this like the BIOS does

int16bad:
	RET

	.MOD	4
int16tbl:
	.LONG	int16read0	; 0 - Read character from keyboard
	.LONG	int16status0	; 1 - Get keyboard status
	.LONG	int16flags0	; 2 - Get keyboard flags
	.LONG	int16bad	; 3 - Set repeat rate
	.LONG	int16bad	; 4 - Set keyclick
	.LONG	int16bad	; 5 - Push character and scan code
	.LONG	int16bad	; 6 - Illegal
	.LONG	int16bad	; 7 - Illegal
	.LONG	int16bad	; 8 - Illegal
	.LONG	int16bad	; 9 - Illegal
	.LONG	int16bad	; A - Illegal
	.LONG	int16bad	; B - Illegal
	.LONG	int16bad	; C - Illegal
	.LONG	int16bad	; D - Illegal
	.LONG	int16bad	; E - Illegal
	.LONG	int16bad	; F - Illegal
	.LONG	int16read10	;10 - Read character from enhanced keyboard
	.LONG	int16status10	;11 - Get enhanced keyboard status
	.LONG	int16flags10	;12 - Get enhanced keyboard flags
I16MAX=!{$-int16tbl}/4-1
.PAGE
;Here for the read character from keyboard function - c(AH) = 0h

int16read0:
	PUSHL	#TIM$PCSCNC|TIM$XIMAGE
;;;;;;	JMP	2$.S

;Here for the read character from keyboard function - c(AH) = 10h

int16read10:
	PUSHL	#TIM$PCSCNC|TIM$PC101|TIM$XIMAGE
;;;;2$:	CALL	gettrm#			;Get DCB for his terminal
	JC	4$.S			;If error
;;;;	CALL	chkgettdb#		;Get the TDB
4$:	POPL	EAX
	JC	8$.S			;If error
;;;;	CALL	trmgetpc#		;Get keyboard character
	JC	10$.S			;If need to wait for a character
	MOVW	SS:pdaURegEAX, AX	;OK - give him the character
8$:	RET

;Here if need to wait for a character (at fork level)

10$:
;;;;;;	FROMFORK			;Back to main program level in case have
					;  to allocate memory for his stack
	SUBL	SS:pdaURegESP#, #6.B	;Put three words on his stack
	MOVZWL	EBX, SS:pdaURegESP#	;Get user's stack pointer
	MOVZWL	EAX, SS:pdaURegSS#
	SHLL	EAX, #4
	ADDL	EBX, EAX
	MOVL	EAX, SS:pdaURegEIP#	;Copy return address and FR to his
	MOVW	GS:[EBX], AX		;  stack
	MOVL	EAX, SS:pdaURegCS#
	MOVW	GS:2.B[EBX], AX
	MOVL	EAX, SS:pdaURegEFR#
;NEED TO FIDDLE INTERRUPT STUFF HERE!!!!!!
	MOVW	GS:4.B[EBX], AX
	MOVL	EAX, SS:pdaRMIndex#	;Get index for waits
	ADDL	EAX, #mwaitcall#
	MOVL	SS:pdaURegEIP#, EAX	;Set so he will execute the re-do
	MOVL	SS:pdaURegCS#, #0ED00h	;  stuff next
	MOVL	EAX, EDI
	TOFORK				;Back to fork level
	CMPL	tdb_ircnt[ESI], #0.B	;Did any input sneak in?
	JNE	18$.S			;Yes - don't wait
;;;;	CALL	setwait#		;No
	MOVB	AL, #knlQX_DW2#		;Set up to wait
	PUSHL	SS
	POPL	ES
;;;;	CALL	wrequeue#		;Requeue to an IO wait queue
	MOVB	knlSchedReq#, #1	;Force scheduling
	MOVB	AL, SS:pdaSigReq#	;Do we have any unmasked software
	ANDB	AL, SS:pdaSigMask#	;  interrupt requests now?
	JE	14$.S			;No
	PUSHL	SS			;Yes
	POPL	ES
;;;;	CALL	rrequeue#		;Put process back in a run queue
	JMP	16$.S

;Here if need to schedule

14$:	MOVB	knlSchedReq#, #1	;No - request scheduling now
16$:
;;;;;;	FROMFORK
	CLRL	EAX			;Clear C and set Z to indicate not done
	RET

;Here if want to re-do the operation immediately

18$:
;;;;;;	FROMFORK
	CLRL	EAX			;Clear C and set Z to indicate not done
	RET
.PAGE
;Here for the get keyboard status function - c(AH) = 1h

int16status0:
	PUSHL	#TIM$PCSCNC|TIM$XIMAGE
;;;;;;	JMP	2$.S

;Here for the get keyboard status function - c(AH) = 11h

int16status10:
	PUSHL	#TIM$PCSCNC|TIM$PC101|TIM$XIMAGE
;;;;2$:	CALL	gettrm#			;Get DCB for his terminal
	JC	4$.S			;If error
;;;;	CALL	chkgettdb#		;Get the TDB
4$:	POPL	EAX
	JC	10$.S			;If error
;;;;	CALL	trmchkpc#		;Check for character
	JC	10$.S			;If nothing there
	ANDB	SS:pdaURegEFR#+0, #~40h	;Indicate have data
	MOVW	SS:pdaURegEAX, AX	;Give him the character
	RET

;Here if nothing in buffer

10$:	ORB	SS:pdaURegEFR#+0, #40h	;Indicate nothing available
	RET				;And return
.PAGE
;Here for the get keyboard flags function - c(AH) = 2h

int16flags0:
	MOVB	AL, GS:bda_vkeysts0	;Get keyboard status byte
	MOVB	SS:pdaURegEAX#+0, AL
	CLC
	RET

;Here for the get keyboard flags function - c(AH) = 12h

int16flags10:
	MOVB	AL, GS:bda_vkeysts0	;Get first keyboard status byte
	MOVB	SS:pdaURegEAX#+0, AL
	MOVB	AL, GS:bda_vkeysts1	;Get bits from the other two bytes
	ANDB	AL, #73h
	MOVB	AH, GS:bda_vkeysts2
	ANDB	AH, #0Ch
	ORB	AL, AH
	MOVB	SS:pdaURegEAX#+1, AL
	RET
.PAGE
	.SBTTL	protdos17 - Routine to handle INT 17 in protected mode - Parallel port functions

;Routine to handle INT 17 in protected mode - Parallel port functions

protbios17::
	MOVB	DL, #17h
	JMP	pbadint#

	END

	.TITLE	EXPORT - Initial exported symbol table for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.NLBEX

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	SVCDEF.INC

	ONCE

;Note that the macros used here store all symbol offset values as 2 or 4-byte
;  values.  This is necessary since most of the symbols are external and there
;  is no way to know their exact length at assembly time.  In cases where the
;  values are known to be 2-byte values (such as pda, sda, and xff offsets),
;  they are stored as 2-byte values.  Otherwise they are stored as 4-byte
;  values.  The code in ONCEP which copies this table to its final position
;  compresses all values to the minimum possible length.

;Define macro to determine length of a text string.  The value of the symbol
;  specified as the first argument is set to the length of the string
;  specified as the second argument

	.MACRO	STRLEN symbol, string
symbol=!0
	.IRPC	q, {string}
symbol=!symbol+1
	.ENDR
	.ENDM

exporttable::!

	.SBTTL	"svc" symbol table

;The svc symbol table defines symbols for the kernel system call entries.
;  These are all addresses.

.IF P1
  NUMSVC=!0
.ENDC

svctable:!
	.LONG	pdatable
	.ASCIZ	"svc"
	.LONG	0
	.LONG	NUMSVC

	.MACRO	SD  pcnt, pname, vcnt, vname
.IF NB {pname}
	STRLEN	$$$L, pname
	.BYTE	$$$L+8t
	.BYTE	{$$$L-1}|0C0h
	.ASCII	"pname"
	.ADDRL	svc'pname#
NUMSVC=!NUMSVC+1
.ENDC
	.ENDM

	SVCDEFSYS

	.MACRO	SD  pname, vname
.IF NB {pname}
	STRLEN	$$$L, pname
	.BYTE	$$$L+8t
	.BYTE	{$$$L-1}|0C0h
	.ASCII	"pname"
	.ADDRL	svc'pname#
NUMSVC=!NUMSVC+1
.ENDC
	.ENDM

	SVCDEFUSER
	.BYTE	0
.PAGE
	.SBTTL	"pda" symbol table

;The pda symbol table defines symbols which are offsets in the process data
;  area (PDA) for each process.  The values are all numbers (not addresses).

	.MACRO	DW  name
	STRLEN	$$$L, name
	.BYTE	$$$L+4t
	.BYTE	$$$L-1
	.ASCII	"name"
	.WORD	pda'name#
NUMPDA=!NUMPDA+1
	.ENDM

	.MACRO	DL  name
	STRLEN	$$$L, name
	.BYTE	$$$L+6t
	.BYTE	$$$L-1
	.ASCII	"name"
	.LONG	pda'name#
NUMPDA=!NUMPDA+1
	.ENDM

.IF P1
  NUMPDA=!0
.ENDC

	.MOD	4
pdatable:!
	.LONG	sdatable
	.ASCIZ	'pda'
	.LONG	0
	.LONG	NUMPDA

 DW ActPriv
 DW Arg1
 DW Arg2
 DW Arg3
 DW Arg4
 DW Arg5
 DW ArgCnt
 DW AvlPriv
 DW IOBitmap
 DW CR3
 DW DirProt
 DW FileProt
 DW HndlTbl
 DW LdtPnt
 DW Magic
 DW Name
 DW OMPages
 DW PMPages
 DW ParProc
 DW Pid
 DW QueX
 DW RMIMskReg
 DL RMPage0
 DW RMPages
 DW RealIO
 DW Response
 DW RunTime
 DW SesData
 DW SesProc
 DW ShrDelay
 DW ShrRetry
 DW SigLvl
 DW SigMask
 DW SigReq
 DW Status1
 DW Tss
 DW URegEAX
 DW URegEBX
 DW URegECX
 DW URegEDX
 DW URegEDI
 DW URegESI
 DW URegEBP
 DW URegESP
 DW URegSS
 DW URegEIP
 DW URegCS
 DW URegEFR
 DW URegDS
 DW URegES
 DW URegFS
 DW URegGS
 DW WSPages
 DW VMode
 DW XffTime
 DW XRegEIP
 DW XRegCS
 DW XRegEFR
 DW XStackP
 DW XStackV
.PAGE
	.SBTTL	"sda" symbol table

;The sda symbol table defines symbols which are offsets in the section data
;  block (SDA) which stores data which specifies shared memory sections.
;  All values are defined as numbers (not addresses)

	.MACRO	DV  name
	STRLEN	$$$L, name
	.BYTE	$$$L+4t
	.BYTE	$$$L-1
	.ASCII	"name"
	.WORD	sda'name#
NUMSDA=!NUMSDA+1
	.ENDM

.IF P1
  NUMSDA=!0
.ENDC

sdatable:!
	.LONG	xfftable
	.ASCIZ	"sda"
	.LONG	0
	.LONG	NUMSDA

 DV Name
 DV SdaSize
 DV Sid
 DV TotalSize
 DV Type
 DV UseCnt
.PAGE
	.SBTTL	"xff" symbol table

;The xff symbol table defines symbols which are offsets in the extended fork
;  frame (XFF) which is the local stack segment for extended fork context.
;  All values are defined as numbers (not addresses)

	.MACRO	DV  name
	STRLEN	$$$L, name
	.BYTE	$$$L+4t
	.BYTE	$$$L-1
	.ASCII	"name"
	.WORD	xff'name#
NUMXFF=!NUMXFF+1
	.ENDM

.IF P1
  NUMXFF=!0
.ENDC

	.MOD	4
xfftable:!
	.LONG	knxtable
	.ASCIZ	'xff'
	.LONG	0
	.LONG	NUMXFF

 DV Buffer1
 DV Buffer2
 DV Cmd
 DV Count
 DV Dcb
 DV Func
 DV Handle
 DV HvValue1
 DV HvValue2
 DV LockCnt
 DV Magic
 DV NdValue1
 DV NdValue2
 DV Option
 DV PCFilSpc
 DV PLFilSpc
 DV PPFilSpc
 DV PSFilSpc
 DV PXFilSpc
 DV PVFilOpt
 DV Parm
 DV Pda
 DV Qab
 DV Queue
 DV RtdName
 DV SpoolUnit
 DV Status1
 DV TimeOut
 DV TmOutSub
 DV WaitBufr
 DV WaitList
.PAGE
	.SBTTL	"knx" symbol table

;The knx symbol table defines symbols which are kernel code addresses which
;  are links to standard kernal extension routines

	.MACRO	CA  name
	STRLEN	$$$L, name
	.BYTE	$$$L+7t
	.BYTE	{$$$L-1}|80h
	.ASCII	"name"
	.LONG	knx'name#
	.BYTE	GS_CODE
NUMKNX=!NUMKNX+1
	.ENDM

.IF P1
  NUMKNX=!0
.ENDC

	.MOD	4
knxtable:!
	.LONG	knltable
	.ASCIZ	'knx'
	.LONG	0
	.LONG	NUMKNX

 CA PciFindVendor
 CA PciFindType
 CA PciReadConfig
 CA PciWriteConfig
.PAGE
	.SBTTL	"knl" symbol table

;The knl symbol table defines symbols which are kernel code or data addresses
;  or which are numeric values relating to the kernal


	.MACRO	DV  name
	STRLEN	$$$L, name
	.BYTE	$$$L+6t
	.BYTE	$$$L-1
	.ASCII	"name"
	.LONG	knl'name#
NUMKNL=!NUMKNL+1
	.ENDM

	.MACRO	CA  name
	STRLEN	$$$L, name
	.BYTE	$$$L+7t
	.BYTE	{$$$L-1}|80h
	.ASCII	"name"
	.LONG	knl'name#
	.BYTE	GS_CODE
NUMKNL=!NUMKNL+1
	.ENDM

	.MACRO	DA  name
	STRLEN	$$$L, name
	.BYTE	$$$L+7t
	.BYTE	{$$$L-1}|80h
	.ASCII	"name"
	.LONG	knl'name#
	.BYTE	GS_DATA
NUMKNL=!NUMKNL+1
	.ENDM

.IF P1
  NUMKNL=!0
.ENDC

	.MOD	4
knltable:!
	.LONG	0
	.ASCIZ	'knl'
	.LONG	0
	.LONG	NUMKNL

 CA AddParm4		;Add in 4 byte IO parameter value
 CA AddParm8		;Add in 8 byte IO parameter value
 CA AddUnitChar		;Process characteristics for addunit
 CA BadCharF		;Illegal characteristic function error
 CA BadCharV		;Illegal characteristic value error
 CA BadCharS		;Illegal characteristic size error
 CA BadParmI		;Illegal parameter index error
 CA BadParmS		;Return ER_PARMS error
 CA BadParmV		;Return ER_PARMV error
 CA BadParmVLv		;Return ER_PARMV error
 CA BadValue		;Return ER_VALUE error
 CA BadValueLv		;Return ER_VALUE error
 CA Bdv2SysDate		;Convert broken down date to system date
.IF NE $$BUGRING
 CA BugLog		;Put entry into the debug log
.ENDC
 CA CheckCab		;Check for unneeded CAB
 CA ChkIORegs		;Check for available IO register block
 CA ChkIRqAvl		;Check for free IRQ number
 CA ChkVector		;Check for valid signal vector number
 CA ChngMsect		;Change size of msect
 CA CloseFin		;Finish close at main program level
 CA ComDPParms
 DA CpsPda
 DA Crashed
 DA CurPda		;Selector for PDA for current process
 CA DcGetClass		;Get device class name
 CA DcGetLong		;Get long device characteristic value
 CA DcGetLongDcb	;Get long device characteristic value from DCB
 CA DcGet1Byte		;Get 1 byte value from DCB
 CA DcGet2Byte		;Get 2 byte value from DCB
 CA DcGet4Byte		;Get 4 byte value from DCB
 CA DcGet8Byte		;Get 8 byte value from DCB
 CA DcGetStr		;Get sting value from DCB
 DA DcMsgAccess
 DA DcMsgByteIn
 DA DcMsgByteOut
 DA DcMsgClass
 DA DcMsgConDesp
 DA DcMsgDma
 DA DcMsgHDataErr
 DA DcMsgHDevErr
 DA DcMsgHOvrnErr
 DA DcMsgHungErr
 DA DcMsgIndex
 DA DcMsgInt
 DA DcMsgIoReg
 DA DcMsgMemReg
 DA DcMsgModel
 DA DcMsgWTMax
 DA DcMsgRAMax
 DA DcMsgDTHLimit
 DA DcMsgRevision
 DA DcMsgSerialNo
 DA DcMsgTDataErr
 DA DcMsgTDevErr
 DA DcMsgTOvrnErr
 DA DcMsgTimeOut
 DA DcMsgType
 DA DcMsgUnit
 DA DcMsgUnitType
 CA DcSet1Byte		;Set 1 byte value in DCB
 CA DcSet2Byte		;Set 2 byte value in DCB
 CA DcSet4Byte		;Set 4 byte value in DCB
 CA DcSetClass		;"Set" (really check) device class name
 CA DcSetLong		;Set value of long device characteristic
 CA DcSetLongDcb	;Set value of long device characteristic in DCB
 DA DcValue
 DA DelFactor		;Delay factor for CPU loops
 CA Disc2SysTime	;Convert discrete time to system time
 CA DismissInt2		;Dismiss hardware interrupt (disabled)
 DA DispType		;Console display type
 CA DsmFork		;Dismiss fork routine
 CA DCharValCom		;Routine for characteristics values
 CA DCharValXff		;Routine for characteristics values
 CA DmaGetChn		;Get use of DMA channel
 CA DmaGiveChn		;Give up use of DMA channel
 CA DmaSetVir		;Set up for DMA transfer given virtual address
 CA DmaSetPhy		;Set up for DMA transfer given physical address
 CA DmaInput		;Start DMA input
 CA DmaOutput		;Start DMA output
 CA DmaDisable		;Disable DMA channel
 CA DmaChkDone		;Check if DMA transfer is done
 CA DmaGetCnt		;Get DMA transfer count
 CA DmaGetAddr		;Get DMA transfer address
 CA DmaAbort		;Abort DMA channel
 CA DmaCascade		;Set up DMA channel for cascade mode
 CA Dos2SysDate
 CA Dos2SysTime
 DA DosDate		;Current date in DOS format
 DA DosErrTbl
 CA DosNameReg		;Register new DOS special device name
 CA DosSetup		;Set up DOS memory
 CA DskCcb		;Offset of DISK CCB
 CA EnableInt		;Enable interrupt
 CA EncodeFileProt	;Encode file protection to string
 CA EndWaitAll		;Wake up all processes which are waiting
 CA EndWaitOne		;Wake up one process which is waiting
 CA EnsXMem		;Ensure exec data memory locations are in a single page
 CA ExecReal		;Execute real mode code in pseudo-exec mode
 CA FindDcb
 CA FindMsect		;Find msect
 CA FindPath		;Find default path
 CA FindProc		;Find available process slot
 DA FirstCcb		;Contains offset of first CCB
 DA Font9x14F
 DA Font8x14H
 DA Font8x14L
 DA Font9x16F
 DA Font8x16H
 DA Font8x16L
 DA Font9x8F
 DA Font8x8H
 DA Font8x8L
 DA ForceLowMem
 DA ForkLvl		;Current fork level
 DA ForkTime
 DA GeckoMem		;Offset of the Gecko graphic display save buffer
 DA GeckoSig
 CA GetCab		;Get close action block (CAB)
 CA GetDcName		;Get device characteristic name using full table
 CA GetDcNullS		;Get null string for device characteristic
 CA GetDcVal1		;Get device characteristic value using tight table
 CA GetDcVal2		;Get device characteristic value using full table
 CA GetDfltUser
 CA GetDymDcb		;Allocate dynamic DCB
 CA GetGSelector	;Allocate global selector
 CA GetIndex		;Get exec memory buffer index value
 CA GetLargeBuffer	;Get large contiguous buffer
 CA GetMTE		;Get memory table entry
 CA GetMTE2		;Get memory table entry
 CA GetPages		;Allocate memory pages
 CA GetParm		;Get device parameter value
 CA GetPgTbl		;Allocate page table
 CA GetPhyAddr		;Get physical address for DMA
 CA GetPTE		;Get page table entry
 CA GetQel		;Get queue element
 CA GetQelClr		;Get queue element and clear it
 CA GetRandom32		;Get 32-bit random number
 CA GetSysStr		;Get system string
 CA GetSysVal		;Get value of system class characteristic
 CA GetTdb		;Get offset of terminal TDB
 CA GetTime		;Get current time
 CA GetXCode		;Allocate exec code memory
 CA GetXMem		;Allocate exec data memory
 CA GetXRes		;Get exec memory resource
 CA GetXSpace		;Allocate exec data address space
 CA GetXmb		;Get exec memory buffer
 CA GetXmbClr		;Get exec memory buffer and clear it
 CA GetSysDtTm		;Get date and time in system format
 CA GetYesNo		;Get YES or NO value for parameter
 CA GivUChr		;Give file specification character to user
 CA GivUColon		;Store colon in file specification
 CA GivUErr		;Fix up returned name on error
 CA GivUFin		;Finish up giving file specification to user
 CA GivUNum		;Store value in file specification
 CA GiveDymDcb		;Give up dynamic DCB
 CA GiveGSelector	;Give up global selector
 CA GiveIorb		;Give up IORB
;;;; CA GivePages	;Give up memory pages
 CA GiveProcSlot	;Give up process slot
 CA GiveQel		;Give up queue element
 CA GiveXmb		;Give up exec memory buffer
 CA GiveXMem		;Give up exec data memory
 CA GiveXRes		;Give up exec memory resource
 CA GiveXSpace		;Give up exec memory space
 CA HdkDataC
 CA HdkDataD
 CA ICnDev		;Return ER_ICDEV
 CA ICnDevGQ		;Return ER_ICDEV, give up QEL, and raise to fork level
 CA ICnDevTF		;Return ER_ICDEV and raise to fork level
 DA IdleCur
 DA IdleAve
 CA IFnDev		;Return ER_IFDEV
 CA IFnDevGQ		;Return ER_IFDEV, give up QEL, and raise to fork level
 CA IFnDevLv		;Illegal function for device/LEAVE
 CA IllInp		;Illegal input
 CA IllInpGQ		;Illegal input (give up QEL)
 CA IllInpLv		;Illegal input (give up stack frame)
 CA IllOut		;Illegal output
 CA IllOutGQ		;Illegal output (give up QEL
 CA IllOutLv		;Illegal output (give up stack frame)
 CA InfoChr		;Store character into info buffer
 CA InfoDec		;Store decimal value into info buffer
 CA InfoHex		;Store hex value into info buffer
 CA InfoSimple		;Info routine for simple devices
 CA InfoStr		;Store string into info buffer
 CA InfoNone		;Return no device info
 CA IntDoneHigh		;Interrupt done routine for high interrupts
 CA IntDoneLow		;Interrupt done routine for low interrupts
 DA IntDoneDiff		;Offset between done routine offsets
 CA IntrpProc		;Interrupt or terminate process
 CA IoClsLock		;Lock QAB for close
 CA IoDgALock		;Lock datagram address string
 CA IoQabLock		;Lock QAB for IO
 CA IoParmLock		;Lock parameter list for IO
 CA IoPorts		;Set up IO ports for user mode access
 CA IoReadLock		;Lock buffer pages for input
 CA IoStringLock	;Lock string pages for output
 CA IoWriteLock		;Lock buffer pages for output
 CA IopBufrLmt		;Common routine for IOPAR_BUFRLMT
 CA IopDelay		;Process IOPAR_DELAY device parameter
 CA IopDevSts		;Process IOPAR_DEVSTS device parameter
 CA IopDummyN		;Handle dummy numeric IO parameter
 CA IopDummyS		;Handle dummy string IO parameter
 CA IopDummyT		;Process dummy IO parameter/text value
 CA IopFilOptn		;Process IOPAR_FILOPTN device parameter
 CA IopFilSpec		;Process IOPAR_FILSPEC device parameter
 CA IopGlbId		;Process IOPAR_GLBID device parameter
 CA IopIoSts		;Handle IOPAR_OUTSTS or IOPAR_INPSTS
 CA IopNullS		;Handle null string IO parameter
 CA IopNullN		;Handle null numeric IO parameter
 CA IopNumOpen		;Process IOPAR_NUMOPEN device parameter
 CA IopNullT		;Handle null time value IO parameter
 CA IopOutQLmt		;Process IOPAR_OUTQLMT device parameter
 CA IopTimeOut		;Process IOPAR_TIMEOUT device parameter
 CA IopUnitNum		;Process IOPAR_UNITNUM device parameter
 CA IoparClass		;Handle IOPAR_CLASS parameter
 CA IopInpQLmt		;Process IOPAR_INPQLMT device parameter
 CA IoxFilOptn		;Process IOPAR_FILOPTN device parameter
 CA IoxFilSpec		;Process IOPAR_FILSPEC device parameter
 CA IpmSendMsg		;Send IPM message to process
 DA KeyTblPcRaw
 DA KeyTblXN
 CA LinkDcb		;Link DCB to device class
 DA Lit10		;Literal 10t
 DA Lit11		;Literal 11t
 DA Lit16000		;Literal 16000t
 DA Lit128		;Literal 128t
 DA Lit256		;Literal 256t
 DA Lit512		;Literal 512t
 DA LitMSPERTICK	;Literal MSPERTICK (millseconds per tick)
 DA LitTPD		;Literal TICKSPERDAY (ticks per day)
 CA LogNameExpand	;Expand logical name
 CA SendLogInMsg	;Send login message to login symbiont
 DA MachType		;Machine type
 CA MakeDcb		;Create device DCB
 CA MapPhyClr		;Clear temporary physical mapping
 CA MapPhyPages		;Map physical pages
 CA MapPhyTemp		;Map physical page temporarily
 CA MapPhysMem		;Map physical memory
 DA MemAvail		;Number of memory pages available
 DA MemFree		;Head pointer for memory free list
 DA MemTable		;Memory block table
 DA MemTotal
 DA MemUser
 DA Name		;System name
 CA NewClass		;Create new device class
 CA NewRealInt		;Register new real mode INT routine
 CA NoUnit		;No unit error routine
 CA NoUnitLv		;No unit error routine
 DA NonExMem		;Physical address for non-existant memory
 CA NotReady		;Return ER_NTRDY error
 CA NotReadyLv		;Return ER_NTRDY error
 CA NullCharStr		;Return null string value for characteristic
 CA NullClose		;Common null close device routine
 DA NullFilParms
 CA NullLabel		;Null device label function
 CA NullQio		;Null queued IO operation
 CA NullQioGQ		;Null queued IO operation
 DA NullTrmParms
 CA OpenSetup		;Do set up for open
 CA OpeXSetup		;Do set up for open with reduce stack
 DA OpnParms
 CA ParseFileProt	;Parse file protection string
 DA PhysReset		;Physical reset vector
 DA Port61
 CA PrivFail		;Return ER_PRIV error
 CA ProcDevParm		;Process device parameters
 CA ProcHigh
 DA ProcInUse
 DA ProcLimit
 DA ProcMax
 DA ProcTable		;Process table
 CA PutDecNmbr		;Put decimal number into device name
 CA PutHex4Nmbr		;Put hex number into device name
 CA QAdrErr0		;Return ER_ADRER in extended fork context with 0 count
			;  value
 CA QAdrErr0Lv		;Return ER_ADRER in extended for context with 0 count
			;  value and execute LEAVE
 DV QX_BLK
 DV QX_DW1
 DV QX_DW2
 DV QX_DW3
 DV QX_EVNT
 DV QX_MNT
 DV QX_PQ1
 DV QX_PQ2
 DV QX_PQ3
 DV QX_PROC
 DV QX_SPND
 DV QX_XMEM
 CA QioFinish		;Finish extended fork frame
 DA QueNames
 CA RRequeue		;Requeue process to run
 CA RMIntReq		;Request real mode interrupt
 CA RaiseRun		;Raise run priority for process
 CA ReadCmos		;Read byte from CMOS memory
 CA RealBiosSetup	;Set up real mode BIOS environment
 CA RealFPErr		;Report real mode fatal page fault
 CA Reboot
 CA RegIORegs		;Register IO register block
 CA ReqFork		;Queue request for fork
 CA ReqSignal		;Request signal
 CA ReqXSig		;Request exec signal
 CA ResumeInput		;Resume extended fork input
 CA ResumeOutput	;Resume extended fork output
 CA ResumeXf		;Resume XFF
 CA ResIORegs		;Reserve IO register block
 CA RmvClass		;Remove device class
 CA RtnAdrEr		;Return ER_ADRER
 CA RtnAdrEr0		;Return ER_ADRER with c{ECX} = 0
 CA RtnAdrErLv		;Return ER_ADRER and execute LEAVE
 CA RtnAdrErP1		;Return address error and pop one long
 CA RtnBusy		;Return ER_BUSY
 CA RtnMOne		;Return minus one
 CA RtnZero		;Return zero
 CA SDelay		;Wait for a short time
 DA SchedReq
 DA ScnTblX
 CA SetAccess		;Set value of generic ACCESS characteristic
 CA SetDfltUser
 CA SetGDesc		;Set up global descriptor table entry
 CA SetName		;Set up device name
 CA SetSysStr		;Set system string
 CA SetSysVal		;Set value of system characteristics
 CA SetIRq		;Set up IRQ vector
 CA SetWait		;Set up to wait
 CA SetupOAS		;Set up once-a-second routine
 CA SetupOAT		;Set up once-a-tick routine
 CA SetupTTAS		;Set up ten-times-a-second routine
 CA SetupTimer		;Set up direct timer routine
 CA StoreCode		;Store long into the code segment
 CA StoreHnd2		;Store DCB offset in handle table
 CA StoreHndl
 CA StrParm4		;Store 4 byte parameter value
 CA StrParm8		;Store 8 byte parameter value
 CA StrParmLng		;Store long string parameter value
 DA SvCodePnt		;Saved code area pointer
 DA SvDataPnt		;Saved data area pointer
 DA SvSpacePnt		;Saved memory space area pointer
 DA SysDate		;Current date in system format
 DA SysDescp		;System description bits
 DA SysGroup		;Default group name for system
 CA SysStrDefine	;Define system string
 CA SysStrGet		;Get system string value
 DA SysUser		;Default user name for system
 CA Tick2DosTime
 CA Tick2SysTime
 DA TickCnt
 DA TickTtl		;Total clock ticks since system loaded
 DA TimeSch
 DA TimeTtl
 CA TimeWait		;Wait for specified interval
 DV TRMIFLOWTBLDSZ
 DV TRMIFLOWTBLSZ
 DV TRMOFLOWTBLDSZ
 DV TRMOFLOWTBLSZ
 DA TrapDone
 CA TrmDetach		;Detach terminal
 DA TrmFirstTdb		;Contains offset of first terminal TDB
 CA TrmBreak		;Process terminal break
 CA TrmCarDet		;Process terminal carrier detect
 CA TrmCarLoss		;Process terminal carrier loss
 DA TrmCcb		;Terminal CCB
 CA TrmCtsOff		;Process terminal CTS off
 CA TrmCtsOn		;Process terminal CTS on
 CA TrmDoEcho		;Echo terminal character
 CA TrmDsrOff		;Process terminal DSR off
 CA TrmDsrOn		;Process terminal DSR on
 DA TrmIFlowTbl
 DA TrmIFlowTblD
 CA TrmGet1Byte		;Get 1 byte terminal parameter value
 CA TrmGet2Byte		;Get 2 byte value from TDB
 CA TrmGet4Byte		;Get 4 byte terminal parameter value
 CA TrmGetIFlow		;Get terminal input flow control value
 CA TrmGetModem		;Get MODEM or IMODEM characteristic
 CA TrmGetOFlow		;Get terminal output flow control value
 CA TrmGetSession	;Get session enabled for QNFC_DEVCHAR
 CA TrmGetText		;Get terminal PASSWORD or PROGRAM char.
 DA TrmLastTdb
 CA TrmHungUp		;Hang up terminal
 CA TrmInp		;Process terminal input character
 CA TrmMakeTdb		;Create terminal TDB
 DA TrmMsgBFreq
 DA TrmMsgBLen
 DA TrmMsgCharIn
 DA TrmMsgCharOut
 DA TrmMsgIIFlow
 DA TrmMsgIFlow
 DA TrmMsgIOFlow
 DA TrmMsgIModem
 DA TrmMsgInLBS
 DA TrmMsgInRBSL
 DA TrmMsgInRBPL
 DA TrmMsgInRBHeld
 DA TrmMsgInRBLost
 DA TrmMsgInRBS
 DA TrmMsgKbChar
 DA TrmMsgKbTChar
 DA TrmMsgModem
 DA TrmMsgMsgDst
 DA TrmMsgOFlow
 DA TrmMsgPWrd
 DA TrmMsgProgram
 DA TrmMsgSession
 DA TrmMsgSrc
 CA TrmNewDriver	;Register new terminal driver
 DA TrmOFlowTbl
 DA TrmOFlowTblD
 CA TrmOutDone		;Terminal output done
 CA TrmRing		;Process terminal ring indicatation
 CA TrmSetAccess	;Set terminal ACCESS characteristic
 CA TrmSet2Byte		;Set 2 byte value in TDB
 CA TrmSet4Byte		;Set terminal 4 byte characteristic
 CA TrmSetModem		;Set MODEM or IMODEM characteristic
 CA TrmSetSession	;Set session enabled for QFNC_DEVCHAR
 CA TrmSetText		;Set terminal PASSWORD or PROGRAM characteristic
 CA TrmStrChr		;Store character into terminal input buffer
 CA TrmUnlinkDriver	;Unlink terminal driver
 CA UnimOp		;Report unimplimented operation
 CA UnlinkDcb		;Unlink DCB from device class
 CA UnlinkOAS
 CA WPrErr		;Return ER_WPRER error
 CA WPrErrGQ		;Report write protect error
 CA WRequeue		;Requeue process to wait
 CA WakeRemove		;Remove wake request
 CA WakeRequest		;Enter wake request
 CA WildCmp16		;Do wildcard comparison for 16-bit characters (Unicode)
 CA WildCmp8		;Do wildcard comparison for 8-bit characters
 CA WriteCmos		;Write byte to CMOS memory
 CA XfBegin		;Begin extended fork frame
 CA XfClose8
 CA XfCloseFin		;Finish close in extended fork context
 CA XfDmaGetChn		;Get use of DMA channel at extended fork level
 CA XfFinish
 CA XfGetDcb		;Find DCB in extended fork context
 CA XfQueue		;Queue IO request
 CA XfTimeWait		;Wait for interval in ext. fork context
 CA XfWait		;Wait in extended fork context
 CA XfWaitNTO		;Wait in extended fork context with no timeout
 CA XffAllow		;Allow other XFFs to execute
 DA XmbSize		;Exec memory buffer size table
 CA Sys2DosDate		;Convert system date to DOS time
 CA Sys2DosTime		;Convert system time to DOS time
 DA XCodePnt
 DA XResPda		;Selector of PDA of process which has exec memory
			;  resource

	.MOD	4
EXPORTSIZE==!$-exporttable

	END

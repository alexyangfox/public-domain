	.TITLE	USRIO - XOS user mode kernel IO routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR

	USERCODE

	.SBTTL	svcIoInSingleP - Input single byte with parameter list

;Here for svcIoInSingleP - format is:
;	long      handle;	// Device handle
;	void far *parm;		// Address of parameter list
;	value = svcIoInSingleP(handle, parm);
;  Where value is the input byte (8 bits, 0 filled to 32 bits) or an error
;    code (negative)

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
FRM lcl_buffer, 4
lcl_SIZE=!$$$

	.MOD	4
usvcIoInSingleP::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Get address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CALL	insingle
	LEAVE
	RETF	12t

	.SBTTL	svcIoInSingle - Input single byte without parameter list

;Here for svcIoInSingle - format is:
;	long      handle	// Device handle
;	value = svcIoInSingle(handle);
;  Where value is the input byte (8 bits, 0 filled to 32 bits) or an error
;    code (negative)

$$$=!12t
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
FRM lcl_buffer, 4
lcl_SIZE=!$$$

	.MOD	4
usvcIoInSingle::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	CLRL	EAX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	CALL	insingle
	LEAVE
	RETF	4t

insingle:				;Store function
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_INBLOCK
	LEAL	EAX, lcl_buffer.B[EBP]	;Store buffer address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], SS
	MOVL	lcl_qab+qab_count.B[EBP], #1 ;Store count
	MOVW	lcl_qab+qab_vector.B[EBP], #0
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVZBL	EAX, lcl_buffer.B[EBP]	;No - return byte which was input
4$:	RET
.PAGE
	.SBTTL	svcIoClose - Close device/file

;Here for svcIoClose - format is:
;	long handle;		// Device handle
;	long cmd;		// Command bits
;	value = svcIoClose(handle, cmd);
;  Where value is 0 if normal or an error code (negative)

$$$=!12t
BLK arg_cmd   , 4t	;Command bits
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoClose::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_CLOSE
					;Store function
	MOVL	EAX, arg_cmd.B[EBP]	;Copy command bits
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	CLRL	EAX			;Clear parameter list pointer
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
4$:	LEAVE
	RETF	8t
.PAGE
	.SBTTL	svcIoOutSingleP - Output single byte with parameter list

;Here for svcIoOutSingleP - format is:
;	long      handle;	// Device handle
;	char      data;		// Byte to output
;	void far *parm;		// Address of parameter list
;	value = svcIoOutSingleP(handle, data, parm);
;  Where value is the number of bytes output (1) or an error code (negative)

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_data    , 4t	;Data byte to output
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
FRM lcl_buffer, 4t
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutSingleP::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_OUTBLOCK
					;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Get address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVB	AL, arg_data.B[EBP]	;Get data byte
	CALL	outsingle
	LEAVE
	RETF	16t

	.SBTTL	svcIoOutSingle - Output single byte without parameter list

;Here for svcIoOutSingle - format is:
;	long      handle	// Device handle
;	char      data		// Byte to output
;	value = svcIoOutSingle(handle, data);
;  Where value is the number of bytes output (1) or an error code (negative)

$$$=!12t
BLK arg_data  , 4t	;Data byte to output
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
FRM lcl_buffer, 4t
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutSingle::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_OUTBLOCK
					;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	CLRL	EAX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVB	AL, arg_data.B[EBP]	;Get data byte
	CALL	outsingle
	LEAVE
	RETF	8t

outsingle:
	MOVB	lcl_buffer.B[EBP], AL	;Store it in the buffer
	LEAL	EAX, lcl_buffer.B[EBP] ;Store buffer address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], SS
	MOVL	lcl_qab+qab_count.B[EBP], #1 ;Store count
	MOVW	lcl_qab+qab_vector.B[EBP], #0
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount input
4$:	RET
.PAGE
	.SBTTL	svcIoSetPos - Set position for IO

;Here for svcIoSetPos - format is:
;	long handle;		// Device handle
;	long position;		// Position in file
;	long mode;		// Mode: 0 = Absolute position
;				//	 1 = Relative to current position
;				//	 2 = Relative to end of file
;				//	 3 = Return position only
;	value = svcIoSetPos(handle, position, function);
;  Where value is position in file (positive) if normal or an error code
;    (negative) if error

$$$=!12t
BLK arg_mode  , 4t	;Mode
BLK arg_pos   , 4t	;Position in file
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE	;QAB
FRM lcl_parm  , 12t		;Parameter list
lcl_SIZE=!$$$

2$:	LEAVE
	MOVL	EAX, #ER_IFDEV
	RETF	12t

	.MOD	4
usvcIoSetPos::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	EAX, arg_mode.B[EBP]	;Get mode
	CMPL	EAX, #3.B		;Valid?
	JA	2$.S			;No
	MOVL	EAX, CS:posparm[EAX*4]	;Yes - get parameter header bytes
	MOVL	lcl_parm+0.B[EBP], EAX
	MOVL	EAX, arg_pos.B[EBP]	;Get his position value
	MOVL	lcl_parm+4.B[EBP], EAX
	MOVB	lcl_parm+8.B[EBP], #0	;Put 0 byte at end
	LEAL	EAX, lcl_parm.B[EBP]	;Store address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], SS
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_INBLOCK
					;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	CLRL	EAX			;Clear count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_parm+4.B[EBP]	;No - return current position
4$:	LEAVE
	RETF	12t

	.MOD	4
posparm:.BYTE	PAR$GET|PAR$SET|REP_DECV, 4
	.WORD	IOPAR_ABSPOS
	.BYTE	PAR$GET|PAR$SET|REP_DECV, 4
	.WORD	IOPAR_RELPOS
	.BYTE	PAR$GET|PAR$SET|REP_DECV, 4
	.WORD	IOPAR_EOFPOS
	.BYTE	PAR$GET|REP_DECV, 4
	.WORD	IOPAR_ABSPOS
.PAGE
	.SBTTL	svcIoPath - Path function

;Here for svcIoPath - Format is:
;	char far *name;		// Device name and new path
;	long      option;	// Option bits
;	char far *buffer;	// Buffer to receive path string
;	long      size;		// Length of buffer
;	value = svcIoPath(name, option, buffer, size);
;  Value returned is the length of the string returned in buffer or negative
;    error code if error

$$$=!12t
BLK arg_size  , 4t	;Length of buffer
BLK arg_buffer, 8t	;Buffer for returned path string
BLK arg_option, 4t	;Option bits
BLK arg_name  , 8t	;Device name and new path

$$$=!0
FRM path_qab , qab_SIZE	;QAB
FRM path_parm, 28t	;Parameter list
path_SIZE=!$$$

	.MOD	4
usvcIoPath::
	ENTER	path_SIZE, 0
	MOVL	path_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_PATH
						;Store function
	MOVL	path_qab+qab_handle.B[EBP], #0
	MOVL	EAX, arg_name+0.B[EBP]	;Copy address of device name
	MOVL	path_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_name+4.B[EBP]
	MOVL	path_qab+qab_buffer1+4.B[EBP], EAX
	LEAL	EAX, path_parm.B[EBP]
	MOVL	path_qab+qab_parm+0.B[EBP], EAX
	MOVL	path_qab+qab_parm+4.B[EBP], SS
	MOVL	path_parm+0t.B[EBP], #{PAR$SET|REP_DECV}+{4<8t}+{IOPAR_FILOPTN<16t}
	MOVL	EAX, arg_option.B[EBP]
	MOVL	path_parm+4t.B[EBP], EAX
	MOVL	path_parm+8t.B[EBP], #{PAR$GET|REP_STR}+{IOPAR_FILSPEC<16t}
	MOVL	EAX, arg_buffer+0.B[EBP]
	MOVL	path_parm+12t.B[EBP], EAX
	MOVL	EAX, arg_buffer+4.B[EBP]
	MOVL	path_parm+16t.B[EBP], EAX
	MOVL	EAX, arg_size.B[EBP]
	MOVL	path_parm+20t.B[EBP], EAX
	CLRL	EAX
	MOVB	path_parm+24t.B[EBP], AL
	CALL	iocom4			;Do the function
	JS	4$.S
	MOVZWL	EAX, path_parm+22t.B[EBP] ;Get length of the returned string
4$:	LEAVE
	RETF	24t
.PAGE
	.SBTTL	svcIoSpecial - Special device functions

;Here for svcIoSpecial - format is:
;	long      handle;	// Device handle
;	long      function;	// Function value
;	void far *buffer;	// Address value
;	long      count;	// Count value
;	void far *parm;		// Address of parameter list
;	value = svcIoSpecial(handle, function, buffer, count, parm);
;  Where value depends on device and function if or normal or error code
;    (negative) if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_count   , 4t	;Count value
BLK arg_address , 8t	;Address value
BLK arg_function, 4t	;Function value
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE	;QAB
lcl_SIZE=!$$$

	.MOD	4
usvcIoSpecial::
	ENTER	lcl_SIZE, 0
	MOVW	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_SPECIAL
					;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle argument
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_address+0.B[EBP] ;Copy address argument
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_address+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVL	EAX, arg_function.B[EBP] ;Get function value
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	MOVL	EAX, arg_count.B[EBP]	;Get count value
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	CLRL	EAX
	CALL	iocom4			;Do the function
	LEAVE
	RETF	28t
.PAGE
	.SBTTL	svcIoDelete - Delete file

;Here for svcIoDelete - format is:
;	ulong  cmdbits;		// Open command bits
;	char   far *name;	// Address of file specification string
;	struct parm far *parm;	// Address of parameter list
;	value = svcIoDelete(cmdbits, name, parm);
;  Where value is the number of files deleted (positive) if normal or an error
;    code (negative) if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_filespec, 8t	;Address of file specification string
BLK arg_cmd     , 4t	;Command bits

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoDelete::
	ENTER	lcl_SIZE, 0
	MOVW	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_DELETE
						;Store function
	MOVL	EAX, arg_filespec+0.B[EBP] ;Copy address of file specification
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_filespec+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVL	EAX, arg_cmd.B[EBP]	;Get command bits
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	CLRL	EAX			;Clear count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	CALL	iocom4
	LEAVE
	RETF	20t
.PAGE
	.SBTTL	svcIoDeleteO - Delete file (old format without parameter list)

;Here for svcIoDeleteo - format is:
;	long   cmd;		// Open command bits
;	char   far *name;	// Address of file specification string
;	value = svcIoDeleteO(cmd, name);
;  Where value is the number of files deleted (positive) if normal or an error
;    code (negative) if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_filespec, 8t	;Address of file specification string

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoDeleteO::
	ENTER	lcl_SIZE, 0
	MOVW	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_DELETE
						;Store function
	MOVL	EAX, arg_filespec+0.B[EBP] ;Copy address of file specification
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_filespec+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CLRL	EAX			;Clear count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	CALL	iocom4
	LEAVE
	RETF	16t
.PAGE
	.SBTTL	svcIoInBlockP - Input block with parameter list

;Here for svcIoInBlockP - format is:
;	long      handle;	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Number of bytes to input
;	void far *parm;		// Address of parameter list
;	value = svcIoInBlockP(handle, buffer, count, parm);
;  Where value is the number of bytes actually input (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_count   , 4t	;Number of bytes to input
BLK arg_buffer  , 8t	;Address of buffer
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoInBlockP::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_INBLOCK ;Get function value
	JMP	iocommonp.S
.PAGE
	.SBTTL	svcIoInBlock - Input block without parameter list

;Here for svcIoInBlock - format is:
;	long      handle	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Number of bytes to input
;	value = svcIoInBlock(handle, buffer, count);
;  Where value is the number of bytes actually input (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_count , 4t	;Number of bytes to input
BLK arg_buffer, 8t	;Address of buffer
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoInBlock::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_INBLOCK ;Get function value
	JMP	iocommon.S
.PAGE
	.SBTTL	svcIoOutBlockP - Output block with parameter list

;Here for svcIoOutblockP - format is:
;	long      handle;	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Number of bytes to output
;	void far *parm;		// Address of parameter list
;	value = svcIoOutBlockP(handle, buffer, count, parm);
;  Where value is the number of bytes actually output (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_count   , 4t	;Number of bytes to output
BLK arg_buffer  , 8t	;Address of buffer
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab     , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutBlockP::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_OUTBLOCK ;Get function value
	JMP	iocommonp.S
.PAGE
	.SBTTL	svcIoOutBlock - Output block without parameter list

;Here for svcIoOutBlock - format is:
;	long      handle	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Number of bytes to output
;	value = svcIoOutBlock(handle, buffer, count);
;  Where value is the number of bytes actually output (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_count , 4t	;Number of bytes to output
BLK arg_buffer, 8t	;Address of buffer
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutBlock::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_OUTBLOCK ;Get function value
	JMP	iocommon.S
.PAGE
	.SBTTL	svcIoOutStringP - Output string with parameter list

;Here for svcIoOutStringp - format is:
;	long      handle	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Maximum number of bytes to output
;	long far *parm;		// Address of parameter list
;	value = svcIoOutStringP(handle, buffer, count, parm);
;  Where value is the number of bytes actually output (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_count   , 4t	;Number of bytes to output
BLK arg_buffer  , 8t	;Address of buffer
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutStringP::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_OUTSTRING ;Get function value
					;Fall into iocommonp on next page
.PAGE
;Common routine for svcIoInBlockP, svcIoOutBlockP, and svcIoOutStringP
;  - note: this routine must preserve all registers except EAX!
;	c{EAX} = Value for qab_func

iocommonp:
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], EAX ;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_buffer+0.B[EBP] ;Copy buffer address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_buffer+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_count.B[EBP]	;Copy count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy parameter list pointer
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CLRL	EAX
	CALL	iocom4			;Continue
	LEAVE
	RETF	24t
.PAGE
	.SBTTL	svcIoOutString - Output string without parameter list

;Here for svcIoOutString - format is:
;	long      handle	// Device handle
;	char far *buffer;	// Address of buffer
;	long      count;	// Maximum number of bytes to output
;	value = svcIoOutString(handle, buffer, count);
;  Where value is the number of bytes actually output (positive) or an error
;    code (negative)

$$$=!12t
BLK arg_count , 4t	;Number of bytes to output
BLK arg_buffer, 8t	;Address of buffer
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoOutString::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_OUTSTRING ;Get function value
					;Fall into iocommon on next page
.PAGE
;Common routine for svcIoInBlock, svcIoOutBlock, and svcIoOutString - note:
;  this routine must preserve all registers except EAX!
;	c{EAX} = Value for qab_func

iocommon:
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], EAX ;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_buffer+0.B[EBP] ;Copy buffer address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_buffer+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_count.B[EBP]	;Copy count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	CLRL	EAX			;Clear parameter list pointer
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CALL	iocom4
	LEAVE
	RETF	16t

iocom4:	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount input
4$:	RET
.PAGE
	.SBTTL	svcIoClsChar - Set or set class characteristics values

;Here for svcIoClsChar - format is:
;	char   far *name;	// Address of class name string
;	struct parm far *chrl;	// Address of characteristics list
;	value = svcIoClsChar(name, chrl);
;  Value returned is 7FFFh if normal or a negatiave error code if error

$$$=!12t
BLK arg_charlist, 8t	;Address of characteristics list
BLK arg_clsname , 8t	;Address of file specification string

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoClsChar::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC_CLASSFUNC
	MOVL	lcl_qab+qab_option.B[EBP], #CF_VALUES ;Store function
	MOVL	EAX, arg_filespec+0.B[EBP] ;Copy class name address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_filespec+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy characteristics list address
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	CLRL	EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount
4$:	LEAVE
	RETF	16t
.PAGE
	.SBTTL	svcIoDevChar - Set or set device characteristics values

;Here for svcIoDevChar - format is:
;	long   handle;		// Device handle
;	struct parm far *chrl;	// Address of characteristics list
;	value = svcIoDevChar(handle, chrl);
;  Value returned is 0 if normal or a negatiave error code if error

$$$=!12t
BLK arg_charlist, 8t	;Address of characteristic list
BLK arg_handle  , 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoDevChar::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC_DEVCHAR
	MOVL	lcl_qab+qab_option.B[EBP], #DCF_VALUES ;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy device hancle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	MOVL	EAX, arg_charlist+0.B[EBP] ;Copy characteristic list address
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	EAX, arg_charlist+4.B[EBP]
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	CLRL	EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount
4$:	LEAVE
	RETF	12t
.PAGE
	.SBTTL	svcIoCommit - Commit IO

;Here for svcIoCommit - format is:
;	long  handle;		// Device handle
;	value = svcIoCommit(handle);
;  Value returned is 0 if normal or a negatiave error code if error

$$$=!12t
BLK arg_handle, 4t	;Device handle

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoCommit::
	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_COMMIT
					;Store function
	MOVL	EAX, arg_handle.B[EBP]	;Copy handle
	MOVL	lcl_qab+qab_handle.B[EBP], EAX
	CLRL	EAX
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	CLRL	EAX			;No - return 0
4$:	LEAVE
	RETF	4t
.PAGE
	.SBTTL	svcIoDevParm - Process IO parameter list given device/file name

;Here for svcIoDevParm - format is:
;	ulong  cmd;		// Command bits
;	char   far *name;	// Address of file specification string
;	struct parm far *parm;	// Address of parameter list
;	value = svcIoDevParm(cmd, name, parm);
;  Value returned is 7FFFh if normal or a negatiave error code if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_filespec, 8t	;Address of file specification string
BLK arg_cmd     , 4t	;Command bits

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoDevParm::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_DEVPARM
	JMP	ioopn2.S

	.SBTTL	svcIoOpen - Open device/file

;Here for svcIoOpen - format is:
;	ulong  cmd;		// Command bits
;	char   far *name;	// Address of file specification string
;	struct parm far *parm;	// Address of parameter list
;	value = svcIoOpen(cmd, name, parm);
;  Where value is a positive device handle if normal or a negative error code
;    if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_filespec, 8t	;Address of file specification string
BLK arg_cmd     , 4t	;Command bits

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoOpen::
	MOVL	EAX, #QFNC$WAIT|QFNC$DIO|QFNC_OPEN
ioopn2:	ENTER	lcl_SIZE, 0		;Set up local stack frame
	MOVL	lcl_qab+qab_func.B[EBP], EAX ;Store function
	MOVL	EAX, arg_cmd.B[EBP]	;Copy command bits
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	MOVL	EAX, arg_filespec+0.B[EBP] ;Copy file specification address
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_filespec+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy parameter list address
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CLRL	EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_handle.B[EBP] ;No - return handle
4$:	LEAVE
	RETF	20t
.PAGE
	.SBTTL	svcIoRename - Rename file

;Here for svcIoRename - format is:
;	ulong  cmdbits		// Command bits
;	char   far *oldname;	// Address of old file specification string
;	char   far *newname;	// Address of new file specification string
;	struct parm far *parm;	// Address of parameter list
;	value = svcIoRename(cmdbits, oldname, newname, parm);
;  Where value is the number of files renamed (positive) if normal or an error
;    code (negative) if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_newfile , 8t	;Address of new file specification string
BLK arg_oldfile , 8t	;Address of old file specification string
BLK arg_cmd     , 4t	;Command bits

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoRename::
	ENTER	lcl_SIZE, 0
	MOVW	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_RENAME
					;Get function
	MOVL	EAX, arg_oldfile+0.B[EBP] ;Copy address of old file
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_oldfile+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_newfile+0.B[EBP] ;Copy address of new file
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	EAX, arg_newfile+4.B[EBP]
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	MOVL	EAX, arg_cmd.B[EBP]	;Get command bits
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	CLRL	EAX			;Clear count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount input
4$:	LEAVE
	RETF	28t
.PAGE
	.SBTTL	svcIoRenameO - Rename file (old format without parameter list)

;Here for svcIoRenameO - format is:
;	char   far *oldname;	// Address of old file specification string
;	char   far *newname;	// Address of new file specification string
;	value = svcIoRenameO(oldname, newname);
;  Where value is the number of files renamed (positive) if normal or an error
;    code (negative) if error

$$$=!12t
BLK arg_parmlist, 8t	;Address of parameter list
BLK arg_newfile , 8t	;Address of new file specification string
BLK arg_oldfile , 8t	;Address of old file specification string

$$$=!0
FRM lcl_qab   , qab_SIZE
lcl_SIZE=!$$$

	.MOD	4
usvcIoRenameO::
	ENTER	lcl_SIZE, 0
	MOVW	lcl_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_RENAME
					;Get function
	MOVL	EAX, arg_oldfile+0.B[EBP] ;Copy address of old file
	MOVL	lcl_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	EAX, arg_oldfile+4.B[EBP]
	MOVL	lcl_qab+qab_buffer1+4.B[EBP], EAX
	MOVL	EAX, arg_newfile+0.B[EBP] ;Copy address of new file
	MOVL	lcl_qab+qab_buffer2+0.B[EBP], EAX
	MOVL	EAX, arg_newfile+4.B[EBP]
	MOVL	lcl_qab+qab_buffer2+4.B[EBP], EAX
	MOVL	EAX, arg_parmlist+0.B[EBP] ;Copy address of parameter list
	MOVL	lcl_qab+qab_parm+0.B[EBP], EAX
	MOVL	EAX, arg_parmlist+4.B[EBP]
	MOVL	lcl_qab+qab_parm+4.B[EBP], EAX
	CLRL	EAX			;Clear count
	MOVL	lcl_qab+qab_count.B[EBP], EAX
	MOVL	lcl_qab+qab_option.B[EBP], EAX
	MOVW	lcl_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, lcl_qab.B[EBP]
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;Any errors?
	JS	4$.S			;Yes
	ORL	EAX, lcl_qab+qab_error.B[EBP] ;Maybe
	JS	4$.S			;Yes
	MOVL	EAX, lcl_qab+qab_amount.B[EBP] ;No - return amount input
4$:	LEAVE
	RETF	24t
.PAGE
	.SBTTL	nulluser - Null user process used when loading programs

;Null user process used when loading programs

nulluser::
4$:	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#-1.B
	CALLF	svcSchSuspend#
	JMP	4$.S

	END

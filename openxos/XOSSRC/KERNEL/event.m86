	.TITLE	EVENT - Event routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR

	CODE

	.SBTTL	svcSchMakEvent - Make event cluster

;Here for the svcSchMakEvent SVC - Make event cluster
;	char *name;		// Name of cluster
;	long  size;		// Size of cluster
;	long  int;		// Base vector number for cluster (-1 means
;				//   no signals)
;	rtn = svcSchMakEvent(name, size, int);
;  Value returned is 0 if normal or negative error code if error


rsvcSchMakEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	10$.S

2$:	MOVL	EAX, #ER_VALUE
4$:	ADDL	ESP, #20t.B
6$:	RET

8$:	MOVL	EAX, #ER_ALDEF
	RET

psvcSchMakEvent::
	SVCENTR	CNTSchMakEvent#
10$:	CMPL	SS:pdaArg3#, #0.B	;Want to remove the event cluster?
	JE	20$	;;;;;		;Yes
	CALL	findecluster		;No - see if it exists now
	JNC	8$.S
	CMPL	EAX, #ER_NTDEF.B
	JNE	6$.S
	PUSHL	ECX
	PUSHL	EDX
	PUSHL	EBX
	MOVL	EAX, SS:pdaArg4#	;Get base vector number
	PUSHL	EAX
	MOVL	ECX, SS:pdaArg3#	;Get number of events wanted
	PUSHL	ECX
	TESTL	ECX, ECX
	JE	2$.S
	CMPL	ECX, #31t.B
	JA	2$.S
	CMPL	EAX, #-1.B
	JE	12$.S
	CMPL	EAX, #255t		;Valid vector number?
	JA	2$.S			;No
12$:	SHLL	ECX, #2t
	ADDL	ECX, #ec_events-mb_data.B
	CALL	knlGetPdaMem#
	JC	4$.S
	CALL	knlClrPdaMem#
	POPL	SS:ec_max.B[ESI]	;Store maximum event number
	DECL	SS:ec_max.B[ESI]
	POPL	SS:ec_baseint.B[ESI]	;Store base vector number
	POPL	SS:ec_name+0.B[ESI]	;Store event cluster name
	POPL	SS:ec_name+4.B[ESI]
	POPL	SS:ec_name+8.B[ESI]
	MOVL	EAX, SS:pdaEvents#
	MOVL	SS:ec_next.B[ESI], EAX
	TESTL	EAX, EAX
	JE	16$.S
	LEAL	EDX, ec_next.B[ESI]
	MOVL	SS:ec_pnt1.B[EAX], EDX
16$:	MOVL	SS:pdaEvents#, ESI
	MOVL	SS:ec_pnt1.B[ESI], #pdaEvents
	CLRL	EAX
18$:	RET

;Here to remove an event cluster

20$:	CALL	findecluster		;Find the event cluster
	JC	18$.S			;If error
	MOVL	EAX, SS:ec_next.B[ESI]	;Unlink the block
	MOVL	SS:[EDI], EAX
	CALL	knlGivePdaMem#		;Give up the PDA memory
	CLRL	EAX
	RET
.PAGE
	.SBTTL	svcSchResEvent - Reserve event

;Here for the svcSchResEvent SVX - Reserve event
;	char *name;		// Name of cluster
;	long  event;		// Event number (-1 means to allocate)
;	rtn = svcSchResEvent(name, event);
;  Value returned is event number reserved if normal or negative error code
;    if error

rsvcSchResEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	2$.S

psvcSchResEvent::
	SVCENTR	CNTSchResEvent#
2$:	CALL	findecluster		;Find the event cluster
	JC	6$.S			;If error
	MOVL	EAX, SS:pdaArg3#	;Get event number
	CMPL	EAX, #-1.B		;Want to allocate an event?
	JNE	8$.S			;No
	MOVL	EDX, SS:ec_reserve.B[ESI]
	NOTL	EDX
	BSFL	EAX, EDX		;Yes - find first 0 bit
	JE	10$.S			;If none found
4$:	BTSL	SS:ec_reserve.B[ESI], EAX ;Set the bit we found
	JC	10$.S			;If already set
6$:	RET				;Finished (event number is in EAX)

;Here if he specified an event

8$:	CMPL	EAX, ec_max.B[ESI]	;Valid event number?
	JBE	4$.S			;Yes - go set it
	JMP	knlBadValue#		;No - fail

;Here if the specified event is already reserved

10$:	MOVL	EAX, #ER_EVRES
	RET
.PAGE
	.SBTTL	svcSchRelEvent - Release event

;Here for the svcSchRelEvent SVC - Release event
;	char *name;		// Name of cluster
;	long  mask;		// Event mask,
;	rtn = svcSchRelEvent(name, event);
;  Value returned is mask of remaining reserved events if normal or negative
;    error code if error

rsvcSchRelEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	2$.S

psvcSchRelEvent::
	SVCENTR	CNTSchRelEvent#
2$:	CALL	findecluster		;Find the event cluster
	JC	ret028.S		;If not found
	MOVL	EAX, SS:pdaArg3#	;Get his mask
	MOVL	EDX, EAX
	NOTL	EAX
	BTZL	EAX, #31t
	ANDL	EAX, SS:ec_reserve.B[ESI] ;Clear the bits
	MOVL	SS:ec_reserve.B[ESI], EAX ;Any left set?
	JNE	ret028.S		;Yes - finished here
	TESTL	EDX, EDX		;No - want to give up the cluster?
	JNS	ret028.S		;No
	PUSHL	EAX			;Yes
	CALL	knlRmvPdaMem#
	POPL	EAX
ret028:	RET
.PAGE
	.SBTTL	svcSchSetEvent - Set event

;Here for the svcSchSetEvent SVC - Set event
;	char *name;		// Event cluster name
;	long  event;		// Event number
;	long  value;		// Event value
;	long  pid;		// Process ID
;	rtn = svcSchSetEvent(name, event, value, pid);
;  Value returned is 0 if normal or negative error code if error

rsvcSchSetEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	4$.S

psvcSchSetEvent::
	SVCENTR	CNTSchSetEvent#
4$:	MOVL	EBX, SS:pdaArg5#	;Get PID
	CALL	getproc#		;Get PDA selector
	JC	ret028.S		;If error
	PUSHL	ES
	POPL	GS
	CALL	findec2			;Find the event cluster
	JC	ret028.S
	ANDB	SS:pdaStatus1#, #~P1$SETUP ;Terminate set up mode
	MOVL	EAX, SS:pdaArg4#	;Get value for event
	MOVL	ECX, SS:pdaArg3#	;Get event number
	TOFORK
	CALL	setevent
	FROMFORK
	RET

setevent::
	CMPL	ECX, ES:ec_max.B[ESI]	;Valid number?
	JA	knlBadValue#		;No - fail
	BTZL	EAX, #31t		;Should we overwrite an event?
	JC	6$.S			;Yes
	CMPL	ES:ec_events.B[ESI+ECX*4], #0.B ;No - will we?
	JNE	12$.S			;Yes - fail
6$:	MOVL	ES:ec_events.B[ESI+ECX*4], EAX ;No - store event
	MOVL	EAX, ES:ec_baseint.B[ESI] ;Want signal?
	TESTL	EAX, EAX
	JLE	10$.S			;No
	PUSHL	ESI			;Yes
	ADDL	EAX, ECX
	CALL	knlGetQel#		;Get signal link block
	JC	8$.S			;Forget it If none available
	MOVB	slb_szindx.B[ESI], #0
	CLRL	ECX			;No data items
	MOVB	BL, #SIGT_NORMAL	;Get signal type
	CLRL	EDX
	CALL	knlReqSignal#
8$:	POPL	ESI
10$:	MOVL	EAX, ES:ec_name+0.B[ESI] ;Wake up anyone waiting for this
	XORL	EAX, ES:ec_name+4.B[ESI] ;  event cluster
	CALL	knlEndWaitAll#
	CLRL	EAX
ret030:	RET

;Here if event is already set and we don't want to overwrite it

12$:	MOVL	EAX, #ER_EVSET
	RET
.PAGE
	.SBTTL	svcSchClrEvent - Clear event(s)

;Here for the svcSchClrEvent SVC - Clear event(s)
;	char *name;		// Event cluster name
;	long mask;		// Event mask
;	rtn = svcSchClrEvent(name, mask);
;  Value returned is 0 if normal or negative error code if error

rsvcSchClrEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	2$.S

psvcSchClrEvent::
	SVCENTR	CNTSchClrEvent#
2$:	CALL	findecluster
	JC	ret030.S
	MOVL	EDX, SS:pdaArg3#	;Get events to clear
	CLRL	EBX
	CLRL	EAX
4$:	BSFL	ECX, EDX		;Get first event to clear
	JE	ret030.S		;If no more
	ADDL	EBX, ECX		;OK - get event number in EBX
	CMPL	EBX, SS:ec_max.B[ESI]	;Too big?
	JA	ret030.S		;Yes - stop now
	INCL	ECX			;No
	SHRL	EDX, CL			;Advance the bit
	MOVL	SS:ec_events.B[ESI+EBX*4], EAX ;Clear the event
	JMP	4$.S			;Continue
.PAGE
	.SBTTL	svcSchWaitSEvent - Wait for single event

;Here for the svcSchWaitSEvent SVC - Wait for single event
;	char *name;		// Name of event cluster
;	long event;		// Event number, bit 31 set if should clear
;				//   event
;	long timeout;		// Time to suspend (fractional days, max of
;				//   12 hours), 0xFFFFFFFF means to wait
;				//   forever, 0 means to return immediately
;	rtn = svcSchWaitSEvent(name, event, timeout);
;  Value returned is current event flag value if normal or negative error code
;    if error.  Note that no error indication is returned when a time-out
;    occures.  A value of 0 (which indicates the event is not set) is returned
;    for a time-out.  Note that this function can be used to return the current
;    value of an event if timeout is 0.

rsvcSchWaitSEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	2$.S

psvcSchWaitSEvent::
	SVCENTR	CNTSchWaitSEvent#
2$:	CALL	findecluster		;Find the event cluster
	JC	6$.S			;If error
	MOVL	EDX, SS:pdaArg3#	;Get the event number
	BTZL	EDX, #31t
	CMPL	EDX, SS:ec_max.B[ESI]	;Valid number?
	JA	knlBadValue#		;No - fail
	MOVL	EAX, SS:ec_events.B[ESI+EDX*4] ;Yes - is the event set?
	TESTL	EAX, EAX
	JNE	4$.S			;Yes - return the value
	MOVL	EBP, #-12t		;No - set up timeout value
	PUSHL	ESI
	CALL	settimeout#
	POPL	ESI
	JC	6$.S			;If error
	JE	10$.S			;If should not wait
	MOVL	EAX, SS:ec_name+0.B[ESI] ;Need to wait - use hash of cluster
	XORL	EAX, SS:ec_name+4.B[ESI] ;  name as wait index
	TOFORK
	CALL	knlSetWait#
	MOVB	AL, #knlQX_EVNT#
	JMP	rqwait#			;Go wait

;Here if the event is set

4$:	CMPL	SS:pdaArg3#, #0.B	;Want to clear the event?
	JNS	6$.S			;No
	MOVL	SS:ec_events.B[ESI+EDX*4], #0 ;Yes
6$:	RET

;Here if event is not set but should not wait

10$:	CLRL	EAX
	RET
.PAGE
	.SBTTL	svcSchWaitMEvent - Wait for multiple events

;Here for the svcSchWaitMEvent SVC - Wait for multiple events
;	char *name;		// Name of event cluster
;	long mask;		// Event mask (bit 31 set for AND test)
;	long timeout;		// Time to suspend (fractional days, max of
;				//   12 hours), 0xFFFFFFFF means to wait
;				//   forever, 0 means to return immediately
;	rtn = svcSchWaitMEvent(name, mask, timeout);
;  Value returned is current event flag value if normal or negative error code
;    if error.  Note that no indication is returned when a time-out occures,
;    the calling program must examine the returned value to see if the event
;    is set, if not a time-out occured.

rsvcSchWaitMEvent::
	MOVL	EBP, #pdaArg2#
	CALL	vfixaddr#
	JMP	2$.S

psvcSchWaitMEvent::
	SVCENTR	CNTSchWaitMEvent#
2$:	MOVL	EAX, #ER_NIYT
	RET
.PAGE
	.SBTTL	findecluster - Subroutine to find event cluster

;Subroutine to find event cluster
;	CALL	findecluster
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EBX,EDX,ECX} = Name (12 bytes)
;	  c{ES:ESI}      = Address of event cluster definition block
;	  c{ES:EDI}      = Address of pointer to block

findecluster:
	PUSHL	SS
	POPL	ES
	IFFAULT	knlRtnAdrEr#
findec2:LFSL	ESI, SS:pdaArg2#	;Get address of name string
findec4::
	PUSHL	#0.B			;Create and clear a 12 byte buffer
	PUSHL	#0.B			;  on the stack
	PUSHL	#0.B
	MOVL	EDI, ESP		;Point to the buffer
	CLD
	PUSHL	ES
	PUSHL	SS
	POPL	ES
	MOVL	ECX, #12t
	IFFAULT	4$
2$:	LODSB	FS:[ESI]		;Copy the name to the buffer
	CMPB	AL, #0
	JE	10$.S
	DECL	ECX
	JE	6$.S
	STOSB	[EDI]
	JMP	2$.S

	FAULTHDR
4$:	MOVL	EAX, #ER_ADRER
	JMP	8$.S

6$:	MOVL	EAX, #ER_VALUE
8$:	ADDL	ESP, #16t.B
	STC
	RET

;Here with name copied to our buffer

10$:	POPL	ES
	POPL	EBX			;Get name in some registers
	POPL	EDX
	POPL	ECX
	MOVL	EDI, #pdaEvents#
12$:	MOVL	ESI, ES:[EDI]
	TESTL	ESI, ESI
	JE	16$.S			;If no event clusters defined
	CMPL	ES:ec_name+0.B[ESI], EBX ;Is it this one?
	JNE	14$.S			;No
	CMPL	ES:ec_name+4.B[ESI], EDX ;Maybe
	JNE	14$.S			;No
	CMPL	ES:ec_name+8.B[ESI], ECX ;Maybe
	JE	20$.S			;Yes
14$:	LEAL	EDI, ec_next.B[ESI]
	JMP	12$.S

;Here if not found

16$:	MOVL	EAX, #ER_NTDEF		;No - fail
	STC
20$:	RET

	END

	.TITLE	NULLCLS - Null device driver for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR

	CODE

	.SBTTL	SVC dispatch table for null device

;SVC dispatch table for null device

nulldsp:.LONG	knlRtnZero#	;sd_mount	=  0. - Mount
	.LONG	knlRtnZero#	;sd_cleardev	=  4. - Clear device
	.LONG	knlRtnZero#	;sd_cleardcb	=  8. - Clear DCB
	.LONG	knlRtnZero#	;sd_commit	= 12. - Commit data to disk
	.LONG	knlRtnZero#	;sd_transold    = 16. - Transfer device/old
	.LONG	knlRtnZero#	;sd_transnew    = 20. - Transfer device/new
	.LONG	knlRtnZero#	;sd_opena       = 24. - Open additional
	.LONG	knlRtnZero#	;sd_open1	= 28. - Open device/file
	.LONG	knlRtnZero#	;sd_devparm     = 32. - Device parameters
	.LONG	knlNullQio#	;sd_delete	= 36. - Delete file
	.LONG	knlNullQio#	;sd_rename	= 40. - Rename file
	.LONG	nullinpblk	;sd_inblock	= 44. - Input block
	.LONG	nulloutblk	;sd_outblock	= 48. - Output block
	.LONG	knlIFnDev#	;sd_outblockq	= 52. - Output block (XFF)
	.LONG	nulloutstr	;sd_outstring	= 56. - Output string
	.LONG	knlRtnMOne#	;sd_getiosts	= 60. - Get input/output status
	.LONG	knlIFnDevGQ#	;sd_special     = 64. - Specical device function
	.LONG	nullclose	;sd_close	= 68. - Close file
	.LONG	knlNullLabel#	;sd_getlabel    = 72. - Get device label
	.LONG	knlNullQioGQ#	;sd_commitfunc	= 76. - Commit data to disk
	.LONG	knlInfoNone#	;sd_devinfo     = 80. - Get device info


;Device parameter table for NULL device IO operations

	.LONG	PARMMAX
nullioparms:
	.LONG	nulliogenparms	;IOPAR_xxxxxx = 00xx - Generic IO parameters
	.LONG	knlNullFilParms#;IOPAR_FILxxx = 01xx - File system IO
				;			  parameters
	.LONG	knlNullTrmParms#;IOPAR_TRMxxx = 02xx - Terminal IO parameters
PARMMAX=!{$-nullioparms}/4

	.LONG	PARMGENMAX
nulliogenparms:
	.LONG	0		;		   = 0000h
	.LONG	knlIopFilOptn#	;IOPAR_FILOPTN     = 0001h
	.LONG	knlIopFilSpec#	;IOPAR_FILSPEC     = 0002h
	.LONG	knlIopDevSts#	;IOPAR_DEVSTS      = 0003h
	.LONG	knlIopUnitNum#	;IOPAR_UNITNUM     = 0004h
	.LONG	knlIopGlbId#	;IOPAR_GLBID       = 0005h
	.LONG	knlIopDelay#	;IOPAR_DELAY       = 0006h
	.LONG	knlIopTimeOut#	;IOPAR_TIMEOUT     = 0007h
	.LONG	0		;IOPAR_INPSTS      = 0008h
	.LONG	0		;IOPAR_OUTSTS	   = 0009h
	.LONG	knlIopInpQLmt#	;IOPAR_INPQLMT	   = 000Ah
	.LONG	knlIopOutQLmt#	;IOPAR_OUTQLMT	   = 000Bh
	.LONG	0		;IOPAR_SIVECT1     = 000Ch
	.LONG	0		;IOPAR_SIVECT2     = 000Dh
	.LONG	0		;IOPAR_SIDATA      = 000Eh
	.LONG	knlIopNumOpen#	;IOPAR_NUMOPEN     = 000Fh
	.LONG	0		;IOPAR_BUFRLMT	   = 0010h
PARMGENMAX=!{$-nulliogenparms}/4
.PAGE
	.SBTTL	Initialization routine

	INITSUB	initnull

initnull:
	MOVL	EDI, #nullchk		;Install our class
	CLRL	EBX			;No class functions
	MOVL	EAX, #'NULL'
	CLRL	EDX
	CLRL	ECX			;No class characteristics
	MOVL	ESI, #nullccb
	CALL	knlNewClass#		;Make the class
	JC	4$.S
	MOVL	ECX, #dcb_devbgn+dcb_cSIZE ;Create a DCB
	MOVL	EBX, #DS$DIN|DS$DOUT|DS$MLTUSER
	MOVL	EDI, #nulldsp
	CALL	knlMakeDcb#
	JC	4$.S
	MOVL	ESI, #nullccb
	CALL	knlLinkDcb#
	JC	4$.S
	MOVL	dcb_name+0.B[EDI], #'NULL' ;Setup device name
	MOVL	nulldcb, EDI		;Store offset of our DCB
	CLRL	EAX
4$:	RET

	CODE
.PAGE
	.SBTTL	nullchk - Device check routine for null device

;Device check routine for null device
;	c{SS:EBX} = Address of device name (16 bytes)
;	CALL	nullchk
;	C:set = Error (match found)
;	  c{EAX} = Error code
;	C:clr = Normal
;	  Z:set = Match found
;	    c{EDI} = Offset of DCB
;	  Z:clr = Not found
;  EBX and ESI are preserved

nullchk:CMPL	SS:[EBX], #'NULL'	;Is this NULL?
	JNE	4$.S			;No
	CMPB	SS:4.B[EBX], #0		;Maybe
	JNE	4$.S			;No
	MOVL	EDI, nulldcb		;Yes - get offset of our DCB
4$:	CLC				;Make sure C is clear
	RET
.PAGE
	.SBTTL	sd_close - Close

;Here for the close entry
;	c{EDI} = Offset of DCB
;	c{ESI} = Offset of IORB
;	CALL	nullclose
;	c{EAX} = Error code
;	c{EBX} = Status bits
;	c{ECX} = Amount transfered

nullclose:
	CLRL	EAX
	TOFORK
	JMP	knlCloseFin#
.PAGE
	.SBTTL	sd_qinpblk - Queued input block

;Here for the queued input block entry
;	c{EDI} = Offset of DCB
;	c{ESI} = Offset of IORB
;	CALL	nullinpblk
;	c{EAX} = Error code
;	c{EBX} = Status bits
;	c{ECX} = Amount transfered

nullinpblk:
	CMPL	iorb_parm.B[ESI], #0.B	;Do we have a parameter list?
	JE	2$.S			;No
	IFFAULT	6$
	LFSL	EDX, iorb_parm.B[ESI]	;Yes - get address of parameter list
	MOVL	EBX, #nullioparms	;Process parameters
	MOVL	ECX, #knlComDPParms#
	CALL	knlProcDevParm#
	JC	4$.S			;If prameter error
2$:	MOVL	EAX, iorb_count.B[ESI]	;Want 0 bytes?
	TESTL	EAX, EAX
	JE	4$.S			;Yes - give good return
	MOVL	EAX, #ER_EOF		;No, always return EOF error
4$:	CALL	knlGiveQel#		;Give up the IORB
	CLRL	ECX			;Always say no input
	JMP	14$.S

	FAULTHDR
6$:	MOVL	EAX, #ER_ADRER
	JMP	4$.S

	.SBTTL	sd_qoutblk - Queued output block

;Here for the queued output block entry
;	c{EDI} = Offset of DCB
;	c{ESI} = Offset of IORB
;	CALL	nulloutblk
;	c{EAX} = Error code
;	c{EBX} = Status bits
;	c{ECX} = Amount transfered

nulloutblk:
	CMPL	iorb_parm.B[ESI], #0.B	;Do we have a parameter list?
	JE	12$.S			;No
	IFFAULT	6$
	LFSL	EDX, iorb_parm.B[ESI]	;Yes - get address of parameter list
	MOVL	EBX, #nullioparms	;Process parameters
	MOVL	ECX, #knlComDPParms#
	CALL	knlProcDevParm#
	JC	4$.S			;If prameter error
12$:	MOVL	ECX, iorb_count.B[ESI]	;Get output amount
	CALL	knlGiveQel#		;Give up the IORB
	CLRL	EAX			;Always indicate everything output
14$:	MOVL	EBX, #QSTS$DONE		;  but do nothing
	TOFORK
	RET

;Here for the queued output string entry
;	c{EDI} = Offset of DCB
;	c{ESI} = Offset of IORB
;	CALL	nulloutstr
;	c{EAX} = Error code
;	c{EBX} = Status bits
;	c{ECX} = Amount transfered

nulloutstr:
	CMPL	iorb_parm.B[ESI], #0.B	;Do we have a parameter list?
	JE	16$.S			;No
	IFFAULT	6$
	LFSL	EDX, iorb_parm.B[ESI]	;Yes - get address of parameter list
	MOVL	EBX, #nullioparms	;Process parameters
	MOVL	ECX, #knlComDPParms#
	CALL	knlProcDevParm#
	JC	4$.S			;If prameter error
16$:	PUSHL	EDI
	MOVL	ECX, iorb_count.B[ESI]	;Get output amount
	IFFAULT	24$
	LFSL	EDI, iorb_buffer1.B[ESI] ;Get address of buffer
	CALL	knlGiveQel#		;Give up the IORB
	TESTL	ECX, ECX		;Did he specify a count?
	JNE	20$.S			;Yes - use it
	DECL	ECX			;No - make it infinite!
20$:	MOVL	EDX, EDI		;Remember beginning of string
	CLRL	EAX
	CLD
	IFFAULT	26$
	RNSCASB	[EDI]			;Find end of string
	JNE	22$.S
	DECL	EDI
22$:	MOVL	ECX, EDI		;Calculate length of string
	SUBL	ECX, EDX
	POPL	EDI
	TOFORK
	RET

;Here if address error

	FAULTHDR
24$:	CALL	knlGiveQel#
	FAULTHDR
26$:	POPL	EDI
	TOFORK
	JMP	knlQAdrErr#
.PAGE
	.SBTTL	Data

	DATA

nullccb::.BLKB	ccb_SIZE	;NULL device class CCB
nulldcb: .LONG	0		;Offset of NULL device DCB

	END

	.TITLE	REALBIOS - Real mode BIOS emulation routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR

	CODE

;This module contains routines to handle INT 10, INT 11, INT 12, INT 13,
;  INT 14, INT 15, INT 16, INT 17, and INT 1A in real mode


	.SBTTL	rintv10 - Routine to handle INT 10 in real mode

;Routine to handle INT 10 in real mode

rintv10::
	CALL	knlGetTrm#		;Get DCB for his terminal
	JC	2$.S			;If none
	MOVL	ESI, dcb_trtdb.B[EDI]	;Get address of TDB
	TESTL	ESI, ESI		;Do we have one?
	JE	2$.S			;Also do nothing if no TDB
	TESTB	tdb_stsmisc.B[ESI], #TSM$MAPPED ;Is it a memory mapped console?
	JE	2$.S			;No - do nothing
	MOVZBL	EAX, SS:pdaURegEAX#+1	;Yes - get function from AH
	CMPL	EAX, #BIOS10MAX.B	;Legal function?
	JA	2$.S			;No - do nothing!
	CALLI	bios10dsp[EAX*4]	;Yes - dispatch to routine for function
2$:	CLC
	RET

;INT 10 function dispatch table

	DATA

bios10dsp:
	.LONG	vsetvmod	; 00 - Set video mode
	.LONG	vcurtype	; 01 - Set cursor type
	.LONG	vsetcpos	; 02 - Set cursor position
	.LONG	vgetcpos	; 03 - Get cursor position
	.LONG	vgetlpos	; 04 - Get light pen position
	.LONG	vsetdpage	; 05 - Set display page
	.LONG	vwindup		; 06 - Initialize window or scroll window up
	.LONG	vwinddn		; 07 - Initialize window or scroll window down
	.LONG	vgetatch	; 08 - Get attribute and character at cursor
	.LONG	vsetatch	; 09 - Set attribute and character at cursor
	.LONG	vsetchar	; 0A - Set character only at cursor
	.LONG	ret002		; 0B - Set color palette
	.LONG	ret002		; 0C - Set graphics pixel
	.LONG	ret002		; 0D - Get graphics pixel
	.LONG	vsettext	; 0E - Write text in teletype mode
	.LONG	vgetdmod	; 0F - Get current display mode
	.LONG	ret002		; 10 - Set palette registers
	.LONG	vchargen	; 11 - Character generator functions
	.LONG	vmisc		; 12 - Misc. functions
	.LONG	vwrtstr		; 13 - Write string
	.LONG	ret002		; 14
	.LONG	ret002		; 15
	.LONG	ret002		; 16
	.LONG	ret002		; 17
	.LONG	ret002		; 18
	.LONG	ret002		; 19
	.LONG	vcombinc	; 1A - Get or set display combination code
	.LONG	ret002		; 1B - Get functionality/state information
	.LONG	ret002		; 1C - Save or restore video state
BIOS10MAX=!{$-bios10dsp}/4-1

	CODE
.PAGE
	.SBTTL	vsetvmod - INT 10 function 00 - Set video mode

;Here for INT 10 function 00 - Set video mode
;	c(AL) = New video mode
;		  00h = 40x25 text
;		  01h = 40x25 text
;		  02h = 80x25 text
;		  03h = 80x25 text
;		  04h = 320x200x4 graphics (CGA mode)
;		  05h = 320x200x4 graphics (CGA mode)
;		  06h = 640x200x2 graphics (CGA mode)
;		  07h = 80x25 text (monochrome addapter)
;		  08h = Illegal
;		  09h = Illegal
;		  0Ah = Illegal
;		  0Bh = Illegal
;		  0Ch = Illegal
;		  0Dh = 320x200x16 graphics (EGA mode)
;		  0Eh = 640x200x16 graphics (EGA mode)
;		  0Fh = 640x350x1 graphics (EGA mode)
;		  10h = 640x350x16 graphics (EGA mode)
;	c(AH) = 00h
;	INT	10h
;	Nothing is returned!

vsetvmod:
	MOVZBL	EAX, SS:pdaURegEAX#+0	;Get new mode value
	ORB	AH, #DM$BIOSMODE/100h
	TOFORK
	MOVL	EDX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_dspmode.B[EDX]
	FROMFORK
	CLC
	RET
.PAGE
	.SBTTL	vcurtype - INT 10 function 01 - Set cursor type

;Here for INT 10 function 01 - Set cursor type
;	c(AH) = 01h
;	c(CL) = Ending scan line
;	c(CH) = Beginning scan line
;	INT	10h
;	Nothing is returned!

vcurtype:
	MOVL	ECX, SS:pdaURegECX#	;Get his arguments
	MOVW	GS:bda_vcurmode, CX	;Save the new value in page 0
	ANDL	ECX, #3F1Fh
	TESTB	GS:bda_vvidinfo, #01	;Should we emulate an 8 line cursor?
	JE	2$.S			;Yes
	ORB	CH, #80h		;No
2$:	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_curtype.B[EAX]
	FROMFORK
	CLC
	RET
.PAGE
	.SBTTL	vsetcpos - INT 10 function 02 - Set cursor position

;Here for INT 10 function 02 - Set cursor position
;	c(AH) = 02h
;	c(BH) = Display page number
;	c(DL) = Character number
;	c(DH) = Line number
;	INT	10h
;	c[AX] = 0

vsetcpos:
	MOVZBL	ECX, SS:pdaURegEDX#+0	;Get character number
	MOVZBL	EDX, SS:pdaURegEDX#+1	;Get line number
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_curpos.B[EAX]
	FROMFORK
	MOVW	SS:pdaURegEAX#, #0
	CLC
	RET

	.SBTTL	vgetcpos - INT 10 function 03 - Get cursor position

;Here for INT 10 function 03 - Get cursor position
;	c(AH) = 03h
;	c(BH) = Page number
;	INT	10h
;	c[AX] = 0
;	c(CL) = Ending line number for cursor
;	c(CH) = Starting line number for cursor
;	c(DL) = Character number
;	c(DH) = Line number

vgetcpos:
	MOVL	ECX, #-1		;Indicate return value only
	MOVL	EDX, ECX
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_curpos.B[EAX]
	JNC	4$.S			;Go on if OK
	CLRL	EAX			;Error (illegal page number) - return 0!
4$:	FROMFORK
	MOVW	SS:pdaURegEDX#, AX	;Return cursor position values
	MOVW	AX, #GS_REAL16
	MOVL	GS, EAX
	MOVW	AX, GS:bda_vcurmode	;Return cursor type values
	MOVW	SS:pdaURegECX#, AX
	MOVW	SS:pdaURegEAX#, #0
	CLC
	RET
.PAGE
	.SBTTL	vgetlpos - INT 10 function 04 - Get light pen position

;Here for INT 10 function 04 - Get light pen position
;	c(AH) = 04h
;	INT	10h
;	c(AH) = 0 - Lightpen not triggered
;		1 - Lightpen position valid
;	c[BX] = Pixel column
;	c[CX] = Raster line
;	c(DL) = Character column
;	c(DH) = Character row

vgetlpos:				;Not now implemented!
	CLC
	RET

	.SBTTL	vsetdpag - INT 10 function 05 - Set display page

;Here for INT 10 function 05 - Set display page - this sets the both the
;  display and access pages
;	c(AL) = New page value
;	c(AH) = 05h
;	INT	10h
;	Nothing is returned!

vsetdpage:
	MOVZBL	EBX, SS:pdaURegEAX#+0	;Get page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_dsppage.B[EAX]
	FROMFORK
	CLC
	RET
.PAGE
	.SBTTL	vwindup - INT 10 function 06 - Initialize window or scroll up

;Here for INT 10 function 06 - Initialize window or scroll window up
;	c(AL) = Number of lines
;	c(AH) = 06h
;	c(BH) = Attribute byte for blank fill
;	c(CL) = X coordinate, upper left corner of window
;	c(CH) = Y coordinate, upper left corner of window
;	c(DL) = X coordinate, lower right corner of window
;	c(DH) = Y coordinate, lower right corner of window
;	INT	10h
;	Nothing is returned!

vwindup:MOVB	BH, #0
	JMP	2$.S

	.SBTTL	vwinddn - INT 10 function 07 - Initialize window or scroll down

;Here for INT 10 function 07 - Initialize window or scroll down
;	c(AL) = Number of lines
;	c(AH) = 07h
;	c(BH) = Attribute byte for blank fill
;	c(CL) = X coordinate, upper left corner of window
;	c(CH) = Y coordinate, upper left corner of window
;	c(DL) = X coordinate, lower right corner of window
;	c(DH) = Y coordinate, lower right corner of window
;	INT	10h
;	Nothing is returned!

vwinddn:MOVB	BH, #1
2$:	MOVB	BL, tdb_dsppage[ESI]	;Always use current page
	TOFORK
	MOVZBL	EAX, tdb_tattrfil[ESI]
	PUSHL	EAX			;Save current fill attributes
	MOVB	AL, SS:pdaURegEBX#+1	;Get attribute byte for fill
	MOVB	tdb_tattrfil[ESI], AL
	MOVL	ECX, SS:pdaURegECX#	;Get window coordinates
	MOVL	EDX, SS:pdaURegEDX#
	MOVB	AL, BH
	MOVB	BH, SS:pdaURegEAX#
	MOVL	EBP, tdb_ddisp.B[ESI]
	CALLI	CS:tf_scroll.B[EBP]
	POPL	EAX
	MOVB	tdb_tattrfil[ESI], AL
	FROMFORK
	RET
.PAGE
	.SBTTL	vgetatch - INT 10 function 08 - Get attribute and character

;Here for INT 10 function 08 - Get attribute and character at cursor
;	c(AH) = 08h
;	c(BH) = Display page
;	INT	10h
;	c(AL) = Character
;	c(AH) = Attribute

vgetatch:
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_getatc.B[EAX]
	JC	2$.S			;If error
	FROMFORK
	MOVW	SS:pdaURegEAX#, AX	;OK - return result
	CLC
	RET				;Done

2$:	FROMFORK
	STC
	RET

	.SBTTL	vsetatch - INT 10 function 09 - Set attribute and character

;Here for INT 10 function 09 - Set attribute and character at cursor
;	c(AL) = Character
;	c(AH) = 09h
;	c(BL) = Attribute byte, XOR flag in graphics modes
;	c(BH) = Display page
;	c[CX] = Character count
;	INT	10h
;	Nothing is returned!

vsetatch:
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Get offset of driver routine for this
	MOVB	AL, SS:pdaURegEAX#+0	;Get character
	MOVB	AH, SS:pdaURegEBX#+0	;Get attribute byte
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get page number
	MOVZWL	ECX, SS:pdaURegECX#	;Get count
	MOVL	EDX, tdb_ddisp.B[ESI]
	CALLI	CS:tf_setatc.B[EDX]
	JMP	4$.S

	.SBTTL	vsetchar - INT 10 function 0A - Set character only

;Here for INT 10 function 0A - Set character only at cursor
;	c(AL) = Character
;	c(AH) = 0Ah
;	c(BL) = Attribute byte for graphics modes
;	c(BH) = Display page
;	c[CX] = Character count
;	INT	10h
;	Nothing is returned!

vsetchar:
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Get offset of driver routine for this
	MOVB	AL, SS:pdaURegEAX#+0	;Get character
	MOVB	AH, SS:pdaURegEBX#+0	;Get attribute byte
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get page number
	MOVZWL	ECX, SS:pdaURegECX#	;Get count
	MOVL	EDX, tdb_ddisp.B[ESI]
	CALLI	CS:tf_setchr.B[EDX]
4$:	FROMFORK
	CLC
ret002:	RET
.PAGE
	.SBTTL	vsettext - INT 10 function 0E - Write text in teletype mode

;Here for INT 10 function 0E - Write text in teletype mode
;	c(AL) = Character to output
;	c(AH) = 0Eh
;	c(BL) = Foreground color in graphics modes
;	INT	10h
;	Nothing is returned

vsettext:
	TOFORK
	MOVB	AL, SS:pdaURegEAX#	;Get character
	MOVL	EBX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_doutchr.B[EBX]
	FROMFORK
	RET				;Thats all

	.SBTTL	vgetdmod - INT 10 function 0F - Get current display mode

;Here for INT 10 function 0F - Get current display mode
;	c(AH) = 0Fh
;	INT	10h
;	c(AL) = Current video mode
;	c(AH) = Current screen width
;	c(BH) = Active page

vgetdmod:
	TOFORK
	MOVL	EAX, #DM$BIOSMODE+0FFh	;Get current bios mode
	MOVL	EDX, tdb_ddisp.B[ESI]
	CALLI	CS:tf_dspmode.B[EDX]
	MOVB	AH, tdb_columns[ESI]	;Get number of columns
	MOVW	SS:pdaURegEAX#, AX	;Return to user
	MOVB	AL, tdb_dsppage[ESI]	;Get active page
	MOVB	SS:pdaURegEBX#+1, AL	;Return to user
	FROMFORK
	CLC
	RET				;Thats all
.PAGE
	.SBTTL	vchargen - INT 10 function 11 - Character generator functions

;Here for INT 10 function 11 - Character generator functions
;	c(AL) = Sub-function:
;		  0h  = Load user text character set
;		  1h  = Load ROM monochrome character set
;		  2h  = Load ROM double dot character set
;		  3h  = Set block specifier
;		  10h = Load user text character set
;		  11h = Load ROM monochrome character set
;		  12h = Load ROM double-dot character set
;		  20h = Load user graphics 8x8 character set
;		  21h = Load user graphics general character set
;		  22h = Load graphics ROM 8x14 character set
;		  23h = Load graphics ROM 8x8 double dot character set
;		  30h = Return font information
;	c(AH) = 11h
;	INT	10h
;	Nothing is returned

vchargen:
	MOVZBL	EBX, SS:pdaURegEAX#+0	;Get sub-function
	CMPB	BL, #CHRGENMAX		;Valid?
	JA	ret008			;No - do nothing!
	CLRL	EAX			;Yes
	JMPIL	chrgendsp[EBX*4]	;Dispatch on the function

ret008:	RET

;INT 10h function 11h dispatch table

	DATA

chrgendsp:
	.LONG	loadutext	; 0h = Load user text character set
	.LONG	loadrt8x16	; 1h = Load ROM 8x14 character set
	.LONG	loadrt8x8	; 2h = Load ROM 8x8 character set
	.LONG	setblk		; 3h = Set block specifier
	.LONG	loadrt8x16	; 4h = Load ROM 8x16 character set
	.LONG	ret008		; 5h = Illegal
	.LONG	ret008		; 6h = Illegal
	.LONG	ret008		; 7h = Illegal
	.LONG	ret008		; 8h = Illegal
	.LONG	ret008		; 9h = Illegal
	.LONG	ret008		;0Ah = Illegal
	.LONG	ret008		;0Bh = Illegal
	.LONG	ret008		;0Ch = Illegal
	.LONG	ret008		;0Dh = Illegal
	.LONG	ret008		;0Eh = Illegal
	.LONG	ret008		;0Fh = Illegal
	.LONG	loadutextx	;10h = Load user text character set
	.LONG	loadrt8x16x	;11h = Load ROM 8x14 character set
	.LONG	loadrt8x8x	;12h = Load ROM 8x8 character set
	.LONG	ret008		;13h = Illegal
	.LONG	loadrt8x16x	;14h = Load ROM 8x16 character set
	.LONG	ret008		;15h = Illegal
	.LONG	ret008		;16h = Illegal
	.LONG	ret008		;17h = Illegal
	.LONG	ret008		;18h = Illegal
	.LONG	ret008		;19h = Illegal
	.LONG	ret008		;1Ah = Illegal
	.LONG	ret008		;1Bh = Illegal
	.LONG	ret008		;1Ch = Illegal
	.LONG	ret008		;1Dh = Illegal
	.LONG	ret008		;1Eh = Illegal
	.LONG	ret008		;1Fh = Illegal
	.LONG	ret008		;20h = Load user 8x8 graphics character set
	.LONG	ret008		;21h = Load user general graphics character set
	.LONG	ret008		;22h = Load ROM 8x14 graphics character set
	.LONG	ret008		;23h = Load ROM 8x8 graphics character set
	.LONG	ret008		;24h = Load ROM 8x16 graphics character set
	.LONG	ret008		;25h = Illegal
	.LONG	ret008		;26h = Illegal
	.LONG	ret008		;27h = Illegal
	.LONG	ret008		;28h = Illegal
	.LONG	ret008		;29h = Illegal
	.LONG	ret008		;2Ah = Illegal
	.LONG	ret008		;2Bh = Illegal
	.LONG	ret008		;2Ch = Illegal
	.LONG	ret008		;2Dh = Illegal
	.LONG	ret008		;2Eh = Illegal
	.LONG	ret008		;2Fh = Illegal
	.LONG	fontinfo	;30h = Return font information
CHRGENMAX=!{$-chrgendsp}/4-1

	CODE
.PAGE
;Here for the load user text character set function


loadutext:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	JMP	4$.S

loadutextx:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	ORB	AH, #80h
4$:	MOVB	AL, #0
	MOVZWL	EDI, SS:pdaVRegES#	;Get address of user's buffer
	SHLL	EDI, #4
	MOVZWL	EAX, SS:pdaURegEBP#
	ADDL	EDI, EAX
	PUSHL	#GS_REAL16.B
	POPL	ES
	MOVB	BL, SS:pdaURegEBX#+1	;Get bytes per character
	MOVZWL	ECX, SS:pdaURegECX#	;Get number of characters to load
	MOVZWL	EDX, SS:pdaURegEDX#	;Get character offset
	JMP	14$.S

;Here for the load 8x8 ROM text character set function

loadrt8x8:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	JMP	6$.S

;Here for the load 8x8 ROM text character set with adjustment function

loadrt8x8x:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	ORB	AH, #80h
6$:	MOVB	AL, #TF_8X8
	JMP	12$.S

;Here for the load 8x14 ROM text character set function

loadrt8x14:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	JMP	8$.S

;Here for the load 8x14 ROM text character set with adjustment function

loadrt8x14x:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	ORB	AH, #80h
8$:	MOVB	AL, #TF_8X14
	JMP	12$.S

;Here for the load 8x16 ROM text character set function

loadrt8x16:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	JMP	10$.S

;Here for the load 8x16 ROM text character set with adjustment function

loadrt8x16x:
	MOVB	AH, SS:pdaURegEBX#+0	;Get table number
	ORB	AH, #80h
10$:	MOVB	AL, #TF_8X16
12$:	MOVL	ECX, #256t
	CLRL	EDX
14$:	TOFORK
	MOVL	EBP, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_loadfont.B[EBP]
	FROMFORK
	RET
.PAGE
;Here for the set block specifier function

setblk:	MOVZBL	ECX, pdaURegEBX#+0	;Get the two block number
	MOVL	EDX, ECX
	ANDB	CL, #13h		;Unscramble the bits!
	BTZL	ECX, #4t		;  First block is bits 4, 1, and 0
	JNC	2$.S			;  Second blcok is bits 5, 3, and 2
	ORB	CL, #04h
2$:	SHRL	EDX, #2t
	ANDB	DL, #0Bh
	BTZL	EDX, #3t
	JNC	4$.S
	ORB	DL, #04h
4$:	CLRL	EAX			;Assume want 256 character fonts (both
					;  blocks the same)
	CMPL	ECX, EDX		;Right?
	JE	6$.S			;Yes
	INCL	EAX			;No - want 512 character fonts
6$:	TOFORK
	MOVL	EBX, tdb_ddisp.B[ESI]	;Dispatch to driver for this function
	CALLI	CS:tf_selfont.B[EBX]
	FROMFORK
	RET
.PAGE
;Here for the get font information function

fontinfo:
	MOVZBL	EBX, SS:pdaURegEBX#+1	;See which pointer he wants
	CMPL	EBX, #5.B
	JA	1$.S
	JMPIL	fpntdsp[EBX*4]

1$:	RET

;Font pointer dispatch table

	DATA

fpntdsp:.LONG	pntINT1F	;0 = INT 1Fh pointer
	.LONG	pntINT43	;1 = INT 43h pointer
	.LONG	pntr8x14	;2 = ROM 8x14 font
	.LONG	pntr8x8		;3 = ROM 8x8 double-dot font
	.LONG	pntr8x8u	;4 = ROM 8x8 upper-128 double-dot font
	.LONG	pntr9x14a	;5 = ROM 9x14 alternate text font

	CODE

pntINT1F:
	MOVL	EAX, SS:pdaRMPage0#+1Fh*4
	JMP	2$.S

pntINT43:
	MOVL	EAX, SS:pdaRMPage0#+43h*4
2$:	MOVZBL	ECX, tdb_charch[ESI]	;Get number of scan lines per character
	MOVB	DL, tdb_rows[ESI]	;Get number of lines on screen
	MOVL	EBX, EAX
	SHRL	EBX, #16t
	JMP	10$.S

pntr8x8:MOVL	EAX, knlFont8x8L#
	JMP	4$.S

pntr8x8u:
	MOVL	EAX, knlFont8x8H#
4$:	MOVW	CX, #8			;Get number of scan lines per character
	MOVB	DL, #50t		;;;;;;;;;;
	JMP	8$.S			;Continue

pntr8x14:
	MOVL	EAX, knlFont8x14L#
	JMP	6$.S

pntr9x14a:
	MOVL	EAX, knlFont9x14F#
6$:	MOVW	CX, #14t		;Get number of scan lines per character
7$:	MOVB	DL, #24t		;Get number of lines on screen
8$:	MOVW	BX, #0C000h
	SUBL	EAX, #dsprom
10$:	MOVW	SS:pdaURegECX#, CX	;Store byte per character
	DECL	EDX
	MOVB	SS:pdaURegEDX#, DL	;Store number of lines on screen - 1
	MOVL	SS:pdaVRegES#, EBX	;Store character table address
	MOVW	SS:pdaURegEBP#, AX
	RET
.PAGE
	.SBTTL	valtsel - INT 10 function 12 - Misc. functions

;Here for INT 10 function 12 - Misc functions
;	c(AH) = 12h
;	c(BL) = Sub-function:
;		  10h = Return EGA/VGA information
;		  20h = Select alternate print screen routine
;		  30h = Set scan lines
;		  31h = Enable/disable default palette loading
;		  32h = Enable/disable video
;		  33h = Enable/disable gray-scale summing
;		  34h = Enable/disable cursor emulation
;		  35h = Switch active display
;		  36h = Enable/disable screen refresh
;	INT	10h
;	For c(BL) >= 30h, AL is set to 12h, otherwise nothing is returned

vmisc:	MOVZBL	EAX, SS:pdaURegEBX#+0	;Get sub-function
	CMPB	AL, #10h		;Return EGA/VGA information?
	JNE	4$.S			;No
	MOVW	SS:pdaURegEBX#+0, #0003h ;Yes - always color with 256K
	MOVW	SS:pdaURegECX#+0, #0009h
	MOVB	SS:pdaURegEAX#+0, #12h
	RET

;Here if function not return EGA information

4$:	CMPB	AL, #20h		;Select alternate print screen routine?
	JNE	retc10.S		;No - ignore this
	NOP				;Do this soon!!
retc10:	CLC
ret010:	RET
.PAGE
	.SBTTL	vwrtstr - INT 10 function 13 - Write string

;Here for INT 10 function 13 - Write string
;	c(AL)    = Write mode
;		     0 = Attribute in c(BL), string contains characters only,
;			   cursor is not advanced
;		     1 = Same as 0 except cursor is advanced
;		     2 = String contains alternating characters and attribute
;			   bytes, cursor is not advanced
;		     3 = Same as 2 except cursor is advanced
;	c(AH)    = 13h
;	c(BH)    = Page
;	c(BL)    = Attribute byte (if c(AL) = 0 or 1)
;	c[CX]    = Length of string
;	c(DL)    = X coordinate for starting position
;	c(DH)    = Y coordinate for starting position
;	c[ES:BP] = Address of strinag
;	INT	10h
;	Nothing is returned

2$:	FROMFORK
	STC
	RET

vwrtstr:CMPB	SS:pdaURegEAX#+0, #3	;Check for valid function
	JA	retc10.S		;Ignore this if function not valid
	MOVZBL	ECX, SS:pdaURegEDX#+0	;Get character number
	MOVZBL	EDX, SS:pdaURegEDX#+1	;Get line number
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver to set position
	CALLI	CS:tf_curpos.B[EAX]
	JC	2$.S			;Forget it if error
	MOVZWL	EAX, tdb_tattrval[ESI]	;Save current text attributes
	PUSHL	EAX
	MOVZWL	EBX, SS:pdaURegEBP#	;Get address of string
	MOVZWL	EAX, SS:pdaVRegES#
	SHLL	EAX, #4
	ADDL	EBX, EAX
	PUSHL	#GS_REAL16.B
	POPL	ES
	MOVZWL	ECX, SS:pdaURegECX#	;Get length of string
	TESTB	SS:pdaURegEAX#+0, #02	;Have attributes in string?
	JNE	10$.S			;Yes
	MOVB	AH, SS:pdaURegEBX#+0	;No - get attribute byte for entire
	CALL	setattrib		;  string
	IFFAULT	14$
6$:	MOVB	AL, ES:[EBX]		;Get character
	INCL	EBX
	PUSHL	EBX
	PUSHL	ES
	PUSHL	ECX
	MOVL	EDX, tdb_ddisp.B[ESI]	;Dispatch to driver to display character
	CALLI	CS:tf_doutchr.B[EDX]
	FROMFORK
	POPL	ECX
	POPL	ES
	POPL	EBX
	LOOP	ECX, 6$			;Continue if more to do
	JMP	14$.S			;Done

;Here to write string with alternate attribute bytes

	IFFAULT	14$
10$:	MOVW	AX, ES:[EBX]		;Get character and attribute byte
	ADDL	EBX, #2.B		;Bump pointer
	CALL	setattrib		;Store attribute value
	PUSHL	EBX
	PUSHL	ES
	PUSHL	ECX
	TOFORK
	MOVL	EDX, tdb_ddisp.B[ESI]	;Dispatch to driver to display character
	CALLI	CS:tf_doutchr.B[EDX]
	FROMFORK
	POPL	ECX
	POPL	ES
	POPL	EBX
	LOOP	ECX, 10$		;Continue if more to do
	FAULTHDR
14$:	POPL	EAX			;Restore text attributes
	MOVW	tdb_tattrval[ESI], AX
	TESTB	SS:pdaURegEAX#+0, #01	;Need to restore cursor position?
	JNE	24$.S			;No
	MOVZBL	ECX, SS:pdaURegEDX#+0	;Yes - get character number
	MOVZBL	EDX, SS:pdaURegEDX#+1	;Get line number
	MOVZBL	EBX, SS:pdaURegEBX#+1	;Get display page number
	TOFORK
	MOVL	EAX, tdb_ddisp.B[ESI]	;Dispatch to driver to set position
	CALLI	CS:tf_curpos.B[EAX]
	FROMFORK
	CLC
	RET

;Subroutne to set attribute values
;	c(AH) = BIOS attribute byte
;	CALL	setattrib

setattrib:
	MOVB	tdb_tattrval[ESI], AH
	MOVB	tdb_tattrfil[ESI], AH
24$:	RET
.PAGE
	.SBTTL	vcombinc - INT 10 function 1A - Get or set display combination code

;Here for INT 10 function 1A - Get or set display combination code
;	c(AL) = Subfunction:
;		  0 = Get display combination code
;		  1 = Set display combination code
;	c(AH) = 1Ah
;	c(BH) = Inactive display code (if c(AL) = 1)
;	c(BL) = Active display code (if c(AL) = 1)
;	INT	10h
;	c(AL) = 1Ah
;	c(BH) = Inactive display code (if c(AL) = 0)
;	c(BL) = Active display code (if c(AL) = 0)

;Display codes are defined as follows:
;	00h	  = * No display
;	01h	  = * MDA
;	02h	  =   CGA
;	03h	  =   Reserved
;	04h	  = * EGA with 5153 or 5154 monitor
;	05h	  = * EGA with 5151 monitor
;	06h	  =   PGA
;	07h	  = * VGA with analog monochrome monitor
;	08h	  = * VGA with analog color monitor
;	09h	  =   Reserved
;	0Ah	  =   MCGA with digital color monitor
;	0Bh	  =   MCGA with analog monochrome monitor
;	0Ch	  =   MCGA with analog color monitor
;	0Dh - FEh =   Reserved
;	FFh	  =   Unknown

vcombinc:
	CMPB	SS:pdaURegEAX#+0, #0	;Is this a get call?
	JNE	4$.S			;No - do nothing!
	MOVZBL	EAX, tdb_disptype+3.B[ESI] ;Yes - get current display type
	MOVB	DL, tdb_disptype+0.B[ESI]
	ADDL	EAX, EAX
	ANDB	DL, #01h
	ORB	AL, DL
	MOVB	AL, combtbl[EAX]	;Get value to return
	MOVW	SS:pdaURegEBX#+0, AX	;Give it to him
	MOVB	SS:pdaURegEAX#+0, #1Ah	;Also indicate we did this
4$:	RET				;Thats all

	DATA

combtbl:.BYTE	0FFh	;DISP_SERIAL =  0 - Serial terminal
	.BYTE	0FFh
	.BYTE	1	;DISP_MDA    =  1 - Monochrome display adapter
	.BYTE   0FFh
	.BYTE	4	;DISP_EGA    =  2 - Monochrome EGA
	.BYTE	5	;		  - Color EGA
	.BYTE	7	;DISP_VGA    =  3 - Monochrome VGA
	.BYTE	8	;		  - Color VGA

	CODE
.PAGE
	.SBTTL	rintv11 - Routine to handle INT 11 in real mode

;Routine to handle INT 11 in real mode - this INT returns the equipment
;  configuration word
;	INT	11h
;	c[AX] = Equipment bits:
;		  111111
;		  5432109876543210
;		  PPMxSSSxDDVVxxCI
;		Where:
;		  PP  = Number of printers attached
;		  M   = Internal modem installed (never set)
;		  SSS = Number of serial ports installed
;		  DD  = Number of floppy disk drives installed
;		  VV  = Initial video mode:
;			  00 - EGA or VGA in color mode
;			  01 - 40x25 CGA color
;			  10 - 80x25 CGA color
;			  11 - 80x25 monochrome
;		  C   = Math coprocessor present
;		  I   = IPL floppy installed (never set)
;		  x   = Not used, set to 0

rintv11::
	CLRL	EAX			;Clear EAX in case no real mode page 0
	IFFAULT	2$			;If no real mode page 0
	MOVW	AX, SS:pdaRMPage0#+bda_vconfig ;Get equipment configuration byte
	FAULTHDR
2$:	MOVW	SS:pdaURegEAX, AX	;Give him the value in AX
	CLC
	RET				;Finished here
.PAGE
	.SBTTL	rintv12 - Routine to handle INT 12 in real mode

;Routine to handle INT 12 in real mode

rintv12::
	MOVL	EAX, SS:pdaDosSize#	;Get size in bytes
	SHRL	EAX, #10t		;Change to KB
	MOVW	SS:pdaURegEAX#, AX	;Store in user's register
	CLC
	RET
.PAGE
	.SBTTL	rintv13 - Routine to handle INT 13 in real mode

;Routine to handle INT 13 in real mode

rintv13::
	CMPB	SS:pdaURegEAX#+1, #08h	;Is this a read drive parameters?
	JNE	4$.S			;No
	MOVL	SS:pdaURegEAX#, #0
	MOVL	SS:pdaURegECX#, #91h
	MOVL	SS:pdaURegEDX#, #501h
	MOVL	SS:pdaVRegES#, #0E900h
	MOVL	SS:pdaURegEDI#, #0
	ANDB	SS:pdaURegEFR#, #~01h
	RET

4$:	UNIMOP	0CDh, 13h, 00h, 00h

	.SBTTL	rintv14 - Routine to handle INT 14 in real mode

;Routine to handle INT 14 in real mode

rintv14::
	MOVL	ECX, #ubios14#
	JMP	rmchnguser#

	.SBTTL	rintv15 - Routine to handle INT 15 in real mode

;Routine to handle INT 15 in real mode

rintv15::
	MOVB	AL, SS:pdaURegEAX#+1	;Get function
	CMPB	AL, #88h		;Return extended memory size?
	JE	b15xmemsz.S		;Yes
	CMPB	AL, #0C0h		;Return pointer to environment data?
	JE	b15sysenv.S		;Yes
	CMPB	AL, #0C1h		;Return address of extended BIOS data?
	JE	b15xbiosdata.S		;Yes
	CMPB	AL, #0C2h		;Pointing device functions?
	JE	b15pntdev.S		;Yes
	CLC				;No - just fail quietly!
	RET

;Here for INT 15, function 88h - Get extended memory size

b15xmemsz:
	MOVW	SS:pdaURegEAX#, #0h	;Always say no extended memory!
	RET

;Here for INT 15, function 0C0h - Return pointer to environment data

b15sysenv:
	MOVL	EAX, #bda_vcnfgdata-400h
	MOVW	SS:pdaURegEBX#, AX
	MOVW	SS:pdaVRegES#, #40h
	RET

;Here for INT 15, function 0C1h - Return address of extended BIOS data

b15xbiosdata:
	MOVW	SS:pdaVRegES#, #0F000h	;Give him some likely value!
	RET

;Here for INT 15, function 0C2h - Pointing device functions

b15pntdev:
	RET
.PAGE
	.SBTTL	rintv16 - Routine to handle INT 16 in real mode

;Routine to handle INT 16 in real mode

rintv16::
	MOVL	SS:pdaRMIndex#, #16h*4 ;Store index for waits
	MOVZBL	EAX, SS:pdaURegEAX#+1	;Get the INT 16 function
	CMPB	AL, #I16MAX		;Legal function?
	JA	int16bad.S		;No
	JMPIL	int16tbl[EAX*4]		;Yes - dispatch to routine for function

;Here if illegal INT 16 function - we just ignore this like the BIOS does

int16bad:
	CLC
	RET

	DATA

int16tbl:
	.LONG	int16read0	; 0 - Read character from keyboard
	.LONG	int16status0	; 1 - Get keyboard status
	.LONG	int16flags0	; 2 - Get keyboard flags
	.LONG	int16bad	; 3 - Set repeat rate
	.LONG	int16bad	; 4 - Set keyclick
	.LONG	int16bad	; 5 - Push character and scan code
	.LONG	int16bad	; 6 - Illegal
	.LONG	int16bad	; 7 - Illegal
	.LONG	int16bad	; 8 - Illegal
	.LONG	int16bad	; 9 - Illegal
	.LONG	int16bad	; A - Illegal
	.LONG	int16bad	; B - Illegal
	.LONG	int16bad	; C - Illegal
	.LONG	int16bad	; D - Illegal
	.LONG	int16bad	; E - Illegal
	.LONG	int16bad	; F - Illegal
	.LONG	int16read10	;10 - Read character from enhanced keyboard
	.LONG	int16status10	;11 - Get enhanced keyboard status
	.LONG	int16flags10	;12 - Get enhanced keyboard flags
I16MAX=!{$-int16tbl}/4-1

	CODE
.PAGE
;Here for the read character from keyboard function - c(AH) = 0h

int16read0:
	PUSHL	#TIM$PCSCNC|TIM$XIMAGE
	JMP	2$.S

;Here for the read character from keyboard function - c(AH) = 10h

int16read10:
	PUSHL	#TIM$PCSCNC|TIM$PC101|TIM$XIMAGE
2$:	CALL	knlGetTrm#		;Get DCB for his terminal
	JC	4$.S			;If error
	CALL	knlChkGetTdb#		;Get the TDB
4$:	POPL	EAX
	JC	8$.S			;If error
	CALL	trmgetpc#		;Get keyboard character
	JC	10$.S			;If need to wait for a character
	MOVW	SS:pdaURegEAX, AX	;OK - give him the character
8$:	CLC				;Finished
	RET

;Here if need to wait for a character (at fork level)

10$:	FROMFORK			;Back to main program level in case have
					;  to allocate memory for his stack
	SUBL	SS:pdaURegESP#, #6.B	;Put three words on his stack
	MOVZWL	EBX, SS:pdaURegESP#	;Get user's stack pointer
	MOVZWL	EAX, SS:pdaURegSS#
	SHLL	EAX, #4
	ADDL	EBX, EAX
	MOVL	EAX, SS:pdaURegEIP#	;Copy return address and FR to his
	MOVW	GS:[EBX], AX		;  stack
	MOVL	EAX, SS:pdaURegCS#
	MOVW	GS:2.B[EBX], AX
	MOVL	EAX, SS:pdaURegEFR#

;NEED TO FIDDLE INTERRUPT STUFF HERE!!!!!!

	MOVW	GS:4.B[EBX], AX
	MOVL	EAX, SS:pdaRMIndex#	;Get index for waits
	ADDL	EAX, #mwaitcall#
	MOVL	SS:pdaURegEIP#, EAX	;Set so he will execute the re-do
	MOVL	SS:pdaURegCS#, #0ED00h	;  stuff next
	MOVL	EAX, EDI
	TOFORK				;Back to fork level
	CMPL	tdb_ircnt[ESI], #0.B	;Did any input sneak in?
	JNE	18$.S			;Yes - don't wait
	CALL	knlSetWait#		;No
	MOVB	AL, #knlQX_DW2#		;Set up to wait
	PUSHL	SS
	POPL	ES
	CALL	knlWRequeue#		;Requeue to an IO wait queue
	MOVB	knlSchedReq#, #1	;Force scheduling
	MOVB	AL, SS:pdaSigReq#	;Do we have any unmasked software
	ANDB	AL, SS:pdaSigMask#	;  interrupt requests now?
	JE	14$.S			;No
	PUSHL	SS			;Yes
	POPL	ES
	CALL	knlRRequeue#		;Put process back in a run queue
	JMP	16$.S

;Here if need to schedule

14$:	MOVB	knlSchedReq#, #1	;No - request scheduling now
16$:	FROMFORK
	CLRL	EAX			;Clear C and set Z to indicate not done
	RET

;Here if want to re-do the operation immediately

18$:	FROMFORK
	CLRL	EAX			;Clear C and set Z to indicate not done
	RET
.PAGE
;Here for the get keyboard status function - c(AH) = 1h
;	c(AH) = 1h
;	INT	16h
;	Z:set = No input available
;	Z:clr = Input available
;	  c(AL) = ASCII character
;	  c(AH) = Scan code

int16status0:
	PUSHL	#TIM$PCSCNC|TIM$XIMAGE
	JMP	2$.S

;Here for the get keyboard status function - c(AH) = 11h
;	c(AH) = 11h
;	INT	16h
;	Z:set = No input available
;	Z:clr = Input available
;	  c(AL) = ASCII character
;	  c(AH) = Scan code

int16status10:
	PUSHL	#TIM$PCSCNC|TIM$PC101|TIM$XIMAGE
2$:	CALL	knlGetTrm#		;Get DCB for his terminal
	JC	4$.S			;If error
	CALL	knlChkGetTdb#		;Get the TDB
4$:	POPL	EAX
	JC	10$.S			;If error
	CALL	trmchkpc#		;Check for character
	JC	10$.S			;If nothing there
	ANDB	SS:pdaURegEFR#+0, #~40h	;Indicate have data
	MOVW	SS:pdaURegEAX, AX	;Give him the character
	RET

;Here if nothing in buffer

10$:	ORB	SS:pdaURegEFR#+0, #40h	;Indicate nothing available
	RET				;And return
.PAGE
;Here for the get keyboard flags function - c(AH) = 2h

int16flags0:
	MOVB	AL, GS:bda_vkeysts0	;Get keyboard status byte
	MOVB	SS:pdaURegEAX#+0, AL
	CLC
	RET

;Here for the get keyboard flags function - c(AH) = 12h

int16flags10:
	MOVB	AL, GS:bda_vkeysts0	;Get first keyboard status byte
	MOVB	SS:pdaURegEAX#+0, AL
	MOVB	AL, GS:bda_vkeysts1	;Get bits from the other two bytes
	ANDB	AL, #73h
	MOVB	AH, GS:bda_vkeysts2
	ANDB	AH, #0Ch
	ORB	AL, AH
	MOVB	SS:pdaURegEAX#+1, AL
	RET
.PAGE
	.SBTTL	rintv17 - Routine to handle INT 17 in real mode

;Routine to handle INT 17 in real mode

rintv17::
	MOVL	ECX, #ubios17#
	JMP	rmchnguser#
.PAGE
	.SBTTL	rintv1A - Routine to handle INT 1A in real mode

;Routine to handle INT 1A in real mode - clock functions

rintv1A::
	MOVZBL	EAX, SS:pdaURegEAX#+1	;Get function
	CMPL	EAX, #BIOS1AMAX		;Valid?
	JAE	retc12.S		;No
	JMPIL	bios1Adsp[EAX*4]	;Yes - dispatch on function

;BIOS 1A dispatch table

	DATA

bios1Adsp:
	.LONG	getclock	; 0 - Get current clock value
	.LONG	retc12		; 1 - Set clock  (ignored)
	.LONG	getrtct		; 2 - Get real time clock time
	.LONG	setrtct		; 3 - Set real time clock time
	.LONG	getrtcd		; 4 - Get real time clock date
	.LONG	setrtcd		; 5 - Set real time clock date
	.LONG	setalarm	; 6 - Set real time clock alarm
	.LONG	clralarm	; 7 - Clear real time clock alarm
BIOS1AMAX=!{$-bios1Adsp}/4-1

	CODE

;Here for INT 1A function 0 - Get current clock value

getclock:
	MOVB	BL, #0			;Assume not gone past midnite
	MOVL	EAX, knlTickCnt#	;Get clock value
	CMPL	SS:pdaRMPrevClk#, EAX	;Gone past midnite since last time?
	JAE	2$.S			;No
	INCL	EBX			;Yes
2$:	MOVL	SS:pdaRMPrevClk#, EAX	;Remember time
	MOVB	SS:pdaURegEAX#+0, BL	;Give user the values
	MOVW	SS:pdaURegEDX#+0, AX
	SHRL	EAX, #16t
	MOVW	SS:pdaURegECX#+0, AX
retc12:	CLC
ret012:	RET				;Finished

;Here for INT 1A function 2 - Get real time clock time

getrtct:UNIMOP	0CDh, 1Ah, 02h, 00h

;Here for INT 1A function 3 - Set real time clock time

setrtct:UNIMOP	0CDh, 1Ah, 03h, 00h

;Here for INT 1A function 4 - Get real time clock date

getrtcd:UNIMOP	0CDh, 1Ah, 04h, 00h

;Here for INT 1A function 5 - Set real time clock date

setrtcd:UNIMOP	0CDh, 1Ah, 05h, 00h

;Here for INT 1A function 6 - Set real time clock alarm

setalarm:
	UNIMOP	0CDh, 1Ah, 06h, 00h

;Here for INT 1A function 7 - Clear real time clock alarm

clralarm:
	UNIMOP	0CDh, 1Ah, 07h, 00h

	END

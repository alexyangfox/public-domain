	.TITLE	PROT - Protected mode routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSDPMI.PAR

	.SBTTL	poptbl - Protected mode protection error dispatch table

;Protected mode protection error dispatch table - index is by opcode byte of
;  instruction which caused the protection error

	DATA

	.MACRO	dindex x, n
x=!$$$
$$$=!$$$+4
	.LONG	n
	.ENDM
$$$=!0

poptbld::
	DINDEX	PFPE   , pfpe#	;Instructions which give real protection error
	DINDEX	PDATSZ , pdatsz	;Data size prefix
	DINDEX	PADRSZ , padrsz	;Address size prefix
	DINDEX	PINSB  , pinsb	;INSB
	DINDEX	PINS   , pins	;INSW and INSL
	DINDEX	POUTSB , poutsb	;OUTSB
	DINDEX	POUTS  , pouts	;OUTSW and OUTSL
	DINDEX	PINT   , pint	;INT
	DINDEX	PINPB  , pinpb	;INB port
	DINDEX	PINP   , pinp	;INW port and INL port
	DINDEX	POUTPB , poutpb	;OUTB port
	DINDEX	POUTP  , poutp	;OUTW port and OUTL port
	DINDEX	PINDXB , pindxb	;INB [DX]
	DINDEX	PINDX  , pindx	;INW [DX] and INL [DX]
	DINDEX	POUTDXB, poutdxb;OUTB [DX]
	DINDEX	POUTDX , poutdx	;OUTW [DX] and OUTL [DX]
	DINDEX	PCLI   , pcli	;CLI
	DINDEX	PSTI   , psti	;STI
	DINDEX  PXINS  , pxins  ;Extended instruction prefix byte (0F)

poptblx::
	.BYTE	PFPE		; 00 - ADD
	.BYTE	PFPE		; 01 - ADD
	.BYTE	PFPE		; 02 - ADD
	.BYTE	PFPE		; 03 - ADD
	.BYTE	PFPE		; 04 - ADD
	.BYTE	PFPE		; 05 - ADD
	.BYTE	PFPE		; 06 - PUSH ES
	.BYTE	PFPE		; 07 - POP ES
	.BYTE	PFPE		; 08 - OR
	.BYTE	PFPE		; 09 - OR
	.BYTE	PFPE		; 0A - OR
	.BYTE	PFPE		; 0B - OR
	.BYTE	PFPE		; 0C - OR
	.BYTE	PFPE		; 0D - OR
	.BYTE	PFPE		; 0E - PUSH CS
	.BYTE	PXINS		; 0F - 2-byte escape
	.BYTE	PFPE		; 10 - ADC
	.BYTE	PFPE		; 11 - ADC
	.BYTE	PFPE		; 12 - ADC
	.BYTE	PFPE		; 13 - ADC
	.BYTE	PFPE		; 14 - ADC
	.BYTE	PFPE		; 15 - ADC
	.BYTE	PFPE		; 16 - PUSH SS
	.BYTE	PFPE		; 17 - POP SS
	.BYTE	PFPE		; 18 - SBB
	.BYTE	PFPE		; 19 - SBB
	.BYTE	PFPE		; 1A - SBB
	.BYTE	PFPE		; 1B - SBB
	.BYTE	PFPE		; 1C - SBB
	.BYTE	PFPE		; 1D - SBB
	.BYTE	PFPE		; 1E - PUSH DS
	.BYTE	PFPE		; 1F - POP DS
	.BYTE	PFPE		; 20 - AND
	.BYTE	PFPE		; 21 - AND
	.BYTE	PFPE		; 22 - AND
	.BYTE	PFPE		; 23 - AND
	.BYTE	PFPE		; 24 - AND
	.BYTE	PFPE		; 25 - AND
	.BYTE	PFPE		; 26 - ES prefix
	.BYTE	PFPE		; 27 - DAA
	.BYTE	PFPE		; 28 - SUB
	.BYTE	PFPE		; 29 - SUB
	.BYTE	PFPE		; 2A - SUB
	.BYTE	PFPE		; 2B - SUB
	.BYTE	PFPE		; 2C - SUB
	.BYTE	PFPE		; 2D - SUB
	.BYTE	PFPE		; 2E - CS prefix
	.BYTE	PFPE		; 2F - DAS
	.BYTE	PFPE		; 30 - XOR
	.BYTE	PFPE		; 31 - XOR
	.BYTE	PFPE		; 32 - XOR
	.BYTE	PFPE		; 33 - XOR
	.BYTE	PFPE		; 34 - XOR
	.BYTE	PFPE		; 35 - XOR
	.BYTE	PFPE		; 36 - SS prefix
	.BYTE	PFPE		; 37 - AAA
	.BYTE	PFPE		; 38 - CMP
	.BYTE	PFPE		; 39 - CMP
	.BYTE	PFPE		; 3A - CMP
	.BYTE	PFPE		; 3B - CMP
	.BYTE	PFPE		; 3C - CMP
	.BYTE	PFPE		; 3D - CMP
	.BYTE	PFPE		; 3E - DS prefix
	.BYTE	PFPE		; 3F - AAS
	.BYTE	PFPE		; 40 - INC
	.BYTE	PFPE		; 41 - INC
	.BYTE	PFPE		; 42 - INC
	.BYTE	PFPE		; 43 - INC
	.BYTE	PFPE		; 44 - INC
	.BYTE	PFPE		; 45 - INC
	.BYTE	PFPE		; 46 - INC
	.BYTE	PFPE		; 47 - INC
	.BYTE	PFPE		; 48 - DEC
	.BYTE	PFPE		; 49 - DEC
	.BYTE	PFPE		; 4A - DEC
	.BYTE	PFPE		; 4B - DEC
	.BYTE	PFPE		; 4C - DEC
	.BYTE	PFPE		; 4D - DEC
	.BYTE	PFPE		; 4E - DEC
	.BYTE	PFPE		; 4F - DEC
	.BYTE	PFPE		; 50 - PUSH
	.BYTE	PFPE		; 51 - PUSH
	.BYTE	PFPE		; 52 - PUSH
	.BYTE	PFPE		; 53 - PUSH
	.BYTE	PFPE		; 54 - PUSH
	.BYTE	PFPE		; 55 - PUSH
	.BYTE	PFPE		; 56 - PUSH
	.BYTE	PFPE		; 57 - PUSH
	.BYTE	PFPE		; 58 - POP
	.BYTE	PFPE		; 59 - POP
	.BYTE	PFPE		; 5A - POP
	.BYTE	PFPE		; 5B - POP
	.BYTE	PFPE		; 5C - POP
	.BYTE	PFPE		; 5D - POP
	.BYTE	PFPE		; 5E - POP
	.BYTE	PFPE		; 5F - POP
	.BYTE	PFPE		; 60 - PUSHA
	.BYTE	PFPE		; 61 - POPA
	.BYTE	PFPE		; 62 - BOUND
	.BYTE	PFPE		; 63 - ARPL
	.BYTE	PFPE		; 64 - FS prefix
	.BYTE	PFPE		; 65 - GS prefix
	.BYTE	PDATSZ		; 66 - Operand size prefix
	.BYTE	PADRSZ		; 67 - Address size prefix
	.BYTE	PFPE		; 68 - PUSH #
	.BYTE	PFPE		; 69 - IMUL
	.BYTE	PFPE		; 6A - PUSH
	.BYTE	PFPE		; 6B - IMUL
	.BYTE	PINSB		; 6C - INSB
	.BYTE	PINS		; 6D - INSW/L
	.BYTE	POUTSB		; 6E - OUTSB
	.BYTE	POUTS		; 6F - OUTSW/L
	.BYTE	PFPE		; 70 - JO
	.BYTE	PFPE		; 71 - JNO
	.BYTE	PFPE		; 72 - JB
	.BYTE	PFPE		; 73 - JNB
	.BYTE	PFPE		; 74 - JZ
	.BYTE	PFPE		; 75 - JNZ
	.BYTE	PFPE		; 76 - JBE
	.BYTE	PFPE		; 77 - JA
	.BYTE	PFPE		; 78 - JS
	.BYTE	PFPE		; 79 - JNS
	.BYTE	PFPE		; 7A - JP
	.BYTE	PFPE		; 7B - JNP
	.BYTE	PFPE		; 7C - JL
	.BYTE	PFPE		; 7D - JGE
	.BYTE	PFPE		; 7E - JLE
	.BYTE	PFPE		; 7F - JG
	.BYTE	PFPE		; 80 - Immediate group
	.BYTE	PFPE		; 81 - Immediate group
	.BYTE	PFPE		; 82 - Illegal
	.BYTE	PFPE		; 83 - Group
	.BYTE	PFPE		; 84 - TEST
	.BYTE	PFPE		; 85 - TEST
	.BYTE	PFPE		; 86 - XCHG
	.BYTE	PFPE		; 87 - XCHG
	.BYTE	PFPE		; 88 - MOV
	.BYTE	PFPE		; 89 - MOV
	.BYTE	PFPE		; 8A - MOV
	.BYTE	PFPE		; 8B - MOV
	.BYTE	PFPE		; 8C - MOV
	.BYTE	PFPE		; 8D - LEA
	.BYTE	PFPE		; 8E - MOV
	.BYTE	PFPE		; 8F - POP
	.BYTE	PFPE		; 90 - NOP
	.BYTE	PFPE		; 91 - XCHG
	.BYTE	PFPE		; 92 - XCHG
	.BYTE	PFPE		; 93 - XCHG
	.BYTE	PFPE		; 94 - XCHG
	.BYTE	PFPE		; 95 - XCHG
	.BYTE	PFPE		; 96 - XCHG
	.BYTE	PFPE		; 97 - XCHG
	.BYTE	PFPE		; 98 - CBW
	.BYTE	PFPE		; 99 - CWL
	.BYTE	PFPE		; 9A - CALL
	.BYTE	PFPE		; 9B - WAIT
	.BYTE	PFPE		; 9C - PUSHF
	.BYTE	PFPE		; 9D - POPF
	.BYTE	PFPE		; 9E - SAHF
	.BYTE	PFPE		; 9F - LAHF
	.BYTE	PFPE		; A0 - MOV
	.BYTE	PFPE		; A1 - MOV
	.BYTE	PFPE		; A2 - MOV
	.BYTE	PFPE		; A3 - MOV
	.BYTE	PFPE		; A4 - MOVSB
	.BYTE	PFPE		; A5 - MOVSW/L
	.BYTE	PFPE		; A6 - CMPSB
	.BYTE	PFPE		; A7 - CMPSW/L
	.BYTE	PFPE		; A8 - TEST
	.BYTE	PFPE		; A9 - TEST
	.BYTE	PFPE		; AA - STOSB
	.BYTE	PFPE		; AB - STOSW/L
	.BYTE	PFPE		; AC - LODSB
	.BYTE	PFPE		; AD - LODSW/L
	.BYTE	PFPE		; AE - SCASB
	.BYTE	PFPE		; AF - SCASW/L
	.BYTE	PFPE		; B0 - MOV
	.BYTE	PFPE		; B1 - MOV
	.BYTE	PFPE		; B2 - MOV
	.BYTE	PFPE		; B3 - MOV
	.BYTE	PFPE		; B4 - MOV
	.BYTE	PFPE		; B5 - MOV
	.BYTE	PFPE		; B6 - MOV
	.BYTE	PFPE		; B7 - MOV
	.BYTE	PFPE		; B8 - MOV
	.BYTE	PFPE		; B9 - MOV
	.BYTE	PFPE		; BA - MOV
	.BYTE	PFPE		; BB - MOV
	.BYTE	PFPE		; BC - MOV
	.BYTE	PFPE		; BD - MOV
	.BYTE	PFPE		; BE - MOV
	.BYTE	PFPE		; BF - MOV
	.BYTE	PFPE		; C0 - Shift group
	.BYTE	PFPE		; C1 - Shift group
	.BYTE	PFPE		; C2 - RET
	.BYTE	PFPE		; C3 - RET
	.BYTE	PFPE		; C4 - LES
	.BYTE	PFPE		; C5 - LDS
	.BYTE	PFPE		; C6 - MOV
	.BYTE	PFPE		; C7 - MOV
	.BYTE	PFPE		; C8 - ENTER
	.BYTE	PFPE		; C9 - LEAVE
	.BYTE	PFPE		; CA - RETF
	.BYTE	PFPE		; CB - RETF
	.BYTE	PFPE		; CC - INT3
	.BYTE	PINT		; CD - INT
	.BYTE	PFPE		; CE - INTO
	.BYTE	PFPE		; CF - IRET
	.BYTE	PFPE		; D0 - Shift group
	.BYTE	PFPE		; D1 - Shift group
	.BYTE	PFPE		; D2 - Shift group
	.BYTE	PFPE		; D3 - Shift group
	.BYTE	PFPE		; D4 - AAM
	.BYTE	PFPE		; D5 - AAD
	.BYTE	PFPE		; D6 - Illegal
	.BYTE	PFPE		; D7 - XLAT
	.BYTE	PFPE		; D8 - ESC
	.BYTE	PFPE		; D9 - ESC
	.BYTE	PFPE		; DA - ESC
	.BYTE	PFPE		; DB - ESC
	.BYTE	PFPE		; DC - ESC
	.BYTE	PFPE		; DD - ESC
	.BYTE	PFPE		; DE - ESC
	.BYTE	PFPE		; DF - ESC
	.BYTE	PFPE		; E0 - LOOPNE
	.BYTE	PFPE		; E1 - LOOPE
	.BYTE	PFPE		; E2 - LOOP
	.BYTE	PFPE		; E3 - JCXZ
	.BYTE	PINPB		; E4 - INB port
	.BYTE	PINP		; E5 - INW/L port
	.BYTE	POUTPB		; E6 - OUTB port
	.BYTE	POUTP		; E7 - OUTW/L port
	.BYTE	PFPE		; E8 - CALL
	.BYTE	PFPE		; E9 - JMP
	.BYTE	PFPE		; EA - JMP
	.BYTE	PFPE		; EB - JMP
	.BYTE	PINDXB		; EC - INB [DX]
	.BYTE	PINDX		; ED - INW/L [DX]
	.BYTE	POUTDXB		; EE - OUTB [DX]
	.BYTE	POUTDX		; EF - OUTW/L [DX]
	.BYTE	PFPE		; F0 - LOCK
	.BYTE	PFPE		; F1 - Illegal
	.BYTE	PFPE		; F2 - REPNE
	.BYTE	PFPE		; F3 - REP/REPE
	.BYTE	PFPE		; F4 - HLT
	.BYTE	PFPE		; F5 - CMC
	.BYTE	PFPE		; F6 - Unary group
	.BYTE	PFPE		; F7 - Unary group
	.BYTE	PFPE		; F8 - CLC
	.BYTE	PFPE		; F9 - STC
	.BYTE	PCLI		; FA - CLI
	.BYTE	PSTI		; FB - STI
	.BYTE	PFPE		; FC - CLD
	.BYTE	PFPE		; FD - STD
	.BYTE	PFPE		; FE - INC/DEC
	.BYTE	PFPE		; FF - Indirect group

	CODE
.PAGE
;Here on address size prefix from protected user mode

padrsz:	XORB	useradrsz#, #6
	JMP	4$.S

;Here on data size prefix from protected user mode

pdatsz:	XORB	userdatsz#, #6
4$:	INCL	ESI
	JMP	protgetop#
.PAGE
;Here if have privilege trap on INT instruction in user mode (this is normal
;  in some cases since we have to emulate INT 0 through 1F (which are processor
;  traps) and INT 70 through 7F (which are device interrupts).  The vectors for
;  these interrupts have a privilege level of 0.

	IFFAULT	pfpe#
pint:	MOVZBL	EAX, GS:1.B[ESI]	;Get the INT number
	CMPL	EAX, #1Fh		;Is it a low INT?
	JBE	2$.S			;Yes
	CMPL	EAX, #70h		;No - is it a middle INT?
	JB	4$.S			;No
	CMPL	EAX, #7Fh		;Maybe
	JA	4$.S			;No
	ADDL	EAX, #ITO_PINTMS-ITO_PINTLS ;Yes
2$:	ADDL	EAX, #ITO_PINTLS
4$:	MOVL	SS:pdaTrapVect#+0, EAX
	ADDL	SS:pdaURegEIP#, #2.B	;Fix up the return address
	JMP	usertrap2#		;Go process the trap

;Here if have privilege trap on CLI instruction in protected user mode - this
;  is used by DPMI to disable virtual interrupts

pcli:	MOVZBL	EAX, SS:pdaSigLvl#	;Get current interrupt level
	ORB	AL, #04h		;Increase the level
	JMP	10$.S			;Continue

;Here if have privilege trap on STI instruction in protected user mode - this
;  is used by DPMI to enable virtual interrupts

psti:	MOVZBL	EAX, SS:pdaSigLvl#	;Get current interrupt level
	ANDB	AL, #~04h		;Reduce the level
10$:	MOVB	SS:pdaSigLvl#, AL	;Make this his new level
	MOVB	AL, masktbl#[EAX]	;Get new interrupt mask value
	MOVB	SS:pdaSigMask#, AL
	INCL	SS:pdaURegEIP#		;Fix up the return address
	JMP	knlTrapDone#
.PAGE
;Here on INB port instruction from protected user mode

pinpb:	MOVZBL	EDX, GS:1.B[ESI]	;Get port number
	MOVZBL	EAX, ioporttbl#[EDX]	;Get dispatch index
	CLC
	CALLI	ioinbdsp[EAX]		;And dispatch to routine for device
	JC	4$.S
	ADDL	SS:pdaURegEIP#, #2.B
	JMP	6$.S

;Here on INB [DX] instruction from protected user mode

pindxb:	MOVZWL	EDX, SS:pdaURegEDX#	;Get port number
	CMPL	EDX, #400h		;Is it one we know about?
	JB	2$.S			;Yes
	CLRL	EDX			;No
2$:	MOVZBL	EAX, ioporttbl#[EDX]	;Get dispatch index
	CLC
	CALLI	ioinbdsp[EAX]		;And dispatch to routine for device
4$:	JC	pfpe#	
	INCL	SS:pdaURegEIP#		;Bump user EIP
6$:	MOVB	SS:pdaURegEAX#+0, AL	;Store data in user's register
	JMP	knlTrapDone#

;Here on INSB instruction from protected user mode

pinsb:	UNIMOP	06Ch, 00h, 00h, 00h
.PAGE
;Dispatch table for INB instructions

	DATA

ioinbdsp:
	.LONG	piobad		;BAD =  4. - Invalid port
	.LONG	vinbint#	;IN1 =  8. - First interupt controller
	.LONG	knlRtnZero#	;IN2 = 12. - Second interrupt controller
	.LONG	vinbdsp#	;DSP = 16. - Console display
	.LONG	piobad		;FLP = 20. - Floppy disk
	.LONG	vinbkey#	;KEY = 24. - Keyboard
	.LONG	vinbcom1#	;CM1 = 28. - Serial port 1
	.LONG	vinbcom2#	;CM2 = 32. - Serial port 2
	.LONG	piobad		;PRT = 36. - Printer
	.LONG	piobad		;GAM = 40. - Game port
	.LONG	vinbclk#	;CLK = 44. - Clock
	.LONG	piobad		;IGN = 48. - Port to ignore

	CODE

piobad:	TESTB	SS:pdaStatus1#, #P1$DOSSEG|P1$BIOSSEG ;Do we have a real mode
						      ;  environment?
	JNE	4$.S			;Yes
	STC				;No - fail
	RET

;Here with illegal IO instruction if have a real mode environment

4$:	MOVL	EAX, #-1
	RET
.PAGE
;Here on INW/L port instruction from protected user mode

pinp:	MOVZBL	EDX, GS:1.B[ESI]	;Get port number
	MOVZBL	EAX, ioporttbl#[EDX]	;Get dispatch index
	CLC
	CALLI	ioinwldsp[EAX]		;And dispatch to routine for device
	JC	4$.S
	ADDL	SS:pdaURegEIP#, #2.B
	JMP	6$.S

;Here on INW/L [DX] instruction from protected user mode

pindx:	MOVZWL	EDX, DX			;Get port number
	CMPL	EDX, #400h		;Is it one we know about?
	JB	2$.S			;Yes
	CLRL	EDX			;No
2$:	MOVZBL	EAX, ioporttbl#[EDX]	;Get dispatch index
	CLC
	CALLI	ioinwldsp[EAX]		;And dispatch to routine for device
4$:	JC	pfpe#
	INCL	SS:pdaURegEIP#		;Bump user EIP
6$:	CMPB	userdatsz#, #2		;16 bit operation?
	JE	10$.S			;Yes
	IFFAULT	pfpe#	
	MOVL	SS:pdaURegEAX#, EAX	;No - store long
	JMP	knlTrapDone#

	IFFAULT	pfpe#
10$:	MOVW	SS:pdaURegEAX#, AX	;Yes - store word
	JMP	knlTrapDone#		;Return to user

;Here on INSW/L instruction from protected user mode

pins:	UNIMOP	0EEh, 00h, 00h, 00h
.PAGE
;Dispatch table for INW/L instructions

	DATA

ioinwldsp:
	.LONG	piobad		;BAD =  4. - Invalid port
	.LONG	piobad		;IN1 =  8. - First interupt controller
	.LONG	piobad		;IN2 = 12. - Second interrupt controller
	.LONG	piobad		;DSP = 16. - Console display
	.LONG	piobad		;FLP = 20. - Floppy disk
	.LONG	piobad		;KEY = 24. - Keyboard
	.LONG	piobad		;CM1 = 28. - Serial port 1
	.LONG	piobad		;CM2 = 32. - Serial port 2
	.LONG	piobad		;PRT = 36. - Printer
	.LONG	piobad		;GAM = 40. - Game port
	.LONG	piobad		;CLK = 44. - Clock
	.LONG	piobad		;IGN = 48. - Port to ignore

	CODE
.PAGE
;Here on OUTB port instruction from protected user mode

	IFFAULT	pfpe#
poutpb:	MOVZBL	EDX, GS:1.B[ESI]	;Get port number
	MOVB	AL, SS:pdaURegEAX#+0	;Get data to output
	MOVZBL	EBX, ioporttbl[EDX]	;Get dispatch index
	CALLI	iooutbdsp[EBX]		;And dispatch to routine for device
	JC	pfpe#
	ADDL	SS:pdaURegEIP#, #2.B
	JMP	knlTrapDone#

;Here on OUTB [DX] instruction from protected user mode

poutdxb:MOVZWL	EDX, SS:pdaURegEDX#	;Get port number
	CMPL	EDX, #400h		;Is it one we know about?
	JB	2$.S			;Yes
	CLRL	EDX			;No
2$:	MOVB	AL, SS:pdaURegEAX#+0	;Get data to output
	MOVZBL	EBX, ioporttbl#[EDX]	;Get dispatch index
	CALLI	iooutbdsp[EBX]		;And dispatch to routine for device
	JC	pfpe#
	INCL	SS:pdaURegEIP#		;Bump user EIP
	JMP	knlTrapDone#

;Here on OUTSB instruction from protected user mode

poutsb:	UNIMOP	6Eh, 00h, 00h, 00h

;Dispatch table for OUTB instructions

	DATA

iooutbdsp:
	.LONG	piobad		;BAD =  4. - Invalid port
	.LONG	voutbint#	;IN1 =  8. - First interupt controller
	.LONG	piobad		;IN2 = 12. - Second interrupt controller
	.LONG	voutbdsp#	;DSP = 16. - Console display
	.LONG	piobad		;FLP = 20. - Floppy disk
	.LONG	voutbkey#	;KEY = 24. - Keyboard
	.LONG	voutbcom1#	;CM1 = 28. - Serial port 1
	.LONG	voutbcom2#	;CM2 = 32. - Serial port 2
	.LONG	piobad		;PRT = 36. - Printer
	.LONG	piobad		;GAM = 40. - Game port
	.LONG	voutbclk#	;CLK = 44. - Clock
	.LONG	piobad		;IGN = 48. - Port to ignore

	CODE
.PAGE
;Here on OUTW/L port instruction from protected user mode

	IFFAULT	pfpe#
poutp:	MOVZBL	EDX, GS:1.B[ESI]	;Get port number
	MOVB	AL, SS:pdaURegEAX#+0	;Get data to output
	MOVZBL	EBX, ioporttbl#[EDX]	;Get dispatch index
	CALLI	iooutwldsp[EBX]		;And dispatch to routine for device
	JC	pfpe#
	ADDL	SS:pdaURegEIP#, #2.B
	JMP	knlTrapDone#

;Here on OUTW/L [DX] instruction from protected user mode

poutdx:	MOVZWL	EDX, SS:pdaURegEDX#	;Get port number
	CMPL	EDX, #400h		;Is it one we know about?
	JB	2$.S			;Yes
	CLRL	EDX			;No
2$:	MOVB	AL, SS:pdaURegEAX#+0	;Get data to output
	MOVZBL	EBX, ioporttbl#[EDX]	;Get dispatch index
	CALLI	iooutwldsp[EBX]		;And dispatch to routine for device
	JC	pfpe#
	INCL	SS:pdaURegEIP#		;Bump user EIP
	JMP	knlTrapDone#

;Here on OUTSW/L instruction from protected user mode

pouts:	UNIMOP	6Fh, 00h, 00h, 00h

;Dispatch table for OUTW/L instructions

	DATA

iooutwldsp:
	.LONG	piobad		;BAD =  4. - Invalid port
	.LONG	piobad		;IN1 =  8. - First interupt controller
	.LONG	piobad		;IN2 = 12. - Second interrupt controller
	.LONG	piobad		;FLP = 16. - Floppy disk
	.LONG	piobad		;KEY = 20. - Keyboard
	.LONG	piobad		;CM1 = 24. - Serial port 1
	.LONG	piobad		;CM2 = 28. - Serial port 2
	.LONG	piobad		;PRT = 32. - Printer
	.LONG	piobad		;GAM = 36. - Game port
	.LONG	piobad		;CLK = 40. - Clock
	.LONG	piobad		;IGN = 44. - Port to ignore

	CODE
.PAGE
;Here on the extended instruction prefix (0F)

	IFFAULT	pfpe#
pxins:	MOVB	AL, GS:1.B[ESI]		;Get next byte
	CMPB	AL, #20h		;Is this a MOV xxx,CR0 instruction?
	JE	pxgcr0.S		;Yes
	CMPB	AL, #22h
	JE	pxscr0.S
2$:	JMP	pfpe#			;No - fail

	IFFAULT	pfpe#
pxgcr0:	MOVB	AL, GS:2.B[ESI]		;Maybe - get register byte
	TESTB	AL, #34h		;Is it really CR0?
	JNE	2$.S			;No - fail
	ANDL	EAX, #07h.B		;Yes - get his register number
	NEGL	EAX
	MOVL	EDX, CR0		;Get the CR0 value
	MOVL	SS:pdaURegEAX#[EAX*4], EDX ;Give it to him
	JMP	6$.S

	IFFAULT	pfpe#
pxscr0:	MOVB	AL, GS:2.B[ESI]
	TESTB	AL, #34h
	JNE	2$.S
	ANDL	EAX, #07h.B
	NEGL	EAX
	MOVL	EDX, CR0
	CMPL	SS:pdaURegEAX#[EAX*4], EDX
	JNE	2$.S
6$:	ADDL	SS:pdaURegEIP#, #3.B	;Bump user EIP
	JMP	knlTrapDone#

	END

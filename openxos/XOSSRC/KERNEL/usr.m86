	.TITLE	USR - XOS user mode kernel IO routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD	SVCDEF.INC

	DATA

userdata::
	.BLKL	8		;Stack for final process termination
killstack==!$-userdata-4
USERDSIZE==!$-userdata

	USERCODE
	.PSECT	usercoded_p, usercode_m

	.MACRO  SD pname, vname
	.NLIST
	.MOD	8
.IF B {pname}
	HLT
.IFF
	JMP	usvc'pname#
.ENDC
	.LIST
	.ENDM

	.MOD	8
usercode::
	SVCDEFUSER

	USERCODE
.PAGE
;The null process

nullproc::
	INCL	0
	JMP	nullproc.S	

;Routine used when initially creating a process

idleproc::
	CALLF	svcSchSleep#
	JMP	idleproc.S

;Routine to do final clean-up when terminating a process

killclean::
	PUSHL	#TC_EXIT<24t
	CALLF	svcSchExit#
	JMP	killclean.S

protnull32::
	CLC
	RETF

protnull16::
	CLC
	RETFW

ubdvalue::
	MOVL	EAX, #ER_VALUE
	STC
	RET

;Here when a protected mode SVC routine which was called from real mode
;  completes

uvsvcdone::
	RORL	EAX, #16t		;Put high 16 bits of EAX into DX
	MOVW	DX, AX			;  for real mode code which expects
	RORL	EAX, #16t		;  this
	CALLF	svcSchDismiss#		;Return to the caller

;Here to dismiss a hardware interrupt

usriret::
	CALLF	svcSchIRet

rawiret::
	IRET
.PAGE
	.SBTTL	Default user interrupt routines

;Following are the default interrupt routines.  The default vectors are
;  hardware vectors so programs which expect hardware vectors and "chain" to
;  the default routine will work right.  There is a separate routine for each
;  possible interrupt and exception (256 interrupts + 48 exceptions).  There
;  are separate tables for 16-bit and 32-bit clients!

;The 256 standard interrupts are all treated the same (with the exception of
;  INT 21, INT 2F, INT 31, and INT 33, which have their own handlers).  If the
;  process has a DOS environment, the interrupt is "reflected" to real mode if
;  the corresponding real mode vector is set up.  If there is no DOS environment
;  or if the real vector is not set up, the process is terminated with an
;  TC_NOVECT termination code.

	.MOD	4
pint16dft::
$$$=!0
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16a.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16a:JMP	cint16i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16b.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16b:JMP	cint16i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16c.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16c:JMP	cint16i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16d.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16d:JMP	cint16i

$$$=!0h
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16e.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16e:JMP	cint16h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16f.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16f:JMP	cint16h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16g.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16g:JMP	cint16h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint16h.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint16h:ADDB	[ESP], #80h
cint16i:MOVZWL	ESP, SP			;Make sure no junk in ESP
	SUBL	ESP, #6t.B		;Allocate more stack space
	PUSHL	EAX			;Save EAX
	MOVL	EAX, 10t.B[ESP]		;Move the interrupt number
	MOVL	4t.B[ESP], EAX
	MOVZWL	EAX, 14t.B[ESP]		;Move the IP value and extend it to 32
	MOVL	8t.B[ESP], EAX		;  bits
	MOVZWL	EAX, 16t.B[ESP]		;Move the CS value and clear the high
	MOVL	12t.B[ESP], EAX		;  half
	MOVZWL	EAX, 18t.B[ESP]		;Move the FR value and extend it to 32
	MOVL	16t.B[ESP], EAX		;  bits
	JMP	cintcom			;Continue with the 32-bit routine
.PAGE
	.MOD	4
pint32dft::
$$$=!0
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32a.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32a:JMP	cint32i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32b.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32b:JMP	cint32i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32c.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32c:JMP	cint32i
$$$=!$$$+1

	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32d.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32d:JMP	cint32i

$$$=!0h
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32e.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32e:JMP	cint32h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32f.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32f:JMP	cint32h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32g.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32g:JMP	cint32h

$$$=!$$$+1
	.MOD	4
	.REPT	31t
	PUSHL	#$$$.B
	JMP	cint32h.S
$$$=!$$$+1
	.ENDR
	PUSHL	#$$$.B
cint32h:ADDB	[ESP], #80h

;When get here we have the caller's stack (protected mode) in a standard
;  format as follows:
;	c{{ESP}+12} = Saved protected mode EFR
;	c{{ESP}+8}  = Saved protected mode CS
;	c{{ESP}+4}  = Saved protected mode EIP
;	c{{ESP}+0}  = Interrupt number

;We construct a real mode stack frame which is used to dismiss the real mode
;  interrupt.  This stack frame has the following format:
;	c[[SP]+10] = Saved protected mode interrupt SS
;	c{[SP]+6}  = Saved protected mode interrupt ESP
;	c[[SP]+4]  = Return FR
;	c[[SP]+2]  = Return CS
;	c[[SP]+0]  = Return IP

;We also construct a protected mode stack frame (after switching stacks if
;  necessary) as follows:
;	c{{ESP}+72} = Saved protected mode GS	;This is an interrupt return
;	c{{ESP}+68} = Saved protected mode FS	;  frame which is used to
;	c{{ESP}+64} = Saved protected mode DS	;  return to protected mode
;	c{{ESP}+60} = Saved protected mode ES	;  when the user's INT routine
;	c{{ESP}+56} = Saved protected mode SS	;  executes its IRET
;	c{{ESP}+52} = Saved protected mode ESP
;	c{{ESP}+48} = Saved protected mode EFR
;	c{{ESP}+44} = Saved protected mode CS
;	c{{ESP}+40} = Saved protected mode EIP
;	c{{ESP}+36} = Saved real mode SS:SP	;This is used to restore the
;						;  user's real mode SS:SP
;	c{{ESP}+32} = Real mode GS (= 0)	;This is an interrupt return
;	c{{ESP}+28} = Real mode FS (= 0)	;  frame which is used to
;	c{{ESP}+24} = Real mode DS (= 0)	;  initially switch to real
;	c{{ESP}+20} = Real mode ES (= 0)	;  mode
;	c{{ESP}+16} = Real mode SS
;	c{{ESP}+12} = Real mode SP
;	c{{ESP}+8}  = Real mode EFR
;	c{{ESP}+4}  = Real mode CS
;	c{{ESP}+0}  = Real mode IP

;The ESP value saved on the real mode stack points to the {ESP}+36 item above.

cint32i:PUSHL	EAX
cintcom:PUSHL	#24h.B			;Disable signals
	CALLF	svcSchSetLevel#
	SHRL	EAX, #1t
	NOTB	AL
	ANDB	AL, #02h
	ANDB	17t.B[ESP], #~02h	;Set the IE bit in his saved EFR
	ORB	17t.B[ESP], AL		;  to the correct value
	POPL	EAX
	PUSHL	GS
	PUSHL	#GS_REAL32|03h.B
	POPL	GS
	CMPB	GS:dda_dpmilckpsflg, #0	;Using locked stack now?
	JNE	4$.S			;Yes
	PUSHL	DS			;No
	PUSHL	EBX
	PUSHL	SS
	POPL	DS
	LEAL	EBX, 28t.B[ESP]
	MOVB	GS:dda_dpmilckpsflg, #1	;Indicate using interrupt stack
	LSSL	ESP, GS:dda_dpmilckpESP
	PUSHL	-20t.B[EBX]		;Save GS
	PUSHL	FS			;Save FS
	PUSHL	-24t.B[EBX]		;Save DS
	PUSHL	ES			;Save ES
	PUSHL	DS			;Save his stack pointer on our stack
	PUSHL	EBX
	PUSHL	-4t.B[EBX]		;Save his return EFR
	MOVB	3.B[ESP], #08h		;Indicate to clear dda_dpmilckpsflg
					;  when returning
	PUSHL	-8t.B[EBX]		;Save his return CS
	PUSHL	-12t.B[EBX]		;Save his return EIP
	SUBL	ESP, #40t.B		;Allocate space for the real mode stack
					;  pointer and the return frame used
					;  to switch to real mode
	PUSHL	EAX			;Save EAX
	MOVL	EAX, -16t.B[EBX]	;Get the interrupt number
	MOVL	EBX, -28t.B[EBX]	;Restore his EBX
	JMP	6$.S			;Continue

;Here to continue using the same stack

4$:	SUBL	ESP, #4t.B		;Allocate additional stack space
	PUSHL	20t.B[ESP]		;Move return EFR to the right place
	MOVB	3.B[ESP], #00h		;Indicate to not clear dda_dpmilckpsflg
					;  when returning
	PUSHL	20t.B[ESP]		;Move return CS to the right place
	PUSHL	20t.B[ESP]		;Move return EIP to the right place
	SUBL	ESP, #40t.B		;Allocate additional stack space
	PUSHL	EAX			;Save EAX
	MOVL	EAX, 60t.B[ESP]		;Move the saved GS value to the right
	MOVL	76t.B[ESP], EAX		;  place on the stack
	MOVL	EAX, 64t.B[ESP]		;Get interrupt number
	MOVL	72t.B[ESP], FS		;Save FS
	MOVL	68t.B[ESP], DS		;Save DS
	MOVL	64t.B[ESP], ES		;Save ES
	MOVL	60t.B[ESP], SS		;Save his original stack pointer
	MOVL	56t.B[ESP], ESP
	ADDL	56t.B[ESP], #80t.B
6$:	PUSHL	EDX			;Save another register
	SHLL	EAX, #2t
	CMPL	GS:[EAX], #0.B		;Has this real mode vector been set up?
	JNE	10$.S			;Yes
	MOVZWL	EAX, 4t.B[ESP]		;No - fail!
	MOVZWL	EDX, 6t.B[ESP]
	MOVZWL	ECX, 8t.B[ESP]
	MOVB	3.B[ESP], #TC_NOVECT	;Terminate the process
	PUSHL	#0.B			;Process number (this process)
	PUSHL	#0.B			;Memory address
	PUSHL	#0.B
	PUSHL	EDX			;CS:EIP value
	PUSHL	EAX
	PUSHL	ECX			;EFR value
	PUSHL	#0.B			;Data value
	CALLF	svcSchKillX#

;Here if have a real mode vector to use

10$:	MOVZWL	EDX, GS:[EAX]
	MOVL	8t.B[ESP], EDX		;Store CS:IP value
	MOVZWL	EDX, GS:2.B[EAX]
	MOVL	12t.B[ESP], EDX
	MOVL	EAX, 56t.B[ESP]		;Store EFR value for real mode
	BTSL	EAX, #17t
	MOVL	16t.B[ESP], EAX
	MOVL	EAX, GS:dda_dpmicurrSSSP ;Get his current real mode stack
					 ;  pointer
	MOVL	44t.B[ESP], EAX		;Save it
	CMPB	GS:dda_dpmilckrsflg, #0	;Using real mode locked stack now?
	JNE	12$.S			;Yes - continue using it
	MOVL	EAX, GS:dda_dpmilckrSSSP ;No - switch to the locked stack
	MOVL	GS:dda_dpmicurrSSSP, EAX
	MOVB	GS:dda_dpmilckrsflg, #1
	ORB	56t+3.B[ESP], #20h	;Indicate to clear dda_dpmilckrsflg
12$:	MOVL	EDX, EAX		;  when returning
	SHRL	EDX, #16t
	SUBL	EAX, #12t.B
	MOVZWL	EAX, AX
	MOVL	20t.B[ESP], EAX
	MOVL	24t.B[ESP], EDX
	SHLL	EDX, #4t
	ADDL	EDX, EAX			;Store CS:IP for the real to
	MOVL	GS:[EDX], #0ED000000h+rmpmiret# ;  protected mode return routine
	LEAL	EAX, 44t.B[ESP]		;Store protected mode stack pointer on
	MOVL	GS:6t.B[EDX], EAX	;  the real mode stack
	MOVW	GS:10t.B[EDX], SS
	CLRL	EAX
	MOVW	GS:4.B[EDX], AX		;Store FR
	MOVL	28t.B[ESP], EAX		;Store real mode segment register
	MOVL	32t.B[ESP], EAX		;  values (all 0)
	MOVL	36t.B[ESP], EAX
	MOVL	40t.B[ESP], EAX
	POPL	EDX			;Restore registers we used here
	POPL	EAX
	CALLF	svcSchIRet#		;Switch to real mode

	END

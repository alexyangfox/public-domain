	.TITLE	USRDOS4 - XOS user level DOS kernel routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR

	USERCODE

;The routines in this module implement various DOS INT 21 functions.  They
;  are executed in protected 32 bit user mode.

	.SBTTL	errtbl - System to DOS error code translation table

	.MACRO	E  error, class, action, locus
	.BYTE	DE_'error, DC_'class, DA_'action, DL_'locus
	.ENDM

DE_0=!0
DC_0=!0
DA_0=!0
DL_0=!0

SYSMAXERR==!-183t
 E LCKV , LOCKD, CLNUP, BLOCK	;ER_LOCK  = -183 File record lock violation
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NSLP  = -182 Not a session level process
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_INCMO = -181 Incomplete output operation
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_DOSPB = -180 Permanent DOS process is busy
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NTLCL = -179 Not local
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMDDV = -178 Too many device units for device
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMUDV = -177 Too many users for device
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMIOQ = -176 Too many IO requests queued
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_MPILK = -175 Memory page is locked
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMIOP = -174 Too many IO request pointers
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMIOM = -173 Too many IO requests for memory page
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILRF = -172 Cannot rename file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILXF = -171 Cannot extend file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILCF = -170 Cannot create file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILAF = -169 Cannot access file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ERROR = -168 Unspecified general error
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NTIMP = -167 Not implemented
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_00166 = -166 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_00165 = -165 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_00164 = -164 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ININU = -163 Interrupt number in use
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CDAND = -162 LKE common data area not defined
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CDAAD = -161 LKE comman data area already defined
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_LKEAL = -160 LKE already loaded
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IDREN = -159 Invalid directory rename
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IOSAT = -158 IO saturation
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_DTINT = -157 Data transfer interrupted
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IDEVC = -156 Incorrect device class
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NDOSD = -155 No DOS IO data block available
 E MCBD , OUTRS, CLNUP, UNKWN	;ER_DOSMC = -154 DOS memory allocation corrupted
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_LKEAL = -153 LKE already loaded
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IPFIL = -152 Illegal position in file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CANCL = -151 IO operation canceled
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ABORT = -150 IO operation aborted
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_DKRMV = -149 Disk removed
 E FAIL , OUTRS, CLNUP, UNKWN	;         = -148 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;         = -147 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CHNNA = -146 Channel not available
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NSTYP = -145 No such device type
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IMEMA = -144 Illegal memory address
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NOPAP = -143 Printer is out of paper
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NCOMP = -142 Not compatible
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ALDEF = -141 Already allocated
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NOMEM = -140 No memory allocated
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IDSPC = -139 Illegal destination file spec.
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IINUM = -138 Illegal interrupt number
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NMBTS = -137 Name buffer is too small
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMUDV = -136 Too many users for device
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ERROR = -135 Unspecified general error
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILRF = -134 Cannot rename file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILXF = -133 Cannot extend file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILCF = -132 Cannot create file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_FILAF = -131 Cannot access file
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_IDREN = -130 Invalid directory rename
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CDAND = -129 LKE common data area not def.
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CDAAD = -128 LKE common data area already
				;		   defined
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_XFRBK = -127 Data transfer blocked
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_INCMO = -126 Incomplete output operation
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_HSTNA = -125 Network host not available
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CLOST = -124 Network connection lost
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NTTIM = -123 Network time-out
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_BSBID = -122 No such network node
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NTRTE = -121 Network routing error
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NTCON = -120 Network congestion
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ILNAC = -119 Illegal network access
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_INCRQ = -118 Incompatible request
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ILRQF = -117 Illegal request format
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ILNAD = -116 Illegal network address
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_ILSOC = -115 Illegal socket number
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_SOCNI = -114 Socket or channel not idle
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_SOCNO = -113 Socket or channel not open
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NPARR = -112 Network protocol error
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMDVC = -111 Too many devices open for
				;		   device class
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_BFBSY = -110 Buffer IO already in use for
				;		   device
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_CLSAD = -109 Device class already defined
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NSCLS = -108 No such device class
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_DUADF = -107 Device unit already defined
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_PDADF = -106 Physical device not available
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_PDNAV = -105 Physical device not available
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_104   = -104 Reserved
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_TMPSS = -103 Too many processes in system
 E FAIL , HRDWR, CLNUP, UNKWN	;ER_TIMER = -102 Time-out
 E FAIL , INVTP, CLNUP, UNKWN	;ER_NTLNG = -101 Name is too long
 E FAIL , INVTP, CLNUP, UNKWN	;ER_WLDNA = -100 Wild card name not allowed
 E FAIL , INVTP, CLNUP, UNKWN	;ER_BDLNM = -99  Bad logical name
 E FAIL , INVTP, CLNUP, UNKWN	;ER_NTDEF = -98  Not defined
 E FAIL , INVTP, CLNUP, UNKWN	;ER_FSINC = -97  File system is inconsistant
 E FAIL , INVTP, CLNUP, UNKWN	;	  = -96  Reserved
 E FAIL , INVTP, CLNUP, UNKWN	;	  = -95  Reserved
 E FAIL , INVTP, CLNUP, UNKWN	;ER_IATTR = -94  Illegal file attribute change
 E DSKI , APPLI, CLNUP, UNKWN	;ER_NTFIL = -93  Not file structured
 E DATER, HRDWR, CLNUP, UNKWN	;ER_DRWER = -92  Directory write error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_DRRER = -91  Directory read error
 E FMTI , INVTP, CLNUP, BLOCK	;ER_DRFER = -90  Directory format error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_SBWER = -89  SAT write error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_SBRER = -88  SAT read error
 E FMTI , INVTP, CLNUP, UNKWN	;ER_SBFER = -87  SAT format error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_HMRER = -86  HOM read error
 E FMTI , INVTP, CLNUP, UNKWN	;ER_HMFER = -85  HOM format error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_FBWER = -84  FIB write error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_FBRER = -83  FIB read error
 E FMTI , INVTP, CLNUP, UNKWN	;ER_FBPER = -82  FIB pointer error
 E FMTI , INVTP, CLNUP, UNKWN	;ER_FBFER = -81  FIB format error
 E LCKV , TEMP , CLNUP, UNKWN	;ER_DLOCK = -80  Deadlock error
 E DATI , APPLI, CLNUP, UNKWN	;ER_BPIPE = -79  Pipe error
 E FINV , APPLI, CLNUP, UNKWN	;ER_ILSEK = -78  Illegal seek function
 E FAIL , INVTP, CLNUP, UNKWN	;ER_NTTRM = -77  Device not a terminal
 E FAIL , INVTP, CLNUP, UNKWN	;ER_ISDIR = -76  File is a directory
 E PNF  , INVTP, CLNUP, UNKWN	;ER_NTDIR = -75  File not a directory
 E FAIL , TEMP , CLNUP, UNKWN	;ER_NTRDY = -74  Device not ready
 E FMTI , INVTP, CLNUP, UNKWN	;ER_FMTER = -73  Format error
 E FAIL , APPLI, CLNUP, UNKWN	;ER_NACT  = -72  Device not active
 E DATI , INVTP, CLNUP, UNKWN	;ER_RTOBG = -71  Record too big
 E DSKCI, INVTP, INTRV, UNKWN	;ER_DKCHG = -70  Disk changed
 E FAIL , APPLI, CLNUP, UNKWN	;ER_IADEV = -69  Illegal address for device
 E FAIL , APPLI, CLNUP, UNKWN	;ER_ICDEV = -68  Illegal count for device
 E FINV , APPLI, CLNUP, UNKWN	;ER_IFDEV = -67  Illegal function for device
 E FMTI , INVTP, CLNUP, UNKWN	;ER_NOSTK = -66  No stack specified in image
				;		   file
 E FMTI , INVTP, CLNUP, UNKWN	;ER_NOSAD = -65  No starting address specified
				;		   in image file
 E FMTI , INVTP, CLNUP, UNKWN	;ER_RELTR = -64  Reloc. truncation in image file
 E FMTI , INVTP, CLNUP, UNKWN	;ER_IRFRD = -63  Illegal relocation data
 E FMTI , INVTP, CLNUP, UNKWN	;ER_IRFF  = -62  Illegal RUN file format
 E FMTI , INVTP, CLNUP, UNKWN	;ER_IRFT  = -61  Illegal RUN file type
 E FAIL , APPLI, CLNUP, UNKWN	;ER_ADRER = -60  Address error
 E RDFLT, APPLI, CLNUP, UNKWN	;ER_NOIN  = -59  Input to output only device
 E WRFLT, APPLI, CLNUP, UNKWN	;ER_NOOUT = -58  Output to input only device
 E HNDLI, APPLI, CLNUP, UNKWN	;ER_BDDVH = -57  Bad device handle
 E DATI , APPLI, CLNUP, UNKWN	;ER_BDDBK = -56  Bad disk block no.
 E FAIL , HRDWR, CLNUP, UNKWN	;ER_NORSP = -55  Device time-out
 E FAIL , APPLI, CLNUP, UNKWN	;ER_DATTR = -54  Data truncated
 E DATER, HRDWR, CLNUP, UNKWN	;ER_DEVER = -53  Device error
 E WRTPR, HRDWR, INTRV, UNKWN	;ER_WPRER = -52  Write protect error
 E WRFLT, HRDWR, CLNUP, UNKWN	;ER_WRTER = -51  Write fault error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_LSTER = -50  Lost data error
 E SCTNF, HRDWR, CLNUP, BLOCK	;ER_RNFER = -49  Record not found
 E SEKER, HRDWR, CLNUP, BLOCK	;ER_SEKER = -48  Seek error
 E DATER, HRDWR, CLNUP, BLOCK	;ER_IDFER = -47  ID field error
 E DATER, HRDWR, CLNUP, UNKWN	;ER_DATER = -46  Data error
 E PNF  , OUTRS, CLNUP, BLOCK	;ER_DIRTD = -45  Directory level too deep
 E ARCD , APPLI, CLNUP, BLOCK	;ER_DIRNE = -44  Directory not empty
 E NOMRF, OUTRS, CLNUP, BLOCK	;ER_DIRFL = -43  Directory full
 E PNF  , NTFND, GTCOR, BLOCK	;ER_DIRNF = -42  Directory not found
 E ACCD , AUTHR, GTCOR, BLOCK	;ER_FILAD = -41  File access denied
 E SHRV , APPLI, GTCOR, BLOCK	;ER_BUSY  = -40  File or device busy
 E FILEX, APPLI, GTCOR, BLOCK	;ER_FILEX = -39  File exists
 E FNF  , NTFND, GTCOR, BLOCK	;ER_FILNF = -38  File not found
 E NTSMD, OUTRS, CLNUP, UNKWN	;ER_DFDEV = -37  Different device
 E TMOF , OUTRS, CLNUP, UNKWN	;ER_TMDVP = -36  Too many devices for process
 E FAIL , OUTRS, CLNUP, BLOCK	;ER_DEVFL = -35  Device is full
 E FAIL , APPLI, CLNUP, UNKWN	;ER_DEVNA = -34  Device not assigned
 E FAIL , APPLI, CLNUP, UNKWN	;ER_DEVNO = -33  Device not open
 E FAIL , APPLI, CLNUP, UNKWN	;ER_DEVIO = -32  Device is open
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_DEVIU = -31  Device in use
 E DSKI , APPLI, CLNUP, UNKWN	;ER_NSDEV = -30  No such device
 E FAIL , APPLI, CLNUP, UNKWN	;ER_BDSPC = -29  Bad device/file specification
 E FAIL , TEMP , CLNUP, UNKWN	;ER_ACT   = -28  Device is active
 E INSFM, OUTRS, CLNUP, UNKWN	;ER_NOBUF = -27  No buffer available
 E INSFM, OUTRS, CLNUP, UNKWN	;ER_NOQEL = -26  No queue element available
 E MCBD , SFTWR, CLNUP, MEM  	;ER_MAERR = -25  Memory allocation error
 E MBAI , APPLI, CLNUP, MEM  	;ER_MACFT = -24  Memory allocation conflict
 E INSFM, OUTRS, CLNUP, MEM  	;ER_NEMA  = -23  Not enough memory available
 E FAIL , OUTRS, CLNUP, UNKWN	;ER_NSGA  = -22  No segment available
 E ACCD , AUTHR, CLNUP, BLOCK	;ER_PRIV  = -21  Not enough privilege
 E FAIL , APPLI, CLNUP, UNKWN	;ER_NSP   = -20  No such process
 E FAIL , APPLI, CLNUP, UNKWN	;ER_BDPID = -19  Bad process ID
 E FAIL , APPLI, CLNUP, UNKWN	;ER_BDNAM = -18  Bad process name
 E FINV , APPLI, CLNUP, UNKWN	;ER_CHARM = -17  Required characteristic missing
 E FINV , APPLI, CLNUP, UNKWN	;ER_CHARA = -16  Illegal characteristic function
 E FINV , APPLI, CLNUP, UNKWN	;ER_CHART = -15  Illegal characteristic type  
 E FINV , APPLI, CLNUP, UNKWN	;ER_CHARS = -14  Illegal characteristic value
				;		   size
 E FAIL , APPLI, CLNUP, UNKWN	;ER_CHARV = -13  Illegal characteristic value
 E FAIL , APPLI, CLNUP, UNKWN	;ER_CHARN = -12  Illegal characteristic index
 E FINV , APPLI, CLNUP, UNKWN	;ER_PARMM = -11  Required parameter missing
 E FINV , APPLI, CLNUP, UNKWN	;ER_PARMF = -10  Illegal parameter function
 E FINV , APPLI, CLNUP, UNKWN	;ER_PARMT = -9   Illegal parameter type  
 E FINV , APPLI, CLNUP, UNKWN	;ER_PARMS = -8   Illegal parameter value size
 E FAIL , APPLI, CLNUP, UNKWN	;ER_PARMV = -7   Illegal parameter value
 E FAIL , APPLI, CLNUP, UNKWN	;ER_PARMI = -6   Illegal parameter index
 E FINV , APPLI, CLNUP, UNKWN	;ER_VALUE = -5   Illegal value
 E FINV , APPLI, CLNUP, UNKWN	;ER_FUNCM = -4   Illegal function for current
				;		   mode
 E FINV , APPLI, CLNUP, UNKWN	;ER_FUNC  = -3   Illegal function
 E FINV , APPLI, CLNUP, UNKWN	;ER_SVC   = -2   Illegal SVC
 E DATI , NTFND, CLNUP, BLOCK	;ER_EOF   = -1   End of file
knlDosErrTbl::
 E 0    , 0    , 0    , 0	;ER_NOERR =  0   Normal return
	.LONG	SYSMAXERR
.PAGE
	.SBTTL	getDSESIaddr - Subroutine to get address from user's DS:(E)SI

;Subroutine to get address from the user's DS:(E)SI registers
;	CALL	getDSESIaddr
;	c{FS:ESI} = Address
;  All other registers are preserved

getDSESIaddr::
	PUSHL	EAX
	TESTB	dff_EFR+2.B[EBP], #02	;Real mode call?
	JE	2$.S			;No
	MOVZWL	ESI, dff_ESI.B[EBP]	;Yes - have real mode address
	JMP	4$.S

;Here if have a protected mode address

2$:	MOVL	ESI, dff_ESI.B[EBP]	;Get offset
	JMP	8$.S

	.SBTTL	getDSEDXaddr - Subroutine to get address from user's DS:(E)DX

;Subroutine to get address from the user's DS:(E)DX registers
;	CALL	getDSEDXaddr
;	c{FS:ESI} = Address
;  All other registers are preserved

getDSEDXaddr::
	PUSHL	EAX
	TESTB	dff_EFR+2.B[EBP], #02h	;Real mode call?
	JE	6$.S			;No
	CMPB	dda_protaddr, #0	;Yes - have protected address anyway?
	JNE	6$.S			;Yes
	MOVZWL	ESI, dff_EDX.B[EBP]	;No - have real mode address
4$:	MOVZWL	EAX, dff_DS.B[EBP]	;Get offset in the real mode segment
	SHLL	EAX, #4
	ADDL	ESI, EAX
	POPL	EAX
	PUSHL	DS			;Use our selector
	POPL	FS
	RET

;Here if have a protected mode address

6$:	MOVL	ESI, dff_EDX.B[EBP]	;Get offset
8$:	MOVL	FS, dff_DS.B[EBP]	;Get the selector
	JMP	18$.S

	.SBTTL	getESEDIaddr - Subroutine to get address from user's ES:(E)DI

;Subroutine to get address from the user's ES:(E)DI registers
;	CALL	getESEDIaddr
;	c{FS:ESI} = Address
;  All other registers are preserved

getESEDIaddr::
	PUSHL	EAX
	TESTB	dff_EFR+2.B[EBP], #02h	;Real mode call?
	JE	10$.S			;No
	MOVZWL	ESI, dff_EDI.B[EBP]	;Yes
	JMP	12$.S

;Here if have a protected mode address

10$:	MOVL	ESI, dff_EDI.B[EBP]	;Get offset
	JMP	16$.S

	.SBTTL	getESEBXaddr - Subroutine to get address from user's ES:(E)BX

;Subroutine to get address from the user's ES:(E)BX registers
;	CALL	getESEBXaddr
;	c{FS:ESI} = Address
;  All other registers are preserved

getESEBXaddr::
	PUSHL	EAX
	TESTB	dff_EFR+2.B[EBP], #02h	;Real mode call?
	JE	14$.S			;No
	CMPB	dda_protaddr, #0	;Yes - have protected address anyway?
	JNE	14$.S			;Yes
	MOVZWL	ESI, dff_EBX.B[EBP]	;No - have real mode address
12$:	MOVZWL	EAX, dff_ES.B[EBP]	;Get offset in the real mode segment
	SHLL	EAX, #4
	ADDL	ESI, EAX
	POPL	EAX
	PUSHL	DS			;Use our selector
	POPL	FS
	RET

;Here if have a protected mode address

14$:	MOVL	ESI, dff_EBX.B[EBP]	;Get offset
16$:	MOVL	FS, dff_ES.B[EBP]	;Get the selector
18$:	CMPB	dda_dpmitype, #DPMIT_32B ;Have a 32-bit client?
	JE	20$.S			;Yes
	MOVZWL	ESI, SI			;No - just use 16 bits
20$:	POPL	EAX
	RET
.PAGE
	.SBTTL	ugetdiob - Subroutine to allocate a DIOB

;Subroutine to allocate a DIOB
;	CALL	ugetdiob
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EDI} = Offset of DIOB

ugetdiob::
	PUSHL	EAX
	MOVL	EDI, dxd_diobfree	;Get a free DIOB
	TESTL	EDI, EDI
	JE	2$.S			;If none free now
	MOVL	EAX, [EDI]		;Remove it from the free list
	MOVL	dxd_diobfree, EAX
	JMP	6$.S

;Here if free list is empty

2$:	MOVL	EDI, dxd_free		;Get offset for a new one
	LEAL	EAX, diob_SIZE[EDI]
	XORL	EAX, EDI
	TESTL	EAX, #0FFFFF000h	;Do we need another page?
	JE	4$.S			;No - go on
	PUSHL	#0FFF8h			;Yes - allocate another page
	PUSHL	#dxd_base
	PUSHL	#PG$READ|PG$WRITE
	LEAL	EAX, diob_SIZE-dxd_base[EDI]
	PUSHL	EAX
	CALLF	svcMemChange#
	TESTL	EAX, EAX
	JS	10$.S			;If can't get another page
4$:	ADDL	dxd_free, #diob_SIZE	;OK - reserve the space
6$:	INCL	dxd_diobnum
	MOVL	EAX, dxd_diobnum
	CMPL	dxd_diobmax, EAX
	JA	8$.S
	MOVL	dxd_diobmax, EAX
8$:	POPL	EAX
	CLC
	RET

;Here if cannot allocate more memory

10$:	POPL	EAX
	MOVL	EAX, #ER_NDOSD
	RET
.PAGE
	.SBTTL	givediob - Subroutine to give up a DIOB

;Subroutine to give up a DIOB
;	c{EDI} = Offset of the DIOB
;	CALL	givediob

ugivediob::
	PUSHL	dxd_diobfree
	POPL	[EDI]
	MOVL	dxd_diobfree, EDI
	DECL	dxd_diobnum
	RET
.PAGE
	.SBTTL	ugetsyshandle - Subroutine to get system handle given handle for DOS call

;Subroutine to get system handle given DOS handle for DOS call
;	c[{ESP}+dff_EBX] = DOS handle
;	CALL	ugetsyshandle
;	C:set = Error
;	  c{EAX} = Error code
;	  c{EDI} = Offset of DOS handle table entry (if error due to handle
;		     in use)
;	C:clr = Normal
;	  c{EAX} = System device handle
;	  c{EBX} = DOS device handle
;	  c{EDI} = Offset of DOS handle table entry
;  All other registers are preserved

$$$=!0
FRM ugxh_qab, qab_SIZE
ugxh_SIZE=!$$$

ugetsyshandle::
	MOVZWL	EBX, dff_EBX.B[EBP]
ugetsyshndl2::
	MOVL	EDI, dda_curpsp		;Point to current PSP
	SHLL	EDI, #4
	CMPW	psp_hcnt.B[EDI], BX	;Valid device handle?
	JBE	4$.S			;No - fail
ugetsyshndl4::
	MOVZWL	EAX, psp_hpnt+2.B[EDI]	;Get offset of DOS handle table
	SHLL	EAX, #4
	MOVZWL	EDI, psp_hpnt+0.B[EDI]
	ADDL	EDI, EAX
	ADDL	EDI, EBX
	MOVZBL	EAX, [EDI]		;Get system handle from the DOS table
	CMPB	AL, #0FEh		;Is it in use?
	JAE	2$.S			;No
	CLC
	RET

;Here if DOS handle is not in use

2$:	CMPL	EBX, #3.B		;Is this for PRN or AUX?
	JB	4$.S			;No
	CMPL	EBX, #4.B		;Maybe
	JBE	6$.S			;Yes
4$:	MOVL	EAX, #ER_BDDVH
	STC
	RET

;Here if have PRN or AUX

6$:	ENTER	ugxh_SIZE, 0		;Yes - set up our stack frame
	MOVL	EAX, #prnname		;Assume 4 (PRN)
	PUSHL	#O$USEDOS|O$OUT
	JE	8$.S
	MOVL	EAX, #auxname
	MOVB	[ESP], #O$OUT|O$IN
8$:	POPL	ugxh_qab+qab_option.B[EBP]
	MOVW	ugxh_qab+qab_func.B[EBP], #QFNC$WAIT|QFNC$DIO|QFNC_OPEN
	MOVL	ugxh_qab+qab_buffer1+0.B[EBP], EAX
	MOVL	ugxh_qab+qab_buffer1+4.B[EBP], CS
	CLRL	EAX
	MOVL	ugxh_qab+qab_parm+0.B[EBP], EAX
	MOVW	ugxh_qab+qab_vector.B[EBP], AX
	PUSHL	SS
	LEAL	EAX, ugxh_qab.B[EBP]	;Open the device
	PUSHL	EAX
	CALLF	svcIoQueue#
	TESTL	EAX, EAX		;OK?
	JS	10$.S			;No - fail
	ORL	EAX, ugxh_qab+qab_error.B[EBP] ;Maybe
	JS	10$.S			;No - fail
	MOVL	EAX, ugxh_qab+qab_handle.B[EBP] ;OK - get system handle
	MOVB	[EDI], AL		;Store system handle in the DOS handle
	LEAVE				;  table
	RET

10$:	LEAVE
	STC
	RET

;Enter here to reopen the PRN or AUX device after a close time-out
;	c{EAX} = System device handle
;	c{EBX} = DOS handle
;	c{EDI} = Offset of DOS handle table entry
;	CALL	ureopen
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal

ureopen::
	CMPL	EBX, #3.B		;Is this for PRN or AUX?
	JB	2$.S			;No
	CMPL	EBX, #4.B		;Maybe
	JA	2$.S			;No - go fail
	ENTER	ugxh_SIZE, 0		;Yes - set up our stack frame
	MOVL	ugxh_qab+qab_handle.B[EBP], EAX ;Store system handle to use
	MOVL	EAX, #prnname		;Assume 4 (PRN)
	PUSHL	#O$USEDOS|O$FHANDLE|O$OUT
	JE	8$.S
	MOVL	EAX, #auxname
	MOVB	[ESP], #O$OUT|O$IN
	JMP	8$.S

prnname:.ASCIZ	"PRN:"
auxname:.ASCIZ	"AUX:"
.PAGE
	.SBTTL	ualocdoshandle - Subroutine to allocate DOS device handle

;Subroutine to allocate DOS device handle
;	CALL	ualocdoshandle
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Nornal
;	  c{EDX} = DOS handle allocated
;	  c{EDI} = Offset of entry in DOS handle table for handle allocated

ualocdoshandle::
	MOVL	EDX, dda_curpsp		;Get address of current PSP
	SHLL	EDX, #4
	MOVZWL	ECX, psp_hcnt.B[EDX]	;Get size of DOS handle table
	MOVZWL	EBX, psp_hpnt+2.B[EDX]	;Get address of DOS handle table
	SHLL	EBX, #4
	MOVZWL	EDI, psp_hpnt+0.B[EDX]
	ADDL	EDI, EBX
	PUSHL	DS
	POPL	ES
	MOVL	EDX, EDI
	MOVB	AL, #0FFh
	RNSCASB	[EDI]			;Search for available entry
	JNE	4$.S			;If none found
	DECL	EDI			;Found one - adjust pointer
	SUBL	EDX, EDI		;Calculate handle
	NEGL	EDX
	CLC
	RET

;Here if no available handle found

4$:	MOVL	EAX, #ER_TMDVP
	STC
	RET
.PAGE
	.SBTTL	dosparse - Subroutine to convert string to FCB format

;Subroutine to convert string to FCB format
;	c(BL)     = Option bits:
;		      08 = Do not initialize extension field if set
;		      04 = Do not initialize name field if set
;		      02 = Do not initialize drive field if set
;		      01 = Skip leading separators if set
;	c{FS:ESI} = Address of string
;	c{GS:EDX} = Address of FCB
;	CALL	dosparse
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c(CH)  = 0 if no wildcard characters, 1 if 1 or more wildcard
;		     characters
;	  c{ESI} = Updated string offset

BH$DONE =!80h		;Finished with name
BH$IGN  =!40h		;Ignore rest of field
BH$HVEXT=!08h		;Have extension
BH$HVNAM=!04h		;Have file name
BH$HVDEV=!02h		;Have device name

$$$=!0
FRM dp_name    , 12t		;Buffer for name
FRM dp_parmlist, 28t		;Parameter list
FRM dp_devspec , 12t		;Returned device specification
dp_SIZE=!$$$

dosparse::
	ENTER	dp_SIZE, 0
	TESTB	BL, #02h		;Should we clear the drive field?
	JNE	2$.S			;No
	MOVB	GS:[EDX], #0		;Yes
2$:	MOVL	EAX, #'    '
	TESTB	BL, #04h		;Should we clear the file name field?
	JNE	4$.S			;No
	MOVL	GS:1.B[EDX], EAX	;Yes
	MOVL	GS:5.B[EDX], EAX
4$:	TESTB	BL, #08h		;Should we clear the extension field?
	JNE	6$.S			;No
	MOVW	GS:9.B[EDX], AX		;Yes
	MOVB	GS:11t.B[EDX], AL
6$:	MOVB	BH, #0
	MOVB	CH, #0
	TESTB	BL, #01h		;Want to skip initial separators?
	JE	10$.S			;No
8$:	LODSB	FS:[ESI]		;Yes - get character
	PUSHL	ECX
	MOVL	ECX, #SEPSIZE
	PUSHL	CS
	POPL	ES
	MOVL	EDI, #septbl		;Point to separator table	
	CLD
	RNSCASB	[EDI]			;See if this is a spearator
	POPL	ECX
	JE	8$.S			;Yes - continue
	DECL	ESI			;No
10$:	MOVB	CL, #8			;Allow up to 8 characters
	LEAL	EDI, dp_name.B[EBP]	;Point to name buffer
	MOVL	EAX, #'    '		;Clear it to spaces
	MOVL	dp_name+0.B[EBP], EAX
	MOVL	dp_name+4.B[EBP], EAX
12$:	LODSB	FS:[ESI]		;Get character
	CMPB	AL, #':'		;End of device name?
	JE	20$.S			;Yes
	CMPB	AL, #'.'		;No - end of file name?
	JE	30$			;Yes
	CMPB	AL, #' '		;No - see if terminator
	JBE	28$			;Yes
	PUSHL	ECX			;Maybe
	MOVL	ECX, #TRMSIZE
	PUSHL	CS
	POPL	ES
	PUSHL	EDI
	MOVL	EDI, #trmtbl
	CLD
	RNSCASB	[EDI]
	POPL	EDI
	POPL	ECX
	JE	28$			;Yes - end of name or extension
	DECB	CL			;No - room for another character?
	JS	40$			;No - error
	TESTB	BH, #BH$IGN		;Should we ignore this?
	JNE	12$.S			;Yes
	CMPB	AL, #'*'		;No - complex wild character?
	JE	16$.S			;Yes
	CMPB	AL, #'?'		;Simple wild character?
	JNE	14$.S			;No
	MOVB	CH, #1			;Yes
14$:	MOVB	SS:[EDI], AL		;Store character in name
	INCL	EDI			;Bump pointer
	JMP	12$.S			;Continue

;Here with * character

16$:	ORB	BH, #BH$IGN		;Indicate should ignore everything else
	PUSHL	ECX
18$:	MOVB	SS:[EDI], #'?'		;Fill out the field with ?
	INCL	EDI
	DECB	CL
	JNS	18$.S
	POPL	ECX
	JMP	12$.S

;Here if end of device name

20$:	TESTB	BH, #BH$HVDEV		;Already have a device name?
	JNE	40$			;Yes - error
	ORB	BH, #BH$HVDEV		;No - indicate have device name now
	MOVB	SS:[EDI], AL		;Store colon after device
	MOVB	SS:1.B[EDI], #0		;Terminate it with a null
	MOVL	dp_parmlist+0.B[EBP], #PAR$SET|REP_HEXV|{4<8t}|{IOPAR_FILOPTN<16t}
	MOVL	dp_parmlist+4.B[EBP], #FO$DOSNAME
	MOVL	dp_parmlist+8.B[EBP], #PAR$GET|REP_STR|{IOPAR_FILSPEC<16t}
	LEAL	EAX, dp_devspec.B[EBP]
	MOVL	dp_parmlist+12t.B[EBP], EAX
	MOVL	dp_parmlist+16t.B[EBP], SS
	MOVL	dp_parmlist+20t.B[EBP], #0C000Ch
	MOVB	dp_parmlist+24t.B[EBP], #0
	PUSHL	#O$PHYS|O$NOMOUNT
	PUSHL	SS
	LEAL	EAX, dp_name.B[EBP]
	PUSHL	EAX
	PUSHL	SS
	LEAL	EAX, dp_parmlist.B[EBP]
	PUSHL	EAX
	CALLF	svcIoDevParm#
	TESTL	EAX, EAX
	JS	42$.S
	CMPB	dp_devspec+0.B[EBP], #FS_DOSNAME ;Did we get a DOS name?
	JE	22$.S			;Yes
	MOVB	AL, #0FFh		;No - store 0FF as device index!
	JMP	24$.S

22$:	MOVB	AL, dp_devspec+1.B[EBP]	;Yes - get device name
	SUBB	AL, #'A'-1		;Change to disk index
24$:	MOVB	GS:[EDX], AL		;Store in FCB
26$:	JMP	10$			;Continue

;Here if end of specification

28$:	ORB	BH, #BH$DONE		;Indicate at end
	TESTB	BH, #BH$HVNAM		;Already have a name?
	JE	32$.S			;No - this is really the name
	CMPL	ECX, #5			;Yes - too long for extension?
	JB	40$			;Yes - error
	ORB	BH, #BH$HVEXT		;No
	MOVL	EAX, dp_name.B[EBP]	;Get extension
	MOVW	GS:9.B[EDX], AX		;Store in FCB
	SHRL	EAX, #16t
	MOVB	GS:11t.B[EDX], AL
	JMP	34$.S			;Go finish up

;Here on end of name

30$:	TESTB	BH, #BH$HVNAM		;Already have a name?
	JNE	40$			;Yes - fail
	ANDB	BH, #~BH$IGN		;No - accept character now
32$:	ORB	BH, #BH$HVNAM		;Have name now
	MOVL	EAX, dp_name+0.B[EBP]	;Store name in FCB
	MOVL	GS:1.B[EDX], EAX
	MOVL	EAX, dp_name+4.B[EBP]
	MOVL	GS:5.B[EDX], EAX
	TESTB	BH, #BH$DONE		;Completely finished?
	JE	26$.S			;No
34$:	LEAVE				;Yes
	DECL	ESI			;Point to first character after name
	RET				;Return

;Here if bad file name

40$:	MOVL	EAX, #ER_BDSPC
42$:	LEAVE
	STC
	RET

septbl:	.ASCII	":.;,=+ "{HT}		;Separator character table
trmtbl:	.ASCII	.<>|/[]".{0}		;Terminator character table
TRMSIZE=!$-trmtbl
SEPSIZE=!$-septbl

	END

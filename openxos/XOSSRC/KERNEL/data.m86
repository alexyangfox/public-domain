	.TITLE	DATA - XOS common data

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR
	.INCLUD	SVCDEF.INC

.IF NDF $$GECKOB
  $$GECKOB =!0t		;Set non-zero if linking GECKOB
.ENDC

XOSMAJV=!3t		;XOS major version number
XOSMINV=!1t		;XOS minor version number
XOSEDIT=!69t		;XOS edit number

;NOTE: All previous history comments moved to the file HISTORY.M86 to reduce
;	 size of this file!

;3.0.0
;	First XOS version
;3.0.1 - 10-Nov-97
;	Expanded XFFs to 8K (to make room for long filename buffers!)
;3.0.2 - 17-Nov-97
;	Several fixes to DFSCLS to fix problems with FAT32 changes, initial
;	changes to support long DOS filenames.
;3.0.3 - 17-Nov-97
;	More changes for long DOS filesnames in DFSCLS.LKE
;3.0.4 - 26-Dec-97
;	Several fixes in DFSCLS.LKE for FAT32 support.  This is a more or
;	less final version for FAT32 except bootstrap not finished.
;3.1.0
;3.1.1 - 2-Mar-98
;	Fixed problem in knlLinkDcb - debug check for valid secondary unit
;	numbers failed for spooled devices.
;3.1.2 - 5-Mar-98
;	Changed the memory debug functions to actually do the requested size
;	memory access (instead of n byte accesses), added write word and
;	write byte functions.
;3.1.3 - 6-Mar-98
;	Added svcMemDebug function 8 (get physical memory address).
;3.1.4 - 9-Jul-98
;	Added routines to define and access system strings.
;3.1.5 - 18-Jul-98
;	Added knlGiveIRq function to give up an interrupt vector.
;3.1.6 - 17-Aug-98
;	Implemented the IOPAR_TRMDDISPAGE IO parameter for terminals.
;3.1.7 - 17-Aug-98
;	Y2K fix!!! Was not handing century wrap-around right with RTC.
;3.1.8 - 17-Aug-98
;	Fixed problem with handling errors in devchar functions.
;3.1.9 - 23-Aug-98
;	Added REBOOT syschar.
;3.1.10 - 25-Aug-98
;	Fixed bug in svcMemConvShr routine - was not setting msect size
;	correctly.
;3.1.11 - 3-Sep-98
;	Fixed bug interduced by 3.1.10 which caused crash if shared section
;	was above all private msects.
;3.1.12 - 8-Sep-98
;	Changed DHDB offsets (Required that everything be rebuilt!).
;3.1.15 - 12-Oct-98
;	Added version to support booting with T6963C LCD display instead of
;	a VGA (XOSLCD), changed names of the once-only modules.
;3.1.16 - 17-Oct-98
;	Added code to ONCEREAL to handle initial NMIs.
;3.1.17 - 11-Dec-98
;	Added code to clear system state when doing debug terminal input;
;	changed TRMCLS2 to not add ALT bit (bit 7) to non-ASCII characters.
;3.1.18 - 7-Jan-99
;	Changed knlWildCmp8 and knlWildCmp16 to do both mixed and exact
;	case compares.
;3.1.19 - 14-Jan-99
;	Expanded value of PAR_DIRPOS to 8 bytes to support position cookie
;	for Joliet CDs.
;3.1.20 - 17-Jan-99
;	Added (actually put back) tf_mapphys terminal device function which
;	was needed by PCNCLS.
;3.1.21 - 7-Feb-99
;	Major rewrite of the screen switching routines.
;3.1.22 - 23-Feb-99
;	Finished rewrite of screen switching routines; Updated PCNCLS to match;
;	Changed file searches so DOS handle calls check both DOS and long
;	names.
;3.1.23 - 25-Feb-99
;	Fixed some problems with screen switching and font loading;
;3.1.24 - 18-Mar-99
;	Removed svcIoDstName system call; Rewrote rename logic in DFSCLS
;	(removed support for repeat and wild cards, fixed several problems
;	with rename introduced when long filename support was added).
;3.1.25 - 23-Mar-99
;	Added support for 2nd FAT in DFSCLS; Fixed some potential race problems
;	with writing out FAT blocks in DFSCLS; Fixed problem with deleting very
;	long files (3 or more FIBs) in DFSCLS.
;3.1.26 - 25-Mar-99
;	Fixed typo in VGAADRV which caused crash when doing display output with
;	system menu displayed; Fixed problem in TRMCLS which caused hang when
;	pausing display output in some cases; Expanded process name to 32
;	characters (was 12); Added support for ATAPI disks (does not yet work
;	with CDROMs).
;3.1.27 - 18-Apr-99
;	Changed TRMCLS to ignore all but CR from idle terminals, removed
;	support for auto-baud detect; Added support for ATAPI CDROMs.
;3.1.28 - 25-Jun-99
;	Changed to allow user mode access to any IO port; various bug fixes.
;3.1.29 - 1-Aug-99
;	Changed NULL device (NULLCLS.M86) to process basic IO parameters (This
;	fixed a problem with COPY); Fixed serveral "pdaLdtPnt" problems
;	introduced by 3.1.28 (mostly having to do with DMPI).
;3.1.30 - 16-Aug-99
;	Modified GECKOX to support GECKOC (Gecko serial client).
;3.1.31 - 35-Sep-99
;	Fixed problem in newproc in SCHED1, was not initializing pdaVMode and
;	pdaRMPrevClk correctly (this was introduced in 3.1.28).
;3.1.32 - 15-Oct-99
;	Changes to support booting from CDROMs; Fixed problem with wrap-around
;	of the process sequence number (upper limit was too low); Fixed
;	problem with CDROM 9660 directory searching in CDRACLS (sometimes
;	would skip a block if there were exactly 21h bytes unused in block);
;	fixed problem in DFSCLS, would report spurious error if allocating
;	lower on disk than previous allocation)
;3.1.33 - 8-Dec-99
;	Misc. fixes, mostly for CDROM booting and also for booting from SCSI
;	disks.  THIS VERSION IS THE INITIAL CDROM DISTRIBUTION.
;3.1.34 - 24-Feb-00
;	Added knx exported symbols for linking to kernel extensions; added
;	vectors for PCI1CLS.LKE.
;3.1.35 - 1-Mar-00
;	Fixed problem in checkla (MEMORY4), was not copying high 4 bits of
;	segment limit to linked selectors when expanding a segment.
;3.1.36 - 1-Apr-00
;	Expanded INT table names to 16 characters.
;3.1.37 - 16-Apr-00
;	Added IO register registration.
;3.1.38 - 15-Aug-00
;	Added CEY's IO delay changes to ONCECON and KBDADRV
;3.1.39 - 8-Oct-00
;	Added code to verify knlMemTable F2 value when giving up memory pages;
;	Added "no deallocate" (MMS$NODEALOC) to mdb_sts so will not give up
;	virtualized screen pages twice when giving up mapped virtualized
;	screen buffer.
;3.1.40 - 15-Nov-00
;	Fixed problem with giving back allocated memory on address conflict -
;	caused BMTE crash.
;3.1.41 - 12-Jan-01
;	Fixed problem with removing registers from the stack on ER_MPILK
;	error in knlGivePages.
;3.1.42 - 11-Feb-01
;	Fixed problem with svcMemDebug when have illegal address for the
;	read byte function; fixed problem with processing connection request
;	on idle socket (was incrementing the ARP receive pointer!).
;3.1.43 - 28-Mar-01
;	Fixed problem with not checking for error when creating XMB with
;	debugging options enabled; added support for NE2000 compatable PCI
;	network cards (ENNEADRV.LKE).
;3.1.44 - 20-Aug-01
;	Implemented the PP%ANYLOGIN priviledge.
;3.1.46 - 27-Oct-01
;	Added fairness count for scheduling PQ3 jobs; added code to set ES in
;	HDKADRV in hdkafindmedia which may have fixed a disk scheduling problem.
;3.1.47 - 3-Nov-01
;	Fixed problem with memory areas greater than 256MB.
;3.1.48 - 18-Nov-01
;	Fixed problem with storeing TDB address for blocked screen pages - was
;	only storing 20 bits which was not enough for large configurations.
;3.1.50 - 31-Jan-02
;	Added the knlGetLargeBuffer and getcmp functions.
;3.1.51 - 30-Apr-02
;	Fixed stack problem in knlChkRqAvl.
;3.1.52 - 19-Aug-02
;	Added knlGetRandom32.
;3.1.53 - 10-Oct-02
;	Some updates for graphics support (real mode mode change using BIOS).
;3.1.54 - 28-Oct-02
;	Stuff for rolling the log file each day and on request (mostly changes
;	to INIT but also a change to svcSysLog svc).
;3.1.55 - 6-Nov-02
;	Fixed problem in TCPCLS2 with queuing incoming SYNs (type 3); Fixed
;	thread IO routines to always reschedule after IO - this fixes problem
;	with signal race and should make thread IO "more fair"; Fixed problem
;	with the svcIoPath svc.
;3.1.56 - 18-Nov-02
;	Fixed several problems with closing connections in TCPCLS2 and TCPCLS3;
;	Fixed problem with terminating Gecko when screen virualized which
;	caused BMTE crash in MEMORY2.
;3.1.57 - 21-Jan-03
;	Added cache control parameter to knlGetLargeBuffer.
;3.1.58 - 22-Jan-03
;	Added support for IOPAR_VECT1 and IOPAR_VECT1 values on open.
;3.1.61 - 29-Jan-03
;	Fixed major output problems in TCPCLS.LKE.
;3.1.65 - 15-Jun-03
;	Added IOPAR_DSKBLOCK IO parameter (needed for MKBOOT 6.0).
;3.1.66 - 21-Jun03
;	Changed default DOSBASE value to 4K (was 65K); Changed read mode BIOS
;	environment setup to not use DOSBASE and DOSSIZE values.
;3.1.67 - 24-Jun-03
;	Fixed problem with creating real mode BIOS environment introduced
;	in 3.1.66.
;3.1.69 - 2-Aug-03
;	Fixed stack problem in ALARM when no XMBs available; Added LOGGER to
;	do all logging functions; Removed logging functions from INIT; Changed
;	INIT to start LOGGER first thing.

DOSMAJV==!3t		;DOS emulator major version number
DOSMINV==!30t		;DOS emulator minor version number

LKEMAJC=!10t		;LKE major compatability level
LKEMINC=!0t		;LKE minor compatability level

	.SBTTL	Define order of loading segments

;This specifies all segments, msects, and psects and determines the order
;  in which they are placed in memory

;WARNING: The order of the loading of all segments is hard-coded into the
;	  oncer module - this order cannot be changed unless oncer is also
;	  modified

;Most common XOS data, including the queue element table is in this segment

	.SEG	data_rs  , DATA   , 16BIT
	.MSECT	data_rm  , data_rs, ADDR=0
	.SEG	data_s   , 32BIT  , SELECT=GS_DATA, DATA, READ, WRITE
	.MSECT	data_m   , data_s , ADDR=DATASEGBASE
	.PSECT	lowmem_p , data_m , MOD=4	;Low memory data
	.PSECT	data_p   , data_m , MOD=4	;XOS data
	.PSECT	datatop_p, data_m , MOD=4
datatop::!					;Highest used data address
	.PSECT	gdt_p    , data_m , MOD=16t

;This segment contains the user mode virtual-86 code

	.SEG	vusercode_rs, CODE        , 16BIT
	.MSECT	vusercode_rm, vusercode_rs, ADDR=0
	.SEG	vusercode_s , 16BIT       , SELECT=GS_VUSERCODE, CODE
	.MSECT	vusercode_m , vusercode_s , ADDR=0
	.PSECT	vusercode_p , vusercode_m , MOD=1000h
	.PSECT	vusercode_t , vusercode_m , MOD=1000h
vusercodetop::!

;This segment contains the protected user mode code

	.SEG	usercode_rs, CODE       , 16BIT
	.MSECT	usercode_rm, usercode_rs, ADDR=0
	.SEG	usercode_s , 32BIT      , SELECT=GS_USERCODE, CODE
	.MSECT	usercode_m , usercode_s , ADDR=1000h
	.PSECT	usercoded_p, usercode_m , MOD=1000h
	.PSECT	usercode_p , usercode_m , MOD=4
	.PSECT	usercode_t , usercode_m , MOD=1000h
usercodetop::!

;All XOS exec mode code is in this segment

	.SEG	code_rs  , CODE   , 16BIT
	.MSECT	code_rm  , code_rs, ADDR=0
	.SEG	code_s   , 32BIT  , SELECT=GS_CODE, CODE
	.MSECT	code_m   , code_s , ADDR=1000h
	.PSECT	code_p   , code_m , MOD=4
	.BLKB	1000h			;Space for allocatable 16-bit code space
	.PSECT	code_u   , code_m , MOD=4
	.PSECT	code_t   , code_m , MOD=4
codetop::!

;This segment contains all once-only protected mode code (Note that this is
;  not really a separate segment since it has the same selector as the code
;  segment, but the bootstrap does not know how to load multiple msects, so
;  we fake it out this way!)

	.SEG	once_rs  , CODE   , 16BIT
	.MSECT	once_rm  , once_rs, ADDR=0
	.SEG	once_s   , CODE   , 32BIT  , SELECT=GS_CODE
	.MSECT	once_m   , once_s , ADDR=oocode
	.PSECT	oncep_p  , once_m , MOD=4
oncebgn::!
	.PSECT	init_p   , once_m , MOD=4
doinit::!
	.PSECT	initend_p, once_m
	RET
	.PSECT	oncep_t  , once_m , MOD=4
oocodetop::!

;This segment contains GECKO's data and symbol table (if GECKO is linked)

	.SEG	geckodata_rs, 16BIT, DATA, READ, WRITE
	.MSECT	geckodata_rm, geckodata_rs, ADDR=0
	.SEG	_geckodata_s, 32BIT     , SELECT=GS_GECKODATA, DATA, READ, WRITE
	.MSECT	_geckodata_m, _geckodata_s, ADDR=1000h
	.PSECT	_geckodata_p, _geckodata_m, MOD=4
.IF EQ $$GECKOB
	.PSECT	_symbols_p, _geckodata_m, OVER
.ENDC
	.PSECT	geckodata_t , _geckodata_m
geckodtop::!

;This segment contains GECKO's executable code (if GECKO is linked)

	.SEG	geckocode_rs, 16BIT, CODE, READ, WRITE
	.MSECT	geckocode_rm, geckocode_rs, ADDR=0
	.SEG	_geckocode_s, 32BIT     , SELECT=GS_GECKOCODE, CODE
	.MSECT	_geckocode_m, _geckocode_s, ADDR=1000h
	.PSECT	_geckocode_p, _geckocode_m, OVER
geckodispatch::
	RETF		;0 - Start GECKO
	NOP
	JMP	4$.S	;2 - Trace trap
	RETF		;4 - INT3
	NOP

4$:	CRASH	TTRP

	.PSECT	geckocode_t,  _geckocode_m
geckoctop::!

;This segment contains the real mode once-only code

.IF NE $$GECKOB
	.SEG	geckobcode_s, DATA, READ, WRITE, 16BIT
	.SEG	geckobdata_s, DATA, READ, WRITE, 16BIT
.ENDC
	.SEG	oncer_rs, COMB    , 16BIT, READ, WRITE
	.MSECT	oncer_rm, oncer_rs, ADDR=0
	.PSECT	oncer_rp, oncer_rm

;This segment gives the highest location loaded

	.SEG	top_rs, DATA  , 16BIT
	.MSECT	top_rm, top_rs, ADDR=0
.PAGE
	.PSECT	lowmem_p

;Fixed location data - the absolute offsets of the following items are know
;  in various places in XOS - they CANNOT be changed - the first item
;  must be at offset = 1000h!

$$$=!$
	.MACRO	xname majv, minv, edit
	.ASCIZ	"XOS version majv'.'minv'.'edit"
	.ENDM

knlName:: .RADIX 10		;(32)1000 - Name of system
	  xname  >XOSMAJV, >XOSMINV, >XOSEDIT
	  .RADIX 16
$=$$$+20h
	    .LONG 0		;(4) 1020 - Debugger (GECKO) - Reserved
	    .LONG 0		;(4) 1024 - Debugger (GECKO) - Reserved
knlGeckoMem::			;(4) 1028 - Debugger (GECKO) - Offset of 512KB
	    .LONG 0		;	      graphics display save area in
				;	      the Gecko data segment
knlGeckoSig::
	    .LONG 0, 0		;(4) 102C - Debugger (GECKO) - GECKO signature

serialnum:: .LONG 1234h		;Kernel serial number
knlSysDescp::			;System description bits
	    .LONG SYSD$KBRESET|SYSD$FASTBOOT
knlProcInUse::
	    .LONG -1		;Number of active processes
sysstate::  .LONG 0		;System state
knlProcHigh::
	    .LONG 0		;Index of highest active process

proctype::  .BYTE 0		;Processor type
fputype::   .BYTE 0		;FPU type
fpustate::  .BYTE 0		;FPU state
knlCrashed::.BYTE 0		;Non-zero if system has crashed

lkecount::  .LONG 0		;Number of LKEs loaded
firstlke::  .LONG 0		;Offset of code for first LKE
lastlke::   .LONG 0		;Offset of code for last LKE
knlProcMax::.LONG MAXPROCS	;Max value for knlProcLimit
knlProcLimit::
	    .LONG MAXPROCS	;Process limit
knlConDhb:: .LONG 0		;Offset of DHB for console
knlDispType::
	    .LONG 0		;Console display type
xffnum::    .LONG 0		;Number of XFFs
	    .LONG MAXXFFS	;Max value for xfflimit
xfflimit::  .LONG MAXXFFS	;Absolute maximum number of XFFs
xffinuse::  .LONG 0		;Number of in use XFFs
xffmax::    .LONG 0		;Maximum number of in use XFFs

knlMachType::
	    .LONG 0		;Machine type code
country::   .LONG 1		;Default country code for system
almlimit::  .LONG 16t		;Per-process alarm limit
knlFirstCcb::
	    .LONG 0		;Offset of first CCB
numccb::    .LONG 0		;Number of CCBs

cnmser::    .LONG 0		;Number of serial ports
cnmpar::    .LONG 0		;Number of parallel ports
knlver::    .LONG {XOSMAJV<24t}|{XOSMINV<16t}|XOSEDIT
				;XOS version number
dosver::    .LONG {DOSMAJV<24t}|{DOSMINV<16t}
				;DOS emulator version number memory

gdtval::    .WORD 0FFFh
	    .LONG la_data+gdtable
idtval::    .WORD 7FFh
	    .LONG la_pda+pdaIdt#

gselnum::   .LONG 0		;Number of global selectors created
gselinuse:: .LONG 0		;Number of global selectors in use

firstcab::  .LONG 0		;Offset of first close action block
procseq::   .LONG 1		;Current process sequence number
knlForkLvl::.BYTE 0		;Fork level flag
lkebusy::   .BYTE 0		;LKE loading busy flag (1 = busy)
flopswap::  .BYTE 0		;Floppy unit swap flag (80 = units 0 and 1 are
				;  swapped)
cadelflg::  .BYTE 1		;CTRL-ALT-DEL flag
intmulbug:: .BYTE 0		;Non-zero if have 386 integer multiply bug
fpudivbug:: .BYTE 0		;Non-zero if have Pentium FPU divide bug
	    .BYTE 0, 0
fileseqnum::.LONG 0, 0		;Current file sequence number
dostcnt::   .LONG 0		;DOS tick count
knlCpsPda:: .LONG 0		;Selector for process to interrupt with ^P
				;  terminal signal
lkelevel::  .LONG {LKEMAJC<<16t}|LKEMINC
				;LKE compatability level

;IRQ name table

;;;intnames::  .LONG 'SYST', 'EM_C', 'LOCK', 0	;Name for IRQ0
;;;	    .LONG 0     , 0     , 0     , 0	;Name for IRQ1
;;;	    .LONG 'SYST', 'EM_C', 'asca', 'de'	;Name for IRQ2
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ3
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ4
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ5
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ6
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ7
	    .LONG 'SYST', 'EM_R', 'TC'  , 0	;Name for IRQ8
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ9
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ10
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ11
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ12
	    .LONG 'SYST', 'EM_F', 'PU'  , 0	;Name for IRQ13
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ14
	    .LONG 0     , 0     , 0     , 0	;Name for IRQ15

knlDskCcb::  .LONG 0		;Offset of DISK class CCB
knlHdkDataC::.LONG 0, 0, 0, 0	;Data for first hard disk (D0:)
knlHdkDataD::.LONG 0, 0, 0, 0	;Data for second hard disk (D1:)
knlPort61::  .BYTE 0		;Value to output to port 61

	    .MOD  4
knlSysGroup:: .ASCII 'USR'	;Default group name for system
	      .BLKB  13t
knlSysUser::  .ASCII 'USER'	;Default user name for system
	      .BLKB  12t

disprom::     .LONG 0		;Physical address of display ROM

knlFont8x8L:: .LONG 0		;Offset of ROM 8x8 low font (basic)
knlFont8x8H:: .LONG 0		;Offset of ROM 8x8 high font (basic)
knlFont8x14L::.LONG 0		;Offset of ROM 8x14 low font (basic)
knlFont8x14H::.LONG 0		;Offset of ROM 8x14 high font (basic)
knlFont8x16L::.LONG 0		;Offset of ROM 8x16 low font (basic)
knlFont8x16H::.LONG 0		;Offset of ROM 8x16 high font (basic)
knlFont9x8F:: .LONG 0		;Offset of ROM 9x8 font (fixup)
knlFont9x14F::.LONG 0		;Offset of ROM 9x14 font (fixup)
knlFont9x16F::.LONG 0		;Offset of ROM 9x16 font (fixup)

serialchk:: .LONG 0CBEDFFFFh

dosfcbn::   .BYTE 16t		;Size of the DOS FCB table
dosfcbp::   .BYTE 8t		;Number of protected entires in the DOS FCB
				;  table

knlJunk1::  .LONG 0, 0, 0

oncemax::   .LONG 0

;Vectors to extension routines

knxPciFindVendor::
	    .LONG knlNotIns#
knxPciFindType::
	    .LONG knlNotIns#
knxPciReadConfig::
	    .LONG knlNotIns#
knxPciWriteConfig::
	    .LONG knlNotIns#
.PAGE
;Other data which can be at any location

	DATA

lit0::	   .LONG 0		;Commonly used literal values
lit3::	   .LONG 3t
lit4::	   .LONG 4t
lit5::	   .LONG 5t
lit6::	   .LONG 6t
lit7::	   .LONG 7t
knlLit10:: .LONG 10t
knlLit11:: .LONG 11t
lit12::	   .LONG 12t
lit14::	   .LONG 14t
lit16::	   .LONG 16t
lit20::	   .LONG 20t
lit30::	   .LONG 30t
lit31::	   .LONG 31t
lit60::	   .LONG 60t
lit80::	   .LONG 80t
lit100::   .LONG 100t
knlLit128::.LONG 128t
knlLit256::.LONG 256t
lit365::   .LONG 365t
lit366::   .LONG 366t
lit400::   .LONG 400t
knlLit512::.LONG 512t
lit768::   .LONG 768t
lit1000::  .LONG 1000t
lit1024::  .LONG 1024t
lit1461::  .LONG 1461t
knlLit16000::
	   .LONG 16000t
lit36524:: .LONG 36524t
;lit36525::.LONG 36525t
lit86400:: .LONG 86400t		;Seconds per day
lit146097::.LONG 146097t
lit864000::.LONG 864000t	;Tenth seconds per day
litCPT::   .LONG CNTSPERTICK
knlLitTPD::.LONG TICKSPERDAY
litDTPD::  .LONG DOSTSPERDAY
litXTSEC:: .LONG XT_SECOND	;Fractional days per second
knlLitMSPERTICK::		;Milliseconds per tick
	   .LONG MSPERTICK
lit3E22E29::
	   .LONG 3E22E29h
lit31B5D43B::
	   .LONG 31B5D43Bh
lit5D34553A::
	   .LONG 5D34553Ah
litAAA5C740::
	   .LONG 0AAA5C740h
lit1F1::   .LONG 1F1h
litC22E::  .LONG 0C22Eh
lit1845D:: .LONG 1845Dh
lit2D82D8::.LONG 2D82D8h
litAAAAAAB::
	   .LONG 0AAAAAABh
.PAGE
	.SBTTL	Global segment descriptor table (GDT)

;The initial contents of each GDT entry is out of order.  This allows the
;  address in a call gate to be stored normally here.  The items are reordered
;  by the code in oncer before entering protected mode!

;Define macro for specifing general GDT entry

	.MACRO	GDTENT  type, class, size, addr
	.LONG	{type<24t}+{class<16t}+size
	.LONG	addr
	.ENDM

;Create the GDT

	.PSECT	gdt_p

xgdtable::

;0000 - Not used
	.LONG	0, 0

;GS_IDT = 0008 - IDT
	GDTENT	DT_RWDATA+PL_0, DC_BG+DC_32, 07FFh, 0

;GS_GDT = 0010 - GDT
	GDTENT	DT_RWDATA+PL_0, DC_BG+DC_32, 0FFFFh, la_data+gdtable

;GS_DATA = 0018 - Data segment
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, {{datasegtop/400h}-1}, la_data

;GS_CODE = 0020 - Code segment
	GDTENT	DT_NXRCODE+PL_0, DC_PG+DC_32, 1F0h-1, la_code

;GS_TEMP = 0028
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, 0FFFFh, 0

;GS_CODEALS = 0030 - Code segment allias as data segment
	GDTENT	0, DC_PG+DC_32, 1F0h-1, la_code

;GS_USERLA = 0038 - Maps entire user linear address space
	GDTENT	DT_RWDATA+PL_3, DC_PG+DC_32, {{la_system>12t}-1}, 0

;GS_BIOSDATA = 0040 - Maps DOS environment BIOS data
	GDTENT	DT_RWDATA+PL_3, DC_BG+DC_16, 0FFFFh, 400h

;GS_DISPLAY = 0048 - Console screen buffer segment
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, 20h-1, la_textdisp

;GS_REAL16 = 0050 - Virtual DOS mode segment as 16 bit data segment
	GDTENT	DT_RWDATA+PL_3, DC_PG+DC_16, 180h-1, 0
 
;GS_REAL32 = 0058 - Virtual DOS mode segment as 32 bit data segment
	GDTENT	DT_RWDATA+PL_3, DC_PG+DC_32, 180h-1, 0

;GS_16CODE = 0060 - Code segment (16-bit)
	GDTENT	DT_NXRCODE+PL_0, DC_PG+DC_16, 1F0h-1, la_code

;GS_BIOSCODE = 0068 - 16-bit segment which maps physical memory at C0000
	GDTENT	DT_NXRCODE+PL_0, DC_PG+DC_16, 1Fh, la_data+dsprom

;GS_SCHPDA = 0070 - Scheduler task PDA selector
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, {{pda_TSIZE>12t}-1}, la_pda

;GS_SCHTSS = 0078 - Scheduler task TSS selector
	GDTENT	DT_ITSS+PL_0, DC_BG, 68h-1, la_pda+pdaTss#

;GS_ERRSTK = 0080 - Stack and double exception error handler stack segment
	GDTENT	DT_RWDATA+PL_0, DC_32, ERRSTKSIZE#-1, la_data+errbase#

;GS_STKERRTSS = 0088 - Stack error handler TSS
	GDTENT	DT_ITSS+PL_0, DC_BG, 68h-1, la_data+stkerrtss#

;GS_DBLERRTSS = 0090 - Double exception error handler TSS
	GDTENT	DT_ITSS+PL_0, DC_BG, 68h-1, la_data+dblerrtss#

;0098 - Not used
	.LONG	0, 0

;GS_USERCODE = 00A0 - User kernel segment
	GDTENT	DT_NXRCODE+PL_3, DC_BG+DC_32, usercodetop-1, la_usercode

;GS_USERDATA = 00A8 - User kernel segment
	GDTENT	DT_RWDATA+PL_3, DC_BG+DC_32, USERDSIZE#-1, la_data+userdata#

;GS_VUSERCODE = 00B0 - Real mode user kernel segment
	GDTENT	DT_NXRCODE+PL_3, DC_BG+DC_16, vusercodetop-1, la_vusercode

;GS_VDOSDATA = 00B8 - DOS data area
	GDTENT	DT_RWDATA+PL_3, DC_16, 40h-1, dda_base

;GS_EXPORT = 00C0 - Exported symbol table
	GDTENT	DT_RODATA+PL_3, DC_PG+DC_32, 31t, la_symtable

;00C8 - Not used
	.LONG	0, 0

;00D0 - Not used
	.LONG	0, 0

;00D8 - Not used
	.LONG	0, 0

;GS_GECKOCODE = 00E0 - GECKO code segment
	GDTENT	DT_NXRCODE+PL_0, DC_PG+DC_32, 40h-1, la_debugc

;GS_GECKODATA = 00E8 - GECKO data segment
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, 384t-1, la_debugd

;GS_GECKOTEMP = 00F0 - GECKO tempory segment segment
	GDTENT	DT_RWDATA+PL_0, DC_PG+DC_32, 0, 0
 
;00F8 - Not used
	.LONG	0, 0

	.MACRO	SD  pcnt, pname, rcnt, rname

.IF B {pcnt}
	.LONG	0, 0
.IFF
	.ADDRL	psvc'pname#
	.BYTE	pcnt't, DT_CALL+PL_3
CNT'pname==!pcnt't*4
.ENDC
	.ENDM

	SVCDEFSYS

XGDTSIZE==!$-xgdtable

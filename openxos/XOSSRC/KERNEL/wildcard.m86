	.TITLE	WILDCARD - Wild card string routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR

	CODE

	.SBTTL	knlWildCmp8 - Subroutine to do wild card compare using ASCII character

;Subroutine to do wild card compare using ASCII 8-bit characters
;	c(AL)     = 0 for mixed case match, 1 for exact case match
;	c{SS:ESI} = Address of string 1 (may contain wild card characters)
;	c{ES:EDI} = Address of string 2
;	CALL	knlWildCmp8
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  Z:set = Match
;	  Z:clr = Not match

$$$=!0
FRM wc_svESI   , 4t
FRM wc_svEDI   , 4t
FRM            , 3t
FRM wc_xcase   , 1t		;Non-zero for exact case match
wc_SIZE=!$$$

knlWildCmp8::
	ENTER	wc_SIZE, 0		;Setup our stack frame
	MOVB	wc_xcase.B[EBP], AL
	CLD
2$:	CALL	cmpstr8			;Compare strings
	JNC	14$.S			;If have complete match
	JNE	12$.S			;If match not possible
4$:	MOVB	AL, SS:[ESI]		;Here with *
6$:	MOVB	AH, ES:[EDI]		;Scan to first match
	INCL	EDI
	CMPB	AH, AL
	JE	16$.S			;If match
	CMPB	wc_xcase.B[EBP], #0	;Want exact case match?
	JNE	10$.S			;Yes
	XORB	AL, AH			;No - might be different case match?
	TESTB	AL, #~20h
	JNE	8$.S			;No
	XORB	AL, AH			;Yes
	MOVZBL	EDX, AL
	BTL	CS:ltrtbl, EDX		;Is it a letter?
	JC	16$.S			;Yes - match
	JMP	10$.S			;No - not match

8$:	XORB	AL, AH
10$:	TESTB	AH, AH			;Not match - end?
	JNE	6$.S			;No - continue
12$:	TESTL	EBP, EBP		;Yes - clear Z and C
14$:	LEAVE				;And return
	RET

;Here with match after *

16$:	TESTB	AL, AL			;Found match if end of string here
	JE	14$.S
	MOVL	wc_svESI.B[EBP], ESI	;Save state
	MOVL	wc_svEDI.B[EBP], EDI
	INCL	ESI
	CALL	cmpstr8			;Compare strings
	JNC	14$.S			;If have complete match
	JE	4$.S			;If found another *
	MOVL	EDI, wc_svEDI.B[EBP]	;Match not possible here - advance one
	MOVL	ESI, wc_svESI.B[EBP]	;  character and try to match that
					;  string
	JMP	4$.S			;Continue
.PAGE
	.SBTTL	cmpstr8 - Subroutine to compare strings

;Subroutine to compare strings (string 1 may contain wild characters) up to
;  wild card character
;	c{SS:ESI} = Pointer to string 1
;	c{ES:EDI} = Pointer to string 2
;	CALL	cmpstr8
;	C:clr,Z:set = Complete match
;	C:set,Z:set = * encountered
;	C:set,Z:clr = No match possible

cmpstr8:LODSB	SS:[ESI]		;Anything left in string 1?
	TESTB	AL, AL
	JNE	6$.S			;Yes
	CMPB	ES:[EDI], #0		;No - anything left in string 2?
	JE	4$.S			;No - have complete match
2$:	TESTL	ESP, ESP		;Yes - make sure Z is clear to indicate
					;  no possible match
	STC				;And set C
4$:	RET

;Here with more in string 2 to check

6$:	CMPB	AL, #'*'		;Another wild character?
	JE	18$.S			;Yes
	CMPB	AL, #'?'		;No - match any single character?
	JE	12$.S			;Yes
8$:	CMPB	ES:[EDI], #0		;No - end of string 2?
	JE	2$.S			;Yes - go check some more
	MOVB	AH, ES:[EDI]		;No - compare
	INCL	EDI
	CMPB	AH, AL
	JE	cmpstr8.S		;If exact match
	CMPB	wc_xcase.B[EBP], #0	;Want exact case match?
	JNE	2$.S			;Yes
	XORB	AH, AL			;No - might be different case match?
	TESTB	AH, #~20h
	JNE	2$.S			;No
	MOVZBL	EDX, AL
	BTL	CS:ltrtbl, EDX		;Yes - is it a letter?
	JC	cmpstr8.S		;Yes - match
	JMP	2$.S			;No - not match

;Here with ? in string 1

12$:	CMPB	ES:[EDI], #0		;End of string 2?
	JE	cmpstr8.S		;Yes - continue
16$:	INCL	EDI
	JMP	cmpstr8.S		;And continue

;Here with * in string 1

18$:	CLRL	EAX			;Indicate have *
	STC
	RET
.PAGE
	.SBTTL	knlWildCmp16 - Subroutine to do wild card compare using Unicode characters

;Subroutine to do wild card compare using Unicode 16-bit characters
;	c(AL)     = 0 for mixed case match, 1 for exact case match
;	c{SS:ESI} = Address of string 1 (may contain wild card characters and
;		      search groups)
;	c{ES:EDI} = Address of string 2
;	CALL	knlWildCmp16
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  Z:set = Match
;	  Z:clr = Not match

$$$=!0
FRM wc_svESI   , 4t
FRM wc_svEDI   , 4t
FRM            , 3t
FRM wc_xcase   , 1t		;Non-zero for exact case match
wc_SIZE=!$$$

knlWildCmp16::
	ENTER	wc_SIZE, 0		;Setup our stack frame
	MOVB	wc_xcase.B[EBP], AL
	CLD
2$:	CALL	cmpstr16		;Compare strings
	JNC	14$.S			;If have complete match
	JNE	12$.S			;If match not possible
4$:	MOVZWL	EAX, SS:[ESI]		;Here with *
6$:	MOVZWL	EDX, ES:[EDI]		;Scan to first match
	ADDL	EDI, #2t.B
	CMPW	DX, AX
	JE	16$.S			;If exact match
	CMPB	wc_xcase.B[EBP], #0	;Want exact case match?
	JNE	10$.S			;Yes
	XORL	EAX, EDX		;No - might be different case match?
	TESTW	AX, #~20h
	JNE	8$.S			;No
	XORL	EAX, EDX		;Yes
	CMPB	AH, #0			;ASCII characters?
	JNE	10$.S			;No - no match (also not period)
	BTL	CS:ltrtbl, EAX		;Yes - is it a letter?
	JC	16$.S			;Yes - match
	JMP	10$.S			;No - not match

8$:	XORL	EAX, EDX
10$:	TESTW	DX, DX			;End here?
	JNE	6$.S			;No - continue
12$:	TESTL	EBP, EBP		;Yes - clear Z and C
14$:	LEAVE				;Return
	RET

;Here with match after *

16$:	TESTW	AX, AX			;Found match if end of string here
	JE	14$.S
	MOVL	wc_svESI.B[EBP], ESI	;Save state
	MOVL	wc_svEDI.B[EBP], EDI
	ADDL	ESI, #2t.B
	CALL	cmpstr16			;Compare strings
	JNC	14$.S			;If have complete match
	JE	4$			;If found another *
	MOVL	EDI, wc_svEDI.B[EBP]	;Match not possible here - advance one
	MOVL	ESI, wc_svESI.B[EBP]	;  character and try to match that
					;  string
	JMP	4$			;Continue
.PAGE
	.SBTTL	cmpstr16 - Subroutine to compare strings

;Subroutine to compare strings (string 1 may contain wild characters) up to
;  wild card character
;	c{SS:ESI} = Pointer to string 1
;	c{ES:EDI} = Pointer to string 2
;	CALL	cmpstr16
;	C:clr,Z:set = Complete match
;	C:set,Z:set = * encountered
;	C:set,Z:clr = No match possible

cmpstr16:
	MOVZWL	EAX, SS:[ESI]		;Anything left in string 1?
	ADDL	ESI, #2t.B
	TESTW	AX, AX
	JNE	6$.S			;Yes
	CMPW	ES:[EDI], #0.B		;No - anything left in string 2?
	JE	4$.S			;No - have complete match
2$:	TESTL	ESP, ESP		;Yes - make sure Z is clear to indicate
					;  no possible match
	STC				;And set C
4$:	RET

;Here with more in symbol to check

6$:	CMPW	AX, #'*'		;Another wild character?
	JE	18$			;Yes
	CMPW	AX, #'?'		;No - match any single character?
	JE	12$.S			;Yes
8$:	CMPW	ES:[EDI], #0.B		;No - end of string 2?
	JE	2$.S			;Yes - go check some more
	MOVZWL	EDX, ES:[EDI]		;No - compare
	ADDL	EDI, #2t.B
	CMPW	DX, AX
	JE	cmpstr16.S		;If exact match
	CMPB	wc_xcase.B[EBP], #0	;Want exact case match?
	JNE	2$.S			;Yes
	XORL	EDX, EAX		;No - might be different case match?
	TESTW	DX, #~20h
	JNE	2$.S			;No
	CMPB	AH, #0			;ASCII characters?
	JNE	2$.S			;No - no match (also not period)
	BTL	CS:ltrtbl, EAX		;Yes - is it a letter?
	JC	cmpstr16.S		;Yes - match
	JMP	2$.S			;No - not match

;Here with ? in string 1

12$:	CMPW	ES:[EDI], #0.B		;End of string 2?
	JE	cmpstr16.S		;Yes - continue
16$:	ADDL	EDI, #2t.B
	JMP	cmpstr16		;And continue

;Here with * in string 1

18$:	CLRL	EAX			;Indicate have *

	STC
	RET

	.MOD	4
ltrtbl:	.LONG	00000000
	.LONG	00000000
	.LONG	07FFFFFE
	.LONG	07FFFFFE
	.LONG	00000000
	.LONG	00000000
	.LONG	00000000
	.LONG	00000000

	END

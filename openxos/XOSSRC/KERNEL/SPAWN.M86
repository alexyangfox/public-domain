	.TITLE	SPAWN - System call to create process

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSDOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR

	CODE

	.SBTTL	svcSchSpawn - Supervisor call to create process

;Here for the svcSchSpawn SVC - Create process
;	struct sab sab;			// Spawn argument block
;	value = svcSchSpawn(&sab);
;  Value returned is 0 if operation started succesfully or negative error code
;    if error.  To verify complete success, caller must check both the returned
;    value and the value stored in sab_error (which will be 0 if no errors).

;Format of the SAB:
;  sab_func    (2)  Function
;  sab_status  (2)  Returned status
;  sab_error   (4)  Returned error code
;  sab_pid     (4)  Returned PID
;  sab_type    (1)  Returned process type
;              (3)
;  sab_vector  (2)  Vector number
;  sab_numseg  (1)  Number of segments to give to new process
;              (1)
;  sab_option  (4)  Option bits (low order 8 bits contain termination event
;		      number)
;  sab_name    (8)  Address of name for new process
;  sab_EIP     (4)  Initial EIP value for new process
;  sab_CS      (4)  Initial CS value for new process
;  sab_ESP     (4)  Initial ESP value for new process
;  sab_SS      (4)  Initial SS value for new process
;  sab_parm    (8)  Address of parameter list
;  sab_srcsel  (4)  Selector for first segment to give to new process
;  sab_dstsel  (4)  Destination selector for first segment
;  ...

$$$=!0
FRM spwn_option  , 4t		;Bits from sab_option
FRM spwn_CS      , 4t		;Value from sab_CS
FRM spwn_SS      , 4t		;Value from sab_SS
FRM spwn_newpda  , 4t		;Selector for PDA for new process
FRM spwn_actpriv , 8t		;Active privilege mask for child
FRM spwn_avlpriv , 8t		;Available privilege mask for child
FRM spwn_wslimit , 4t		;Working set size limit value
FRM spwn_wsallow , 4t		;Working set size allowed value
FRM spwn_tmlimit , 4t		;Total memory limit value
FRM spwn_tmallow , 4t		;Total memory allowed value
FRM spwn_pmlimit , 4t		;Protected mode memory limit value
FRM spwn_pmallow , 4t		;Protected mode memory allowed value
FRM spwn_rmlimit , 4t		;Real mode memory limit value
FRM spwn_rmallow , 4t		;Real mode memory allowed value
FRM spwn_omlimit , 4t		;Overhead memory limit value
FRM spwn_omallow , 4t		;Overhead memory allowed value
FRM spwn_devlist1, 8t		;Address of first device list
FRM spwn_devsize1, 4t
FRM spwn_devlist2, 8t		;Address of second device list
FRM spwn_devsize2, 4t
FRM spwn_envlist , 8t		;Address of environment list
FRM spwn_envsize , 4t
spwn_SIZE=!$$$

psvcSchSpawn::
	SVCENTR	CNTSchSpawn#
	ORB	SS:pdaArg1#, #03
	ENTER	spwn_SIZE, 0		;Set up our stack frame
	IFFAULT	knlRtnAdrErLv#
	LESL	EBX, SS:pdaArg2#
	CLRL	EAX			;Initialize the returned fields
	IFFAULT	knlRtnAdrErLv#
	MOVW	ES:sab_status.B[EBX], AX
	IFFAULT	knlRtnAdrErLv#
	MOVL	ES:sab_error.B[EBX], EAX
	IFFAULT	knlRtnAdrErLv#
	MOVL	ES:sab_pid.B[EBX], EAX
	IFFAULT	knlRtnAdrErLv#
	MOVB	ES:sab_type.B[EBX], AL
	MOVL	spwn_devlist1+4.B[EBP], EAX ;Initialize our stack frame
	MOVL	spwn_devlist2+4.B[EBP], EAX
	MOVL	spwn_envlist+4.B[EBP], EAX
	DECL	EAX
	MOVL	spwn_wsallow.B[EBP], EAX
	MOVL	spwn_tmallow.B[EBP], EAX
	MOVL	spwn_pmallow.B[EBP], EAX
	MOVL	spwn_rmallow.B[EBP], EAX
	MOVL	spwn_omallow.B[EBP], EAX
	MOVL	EAX, SS:pdaWSLimit#
	MOVL	spwn_wslimit.B[EBP], EAX
	MOVL	EAX, SS:pdaTMLimit#
	MOVL	spwn_tmlimit.B[EBP], EAX
	MOVL	EAX, SS:pdaPMLimit#
	MOVL	spwn_pmlimit.B[EBP], EAX
	MOVL	EAX, SS:pdaRMLimit#
	MOVL	spwn_rmlimit.B[EBP], EAX
	MOVL	EAX, SS:pdaOMLimit#
	MOVL	spwn_omlimit.B[EBP], EAX
	MOVL	EAX, SS:pdaActPriv#+0
	MOVL	spwn_actpriv+0.B[EBP], EAX
	MOVL	EAX, SS:pdaActPriv#+4
	MOVL	spwn_actpriv+4.B[EBP], EAX
	MOVL	EAX, SS:pdaAvlPriv#+0
	MOVL	spwn_avlpriv+0.B[EBP], EAX
	MOVL	EAX, SS:pdaAvlPriv#+4
	MOVL	spwn_avlpriv+4.B[EBP], EAX
	IFFAULT	knlRtnAdrErLv#
	MOVL	EAX, ES:sab_option.B[EBX] ;Copy the option bits
	MOVL	spwn_option.B[EBP], EAX
	IFFAULT	knlRtnAdrErLv#
	MOVL	EAX, ES:sab_CS.B[EBX]	;Copy the CS value
	ORB	AL, #03h
	MOVL	spwn_CS.B[EBP], EAX
	IFFAULT	knlRtnAdrErLv#
	MOVL	EAX, ES:sab_SS.B[EBX]	;Copy the SS value
	ORB	AL, #03h
	MOVL	spwn_SS.B[EBP], EAX
	IFFAULT	knlRtnAdrErLv#
	CMPL	ES:sab_parm.B[EBX], #0.B ;Have any device parameters?
	JE	4$.S			;No
	IFFAULT	knlRtnAdrErLv#		;Yes
	LFSL	EDX, ES:sab_parm.B[EBX]	;Process parameters
	MOVL	EBX, #spawnparms
	MOVL	ECX, #knlComDPParms#
	CALL	knlProcDevParm#
	JC	6$.S			;If error
4$:	MOVB	DL, SS:pdaStatus1#	;Get initial pdaStatus1 value for the
	ANDB	DL, #P1$FPU		;  new process
	CALL	newproc#		;Create a new process
	JNC	spawnnp.S		;Go on if OK
6$:	LEAVE
	RET
.PAGE
;Here with the new process created

spawnnp:MOVL	spwn_newpda.B[EBP], ES	;Save selector for new PDA
	IFFAULT	spawnae
	LFSL	EBX, SS:pdaArg2#	;Get address of the SAB
	MOVL	EAX, ES:pdaPid#		;Give him the PID for the new process
	IFFAULT	spawnae
	MOVL	FS:sab_pid.B[EBX], EAX
	IFFAULT	spawnae
	CMPL	FS:sab_name+0.B[EBX], #0.B ;Did he give a name?
	JE	4$.S			;No
	IFFAULT	spawnae
	LGSL	ESI, FS:sab_name.B[EBX]	;Maybe
	IFFAULT	spawnae
	CMPB	GS:[ESI], #0
	JE	4$.S			;No
	MOVL	EDI, #pdaName#		;Yes - use the name he gave us
	MOVL	ECX, #12t
	CLD
	IFFAULT	spawnae
2$:	LODSB	GS:[ESI]
	CMPB	AL, #0
	JE	6$.S
	STOSB	[EDI]
	LOOP	ECX, 2$
	JMP	6$.S

4$:	MOVL	ES:pdaName#+0, #'***N'	;Set process name to ***NEW***
	MOVL	ES:pdaName#+4, #'EW**'
	MOVL	ES:pdaName#+8, #'*'
6$:	MOVL	EAX, spwn_actpriv+0.B[EBP] ;Set the privilege bits for the child
	ANDL	EAX, spwn_avlpriv+0.B[EBP]
	MOVL	ES:pdaActPriv#+0, EAX
	MOVL	EAX, spwn_actpriv+4.B[EBP]
	ANDL	EAX, spwn_avlpriv+4.B[EBP]
	MOVL	ES:pdaActPriv#+4, EAX
	MOVL	EAX, spwn_avlpriv+0.B[EBP]
	MOVL	ES:pdaAvlPriv#+0, EAX
	MOVL	EAX, spwn_avlpriv+4.B[EBP]
	MOVL	ES:pdaAvlPriv#+4, EAX
	MOVL	EAX, spwn_wsallow.B[EBP]
	CMPL	EAX, SS:pdaWSAllow#
	JBE	102$.S
	MOVL	EAX, SS:pdaWSAllow#
102$:	MOVL	ES:pdaWSAllow#, EAX
	MOVL	EAX, spwn_tmallow.B[EBP]
	CMPL	EAX, SS:pdaTMAllow#
	JBE	104$.S
	MOVL	EAX, SS:pdaTMAllow#
104$:	MOVL	ES:pdaTMAllow#, EAX
	MOVL	EAX, spwn_pmallow.B[EBP]
	CMPL	EAX, SS:pdaPMAllow#
	JBE	106$.S
	MOVL	EAX, SS:pdaPMAllow#
106$:	MOVL	ES:pdaPMAllow#, EAX
	MOVL	EAX, spwn_rmallow.B[EBP]
	CMPL	EAX, SS:pdaRMAllow#
	JBE	108$.S
	MOVL	EAX, SS:pdaRMAllow#
108$:	MOVL	ES:pdaRMAllow#, EAX
	MOVL	EAX, spwn_omallow.B[EBP]
	CMPL	EAX, SS:pdaOMAllow#
	JBE	110$.S
	MOVL	EAX, SS:pdaOMAllow#
110$:	MOVL	ES:pdaOMAllow#, EAX

	MOVL	EAX, spwn_wslimit.B[EBP]
	CMPL	EAX, ES:pdaWSAllow#
	JBE	112$.S
	MOVL	EAX, ES:pdaWSAllow#
112$:	MOVL	ES:pdaWSLimit#, EAX

	MOVL	EAX, spwn_tmlimit.B[EBP]
	CMPL	EAX, ES:pdaTMAllow#
	JBE	114$.S
	MOVL	EAX, ES:pdaTMAllow#
114$:	MOVL	ES:pdaTMLimit#, EAX

	MOVL	EAX, spwn_pmlimit.B[EBP]
	CMPL	EAX, ES:pdaPMAllow#
	JBE	116$.S
	MOVL	EAX, ES:pdaPMAllow#
116$:	MOVL	ES:pdaPMLimit#, EAX

	MOVL	EAX, spwn_rmlimit.B[EBP]
	CMPL	EAX, ES:pdaRMAllow#
	JBE	118$.S
	MOVL	EAX, ES:pdaRMAllow#
118$:	MOVL	ES:pdaRMLimit#, EAX

	MOVL	EAX, spwn_omlimit.B[EBP]
	CMPL	EAX, ES:pdaOMAllow#
	JBE	120$.S
	MOVL	EAX, ES:pdaOMAllow#
120$:	MOVL	ES:pdaOMLimit#, EAX
					       ;Should the process be in our
	BTL	spwn_option.B[EBP], #S%SESSION ;  session?
	JC	8$.S			;No
	MOVW	AX, SS:pdaSesProc#	;Yes
	MOVW	ES:pdaSesProc#, AX
	MOVB	AL, SS:pdaPLevel#	;Thus its process level is one more
	INCL	EAX			;  than ours
	MOVB	ES:pdaPLevel#, AL
	JMP	10$.S

;Here if should create new session for this process

8$:	MOVL	EBX, ES:pdaFree#	;Create the session data block
	MOVL	ES:pdaSesData#, EBX
	MOVL	ES:[EBX], #{{ses_SIZE+3}&0FFFFFFFCh}+mb_data
	MOVL	ES:mb_pnt1.B[EBX], #pdaSesData#
	ADDL	ES:pdaFree#, #{{ses_SIZE+3}&0FFFFFFFCh}+mb_data
	MOVL	EAX, ES:pdaPid#		;Start new session
	MOVW	ES:pdaSesProc#, AX
	CALL	copylognames#		;Copy logical names to the new process
	JC	12$.S
10$:	MOVL	EAX, SS:pdaPid#		;In any case, we are the parent
	MOVW	ES:pdaParProc#, AX
	MOVW	AX, SS:pdaChildProc#	;Link into our list of children
	MOVW	ES:pdaSibProc#, AX
	MOVL	EAX, ES:pdaPid#
	MOVW	SS:pdaChildProc#, AX
	CALL	copyenviron#		;Copy our environment
12$:	JC	spawnfail
	MOVL	EAX, spwn_option.B[EBP]	;Get option bits
	BTL	EAX, #S%SETUP		;Want set up mode?
	JNC	14$.S			;No
	ORB	ES:pdaStatus1#, #P1$SETUP ;Yes
14$:	BTL	EAX, #S%NOCDS		;Want child died interrupt?
	JNC	16$.S			;Yes
	ORB	ES:pdaStatus1#, #P1$NOCDS ;No
16$:	MOVB	ES:pdaTrmEvent#, AL	;Store termination event number
	MOVL	ES:pdaTss#+tss_EIP, #idleproc#
	MOVL	ES:pdaTss#+tss_CS, #GS_USERCODE|03
	MOVL	ES:pdaTss#+tss_EFR, #0200h
	MOVL	ES:pdaTss#+tss_ESP, #0
	MOVL	ES:pdaTss#+tss_SS, #GS_REAL16|03
	CMPL	spwn_envlist+4.B[EBP], #0.B ;Was an environment list given?
	JE	spawndev.S		;No
	IFFAULT	spawnae			;Yes
	LFSL	EBX, spwn_envlist.B[EBP]
	IFFAULT	spawnae
20$:	CMPB	FS:[EBX], #0		;Have another string to define?
	JE	spawndev.S		;No
	MOVL	ECX, #10000h		;Yes
	CALL	defenvstr#		;Define it
	JNC	20$.S			;Continue if no errors
spawnfail:
	PUSHL	EAX			;Save error code
	MOVL	ES, spwn_newpda.B[EBP]	;Make the child's stack pointer look
					;  like the child is about to return to
					;  user mode so it will be killed
					;  immediately
	MOVB	ES:pdaTrmEvent#, #0FFh	;Don't generate child died event
	MOVL	ES:pdaTss#+tss_ESP, #pdaURegEIP#
	MOVL	EAX, #TC_RUNFAIL<24t
	PUSHL	EBP
	CALL	reqkill0#		;Kill the child
	POPL	EBP
	POPL	EAX			;Restore error code
	LEAVE
	STC				;Indicate error
	RET				;Return from runcontext

;Here if address error

	FAULTHDR
spawnae:MOVL	EAX, #ER_ADRER
	JMP	spawnfail.S
.PAGE
;Here with all environment strings defined

spawndev:
	BTL	spwn_option.B[EBP], #S%ALLDEV ;Want to transfer all devices?
	JNC	2$.S			;No
	MOVL	ES, spwn_newpda.B[EBP]
	CALL	xferalldev#		;Yes - do that
	JC	spawnfail.S		;If error
2$:	CMPL	spwn_devlist1+4.B[EBP], #0.B ;Do we have a device list?
	JE	spawnmem.S		;No
	IFFAULT	spawnae			;Yes
	LFSL	ESI, spwn_devlist1.B[EBP]
	MOVL	ECX, spwn_devsize1.B[EBP]
	MOVL	ES, spwn_newpda.B[EBP]
	CALL	xferdev#		;Give devices to the new process
	JC	spawnfail.S		;If error
	CMPL	spwn_devlist2+4.B[EBP], #0.B ;Do we have a 2nd device list?
	JE	spawnmem.S		;No
	IFFAULT	spawnae
	LFSL	ESI, spwn_devlist2.B[EBP] ;Yes
	MOVL	ECX, spwn_devsize2.B[EBP]
	MOVL	ES, spwn_newpda.B[EBP]
	CALL	xferdev#		;Give devices to new process
spawnf2:JC	spawnfail.S		;If error	
					;OK - fall into spawnmen on next page
.PAGE
;Here with all devices transfered to the child - now transfer memory

spawnmem:
	LESL	EDX, SS:pdaArg2#
	IFFAULT	spawnae
	MOVZBL	ECX, ES:sab_numseg.B[EDX] ;Get number of segments to transfer
	JREGZ	ECX, spawnrdy		;If none
	ADDL	EDX, #sab_srcsel	;Point to the segment list
	IFFAULT	spawnae
4$:	MOVL	EBX, ES:[EDX]		;Get source selector
	ORB	BL, #03
	CMPW	8t.B[EBP], BX		;Check his saved GS register
	JNE	6$.S			;If not the same
	MOVL	8t.B[EBP], #0		;Same - clear it
6$:	CMPW	12t.B[EBP], BX		;Check his saved FS register
	JNE	8$.S			;If not the same
	MOVL	12t.B[EBP], #0		;Same - clear it
8$:	CMPW	16t.B[EBP], BX		;Check his saved ES register
	JNE	10$.S			;If not the same
	MOVL	16t.B[EBP], #0		;Same - clear it
10$:	CMPW	20t.B[EBP], BX		;Check his saved DS register
	JNE	12$.S			;If not the same
	MOVL	20t.B[EBP], #0		;Same - clear it
12$:	MOVL	EAX, ES:4.B[EDX]	;Get destination selector
	ADDL	EDX, #8t.B
	PUSHL	ES
	MOVL	ES, spwn_newpda.B[EBP]	;Get selector for child's PDA
	PUSHL	EDX
	PUSHL	ECX
	PUSHL	EBX
	CALL	xferseg#		;Transfer the segment
	POPL	EBX
	POPL	ECX
	POPL	EDX
	POPL	FS
	JC	spawnf2.S		;If error
	CMPW	spwn_CS.B[EBP], BX	;Was this the CS value?
	JNE	14$.S			;No
	MOVL	spwn_CS.B[EBP], EAX	;Yes - update it	
14$:	CMPW	spwn_SS.B[EBP], BX	;Was this the SS value?
	JNE	16$.S			;No
	MOVL	spwn_SS.B[EBP], EAX	;Yes - update it
16$:	LOOP	ECX, 4$			;OK - continue if more segments
spawnrdy:
	LFSL	EBX, SS:pdaArg2#
	MOVL	ES, spwn_newpda.B[EBP]	;Get selector for child's PDA
	IFFAULT	spawnae
	MOVL	ECX, FS:sab_EFR.B[EBX]	;Get EFR value
	ANDL	ECX, #60FFFh		;Make sure no extra bits, set IOPL = 0
	ORB	CH, #02h		;Make sure IF is set
	IFFAULT	spawnae
	MOVL	EAX, spwn_CS.B[EBP]	;Get CS value
	IFFAULT	spawnae
	MOVL	EDX, spwn_SS.B[EBP]	;Get SS value
	MOVL	ES:pdaURegEFR#, ECX
	MOVL	ES:pdaURegCS#, EAX
	MOVL	ES:pdaURegSS#, EDX
	MOVL	EAX, FS:sab_EIP.B[EBX]	;Get EIP value
	MOVL	ES:pdaURegEIP#, EAX
	MOVL	EAX, FS:sab_ESP.B[EBX]	;Get ESP value
	MOVL	ES:pdaURegESP#, EAX
	MOVL	EAX, FS:sab_EAX.B[EBX]	;Get EAX value
	MOVL	ES:pdaURegEAX#, EAX
	MOVL	EAX, FS:sab_EDI.B[EBX]	;Get EDI value
	MOVL	ES:pdaURegEDI#, EAX
	TOFORK
	CALL	knlRRequeue#		;Start the child process
	FROMFORK
	LEAVE
	CLRL	EAX
	RET
.PAGE
	.SBTTL	Routines to process parameters for svcSchSpawn

;Routine for IOPAR_DEVLIST parameter - Device list

	DPARMHDR SET, STR
spwndevlist:
	CMPL	spwn_devlist1+4.B[EBP], #0.B ;Already have a 1st device list?
	JNE	2$.S			;Yes
	MOVL	spwn_devlist1+0.B[EBP], EBX ;No
	MOVL	spwn_devlist1+4.B[EBP], ES
	MOVL	spwn_devsize1.B[EBP], ECX
	RET

2$:	CMPL	spwn_devlist2+4.B[EBP], #0.B ;Already have a 2nd device list?
	JNE	4$.S			;Yes
	MOVL	spwn_devlist2+0.B[EBP], EBX ;No
	MOVL	spwn_devlist2+4.B[EBP], ES
	MOVL	spwn_devsize2.B[EBP], ECX
	RET

4$:	MOVL	EAX, #ER_PARMF
	STC
	RET

;Routine for IOPAR_ENVLIST parameter - Environment list

	DPARMHDR SET, STR
spwnenvlist:
	MOVL	spwn_envlist+0.B[EBP], EBX
	MOVL	spwn_envlist+4.B[EBP], ES
	MOVL	spwn_envsize.B[EBP], ECX
	RET

;Routine for IOPAR_WSLIMIT parameter - Working set size limit value

	DPARMHDR SET, DECV
spwnwslimit:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_wslimit.B[EBP], EAX
6$:	RET

;Routine for IOPAR_WSALLOW parameter - Working set size allowed value

	DPARMHDR SET, DECV
spwnwsallow:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_wsallow.B[EBP], EAX
	RET

;Routine for IOPAR_TMLIMIT parameter - Total memory limit value

	DPARMHDR SET, DECV
spwntmlimit:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_tmlimit.B[EBP], EAX
	RET

;Routine for IOPAR_TMALLOW parameter - Total memory allowed value

	DPARMHDR SET, DECV
spwntmallow:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_tmallow.B[EBP], EAX
	RET

;Routine for IOPAR_PMLIMIT parameter - Protected mode memory limit value

	DPARMHDR SET, DECV
spwnpmlimit:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_pmlimit.B[EBP], EAX
	RET

;Routine for IOPAR_PMALLOW parameter - Protected mode memory allowed value

	DPARMHDR SET, DECV
spwnpmallow:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_pmallow.B[EBP], EAX
	RET

;Routine for IOPAR_RMLIMIT parameter - Real mode memory limit value

	DPARMHDR SET, DECV
spwnrmlimit:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_rmlimit.B[EBP], EAX
	RET

;Routine for IOPAR_RMALLOW parameter - Real mode memory allowed value

	DPARMHDR SET, DECV
spwnrmallow:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_rmallow.B[EBP], EAX
	RET

;Routine for IOPAR_OMLIMIT parameter - Overhead memory limit value

	DPARMHDR SET, DECV
spwnomlimit:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_omlimit.B[EBP], EAX
	RET

;Routine for IOPAR_OMALLOW parameter - Overhead memory allowed value

	DPARMHDR SET, DECV
spwnomallow:
	CALL	knlGetParm#		;Get the value
	JC	6$.S
	MOVL	spwn_omallow.B[EBP], EAX
	RET

;Routine for IOPAR_ACTPRIV parameter - Active privileges

	DPARMHDR SET, STR
spwnactpriv:
	MOVL	EAX, spwn_actpriv+0.B[EBP] ;Get current value
	MOVL	EDX, spwn_actpriv+4.B[EBP]
	CALL	parsepriv#		;Parse the list
	JC	6$.S
	MOVL	spwn_actpriv+0.B[EBP], EAX ;Store new value
	MOVL	spwn_actpriv+4.B[EBP], EDX
	RET

;Routine for IOPAR_AVLPRIV parameter - Available privileges

	DPARMHDR SET, STR
spwnavlpriv:
	MOVL	EAX, spwn_avlpriv+0.B[EBP] ;Get current value
	MOVL	EDX, spwn_avlpriv+4.B[EBP]
	CALL	parsepriv#		;Parse the list
	JC	8$.S
	MOVL	spwn_avlpriv+0.B[EBP], EAX ;Store new value
	MOVL	spwn_avlpriv+4.B[EBP], EDX
8$:	RET
.PAGE
	.SBTTL	Data

	.MOD	4
	.LONG	PARMMAX
spawnparms:
	.LONG	0		;IOPAR_xxxxxx = 00xx - Generic IO parameters
	.LONG	0		;IOPAR_FILxxx = 01xx - File system IO parameters
	.LONG	0		;IOPAR_TRMxxx = 02xx - Terminal IO parameters
	.LONG	0		;IOPAR_DSKxxx = 03xx - Disk IO parameters
	.LONG	0		;IOPAR_TAPxxx = 04xx - Tape IO parameters
	.LONG	0		;IOPAR_NETxxx = 05xx - Network IO parameters
	.LONG	0		;IOPAR_IPMxxx = 06xx - IPM IO parameters
	.LONG	0		;IOPAR_DGxxx  = 07xx - Datagram IO parameters
	.LONG	0		;	      = 08xx
	.LONG	0		;	      = 09xx
	.LONG	0		;	      = 0Axx
	.LONG	0		;	      = 0Bxx
	.LONG	0		;	      = 0Cxx
	.LONG	0		;	      = 0Dxx
	.LONG	0		;	      = 0Exx
	.LONG	0		;	      = 0Fxx
	.LONG	spawnrunparms	;IOPAR_RUNxxx = 10xx - Run IO parameters
PARMMAX=!{$-spawnparms}/4

	.LONG	PARMRUNMAX
spawnrunparms:
	.LONG	0
	.LONG	0		;IOPAR_RUNCMDTAIL  = 1001h
	.LONG	spwndevlist	;IOPAR_RUNDEVLIST  = 1002h
	.LONG	spwnenvlist	;IOPAR_RUNENVLIST  = 1003h
	.LONG	0		;IOPAR_RUNDEBUGBFR = 1004h
	.LONG	0		;IOPAR_RUNADDRESS  = 1005h
	.LONG	spwnactpriv	;IOPAR_RUNPRIVMASK = 1006h
	.LONG	0		;IOPAR_RUNFCB1     = 1007h
	.LONG	0		;IOPAR_RUNFCB2     = 1008h
	.LONG	spwnactpriv	;IOPAR_RUNACTPRIV  = 1009h
	.LONG	spwnavlpriv	;IOPAR_RUNAVLPRIV  = 100Ah
	.LONG	0		;		   = 100Bh
	.LONG	spwnwslimit	;IOPAR_RUNWSLIMIT  = 100Ch
	.LONG	spwnwsallow	;IOPAR_RUNWSALLOW  = 100Dh
	.LONG	spwntmlimit	;IOPAR_RUNTMLIMIT  = 100Eh
	.LONG	spwntmallow	;IOPAR_RUNTMALLOW  = 100Fh
	.LONG	spwnpmlimit	;IOPAR_RUNPMLIMIT  = 1010h
	.LONG	spwnpmallow	;IOPAR_RUNPMALLOW  = 1011h
	.LONG	spwnrmlimit	;IOPAR_RUNRMLIMIT  = 1012h
	.LONG	spwnrmallow	;IOPAR_RUNRMALLOW  = 1013h
	.LONG	spwnomlimit	;IOPAR_RUNOMLIMIT  = 1014h
	.LONG	spwnomallow	;IOPAR_RUNOMALLOW  = 1015h
PARMRUNMAX=!{$-spawnrunparms}/4


	.TITLE	UDFSRVA - UDFSRV ADD command routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSXNET.PAR
	.INCLUD XOSINC:\XMAC\XOSTHREADS.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	UDFSRV.PAR

	.STDSEGS

	.PSECT	_TEXT_p

kwgroup:   .ASCIZ "GROUP"
kwgro:	   .ASCIZ "GRO"
kwport:	   .ASCIZ "PORT"
kwpor:	   .ASCIZ "POR"
kwdevice:  .ASCIZ "DEVICE"
kwdev:     .ASCIZ "DEV"

	.MOD	4
keywordadd:
	.LONG	kwgroup    , ASF$VALREQ|ASF$LSVAL, 0, fncaddgroup , 0
	.LONG	kwgro      , ASF$VALREQ|ASF$LSVAL, 0, fncaddgroup , 0
	.LONG	kwport     , ASF$VALREQ|ASF$NVAL , 0, fncaddport  , 0
	.LONG	kwpor      , ASF$VALREQ|ASF$NVAL , 0, fncaddport  , 0
	.LONG	kwdevice   , ASF$VALREQ|ASF$LSVAL, 0, fncadddev   , 0
	.LONG	kwdev      , ASF$VALREQ|ASF$LSVAL, 0, fncadddev   , 0
keyword::
	.LONG	kwinstance#, ASF$VALREQ|ASF$NVAL , 0, fncinstance#, 0
	.LONG	kwins#     , ASF$VALREQ|ASF$NVAL , 0, fncinstance#, 0
	.LONG	0

	.SBTTL	cmdadd - Subroutine to process the ADD command

;Subroutine to process the ADD command

cmdadd::MOVL	EAX, 4t.B[ESP]
	MOVL	cmdpntr#, EAX
	CLRL	ESI
	MOVL	udphndl, ESI
	MOVB	udpname, #0
	MOVB	group#, #0
	MOVL	udpport, #DFLTPORT
	PUSHL	#0.B			;No default extension for indirect file
	PUSHL	#0.B			;No next line function
	PUSHL	#srvCmdError#		;Error function
	PUSHL	#0.B			;Function called for non-keyword args
	PUSHL	#keywordadd		;Offset of keyword table
	PUSHL	#0.B			;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#cmdpntr#		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	TESTL	EAX, EAX
	JE	2$.S
	CALL	banner#
	MOVL	EAX, instance#		;Get instance
	MOVL	EBX, #noismsg#
	TESTL	EAX, EAX
	JE	setuperr		;If not specified
	MOVL	EBX, #iiumsg
	BTL	instx#, EAX		;Is the instance defined now?
	JC	setuperr		;Yes - fail
	MOVL	EBX, #nodvmsg
	CMPB	udpname, #0		;Was a UDP name specified?
	JE	setuperr		;No - fail
	PUSHL	#O$IN|O$OUT		;Yes - check the UDP device to make
	PUSHL	DS			;  sure it really is a UDP device
	PUSHL	#udpname
	PUSHL	DS
	PUSHL	#udpoparms
	CALLF	svcIoOpen##
	TESTL	EAX, EAX
	JNS	4$.S			;If OK
	PUSHL	EAX			;Error
	PUSHL	#udpname
	PUSHL	#oerfmt
	JMP	deverr.S

2$:	RET

;Here with UDP device open - check the device class

4$:	MOVL	udphndl, EAX		;Save handle for the UDP device
	CMPL	devclass+0, #'UDP'	;Is this really a UDP device?
	JE	havedev.S		;Yes
	PUSHL	EAX
	PUSHL	#udpname
	PUSHL	#nrerfmt
deverr:	PUSHL	#msgbufr#
	CALL	sprintf#
	ADDL	ESP, #12t.B
	JMP	setuperrmsg
.PAGE
2$:	PUSHL	EAX
	PUSHL	#udpname
	PUSHL	#ergipn
	JMP	deverr.S

4$:	PUSHL	EAX
	PUSHL	#udpname
	PUSHL	#eroipd
	JMP	deverr.S

;Here if have a UDP device

havedev:

.IF NE 0
	PUSHL	EAX			;Get name of the underlying IPS device
	PUSHL	DS
	PUSHL	#udpchar
	CALLF	svcIoDevChar##
	TESTL	EAX, EAX
	JS	2$.S
	PUSHL	#ipsname
	PUSHL	#ipsfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	ADDL	ESP, #12t.B



	PUSHL	#0.B			;Get the sub-net mask
	PUSHL	DS
	PUSHL	#msgbufr#
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcIoOpen##
	TESTL	EAX, EAX
	JS	4$.S
	MOVL	EDX, EAX

qqqqqqq

.ENDC

	PUSHL	udphndl			;Set the local port
	MOVL	EAX, udpport
	MOVL	port, EAX
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	DS
	PUSHL	#portparms
	CALLF	svcIoOutBlockP##
	MOVL	EBX, #upemsg
	TESTL	EAX, EAX
	JS	10$.S			;If error
	CMPB	havetmr, #0		;Do we have a timer thread yet?
	JNE	8$.S			;Yes - go on
	PUSHL	#TIMERTDB		;Offset for the TDB
	PUSHL	#THDSTKSIZE		;Stack size
	PUSHL	#tdb_SIZE.B		;Size of the TDB
	PUSHL	#timerthread#		;Main function for thread
	PUSHL	#0.B			;Arguments for main function
	PUSHL	#0.B
	CALLF	thdCtlCreate#		;Create the UDP thread
	MOVL	EBX, #tdtmsg
	TESTL	EAX, EAX
	JS	10$.S			;If error
	INCL	havetmr			;OK - indicate have timer thread now
8$:	MOVL	ESI, instance#		;Now allocate memory for our data area
	SHLL	ESI, #26t		;  for the instance
	ADDL	ESI, #THDSTKSIZE
	PUSHL	DS
	LEAL	EAX, idb_udpbegin[ESI]
	PUSHL	EAX
	PUSHL	#PG$READ|PG$WRITE.B
	PUSHL	#idb_udpSIZE
	CALLF	svcMemChange##
	MOVL	EBX, #nmimsg
	TESTL	EAX, EAX		;Error?
10$:	JS	setuperr		;Yes
	LEAL	EAX, idb_index[ESI]	;No
	MOVL	idb_free[ESI], EAX
	ADDL	EAX, #0FFFh
	ANDL	EAX, #0FFFFF000h
	MOVL	idb_top[ESI], EAX
	MOVL	EAX, group#+0t		;Store the group name
	MOVL	idb_group+0t[ESI], EAX
	MOVL	EAX, group#+4t
	MOVL	idb_group+4t[ESI], EAX
	MOVL	EAX, group#+8t
	MOVL	idb_group+8t[ESI], EAX
	MOVL	EAX, group#+12t
	MOVL	idb_group+12t[ESI], EAX
	MOVL	EAX, udpname#+0		;Store the UDP name
	MOVL	idb_udpname+0[ESI], EAX
	MOVL	EAX, udpname#+4
	MOVL	idb_udpname+4[ESI], EAX
	MOVL	EAX, udpname#+8
	MOVL	idb_udpname+8[ESI], EAX
	MOVL	EAX, udpport#
	MOVL	idb_udpport[ESI], EAX
	MOVL	EAX, udphndl#
	MOVL	idb_udphndl[ESI], EAX
	LEAL	EAX, idb_udpparms[ESI]
	MOVL	[EAX], #PAR$GET|REP_HEXV|{4<8t}|{IOPAR_NETRMTNETAR<16t}
	MOVL	8t.B[EAX], #PAR$GET|REP_HEXV|{4<8t}|{IOPAR_NETRMTPORTR<16t}
	MOVB	16t.B[EAX], #0
	DECL	idb_blkpos[ESI]
	PUSHL	ESI			;Offset for the TDB
	PUSHL	#THDSTKSIZE		;Stack size
	PUSHL	#tdb_SIZE.B		;Size of the TDB
	PUSHL	#udpthread#		;Main function for thread
	PUSHL	#0.B			;Arguments for main function
	PUSHL	#0.B
	CALLF	thdCtlCreate#		;Create the UDP thread
	MOVL	EBX, #tdimsg
	TESTL	EAX, EAX
	JS	setuperr.S		;If error
	MOVL	EAX, instance#		;OK - indicate instance exists
	BTSL	instx#, EAX
	MOVL	idb_instance[ESI], EAX	;Store the instance number
	MOVL	EAX, lastidb#		;Link into our list of IDBs
	MOVL	idb_next[EAX], ESI
	MOVL	lastidb#, ESI
	MOVL	EAX, srvMsgDst#		;Store the message destination for the
	MOVL	idb_udpmsgdst[ESI], EAX	;  thread routine
	RET				;Return from the command routine - the
					;  rest of the initialization will be
					;  done by the UDP thread

;Here if error creating the UDP thread

setuperrmsg:
	POPL	EAX
	MOVL	EBX, #msgbufr#
setuperr:
	PUSHL	srvMsgDst#
	PUSHL	#0.B
	PUSHL	EBX
	PUSHL	EAX
	CMPL	udphndl, #0.B		;Have a UDP device?
	JE	14$.S			;No
	PUSHL	udphndl			;Yes - close it
	PUSHL	#0.B
	CALLF	svcIoClose##
14$:	TESTL	ESI, ESI		;Have memory allocated?
	JE	16$.S			;No
	PUSHL	DS			;Yes - give it up
	ADDL	ESI, #idb_udpbegin
	PUSHL	ESI
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
16$:	CALL	srvCmdErrorResp#
	ADDL	ESP, #16t.B
	RET
.PAGE
	.SBTTL	fncaddport - Function to process the PORT keyword for ADD command

;Function to process the PORT keyword for the ADD command - this specifies
;  the UDP port to use

fncaddport:
	MOVL	EBX, 4.B[ESP]		;Get offset of the argument data
	MOVL	EAX, argdata_value.B[EBX] ;Get value
	MOVL	udpport, EAX		;Store it
	JMP	rtnone2.S
.PAGE
	.SBTTL	fncaddgroup - Function to process the GROUP keyword for ADD command

;Function to process the GROUP keyword for the ADD command - this specifies
;  the name of the UDP device to use

fncaddgroup:
	PUSHL	ESI
	PUSHL	EDI
	MOVL	EBX, #group
	CMPB	[EBX], #0
	JNE	10$.S
	MOVL	EDX, 12t.B[ESP]		;Get offset of argument data structure
	MOVL	EDX, argdata_value.B[EDX] ;Get offset of name string
	MOVL	ECX, #8t
2$:	MOVB	AL, [EDX]		;Get name character
	CMPB	AL, #0			;End?
	JE	14$.S			;Yes
	INCL	EDX			;No
	CMPB	AL, #'a'		;Lower case?
	JB	4$.S			;No
	ADDB	AL, #'A'-'a'		;Yes - change to upper case
4$:	MOVB	[EBX], AL		;Store in buffer
	INCL	EBX
	LOOP	ECX, 2$			;No - loop if can take more
6$:	MOVL	ESI, #bgrpmsg		;Bad name
8$:	PUSHL	srvMsgDst
	PUSHL	#0.B
	PUSHL	ESI
	PUSHL	#0.B
	CALL	srvCmdErrorResp#
	ADDL	ESP, #16t.B
	CLRL	EAX
	POPL	EDI
	POPL	ESI
	RET

;Here if more than one group specified

10$:	MOVL	ESI, #mltgpmsg
	JMP	8$.S

;Here with colon in name

12$:	CMPB	[EDX], #0		;Is it the last character?
	JNE	6$.S			;No - bad name
	JMP	16$.S

;Here with end of name (no colon seen)

14$:	MOVB	[EBX], #0		;Store final null
16$:	POPL	EDI
	POPL	ESI
rtnone2:CLRL	EAX
	INCL	EAX
	RET
.PAGE
	.SBTTL	fncadddev - Function to process the DEVICE keyword for ADD command

;Function to process the DEVICE keyword for the ADD command - this specifies
;  the name of a UDP device to use

fncadddev:
	PUSHL	ESI
	PUSHL	EDI
	MOVL	EBX, #udpname
	CMPB	[EBX], #0
	JNE	10$.S
	MOVL	EDX, 12t.B[ESP]		;Get offset of argument data structure
	MOVL	EDX, argdata_value.B[EDX] ;Get offset of name string
	MOVL	ECX, #8t
2$:	MOVB	AL, [EDX]		;Get name character
	CMPB	AL, #0			;End?
	JE	14$.S			;Yes
	INCL	EDX			;No
	CMPB	AL, #'a'		;Lower case?
	JB	4$.S			;No
	ADDB	AL, #'A'-'a'		;Yes - change to upper case
4$:	MOVB	[EBX], AL		;Store in buffer
	INCL	EBX
	CMPB	AL, #':'		;Colon?
	JE	12$.S			;Yes
	LOOP	ECX, 2$			;No - loop if can take more
6$:	MOVL	ESI, #bdspmsg		;Bad name
8$:	PUSHL	srvMsgDst#
	PUSHL	#0.B
	PUSHL	ESI
	PUSHL	#0.B
	CALL	srvCmdErrorResp#
	ADDL	ESP, #16t.B
	CLRL	EAX
	POPL	EDI
	POPL	ESI
	RET

;Here if more than one device specified

10$:	MOVL	ESI, #mltdvmsg
	JMP	8$.S

;Here with colon in name

12$:	CMPB	[EDX], #0		;Is it the last character?
	JNE	6$.S			;No - bad name
	JMP	16$.S

;Here with end of name (no colon seen)

14$:	MOVW	[EBX], #':'		;Store colon and null
16$:	POPL	EDI
	POPL	ESI
	JMP	rtnone2.S
.PAGE
	.SBTTL	udpinit - Subroutine to initialize the UDP thread

;Subroutine to initialize the UDP thread
;	c{ESI} = Offset of IDB
;	CALL	udpinit
;  Does not return if error

udpinit::
	LEAL	EAX, idb_group[ESI]
	PUSHL	EAX
	PUSHL	#grpfmt
	LEAL	EDI, idb_blkbufr[ESI]
	PUSHL	EDI
	CALL	sprintf#
	ADDL	ESP, #12t
	PUSHL	#O$IN|O$OUT|O$NODFWR|O$XWRITE ;Open the UDF
	PUSHL	DS
	PUSHL	EDI
	PUSHL	DS
	PUSHL	#udfoparms#
	CALLF	svcIoOpen##
	TESTL	EAX, EAX
	JS	openerr			;If can't open it
	MOVL	idb_udfhndl[ESI], EAX
	MOVB	AL, #MT_INTRMDSTS
	CALL	addreport
	CLRL	EAX
	CALL	readbegin#		;Set up to start reading the file
	JC	2$.S
	CALL	getbyte#
	JC	2$.S
	CMPB	AL, #81h
	JNE	4$.S
	CALL	getbyte#
2$:	JC	readerr
	CMPB	AL, #0C6h
4$:	JNE	hdrerr
	CLRL	EAX
	MOVL	nxtrpt, #ADDRPTINT
	MOVL	EAX, udflen#
	MOVL	idb_eofpos[ESI], EAX
	MOVL	EDI, #2
udflp:	MOVL	EAX, EDI
	MOVL	lvl1pos, EAX
	CALL	readbegin#
	JC	2$.S
	CALL	getbyte#		;Get beginning of block byte
	JC	inxdone
	CMPB	AL, #0AAh		;Is it right?
	JE	8$.S			;Yes - go on
	MOVL	EBX, #dnfbbmsg		;No - tell him
	CALL	addwarning
6$:	CALL	getbyte#
	JC	inxdone
	CMPB	AL, #0AAh
	JNE	6$.S
8$:	CALL	getbyte#		;Get the block type
	JC	inxdone
	CMPB	AL, #0AAh		;Another beginning of block byte?
	JE	8$.S			;Yes
	CMPB	AL, #1			;Active user block?
	JE	hvuser			;Yes
	CMPB	AL, #2			;Inactive user block?
	JE	hvuser			;Yes
	CMPB	AL, #0FFh		;Is this a deleted block?
	JE	10$.S			;Yes
	SUBL	ESP, #100t		;No - tell him about it
	MOVL	EDI, ESP
	PUSHL	EAX
	PUSHL	#bbtfmt
	PUSHL	EDI
	CALL	sprintf#
	MOVL	EBX, EDI
	CALL	addwarning
	ADDL	ESP, #112t.B
	JMP	15$.S			;Go find next block

;Here with a deleted record

10$:	CALL	getl1byte#		;Scan to the next record
	JNC	10$.S
	CMPL	EAX, #1.B		;Normal end of record?
	JA	12$.S			;No
	INCL	idb_delcnt[ESI]		;Yes - count the deleted record
	JMP	udfnext			;Continue

;Here if have error return from getl1byte or getl1varval

12$:	JL	readerr			;No - format error?
13$:	MOVL	EBX, #blkfmsg		;Yes - warn him
14$:	CALL	addwarning
15$:	INCL	idb_fmtcnt[ESI]		;Count as a UDF format error
16$:	CALL	getbyte
	JC	inxdone
	CMPB	AL, #0AAh
	JNE	16$.S
	DECL	idb_blkpnt[ESI]		;Put the byte back
	INCL	idb_blkleft[ESI]
	JMP	udfnext

;Here if have a user record

hvuser:	CLRL	EAX
	MOVW	usnmlen#, AX
	MOVB	usnmbfr#+0, AL
	MOVW	usidlen#, AX
	MOVB	usidbfr#+0, AL
	MOVB	billday#, AL
	MOVB	billflg#, AL
usrlp:	CALL	getl1byte#		;Get record type
	JC	20$.S			;If error
	CMPB	AL, #0			;End of record?
	JNE	22$.S			;No
18$:	CALL	getl1byte#		;Yes - skip rest of level 1 block
	JNC	18$.S
20$:	CMPB	AL, #1			;Normal end of block?
	JA	12$.S			;No
	JMP	usreob			;Yes

;Here if not end of level 1 record

22$:	PUSHL	EAX
	CALL	getl1varval#
	POPL	EDX
	JC	12$.S
	MOVL	idb_lvl2left[ESI], EAX	;Store count for level 2 processing
	CMPB	DL, #UDF_USERNAME	;User name item?
	JNE	24$.S			;No
	MOVL	EBX, #usnmbfr		;Yes
	MOVL	ECX, #USNMSIZE
	JMP	26$.S

;Here if not a user name item

24$:	CMPB	DL, #UDF_USERID		;User ID record?
	JNE	34$.S			;No
	MOVL	EBX, #usidbfr		;Yes
	MOVL	ECX, #USIDSIZE
26$:	PUSHL	EBX
28$:	CALL	getl2byte#		;Copy name or ID to our buffer
	JC	32$.S
	MOVB	[EBX], AL
	INCL	EBX
	LOOP	ECX, 28$		;Continue if room for more
30$:	CALL	getl2byte#		;User name or user ID is too long, eat
	JNC	30$.S			;  the rest, but accept the truncated
	CMPB	AL, #1			;  name or ID
	JA	38$.S
	PUSHL	EBX
	MOVL	EBX, #nmid2lng		;Warn him
	CALL	addwarning
	POPL	EBX
	CLRL	EAX

;Here with error while reading the user name or user ID - hopefully this is
;  a normal end of record indication

32$:	MOVB	[EBX], #0
	POPL	EDX			;Restore beginning pointer
	TESTL	EAX, EAX		;Normal end of name?
	JNE	37$.S			;No!
	SUBL	EBX, EDX		;Yes - calculate length
	MOVW	-4.B[EDX], BX		;Store the length
	JMP	usrlp			;Continue

;Here if not user name or user ID

34$:	CMPB	DL, #UDF_BILLING	;Billing record?
	JNE	36$.S			;No
	CALL	getl2byte#		;Yes - get the Flags byte
	JC	32$.S
	MOVB	billflg#, AL
	CALL	getl2byte#		;Skip the BillSts byte
	JC	32$.S
	CALL	getl2byte#		;Get the BillDay byte
	JC	32$.S
	MOVB	billday#, AL

;Here if not user name, user ID, or billing information - skip the item

36$:	CALL	getl2byte#		;Get next level 2 byte
	JNC	36$.S
	TESTL	EAX, EAX
	JE	usrlp
37$:	CMPL	EAX, #1.B
	JG	13$
38$:	JL	readerr			;If disk error
	MOVL	EBX, #blksmsg		;Level 2 record is too short - warn him
	JMP	14$

bbtfmt:  .ASCIZ "Illegal level 1 block type %d"
dnfbbmsg:.ASCIZ "Did not find beginning-of-block flag where expected"
.PAGE
;Here if record has neither a user name or user ID field - ignore it

2$:	INCL	idb_igncnt[ESI]
	MOVL	EBX, #noinxmsg
	CALL	addwarning
	JMP	udfnext

;Here with the user description record processed.  See if we got a name and/or
;  a user ID record.

usreob:	MOVW	AX, usnmlen#
	ADDW	AX, usidlen#
	JE	2$.S			;If neither name or user ID records!

;Here with at least one indexable field.  First check for duplicate records!

	CMPW	usnmlen#, #0.B		;Do we have a name?
	JE	4$.S			;No
	MOVL	EDI, #usnmbfr#		;Yes - calculate hash index for name
	MOVZWL	ECX, usnmlen#
	CALL	forceupper#
	CALL	calindex#
	MOVL	usnmindx, EDX		;Save it for now
	CALL	findname#		;Look for the name
	JNC	dupnm			;If we found it!
4$:	CMPW	usidlen#, #0.B		;Do we have a user ID?
	JE	udfadd.S		;No
	MOVL	EDI, #usidbfr#		;Yes - calculate hash index for user ID
	MOVZWL	ECX, usidlen#
	CALL	forceupper#
	CALL	calindex#
	MOVL	usidindx, EDX
	CALL	findid#
	JNC	dupid

;Here if this record is not a duplicate

udfadd:	CALL	allocindex#		;Allocate an index block
	JC	memerr			;If error
	MOVB	AL, billday#		;Store billing day in the index
	MOVB	inx_billday.B[EBX], AL
	MOVB	AL, billflg#		;Store the billing flags in the index
	MOVB	inx_billflg.B[EBX], AL
	MOVL	EAX, lvl1pos		;Store position in file in the index
	MOVL	inx_offset.B[EBX], EAX
	CMPW	usnmlen#, #0.B		;Do we have a user name?
	JE	8$.S			;No
	MOVL	EDI, #usnmbfr#		;Yes - index the user name
	MOVZWL	ECX, usnmlen#
	MOVL	EDX, usnmindx
	CALL	indexname#
8$:	CMPW	usidlen#, #0.B		;Do we have a user ID?
	JE	10$.S			;No
	MOVL	EDI, #usidbfr#		;Yes - index the user ID
	MOVZWL	ECX, usidlen#
	MOVL	EDX, usidindx
	CALL	indexid#
10$:	INCL	idb_inxcnt[ESI]
udfnext:INCL	idb_reccnt[ESI]
	MOVL	EAX, idb_reccnt[ESI]
	CMPL	EAX, nxtrpt
	JB	12$.S
	ADDL	nxtrpt, #ADDRPTINT
	MOVB	AL, #MT_INTRMDSTS
	CALL	addreport
12$:	MOVL	EDI, idb_blkpos[ESI]	;Get position of this block
	ADDL	EDI, idb_blkpnt[ESI]
	SUBL	EDI, #idb_blkbufr
	SUBL	EDI, ESI
	JMP	udflp
.PAGE
;Here if have a duplicate name - In this case we always keep the newer record
;  and discard the older one.  Note that we check for duplicate user names
;  first, so if both the user name and user ID are duplicated, we will get
;  here.

dupnm:	PUSHL	#dupusnm
	JMP	6$.S

;Here if have a duplicate user ID only - If the newer record contains a user
;  name, or if the older record does not contain a user name, we keep the newer
;  record and discard the older record.  Otherwise we discard the newer record
;  and keep the older one.

dupid:	CMPW	usnmlen, #0		;Does the newer record contain a user
					;  name?
	JNE	4$.S			;Yes - keep the newer record
	CMPB	inx_usernm.B[EBX], #0	;No - does the older record contain a
					;  user name?
	JNE	16$			;Yes - keep the older record
4$:	PUSHL	#dupusid
6$:	PUSHL	EBX
	INCL	idb_dupcnt[ESI]
	LEAL	EDI, inx_usernm.B[EBX]
	CMPB	[EDI], #0
	JE	10$.S
	MOVL	EBX, [ESP]
	CALL	calindexx#
	CALL	findname#
	JC	20$
	CMPL	EBX, [ESP]
	JNE	20$
	MOVL	EAX, inx_nextnm.B[EBX]	;Unlink this index block
	MOVL	[EDX], EAX
	DECL	idb_usnmcnt[ESI]	;Reduce number of user name entries
10$:	LEAL	EDI, inx_userid.B[EBX]
	CMPB	[EDI], #0
	JE	14$.S
	MOVL	EBX, [ESP]
	CALL	calindexx#
	CALL	findid#
	JC	22$
	CMPL	EBX, [ESP]
	JNE	22$
	MOVL	EAX, inx_nextid.B[EBX]	;Unlink this index block
	MOVL	[EDX], EAX
	DECL	idb_usidcnt[ESI]	;Reduce number of user ID entries
14$:	POPL	EBX
	POPL	EDX
	PUSHL	EBX
	PUSHL	#usidbfr		;Tell him what is happening
	PUSHL	#usnmbfr
	PUSHL	EDX
	PUSHL	#msgbufr#
	CALL	sprintf#
	MOVL	EBX, #msgbufr#
	CALL	addwarning
	MOVL	EBX, 16t.B[ESP]
	PUSHL	inx_offset.B[EBX]
	LEAL	EAX, inx_userid.B[EBX]
	PUSHL	EAX
	LEAL	EAX, inx_usernm.B[EBX]
	PUSHL	EAX
	PUSHL	#discfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #44t.B
	POPL	EBX
	DECL	idb_inxcnt[ESI]		;Reduce number of indexed entries
	CALL	freeindex#		;Give up the index block
	JMP	udfadd			;Add the new record

;Here if we want to keep the older record

16$:	PUSHL	EBX
	INCL	idb_dupcnt[ESI]
	PUSHL	#usidbfr
	PUSHL	#usnmbfr
	PUSHL	#dupusid
	PUSHL	#msgbufr#
	CALL	sprintf#
	MOVL	EBX, #msgbufr#
	CALL	addwarning
	MOVL	EBX, 16t.B[ESP]
	PUSHL	inx_offset.B[EBX]
	LEAL	EAX, inx_userid.B[EBX]
	PUSHL	EAX
	LEAL	EAX, inx_usernm.B[EBX]
	PUSHL	EAX
	PUSHL	#retnfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #44t.B
	POPL	EBX
	JMP	udfnext

;Here if could not find the index block to delete when searching for old user
;  name - this is an internal error that should not be possible!

20$:	MOVL	EBX, #cnfoxnm
	JMP	24$.S

;Here if could not find the index block to delete when searching for old user
;  ID - this is an internal error that should not be possible!

22$:	MOVL	EBX, #cnfoxid
24$:	CALL	addwarning
	JMP	16$.S

dupusnm: .ASCIZ	"Duplicate user name <%s><%s>"
dupusid: .ASCIZ "Duplicate user ID <%s><%s>"
discfmt: .ASCII	{MT_INTRMDMSG}"UDFSRV:          Discarded <%.16s><%.12s> "
	 .ASCIZ	"at %d"
retnfmt: .ASCII	{MT_INTRMDMSG}"UDFSRV:          Retained <%.16s><%.12s> "
	 .ASCIZ	"at %d"
nmid2lng:.ASCIZ	"User name or ID too long, truncated to 16 bytes"
trunmsg: .ASCIZ "UDF truncated"
noinxmsg:.ASCIZ	"Non-indexable record discarded"

cnfoxnm: .ASCII "INTERNAL ERROR: Could not find old index block for user name "
	 .ASCIZ	"when removing duplicate"
cnfoxid: .ASCII	"INTERNAL ERROR: Could not find old index block for user ID "
	 .ASCIZ	"when removing duplicate"
.PAGE
;Subroutine to generate warning message when loading the UDF
;	c{EBX} = Offset of message string
;	CALL	addwarning

addwarning:
	MOVL	EAX, lvl1pos
	PUSHL	EAX
	PUSHL	EBX
	CMPL	idb_lastwrn[ESI], EAX
	JE	4$.S
	MOVB	AL, #MT_INTRMDMSG
	CALL	addreport
4$:	PUSHL	#warnfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #24t.B
	RET

warnfmt:.ASCIZ	{MT_INTRMDMSG}"UDFSRV: Warning: %s at %d"
.PAGE
;Here with the complete index built

inxdone:ORL	EAX, EAX		;Really stoppped by EOF?
	JNE	readerr			;No - fail!
	MOVB	AL, #MT_INTRMDMSG
	CALL	addreport
	PUSHL	idb_udpport[ESI]
	PUSHL	#udpname
	PUSHL	idb_instance[ESI]
	PUSHL	#okfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #28t.B
	RET				;Return from udpinit

grpfmt::.ASCIZ	"XOSCFG:%s.UDF"

;Here if cannot allocate memory for an index block - this is a fatal error

memerr:	MOVL	EBX, #mememsg
	JMP	16$.S

;Here if have error opening the UDF - this is a fatal error

openerr:MOVL	EBX, #openmsg
	JMP	16$.S

;Here if have bad header in the UDF - this is a fatal error

hdrerr:	MOVL	EBX, #udfhmsg
	CLRL	EAX
	JMP	16$.S

;Here if have error reading the UDF - this is a fatal error

readerr:MOVL	EBX, #readmsg
16$:	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#0.B
	PUSHL	#msgbufr#
	PUSHL	EAX
	PUSHL	lvl1pos
	PUSHL	EBX
	PUSHL	#ftlfmt
	PUSHL	#msgbufr#
	MOVB	AL, #MT_INTRMDMSG
	CALL	addreport
	CALL	sprintf#
	ADDL	ESP, #16t.B
	CALL	srvCmdErrorResp#

;Subroutine to give up and IDB and the associated UDP device, UDP thread, and
;  UDF - Can be called from any thread, including the thread being given up.
;  Does not return if called from thread being given up.
;	c{ESI} = Offset of IDB
;	CALL	giveidb

giveidb::
	PUSHL	idb_udphndl[ESI]	;Close the UDP device
	PUSHL	#0.B
	CALLF	svcIoClose#
	PUSHL	idb_udfhndl[ESI]	;Close the UDF
	PUSHL	#0.B
	CALLF	svcIoClose#
	MOVL	EAX, idb_instance[ESI]	;Indicate instance not in use
	BTZL	instx#, EAX
	MOVL	EBX, #firstidb#-idb_next
26$:	CMPL	idb_next[EBX], ESI	;Remove the IDB from the IDB list
	JE	28$.S
	MOVL	EBX, idb_next[EBX]
	JMP	26$.S

28$:	MOVL	EAX, idb_next[ESI]
	MOVL	idb_next[EBX], EAX
	ORL	EAX, EAX
	JNE	30$.S
	MOVL	lastidb, #firstidb#-idb_next
30$:	PUSHL	DS			;Give up the non-TDB part of the IDB
	LEAL	EAX, idb_udpbegin[ESI]
	PUSHL	EAX
	PUSHL	#0.B
	PUSHL	#0.B
	CALLF	svcMemChange##
	PUSHL	ESI			;Terminate the thread (does not return
	CALLF	thdCtlKill#		;  if executed by the thread being
	RET				;  killed)

ftlfmt: .ASCIZ	"Error: %s at %d"
nmimsg:	.ASCIZ	"Error allocating memory for instance data"
tdtmsg: .ASCIZ	"Error creating timer thread"
tdimsg:	.ASCIZ	"Error creating initial thread for instance"
mememsg:.ASCIZ	"Cannot allocate memory for index block"
openmsg:.ASCIZ	"Error opening user definition file"
readmsg:.ASCIZ	"Error reading user definition file"
udfhmsg:.ASCIZ	"Illegal user definition file header"

blkfmsg:.ASCIZ	"Illegal format in user definition file"
blksmsg:.ASCIZ	"Level 2 record is too short"

iiumsg:	.ASCII	"Instance already exist"
sstr::	.ASCIZ	"s"
oerfmt: .ASCIZ	"Error opening device %s"
nrerfmt:.ASCIZ	"Device %s is not a UDP device"
ergipn: .ASCIZ  "Error getting IPS device name for %s"
eroipd: .ASCIZ	"Error opening corresponding IPS device for %s"

okfmt:	.ASCII	{MT_FINALMSG}"UDFSRV: Instance %d created using device %s, "
	.ASCIZ	"port %d"
nodvmsg:.ASCIZ	"No device specified for ADD command"
upemsg: .ASCIZ	"Error setting local UDP port"
udpemsg:.ASCIZ	"Error queueing initial UDP input request"
.PAGE
	.SBTTL	addreport - Subroutine to generate intermediate status report

;Subroutine to generate intermediate status report
;	c(AL)  = Message type (MT_INTRMDSTS or MT_INTRMDMSG)
;	c{ESI} = Offset of IDB
;	CALL	addreport

addreport:
	PUSHL	idb_fmtcnt[ESI]
	PUSHL	idb_igncnt[ESI]
	PUSHL	idb_dupcnt[ESI]
	PUSHL	idb_delcnt[ESI]
	PUSHL	idb_inxcnt[ESI]
	PUSHL	idb_reccnt[ESI]
	PUSHL	EAX
	PUSHL	#rptfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	idb_udpmsgdst[ESI]
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #44t.B
	MOVL	EAX, lvl1pos
	MOVL	idb_lastwrn[ESI], EAX
	RET

rptfmt:	.ASCIZ	"%cUDFSRV: Ttl=%d Idx=%d Del=%d Dup=%d Ign=%d Fmt=%d"
.PAGE
	.SBTTL	Data

mltdvmsg:.ASCIZ "More than one device specified"
mltgpmsg:.ASCIZ "More than one group name specified"
bdspmsg: .ASCIZ "Bad format device name specified"
bgrpmsg: .ASCIZ "Bad format group name specified"
ipsfmt:  .ASCIZ "_%.16s:"

	.PSECT	_DATA_p

nxtrpt:  .LONG	0
lvl1pos: .LONG  0
usnmindx:.LONG	0
usidindx:.LONG	0
havetmr: .LONG  0

phyname:.BLKB  32t

	.MOD	4
udpoparms:
	.BYTE	PAR$GET|REP_TEXT, 8 ;Parameters for initial check of UDP
	.WORD	IOPAR_CLASS	    ;   device
devclass:
	.BLKB	8t
	.BYTE	PAR$SET|REP_HEXV, 4
	.WORD	IOPAR_FILOPTN
	.LONG	FO$XOSNAME
	.BYTE	PAR$GET|REP_STR, 0
	.WORD	IOPAR_FILSPEC
	.LONG	phyname
	.LONG	!phyname
	.WORD	12t
phylength:
	.WORD	0
	.BYTE	0

	.MOD	4
portparms:
	.BYTE	PAR$SET|REP_HEXV, 4
	.WORD	IOPAR_NETLCLPORT
port:	.LONG	0
	.BYTE	0

	.MOD	4
udpchar:.BYTE	PAR$GET|REP_TEXT, 16t
	.ASCII	"IPSDEV"
	.BLKB	2
ipsname:.BLKB	16t
	.BYTE	0

.IF NE 0

	.MOD	4
snmchar:.BYTE	PAR$GET|REP_HEXV, 4
	.ASCII	"SUBMASK"
	.BLKB	1
submask:.LONG	0

.ENDC

	.END

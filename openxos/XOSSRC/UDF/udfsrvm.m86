	.TITLE	UDFSRVM - UDFSRV MODIFY command routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSXNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSTHREADS.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	UDFSRV.PAR

	.STDSEGS

	.PSECT	_TEXT_p

kwaddaccess:.ASCIZ "ADDACCESS"
kwadd:      .ASCIZ "ADD"
kwrmvaccess:.ASCIZ "RMVACCESS"
kwrmv:      .ASCIZ "RMV"
kwmask:     .ASCIZ "MASK"
kwmas:      .ASCIZ "MAS"

	.MOD	4
keywordmod:
	.LONG	kwaddaccess, ASF$VALREQ|ASF$NVAL, 0, fncmodaddacs, 0
	.LONG	kwadd      , ASF$VALREQ|ASF$NVAL, 0, fncmodaddacs, 0
	.LONG	kwrmvaccess, ASF$VALREQ|ASF$NVAL, 0, fncmodrmvacs, 0
	.LONG	kwrmv      , ASF$VALREQ|ASF$NVAL, 0, fncmodrmvacs, 0
	.LONG	kwmask     , ASF$VALREQ|ASF$NVAL, 0, fncmodmask  , 0
	.LONG	kwmas      , ASF$VALREQ|ASF$NVAL, 0, fncmodmask  , 0
	.LONG	kwinstance#, ASF$VALREQ|ASF$NVAL, 0, fncinstance#, 0
	.LONG	kwins#     , ASF$VALREQ|ASF$NVAL, 0, fncinstance#, 0
	.LONG	0

	.SBTTL	cmdmodify - Subroutine to process the MODIFY command

;Subroutine to process the MODIFY command

cmdmodify::
	PUSHL	EDI
	PUSHL	ESI
	MOVL	accessmask, #0FFFFFFFFh ;Default is to check all bits
	MOVL	accesspnt, #accesslist
	MOVL	EAX, 12t.B[ESP]
	MOVL	EDI, #keywordmod
	CALL	requireinst#
	JC	12$
	MOVL	EDI, #accesslist
	CMPL	EDI, accesspnt
	JE	6$			;If no address(es) specified
2$:	MOVL	EAX, 4.B[EDI]		;Get network address
	CMPL	[EDI], #0.B		;Want to add it?
	JNE	22$			;No
4$:	CALL	findaccess		;Yes - see if its already defined
	JE	14$			;Yes - fail
	PUSHL	EAX
	PUSHL	EDX
	CALL	allocindex#		;No - allocate an index block
	POPL	EDX
	POPL	ECX
	JC	16$			;If error
	MOVL	4.B[EBX], ECX		;OK - store network address
	MOVL	EAX, accessmask		;Store access mask
	MOVL	8.B[EBX], EAX
	MOVL	[EDX], EBX		;Link this block into the access list
	CLRL	EAX
	MOVL	[EBX], EAX
	MOVZBL	EAX, 11t.B[EBX]
	PUSHL	EAX
	MOVB	AL, 10t.B[EBX]
	PUSHL	EAX
	MOVB	AL, 9T.B[EBX]
	PUSHL	EAX
	MOVB	AL, 8.B[EBX]
	PUSHL	EAX
	MOVB	AL, 7.B[EBX]
	PUSHL	EAX
	MOVB	AL, 6.B[EBX]
	PUSHL	EAX
	MOVB	AL, 5.B[EBX]
	PUSHL	EAX
	MOVB	AL, 4.B[EBX]
	PUSHL	EAX
	MOVB	AL, #MT_INTRMDMSG
	ADDL	EDI, #8t.B
	CMPL	EDI, accesspnt
	JB	5$.S
	MOVB	AL, #MT_FINALMSG
5$:	PUSHL	EAX
	PUSHL	#addfmt
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #52t.B
	JMP	28$

;Here if no addresses were specified

6$:	MOVL	EDX, #noadrmsg
	PUSHL	srvMsgDst
	PUSHL	#0.B
	PUSHL	EDX
8$:	PUSHL	#0.B
10$:	CALL	srvCmdErrorResp#
	ADDL	ESP, #16t.B
12$:	POPL	ESI
	POPL	EDI
	RET

;Here if trying to add an access entry that already exists

14$:	MOVL	EDX, #badaddfmt
	JMP	20$.S

;Here if error allocating memory for the access block

16$:	PUSHL	srvMsgDst
	PUSHL	#0.B
	PUSHL	#memalcmsg
	PUSHL	EAX
	JMP	10$.S

;Here if address to remove is not defined

18$:	MOVL	EDX, #badrmvfmt
20$:	MOVL	msgbufr, EAX
	SHRL	EAX, #24t
	PUSHL	EAX
	MOVB	AL, msgbufr+2
	PUSHL	EAX
	MOVB	AL, msgbufr+1
	PUSHL	EAX
	MOVB	AL, msgbufr+0
	PUSHL	EAX
	PUSHL	EDX
	PUSHL	#msgbufr#
	CALL	sprintf#
	ADDL	ESP, #24t.B
	PUSHL	srvMsgDst
	PUSHL	#0.B
	PUSHL	#msgbufr
	JMP	8$.S

;Here to remove an address

22$:	CALL	findaccess		;Find the access block
	JNE	18$.S			;Fail if not there
	MOVL	EAX, [EBX]		;Found it - unlink it
	MOVL	[EDX], EAX
	MOVL	EDX, #rmvfmt
	PUSHL	4.B[EBX]
	CALL	freeindex#
24$:	POPL	msgbufr#
	MOVZBL	EAX, msgbufr#+3
	PUSHL	EAX
	MOVB	AL, msgbufr#+2
	PUSHL	EAX
	MOVB	AL, msgbufr#+1
	PUSHL	EAX
	MOVB	AL, msgbufr#+0
	PUSHL	EAX
	MOVB	AL, #MT_INTRMDMSG
	ADDL	EDI, #8t.B
	CMPL	EDI, accesspnt
	JB	26$.S
	MOVB	AL, #MT_FINALMSG
26$:	PUSHL	EAX
	PUSHL	EDX
	PUSHL	#msgbufr#
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	#msgbufr#
	CALL	srvCmdResponse#
	ADDL	ESP, #36t.B
28$:	ADDL	EDI, #8t.B
	CMPL	EDI, accesspnt
	JB	2$
	POPL	ESI
	POPL	EDI
	RET

noadrmsg: .ASCIZ "No access address was specified"
memalcmsg:.ASCIZ "Error allocating memory for access data"
badaddfmt:.ASCIZ "Access address %d.%d.%d.%d is already defined"
badrmvfmt:.ASCIZ "Access address %d.%d.%d.%d is not defined"
addfmt:   .ASCIZ "%cUDFSRV: Address %d.%d.%d.%d (%d.%d.%d.%d) added to access list"
rmvfmt:   .ASCIZ "%cUDFSRV: Address %d.%d.%d.%d removed from access list"
.PAGE

fncmodaddacs:
	PUSHL	EDI
	CLRL	EDI
	JMP	2$.S

fncmodrmvacs:
	PUSHL	EDI
	MOVL	EDI, #1
2$:	PUSHL	ESI
	MOVL	EBX, 12t.B[ESP]		;Get offset of the argument data
	MOVL	EAX, argdata_value.B[EBX] ;Get value
	MOVL	EBX, accesspnt
	CMPL	EBX, #accessend
	JAE	6$.S
	MOVL	[EBX], EDI
	MOVL	4.B[EBX], EAX
	ADDL	accesspnt, #8t.B
	MOVL	EAX, #1
4$:	POPL	ESI
	POPL	EDI
	RET

;Here if too many addresses specified

6$:	PUSHL	srvMsgDst
	PUSHL	#0.B
	PUSHL	#toomanymsg
	PUSHL	#0.B
	CALL	srvCmdErrorResp#
	ADDL	ESP, #16t.B
	CLRL	EAX
	JMP	4$.S

toomanymsg:.ASCIZ "Too many access addresses specified in MODIFY command"
.PAGE
;Here for the MOD ACCESS function - Specifies the value for the access mask
;  for following MOD ADD functions

fncmodmask:
	MOVL	EBX, 4.B[ESP]		;Get offset of the argument data
	MOVL	EAX, argdata_value.B[EBX] ;Get value
	MOVL	accessmask, EAX		;Store as new mask value
	MOVL	EAX, #1
	RET
.PAGE
;Subroutine to find an access block
;	c{EAX} = Network address
;	CALL	findaccess
;	Z:set = Found block
;	  c{EBX} = Offset of block
;	  c{EDX} = Offset of pointer to block
;	Z:clr = Did not find block
;	  c{EDX} = Offset of last block or offset of head pointer

findaccess:
	LEAL	EDX, idb_accesslist[ESI]
4$:	MOVL	EBX, [EDX]
	TESTL	EBX, EBX
	JE	6$.S
	CMPL	4.B[EBX], EAX		;For this one?
	JE	8$.S			;Yes - return with Z set
	MOVL	EDX, EBX		;No - advance to next
	JMP	4$.S			;Continue

;Here if did not find the access block

6$:	INCL	EBX			;Clear Z
8$:	RET

.PAGE
addmsg:	.ASCIZ	{MT_FINALMSG}"UDFSRV: Access for %d.%d.%d.%d has been added"
rmvmsg:	.ASCIZ	{MT_FINALMSG}"UDFSRV: Access for %d.%d.%d.%d has been removed"

	.PSECT	_DATA_p

	.MOD	4
accessmask:.LONG  0
accesspnt :.LONG  0
accesslist:.BLKL  8t*8
accessend:

	.END

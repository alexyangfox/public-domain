	.TITLE	UDFSRVS - UDFSRV STATUS command routines

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSXNET.PAR
	.INCLUD	XOSINC:\XMAC\XOSTHREADS.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	UDFSRV.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	cmdstatus - Subroutine to process the STATUS command

;Subroutine to process the STATUS command - This command may optionally specify
;  an instance.  If an instance is not specified, global status is returned.
;  If an instance is specified, instance status is returned.

cmdstatus::
	MOVL	EAX, 4t.B[ESP]
	MOVL	cmdpntr#, EAX
	PUSHL	#0.B			;No default extension for indirect file
	PUSHL	#0.B			;No next line function
	PUSHL	#srvCmdError#		;Error function
	PUSHL	#0.B			;Function called for non-keyword args
	PUSHL	#keyword#		;Offset of keyword table
	PUSHL	#0.B			;Offset of option table
	PUSHL	#PAF$INDIRECT|PAF$EATQUOTE ;Flag bits
	PUSHL	#cmdpntr#		;Offset of arg string pointer
	CALL	procarg#		;Process arguments
	ADDL	ESP, #32t.B
	ORL	EAX, EAX
	JE	2$.S			;If error
	CALL	banner#			;OK - display banner
	MOVL	EDI, #msgbufr#		;Get this in a register since we use it
	MOVL	ESI, instance#		;  a lot
	ORL	ESI, ESI		;Was an instance specified?
	JNE	inststs			;Yes
	CMPL	instx#, #0.B		;No - have any instances at all?
	JNE	4$.S			;Yes
	PUSHL	srvMsgDst#
	PUSHL	#noinst
	CALL	srvCmdResponse#
	ADDL	ESP, #8t.B
2$:	RET

;Here if have at least one instance

4$:	MOVL	ESI, #4000000h+THDSTKSIZE ;Point to first possible IDB
	MOVL	EDX, instx#
	SHRL	EDX, #1
6$:	SHRL	EDX, #1			;Does this instance exist
	JNC	10$.S			;No
	PUSHL	EDX			;Yes
	PUSHL	idb_udpport[ESI]	;Tell him about it
	LEAL	EAX, idb_udpname[ESI]
	PUSHL	EAX
	LEAL	EAX, idb_group[ESI]
	PUSHL	EAX
	PUSHL	idb_instance[ESI]
	MOVB	AL, #MT_INTRMDMSG
	ORL	EDX, EDX
	JNE	8$.S
	MOVB	AL, #MT_FINALMSG
8$:	PUSHL	EAX
	PUSHL	#stsinst
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #36t.B
	POPL	EDX
10$:	ADDL	ESI, #4000000h		;Advance to next IDB
	SHLL	EDX, #1			;Any more instances?
	JNE	4$.S			;Yes
	RET				;No - finished

noinst:	.ASCIZ	{MT_FINALMSG}"UDFSRV: No instances defined"
stsinst:.ASCIZ	"%cUDFSRV: Ins %d: Group = %s, UDP Dev = %s, Port = %d"
.PAGE
;Here to return instance status

inststs:BTL	instx, ESI		;Is the instance defined now?
	JC	6$.S			;Yes - go on
	PUSHL	ESI
	PUSHL	#stsfmtni
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #20t.B
	RET

;Here if instance exists

6$:	SHLL	ESI, #26t		;Get offset of the IDB
	ADDL	ESI, #THDSTKSIZE

;Generate line which gives the UDP device name and the port number

	PUSHL	idb_udpport[ESI]
	LEAL	EAX, idb_udpname[ESI]
	PUSHL	EAX
	LEAL	EAX, idb_group[ESI]
	PUSHL	EAX
	PUSHL	#stsfmti1
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #28t.B

;Generate the access address lines (if any)

	MOVL	EDX, idb_accesslist[ESI]
8$:	TESTL	EDX, EDX
	JE	10$.S
	PUSHL	EDX
	MOVZBL	EAX, 11t.B[EDX]
	PUSHL	EAX
	MOVB	AL, 10t.B[EDX]
	PUSHL	EAX
	MOVB	AL, 9.B[EDX]
	PUSHL	EAX
	MOVB	AL, 8.B[EDX]
	PUSHL	EAX
	MOVB	AL, 7.B[EDX]
	PUSHL	EAX
	MOVB	AL, 6.B[EDX]
	PUSHL	EAX
	MOVB	AL, 5.B[EDX]
	PUSHL	EAX
	MOVB	AL, 4.B[EDX]
	PUSHL	EAX
	PUSHL	#stsfmtac
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #48t.B
	POPL	EDX
	MOVL	EDX, [EDX]
	JMP	8$.S

;Generate the memory line

10$:	PUSHL	idb_indxfcnt[ESI]
	PUSHL	idb_indxtcnt[ESI]
	PUSHL	#stsfmtm1
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #24t.B

;Generate the first UDF line

	PUSHL	idb_usnmcnt[ESI]
	PUSHL	idb_usidcnt[ESI]
	PUSHL	idb_inxcnt[ESI]
	PUSHL	idb_reccnt[ESI]
	PUSHL	#stsfmtu1
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #32t.B

;Generate the second UDF line

	PUSHL	idb_fmtcnt[ESI]
	PUSHL	idb_igncnt[ESI]
	PUSHL	idb_dupcnt[ESI]
	PUSHL	idb_delcnt[ESI]
	PUSHL	#stsfmtu2
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #32t.B

;Generate the first ACT line

	PUSHL	idb_ovrcnt[ESI]
	PUSHL	idb_modcnt[ESI]
	PUSHL	idb_addcnt[ESI]
	PUSHL	idb_readcnt[ESI]
	PUSHL	#stsfmta1
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #32t.B

;Generate the second ACT line

	PUSHL	idb_rmvcnt[ESI]
	PUSHL	#stsfmta2
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #20t.B

;Generate the first ERR line

	PUSHL	idb_inuscnt[ESI]
	PUSHL	idb_noixcnt[ESI]
	PUSHL	idb_exstcnt[ESI]
	PUSHL	idb_ntfdcnt[ESI]
	PUSHL	#stsfmte1
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #32t.B

;Generate the second ERR line

	PUSHL	idb_errcnt[ESI]
	PUSHL	idb_srvrcnt[ESI]
	PUSHL	idb_ufmtcnt[ESI]
	PUSHL	idb_mfmtcnt[ESI]
	PUSHL	#stsfmte2
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #32t.B

;Generate the third ERR line

	PUSHL	idb_compcnt[ESI]
	PUSHL	idb_udflcnt[ESI]
	PUSHL	idb_rsplcnt[ESI]
	PUSHL	#stsfmte3
	PUSHL	EDI
	CALL	sprintf#
	PUSHL	srvMsgDst#
	PUSHL	EDI
	CALL	srvCmdResponse#
	ADDL	ESP, #28t.B
	RET

stsfmti1:.ASCIZ	{MT_INTRMDMSG}"UDFSRV: Group = %s, UDP Dev = %s, Port = %d"
stsfmtac:.ASCIZ {MT_INTRMDMSG}"ACCESS: %d.%d.%d.%d (%d.%d.%d.%d)"
stsfmtm1:.ASCIZ	{MT_INTRMDMSG}"   MEM:  Ttl=%-8d Free=%d"
stsfmtu1:.ASCIZ	{MT_INTRMDMSG}"   UDF:  Ttl=%-8d  Inx=%-8d Usid=%-8d Usnm=%d"
stsfmtu2:.ASCIZ	{MT_INTRMDMSG}"   UDF:  Del=%-8d  Dup=%-8d  Ign=%-8d  Fmt=%d"
stsfmta1:.ASCIZ	{MT_INTRMDMSG}"   ACT: Read=%-8d  Add=%-8d  Mod=%-8d Over=%d"
stsfmta2:.ASCIZ	{MT_INTRMDMSG}"   ACT:  Del=%d"
stsfmte1:.ASCIZ	{MT_INTRMDMSG}"   ERR: Ntfd=%-8d Exst=%-8d Noix=%-8d Inus=%d"
stsfmte2:.ASCIZ	{MT_INTRMDMSG}"   ERR: Mfmt=%-8d Ufmt=%-8d Srvr=%-8d  Err=%d"
stsfmte3:.ASCIZ	{MT_FINALMSG}"   ERR: Comp=%-8d Ulng=%-8d Rlng=%d"
stsfmtni:.ASCIZ {MT_FINALERR}"? UDFSRV: Instance %d does not exist"

	.END

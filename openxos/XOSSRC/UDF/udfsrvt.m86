	.TITLE	UDFSRVT - PARLEY user information server timer thread

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386

	.INCLUD	XOSINC:\XMAC\STDIO.PAR
	.INCLUD	XOSINC:\XMAC\CTYPE.PAR
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSTIME.PAR
	.INCLUD XOSINC:\XMAC\XOSTHREADS.PAR
	.INCLUD	XOSINC:\XMAC\XOSUDF.PAR
	.INCLUD	UDFSRV.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	timerthread - Main thread function for the timer thread

;Main thread function for the timer thread - This thread simply checks to see
;  if a UDF has been modified in the last second, and if so commits it to
;  disk, then suppends for 1 second and does it again.

timerthread::
	PUSHL	#0.B
	PUSHL	#0.B
	PUSHL	#XT_SECOND*1
	CALLF	thdCtlSuspend#
	MOVL	ESI, firstidb#		;Get first IDB
	ORL	ESI, ESI
	JE	timerthread.S		;If none
2$:	CMPB	idb_commit[ESI], #0	;Need to commit data now?
	JE	4$.S			;No
	MOVB	idb_commit[ESI], #0
	MOVL	EAX, idb_udfhndl[ESI]	;Yes - commit the data to disk
	MOVL	commitqab+qab_handle, EAX
	PUSHL	DS
	PUSHL	#commitqab
	CALLF	svcIoQueue#
	ORL	EAX, EAX		;Error?
	JS	10$.S			;Yes
	MOVL	EAX, commitqab+qab_error ;Maybe
	ORL	EAX, EAX
	JS	10$.S			;Yes
4$:	MOVL	ESI, idb_next[ESI]	;Advance to next IDB
	ORL	ESI, ESI
	JNE	2$.S			;Continue if more
	JMP	timerthread.S		;Finished for now

;Here if error committing data to disk

10$:	MOVL	EBX, #cmtmsg		;Log the error
	CALL	logerror#
	JMP	4$.S			;Continue

cmtmsg:	.ASCIZ	"Error committing data to disk"
.PAGE
	.SBTTL	Data

	.PSECT	_DATA_p

	.MOD	4
commitqab:
	.WORD	QFNC$WAIT|QFNC_COMMIT
				;qab_func    = 0.  - Function
	.WORD	0		;qab_status  = 2.  - Returned status
	.LONG	0		;qab_error   = 4.  - Error code
	.LONG	0		;qab_amount  = 8.  - Amount transfered
	.LONG	0		;qab_handle  = 12. - Device handle
	.WORD	0		;qab_vector  = 16. - Vector for interrupt
	.BYTE	0, 0		;Reserved
	.LONG	0		;qab_option  = 20. - Option bits
	.LONG	0		;qab_count   = 24. - Size of buffer
	.LONG	0, 0		;qab_buffer1 = 28. - Pointer to data buffer
	.LONG	0, 0		;qab_buffer2 = 36. - Not used
	.LONG	0, 0		;qab_parm    = 44. - Pointer to parameter list

	.END

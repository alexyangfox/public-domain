This is a simple troff to RTF converter that I wrote for my own use.
You are welcome to do whatever you want with it.  I make no guarantee
that it will work for you, and don't expect any support.  On the other
hand, you have the source code so you can fix whatever you don't like.

It takes a troff file using -ms macros and a few other macros that I wrote
on top of them and translates it to RTF.  Although the RTF should be
edible by any program that reads RTF, it is particularly intended to be
read by Microsoft Word, using the enclosed style sheet, since the styles
in the RTF match the styles in the style sheet so exactly that even Word's
tiny brain can see they're the same and preserves them in the imported
document.  (Once Word has the styles assigned, you can then tell it to use
a better style sheet, which is what I do.)

The translator is largely table driven, making it reasonably easy to add
new troff commands and macros.  The current table entries are all intended
for -ms and my macros, but there's nothing in the actual code which knows
anything about -ms, everything that's hard coded is generic troff or tbl.

It reads the troff file looking for dot commands and escape sequences,
which are translated using the table described below.  The entire output
file starts with { and ends with } which RTF requires.  (There is no way
to generate unmatched braces from the table.)

The translation table is named xltable, and each line is of the form
"troff<tab>RTF".  The troff can be a dot command, a \ sequence, or a
special word, optionally followed by a colon and some keyletters.  The RTF
can either be some RTF enclosed in braces { } or else a special word.

Lines starting with a # are comments.

In the troff part, the special words are:

BEGIN	the beginning of a document
PARA	the beginning of a paragraph
LINE	emitted between lines in no-fill mode
TPARA	emitted at the beginning of a paragraph corresponding to a tbl
	table
TLINE	emitted between lines in a tbl table
TPEND	emitted at the end of a tbl table
THORZ	emitted for a _ line in a table
TDHORZ	emitted for a = line in a table
TLEFT, TRIGHT, TDEC, TBAR
	set tab stops for l r n and | keyleters in a table, with
	a %d for the horizontal position in twips

A troff thing that starts with a dot is a command, and the arguments to
the command can be substituted into the RTF using $1, $2, etc.  The
arguments are scanned for escape sequences.  A troff thing that starts
with a \ is an escape sequence.  The handling of escape sequences is
pretty dumb, e.g.  \f1, \f2, and \f3 are all considered to be separate
sequences (just as well, the RTF is quite different for each.)

The optional keyletters after the troff words can include:

p	this commmand starts a new paragraph
l	this paragraph is not filled
a	always emit this paragraph, normally paragraphs with no text
	are ignored

In the RTF part, the RTF can be as long as you want on multiple lines.  It
matches the braces to find the end.  Troff command arguments are
substituted for $1, $2, etc., otherwise the RTF is passed through
unmodified.

The special words for the RTF are:

BEGINTABLE	the troff starts a tbl table
ENDTABLE	the troff ends a tbl table
JOIN		ignore the following end of line (used for \c)
NUMBER		this is a number register reference.  (hack, see the code.)

There is code in the translator which knows something about translating
tbl tables into RTF paragraphs with tab-separated columns.  The first line
after the .TS has to be the format letters, it doesn't know about
"center;" and the like.  It makes all of the tab stops corresponding to
the columns 1" wide which is almost always wrong, but it's easy to fix in
Word once it's been read in, by moving the tab stops until it looks OK.
It does a reasonable job of handling left, right, and numerically adjusted
columns, as well as horizontal and vertical lines.  Horizontal lines are
handled by starting a new paragraph and marking the old paragraph as
having a line under it, ugly, but the only way to generate lines other
than a lot of dashes which is uglier and never the right width.  It
doesn't know about spanned columns, but if your spanned columns are at the
beginning of the table for the title it often works in spite of itself due
to the fact that Word doesn't care if a column is too wide.

Hints on coexisting with MS Word:

Word blats out everything it knows about the fonts available and the
current style sheet into the head of an RTF file.  I just use my text
editor to copy this junk from an RTF file generated by Word.

When using a paragraph style, the paragraph has to start with \pard,
then \s<number>, then all the attributes of the style.  If you leave anything
out or change the order, it'll get the attributes right but won't realize
what the style is.  Again, the easiest thing is to copy this from RTF
generated by Word.

John Levine, 1/92

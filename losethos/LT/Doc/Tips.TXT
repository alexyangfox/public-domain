$WW,1$$FG,5$$IV,1$$TX+CX,"TIPS"$$IV,0$$FG$

* Turn-off or reboot ($FG,2$<CTRL-ALT-DEL>$FG$) at any time, except during disk writes.Writes are not cached unless you call $LK,"CacheWrites","MN:CacheWrites"$(). 

* 64-bit values are most efficient for the compiler.

* If you make changes to LoseThos files in your $FG,2$HOME$FG$ directory, generally you reboot to make them take effect.(You don't compile anything.)You should have two LoseThos partitions on your hard drive because a syntax error in a start-up file will make the partition unbootable.Boot to the second partition or boot to a standard LoseThos CD-ROM and use $LK,"Mount","MN:Mount"$() to mount your hard drive.

* I copy my files to a mirrored identical partition, periodically with $LK,"CopyTree","MN:CopyTree"$() commands in scripts.I do merge commands with a menu entry like this:
$FG,5$M(\"D:/LT/*\",\"E:/LT/*\",\"+r+d\");$FG$ to check my changes.

* $FG,2$<WINDOWS KEY>$FG$ at the cmd line to access your personal menu.Place macros there with $FG,2$CTRL-L$FG$, or icon-like pictures with $FG,2$<CTRL-R>$FG$.Use the $FG,2$Pop-Up$FG$ option on macros to $LK,"Spawn","MN:Spawn"$() a task to run a file.It dies when it is finished.This returns mem to the system.Be sure to press $FG,2$<CTRL-S>$FG$ to save your macro/menu area after making changes.

* You can adjust the num of answers displayed by setting $FG,2$Fs->answers_displayed$FG$ to a num from 0-3 in your $LK,"UserStartUp","MN:UserStartUp"$ routine.

* You can use $FG,2$ans0$FG$,$FG,2$ans1$FG$, etc. in cmd line expressions.They hold results from the last cmd line operations.You can use the cmd prompt as a calculator by just entering expressions like $FG,2$1+2*3;$FG$.$FG,2$F64$FG$ results can be accessed with $FG,2$ansf0$FG$ or $FG,2$ansf1$FG$.

* Use the PullDown menu at the top of the screen to learn commands, like for games.

* You can adjust the mouse movement rate by setting global vars in your start-up file.See $LK,"mouse scale","FF:HOME/Adam3aLocalize.APZ,mxx_scale"$.

* If your mouse wheel doesn't work, you might try an actual $FG,2$PS/2$FG$ mouse.My new machine does not have $FG,2$PS/2$FG$ ports.

* You can set your local time zone by setting the $LK,"local_time_offset","MN:local_time_offset"$ global var in a start-up file.It's units are $LK,"LTDATE_FREQ","MN:LTDATE_FREQ"$.See $LK,"local time","FF:HOME/Adam3aLocalize.APZ,local_time"$.

* Use $LK,"LtfCurAttr","MN:LtfCurAttr"$() in $LK,"UserStartUp","MN:UserStartUp"$() to set terminal window colors.

* See $MA+A-X+PU,"Key Map","KeyMap;View;\n"$ for a list of defined keys.Define your own keys in $LK,"MyPutKey","MN:MyPutKey"$().See $LK,"::/LT/Doc/KeyBoard.TXZ","FI:::/LT/Doc/KeyBoard.TXZ"$.

* $FG,2$<CTRL-O>$FG$ in the editor to autoindent a $FG,2$C+$FG$ function or renumber an asm routine's local labels.If it does not have $FG,2$#exe$FG$ config stuff, select "recompile."Otherwise, don't recompile$FG$ and it will use the compiler info collected when it was most recently compiled.$BK,1$$FG,2$<CTRL-O>$FG$ can be used to test if a file will compile.$BK,0$

* While developing applications, keeping everything in one source file allows you to use the $FG,2$<CTRL-O>$FG$ compile check/autoindent feature.Alternatively, you can $FG,2$#include$FG$ the files in a project a file depends on before entering the editor and $FG,2$<CTRL-O>$FG$ it.

* You can use $FG,2$filter_lines$FG$ in the editor text search form ($FG,2$<CTRL-F>$FG$) to temporarily display just lines near each match.A value of $FG,2$filter lines$FG$ set to $FG,2$5$FG$ will display lines within 5 lines of matches.Then, you can do another find to a different string and achieve a $FG,2$AND$FG$ search.When finished, press $FG,2$<ESC>$FG$.
 
* You can recompile and reinstall the kernel with $LK,"InstallBoot","MN:InstallBoot"$().You'll probably want to make a function for recompiling that uses the $LK,"Auto","MN:Auto"$() function to answer the cfg questions.See my technique $LK,"Cfg Strs","FL:::/LT/Demo/AcctExample/TSAdam.APZ,1"$ $LK,"Update Funs","FL:::/LT/Demo/AcctExample/TSDistribute.APZ,1"$.

* You can disable $FG,2$WORDSTAT$FG$ commenting-out $LK,"WsInit","FF:HOME/Adam3fSys.APZ,WsInit"$() in $LK,"HOME/Adam3fSys.APZ","FF:HOME/Adam3fSys.APZ,WsInit"$.

* You can rst MultiCore CPU's if they get hung with $LK,"MPStart","MN:MPStart"$().HD Audio will get screwed-up, however.

* Boolean expressions $BK,1$not$BK,0$ in $FG,2$if$FG$ statements don't have short circuit logic and are compiled inefficiently.

* You can use $LK,"progress1","MN:progress1"$-$LK,"progress4","MN:progress4"$ in your programs for whatever you like.They're just global vars that are shown on the wallpaper.The original intent was to indicate how far along operations were.There's no coordination, so different apps might interfere.I use them most for debugging--just values easily viewed.See $LK,"::/LT/Demo/Progress.CPZ","FI:::/LT/Demo/Progress.CPZ"$.

* You can save the cmd line doc as text with $FG,2$<CTRL-A>$FG$.For a bitmap screen capture, use $LK,"BMPFileCaptureScreen","MN:BMPFileCaptureScreen"$().You might want to make a hot key.See $LK,"BMPFileCaptureScreen","FF:::/LT/Demo/AcctExample/TSAdam.APZ,BMPFileCaptureScreen"$.

* Use $LK,"LtfMax","MN:LtfMax"$() to adjust the size of the cmd line buf.It counts $LK,"Ltf","MN:Ltf"$ entries, not lines.

* Many data structures have a $FG,2$user_data$FG$ member.  Those are available for you to store a data item, for convenience.  $LK,"TaskStruct","MN:TaskStruct"$, $LK,"LtfEntry","MN:LtfEntry"$ and $LK,"LTDirEntry","MN:LTDirEntry"$ have them.You shouldn't encounter conflicts with LoseThos using them.

* You can reduce mem usage by making a smaller disk cache when you recompile the kernel; disabling $FG,2$WORDSTAT$FG$; Specifying smaller stk sizes when doing $LK,"Spawn","MN:Spawn"$(), changing $LK,"DFT_STK","MN:DFT_STK"$, and using $LK,"LtfMax","MN:LtfMax"$() to reduce the cmd line buffer size.

* Filenames ending in $FG,2$Z$FG$ will be automatically compressed and uncompressed when read or written.The compression method is not supported by other operating systems.You can store files uncompressed by $LK,"Move","MN:Move"$()ing them to a filename not ending in $FG,2$Z$FG$.See $LK,"::/LT/Doc/LTZ.TXZ","FI:::/LT/Doc/LTZ.TXZ"$ if you want to uncompress while in $FG,2$WINDOWS$FG$.

* $LK,"MergeChk","MN:MergeChk"$() can be used to see what's changed.The $FG,2$+d$FG$ flag will show differences of files which have changed and allow you to merge code.(The $FG,2$+r$FG$ flag will recurse.)

* There is a utility $LK,"LinkChk","MN:LinkChk"$() which will check for broken links in documentation.

* You can use $LK,"OptOn","MN:OptOn"$($LK,"OPTf_PAREN_WARN","MN:OPTf_PAREN_WARN"$) to find unnecessary parentheses in code.

* Use $LK,"Plain","MN:Plain"$() to edit a plain text file.You'll need this if your file has $FG,2$$$$FG$'s.Use the $LK,"::/LT/Misc/Dollar.CPZ","FI:::/LT/Misc/Dollar.CPZ"$ utility to strip dollar signs in text files.

* Use $LK,"Silent","MN:Silent"$() to disable screen text output.

* Use $LK,"IOSnd","MN:IOSnd"$() to disable noise from disk access.

* Grab-scroll any window at any time with $FG,2${CTRL-LEFT-DRAG}$FG$.Null grab-scrolling with $FG,2${CTRL-RIGHT}$FG$.

* Use $FG,2$<CTRL-ALT-Z>$FG$ to zoom-in and $FG,2$<CTRL-ALT-SHIFT-Z>$FG$ to zoom-out.You can scroll by moving to the edge of the window.Set $LK,"gr_continuous_scroll","MN:gr_continuous_scroll"$ to $FG,2$TRUE$FG$ if you want. 

* Use $FG,2$<CTRL-ALT-G>$FG$ and $FG,2$<CTRL-ALT-SHIFT-G>$FG$ to display a grid on the screen.

* Use $FG,2$<CTRL-ALT-A>$FG$ to enter an extended ASCII char.

* There are handy functions--$FG,2$F(),R(),FD()$FG$ and $FG,2$RD()$FG$ which are defined in $LK,"HOME/Adam3eWrappers.APZ","FI:HOME/Adam3eWrappers.APZ"$.You're encouraged to change them, since they're in acct files.They will perform find-and-replace operations accross multiple files.The $FG,2$+l$FG$ flag is particularly useful since it limits to whole labels.You are encouraged to add or modify handy wrapper functions to make cmd line operations easier.

* When using $LK,"Grep","MN:Grep"$() while modifying code, work from the bottom-up so that line numbers are correct.If you work top-down, then inserting or deleting lines causes the lower file links will be incorrect.

* You can save files after making changes, anytime you are within the editor, like when viewing help/macro files.$FG,2$<CTRL-A>$FG$ saves as, $FG,2$<CTRL-S>$FG$ saves with the same name in the scrolling title bar.Hitting $FG,2$<ESC>$FG$ will exit and save.($FG,2$<SHIFT-ESC>$FG$ will abort).You can save the cmd line window to a file, too, since you're actually in the editor when you're at the cmd line.

* When using $FG,2$<CTRL-L>$FG$ to insert links in documents, you can usually leave the $FG,2$Tag Text$FG$ blank and it will be filled-in automatically based on other entries.

* There is a feature of the precompiler that allows code to be executed in the middle of compilation and data inserted into the compilation stream.Click here for an example: $LK,"#exe {","FF:::/LT/OSMain/OSEnd.CPZ,#exe {"$.

* If you output to the cmd line and wish to allow users to scroll around and view data, you can use $LK,"View","MN:View"$().

* Use $LK+S,"View","MN:View"$() in Pop-up macros to linger until the user presses $FG,2$<ESC>$FG$ or $FG,2$<SHIFT-ESC>$FG$.

* You can access the word under the cursor at $LK,"ws_cur_word","MN:ws_cur_word"$, but you should probably turn-off preemption or interrupts momentarily to copy it.

* You can reactivate $FG,2$WORDSTAT$FG$ after closing it by pressing $FG,2$CTRL-FUN KEY$FG$.

* If you use consistent var names for items of different classes, you'll usually be able to use $FG,2$WORDSTAT$FG$'s autocomplete for member vars.I always use $FG,2$lx$FG$ for $LK,"LexStruct","MN:LexStruct"$ ptrs; $FG,2$l$FG$ for $LK,"Ltf","MN:Ltf"$ ptrs; $FG,2$ll$FG$ or $FG,2$cl$FG$ for $LK,"LtfEntry","MN:LtfEntry"$ ptrs, etc.


* $LK,"Preempt","MN:Preempt"$() is used to keep a task from being interrupted and swapped-out.It has a similar effect to turning-off interrupts.Each task has it's own preemption ctrl.A task with preemption turned-off can voluntarily $LK,"Yield","MN:Yield"$() with preemption off.

* You can set a color for different drives with $LK,"SetDrvTextAttr","MN:SetDrvTextAttr"$().Place calls to this in $LK,"HOME/Adam3aLocalize.APZ","FI:HOME/Adam3aLocalize.APZ"$.

* $FG,2$<CTRL-SHIFT-T>$FG$ to toggle to/from plain text just the $LK,"Ltf","MN:Ltf"$ cmd under the cursor.See $LK,"::/LT/Demo/Ltf/TextDemo.CPZ","FI:::/LT/Demo/Ltf/TextDemo.CPZ"$.
 
* If you toggle to plain text when you are working with graphics in a document, you can add duplicate entries for pictures by entering a $FG,2$PI$FG$ cmd with the same num.

* If you toggle to plain text when working with graphics, you can add a str to the $FG,2$$$PI$$$FG$ entry to keep track of it.Try $FG,2$$$PI,"<2>",2$$$FG$ where '2' is the picture num.

* I use spaces-to-tab operations on all my src files to keep them small.You have to be careful, though, because spaces in strings will be converted.I use $FG,2$<SHIFT-SPACE>$FG$ '' in such cases.See $LK,"S2T","MN:S2T"$() for spaces-to-tabs.

* You can edit an existing Graphic Element by putting the cursor on it and pressing $FG,2$<CTRL-R>$FG$.

* When editing a Graphic Element, you can cut and paste the elements in the text list window.

* I recommend keeping GrSprite in vect format until you are done creating them, so you can edit the ctrl points.Then, convert them to bitmaps, so the flood fills work well.If you are doing interpolation, however, they must be vect.

* $LK,"GrFloodFill","MN:GrFloodFill"$() is slow.$LK,"GrRect","MN:GrRect"$() is fast.

* You can customize the $FG,2$wallpaper$FG$.  See $LK,"::/LT/Demo/Graphics/MyWallPaper.APZ","FI:::/LT/Demo/Graphics/MyWallPaper.APZ"$.

* You can adjust the screen refresh rate (software).It is automatically adjusted based on load.The range is $LK,"win_min_refresh","MN:win_min_refresh"$ - $FG,4$Fs->win_max_refresh$FG$.

* You can make a RAM disk and it will not be reformatted if you reboot with $LK,"Boot","MN:Boot"$().You can even boot to a RAM disk.See $LK,"Install2RAMDrv","MN:Install2RAMDrv"$() and $LK,"Boot2RAMDrv","MN:Boot2RAMDrv"$().

* $FG,2$try{} catch{}$FG$ in a function will cause all vars to be non-register.

* Using a sub-int array, $FG,2$i.u8[3]$FG$, for example, will force a var non-register.

* You can delete the $FG,4$HOME/Registry.CPZ$FG$ file.The policy is that deleting it will restore defaults.It should plain text, if you want to edit it.Be careful of tree indentations.

* Study $LK,"::/LT/Adam/MemRep.APZ","FI:::/LT/Adam/MemRep.APZ"$ and $LK,"WallPaper","MN:WallPaper"$() to learn how the system resources are put together.

* The editor's select-text mechanism allows for disjoint portions of selected text.This is a feature, not a bug -- you can cut-and-paste disjoint text.

* $LK,"time_stamp_freq","MN:time_stamp_freq"$ is continuously calibrated, so be careful because expressions involving it might decrease.Take a snap-shot, like this: $FG,2$timeout=$LK,"GetTimeStamp","MN:GetTimeStamp"$+$LK,"time_stamp_freq","MN:time_stamp_freq"$ x seconds;$FG$ and compare against $LK,"GetTimeStamp","MN:GetTimeStamp"$().

* Use $LK,"HeapLog","MN:HeapLog"$() and $LK,"HeapLogRep","MN:HeapLogRep"$() to find leaks.Don't be confused by $LK,"Ltf","MN:Ltf"$ allocations.Those are generated when text is written to the cmd line buffer.

* For advanced heap debugging, play with $LK,"_CFG_HEAP_DBG","MN:_CFG_HEAP_DBG"$.You're on your own.

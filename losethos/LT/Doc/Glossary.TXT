$WW,1$$TR,"Abbreviations"$
$ID,2$$FG,5$Abs$FG$	Absolute
$FG,5$Acct$FG$	Account
$FG,5$Add/Addr$FG$	Address
$FG,5$AOT$FG$	Ahead-of-Time
$FG,5$AP$FG$	Application Processor (CPU# > 0)
$FG,5$Arg$FG$	Argument
$FG,5$Attr$FG$	Attribute
$FG,5$Aux$FG$	Auxilliary
$FG,5$Blk$FG$	Block
$FG,5$BSP$FG$	Boot-strap Processor (CPU#0)
$FG,5$Buf$FG$	Buffer
$FG,5$Cb$FG$	Call-Back or Code Block
$FG,5$Cfg$FG$	Config
$FG,5$Chg$FG$	Change
$FG,5$Chk$FG$	Check
$FG,5$Cmd$FG$	Command
$FG,5$Cmp$FG$	Compiler
$FG,5$Cnt$FG$	Count
$FG,5$Ctrl$FG$	Control.The ctrl key is indicated with "$FG,2$^$FG$" in documentation.
$FG,5$Cur$FG$	Current
$FG,5$Dbg$FG$	Debug
$FG,5$Dbl$FG$	Double
$FG,5$DC$FG$	Device Context
$FG,5$Del$FG$	Delete
$FG,5$Desc$FG$	Descriptor or Description
$FG,5$Dev$FG$	Device
$FG,5$Dft$FG$	Default
$FG,5$Dir$FG$	Directory
$FG,5$Drv$FG$	Drive
$FG,5$Dsk$FG$	Disk
$FG,5$Dst$FG$	Destination
$FG,5$Ed$FG$	Edit, Editor
$FG,5$Elem$FG$	Element
$FG,5$Evt$FG$	Event
$FG,5$Exe$FG$	Execute
$FG,5$Ext$FG$	Extern or Extended
$FG,5$Feat$FG$	Feature
$FG,5$$FG,5$Fmt$FG$	Format
$FG,5$Fwd$FG$	Forward
$FG,5$fp_$FG$	Function ptr
$FG,5$Fun$FG$	Function
$FG,5$Gen$FG$	Generate
$FG,5$Glbl$FG$	Global
$FG,5$Gr$FG$	Graphic
$FG,5$IDE$FG$	Integrated Development Environment or Integrated Drive Electronics
$FG,5$IDT$FG$	Interrupt Descriptor Table
$FG,5$Init$FG$	Initialize
$FG,5$Ins$FG$	Insert
$FG,5$Int$FG$	Interrupt
$FG,5$ip_$FG$	Input Pointer.See $LK,"InputPointer.CPZ","FI:::/LT/OSMain/KbdMouse/InputPointer.CPZ"$.
$FG,5$Irq$FG$	Interrupt (Request)
$FG,5$JIT$FG$	Just-in-Time
$FG,5$Kbd$FG$	Keyboard
$FG,5$Len$FG$	Length
$FG,5$Let$FG$	Letter
$FG,5$Lex$FG$	Lexical Analyser
$FG,5$Lit$FG$	Literal
$FG,5$Loc$FG$	Location, Lines of Code
$FG,5$Log$FG$	Logarithm or Logical
$FG,5$Ltf$FG$	Linked-Text-File (doubly-linked-list of rich text and graphic cmds)
$FG,5$Man$FG$	Manual
$FG,5$Mem$FG$	Memory
$FG,5$Mgd$FG$	Managed
$FG,5$Mgr$FG$	Manager
$FG,5$Mon$FG$	Month
$FG,5$MP$FG$	MultiProcessor
$FG,5$Msg$FG$	Message
$FG,5$Num$FG$	Number
$FG,5$Occ$FG$	Occurrence
$FG,5$Ode$FG$	Ordinary Differential Equation
$FG,5$Paren$FG$	Parenthesis
$FG,5$Pkg$FG$	Package
$FG,5$Pmt$FG$	Prompt
$FG,5$Poly$FG$	Polygon
$FG,5$Pos$FG$	Position
$FG,5$Prec$FG$	Precedence
$FG,5$Prod$FG$	Product or Production
$FG,5$Pri$FG$	Primary
$FG,5$Prt$FG$	Partition
$FG,5$Ptr$FG$	Pointer
$FG,5$Reg$FG$	Register or Regular
$FG,5$Rem$FG$	Remove
$FG,5$Rep$FG$	Report
$FG,5$Rst$FG$	Reset
$FG,5$Rot$FG$	Rotation
$FG,5$Rx$FG$	Receive
$FG,5$Sec$FG$	Second or Secondary
$FG,5$$FG,5$Sect$FG$	Sector
$FG,5$Seq$FG$	Sequence
$FG,5$Snd$FG$	Sound
$FG,5$Src$FG$	Source
$FG,5$Stat$FG$	Status or Statistic
$FG,5$$FG,5$Stk$FG$	Stack
$FG,5$Str$FG$	String
$FG,5$Sym$FG$	Symbol
$FG,5$Sys$FG$	System
$FG,5$Term$FG$	Terminal
$FG,5$Tx$FG$	Transmit
$FG,5$Val$FG$	Value
$FG,5$Var$FG$	Variable
$FG,5$Vect$FG$	Vector
$FG,5$Vol$FG$	Volume
$FG,5$Win$FG$	Window
$FG,5$Wiz$FG$	Wizard

$ID,-2$$TR,"Task/Process/Thread"$
$ID,2$There is no distinction between "task", "process" or "thread."The $FG,2$Fs$FG$ segment register is kept pointing to the current task's $LK,"TaskStruct","MN:TaskStruct"$.There is only one window per task.

$ID,-2$$TR,"Adam Task"$
$ID,2$This is Adam, as in Adam and Eve, the parent of all tasks.This task is created at start-up and appears in the small window at the top beneath the user windows.On it's heap are all memory objects which are system wide.When created, it runs the file $LK,"::/LT/OSMain/Adam1.APZ","FI:::/LT/OSMain/Adam1.APZ"$Normally, Adam1.APZ ends by $FG,2$#include$FG$ $LK,"::/LT/Adam/Adam2.APZ","FI:::/LT/Adam/Adam2.APZ"$ where the remainder of the operating system is "$FG,2$#include$FG$d".When start-up is finished, the adam task enters a server mode where it accepts requests from other tasks.The $LK,"Adam","MN:Adam"$("") routine will cause the adam task to compile and run text src code.  "$FG,2$#include$FG$" statements can be sent to the $LK,"Adam","MN:Adam"$("") routine, creating system-wide code and data which don't disappear when any particular task ends.(The Adam task is immortal.)

$ID,-2$$TR,"Seth Task"$
$ID,2$This is Seth, as in Adam and Eve's child.Each CPU core has a special task which is immortal and which is special.The Adam task on CPU#0 is also it's Seth task.

$ID,-2$$TR,"Code and Data Heaps"$
$ID,2$LoseThos uses the asm $FG,2$CALL$FG$ instruction exclusively and it's limited to calling routines +/-2 Gig from the current code location.To prevent out-of-range issues, I decided to separate code and data, placing all code within the lowest 2 Gig of memory.The compiler and $LK,"Load","MN:Load"$()er allocate memory from the code heap to store code and glbl vars, unless the compiler option $LK,"OPTf_GLBLS_ON_DATA_HEAP","MN:OPTf_GLBLS_ON_DATA_HEAP"$ is used.When programs call $LK,"MAlloc","MN:MAlloc"$() is comes from the data heap, which in not limited in size, except by how much physical RAM memory you have.You can allocate from any heap you like, or even make independent heaps.

$ID,-2$$TR,"Parent/Child Task"$
$ID,2$Often a task will $LK,"Spawn","MN:Spawn"$() or $LK,"PopUp","MN:PopUp"$() a task as a helper.The helper is known as a Child Task, though you can $FG,2$Spawn$FG$ a task and assign it a different parent... like $FG,2$Adam$FG$.Links are kept as to who spawned what so that when one task is $LK,"Kill","MN:Kill"$()ed the helper tasks disappear, too.You can get a report on current system tasks with $LK+S,"TaskRep","MN:TaskRep"$().There is just one possible window per task, so child tasks are needed.

$ID,-2$$TR,"C+"$
$ID,2$The language used by LoseThos is more than $FG,2$C$FG$ and less than $FG,2$C++$FG$, so it's just $FG,2$C+$FG$, perhaps.See $LK,"Differences","FI:::/LT/Doc/Differences.TXZ"$.It has the default arg feature of $FG,2$C++$FG$ and uses $FG,2$class$FG$ in place of $FG,2$struct$FG$.It uses $FG,2$U0,U8,U16,U32,U64$FG$ and $FG,2$I0,I8,I16,I32,I64$FG$ for signed and unsigned integers.It has a slightly different operator precedence.See $LK,"OP_precedence","FA:::/LT/Doc/Differences.TXZ,OP_precedence"$It has the $FG,2$PASCAL$FG$-like feature of function calls with no parens, but requires an "$FG,2$&$FG,2$$FG$" when referring to function addresses.

$ID,-2$$TR,"Static Compile Mode"$
$ID,2$I coined this term to refer to conventional AOT compilation mode, but it is not the preferred mode for this operating system and is discouraged.$FG,2$.SP?$FG$ files are compiled to $FG,2$.BI?$FG$ files, skipping $FG,2$.OBJ$FG$ files.After compiling, you do a $LK,"Load","MN:Load"$() cmd which is available from right-clicking on a link (like from $LK,"Dir","MN:Dir"$()).There is no $FG,2$main()$FG$ routine.Instead, statements outside functions are automatically executed upon loading.There is no way to unload except by killing the task.To invoke $FG,2$Static Compiled Mode$FG$, use the $LK,"Cmp","MN:Cmp"$() routine or right-click on a link.The $FG,2$OSMain$FG$ modules and compiler are made in static compiled mode and stored in $FG,2$OSMain.BIC$FG$ and $FG,2$Compiler.BIZ$FG$, respectively.

See $LK,"::/LT/Demo/GameStarters/EagleDive.CPZ","FI:::/LT/Demo/GameStarters/EagleDive.CPZ"$ for an example of static module.

$ID,-2$$TR,"JIT Compile Mode"$
$ID,2$In just-in-time mode, the compiler allocates objects, code and data, from the heap, incrementally.This mode is used during cmd line operations.When you $FG,2$#include$FG$ a file, it is compiled function by function and objects are placed all over in mem.The $LK,"ExeFile","MN:ExeFile"$() routine is the same as $FG,2$#include$FG$ but can be placed in programs.$LK,"ExePutS","MN:ExePutS"$() routine will compile and run a string.

$ID,-2$$TR,"Compiler Intermediate Code"$
$ID,2$The compiler generates instructions one step before making actual assembly(machine) language instructions.This code is reverse polish in nature and can be viewed with $LK,"PTrace","MN:PTrace"$() or $LK,"OTrace","MN:OTrace"$().The compiler does not "interpret" code, except in the process of optimization.The assembly language can be viewed when it is compiled with the $LK,"CTrace","MN:CTrace"$() routine, or afterward with $LK,"U","MN:U"$().

$ID,-2$$TR,"Partition/Drive"$
$ID,2$There is no distinction between "partition" or "drive."They are specified with a single letter from '$FG,2$A$FG$'-'$FG,2$Z$FG$'.

'$FG,2$:$FG$' is the boot drive.

For commands taking a drive letter as an argument, $FG,2$0$FG$ is the current drive.

$ID,-2$$LK,"AutoFile","HI:AutoFile"$
$LK,"Graphic Element","HI:Graphics/GrSprite"$
$LK,"Hash Table","HI:Hash"$
$LK,"Define","HI:Char/Define"$
$TR,"files_find_mask"$
$ID,2$$LK,"FilesFindMatch","MN:FilesFindMatch"$().An optional directory plus a list of file name masks, as in $FG,2$/LT/Demo/*.TXZ;*.CPZ$FG$.

Be aware of $LK,"TEXT_FILE_MASK","MN:TEXT_FILE_MASK"$ and $LK,"SRC_FILE_MASK","MN:SRC_FILE_MASK"$.

$ID,-2$$TR,"Filename Extention Types"$
$ID,2$
$FG,5$*.??Z$FG$
  These files are automatically compressed or uncompresses files when read or written.
$FG,5$*.??C$FG$
  Contiguous files--NOT compressed.
$FG,5$*.TXZ;*.TXT$FG$
  Text Files
$FG,5$*.CPZ;*.CPP$FG$
  C+ src files.The default C+ compiler type is "$FG,2$.CPZ$FG$".
$FG,5$*.SPZ;*.SPP$FG$
  C+ src files to be compiled statically.
$FG,5$*.APZ;*.APP$FG$
  C+ src files meant to be included into the Adam Task.
$FG,5$*.HPZ;*.HPP$FG$
  C+ src header files.
$FG,5$*.MPZ;*.MPP$FG$
  Compiler "map" files
$FG,5$*.BIZ;*.BIN;*.BIC$FG$
  Binary executable files, created by $LK,"Cmp","MN:Cmp"$() and read by $LK,"Load","MN:Load"$().
$FG,5$*.DTZ;*.DTA$FG$
  Data files
$FG,5$*.ISO$FG$
  CD-ROM image file--ISO9660.
$FG,5$*.AUZ;*.AUT$FG$
  "AutoFile" Basically a C+ program who's stdout goes to the input of a task when $LK,"AutoFile","MN:AutoFile"$() is called.
$FG,5$*.LGZ$FG$
  Graphics file

$LK,"SRC_FILE_MASK","MN:SRC_FILE_MASK"$$FG$
  This $FG,2$#define$FG$ holds a list of src file extensions.
$LK,"TEXT_FILE_MASK","MN:TEXT_FILE_MASK"$$FG$
  This $FG,2$#define$FG$ holds a list of text file extensions.

$ID,-2$$TR,"Naming Convention"$
$ID,2$$FG,5$$FG$The following are rules I stick to.If you work on the operating system, it'd be good to stick with them for uniformity, but you can do what you like.Since there are no "$FG,2$namespaces$FG$" and I don't plan to implement name spaces, I highly recommend putting a 2-3 character module code prefix on syms. e.g. "Ws","Ltf","Lex"

$FG,5$ALL_CAPS$FG$
  Assembly Language labels are capitalized with underscores between words.  So are $FG,2$#define$FG$'s.

$FG,5$_ALL_CAPS$FG$
  Asm routines which are $FG,2$C+$FG$ callible should have a leading underscore.

$FG,5$MixedCaps$FG$
  $FG,2$C+$FG$ Functions and class names are MixedCaps.

$FG,5$lower_case$FG$
  Local function vars and glbl vars are lower case.Class member names are also lower_case.

$FG,5$SYSf_????$FG$
  Flags which are designated with bit nums instead of bit values are designated with a lower case "$FG,2$f$FG$".
$ID,-2$
$AN,"Fs","Fs"$ The CPU FS segment register.This register points to the current task's $LK,"TaskStruct","MN:TaskStruct"$.

$AN,"Gs","Gs"$ The CPU GS segment register.This register points to the $LK,"CPUStruct","MN:CPUStruct"$.

$AN,"Bt,Bts,Btr,Btc,LBts,LBtr,LBtc","Bt,LBts,LBtr,LBtc"$
  These are bit manipulation functions named after Intel instructions.They stand for "Bit Test", "Bit Test and Set", "Bit Test and Rst" and "Bit Test and Compliment".An $FG,2$'L'$FG$ means locked.

$AN,"Cli,Sti","Cli,Sti"$ Turn on or off interrupts.They are named after the x86 instructions."Cli" turns off interrupts.

$AN,"Heap","Heap"$ Programs can dynamically request chunks of memory allocated from a "heap" using $LK,"MAlloc","MN:MAlloc"$().They must $LK,"Free","MN:Free"$() it when finished.Ptrs are used to refer to it.The "heap" is dynamically allocated mem.

$AN,"Root","root"$ The base of a binary tree or the head of a queue.(I don't like the word "head.")

$AN,"Join","Join"$ When two parts of a program have a common low-level routine, that routine is often labeled SomethingJoin.

$AN,"user_data","user_data"$ Many operating system structures have space set aside for you to store values.You are on your own managing these with multiple applications and libraries.

$AN,"BSP/AP","BSP/AP"$ Boot-strap Processor/Application Processor

$WW,1$$FG,5$$TX+CX,"ACCT FILES"$$FG$

You can add and remove accts by making or removing directories in the $FG,2$::/LT/Accts$FG$ directory.An empty account directory should be valid because it will get default files from the parent directory.

See $LK-A,"HOME/PersonalMenu.TXZ"$ for a personal menu which can be viewed at the cmd line with the $FG,2$WINDOWS$FG$ key or by clicking "$FG,2$MENU$FG$" in the upper left border area of a window.

See $LK-A,"HOME/DoItOnce.CPZ"$ for a file which is invoked at the start-up of the first user.

See $LK-A,"HOME/Adam3.APZ"$ for the user files that get loaded into the adam task at start-up.These are only loaded once.

$LK-A,"HOME/Registry.CPZ"$ can be edited by hand or deleted to rst to defaults.Takes affect next boot.



$FG,5$$TX+CX,"APPLICATION POLICIES"$$FG$

* Place applications in their own $FG,2$/LT/Apps$FG$ subdirectory.

* Make a file called $FG,2$Load.CPZ$FG$ to load the application.

* Make a file called $FG,2$Run.CPZ$FG$ to load and run the application, preferable by $FG,2$#include$FG$ing the $FG,2$Load.CPZ$FG$ file.

* Place user data in a subdirectory of $FG,2$HOME$FG$, preferably naming the subdirectory the same as the $FG,2$/LT/Apps$FG$ subdirectory.Or, place data in the $FG,2$Registry.CPZ$FG$ file.See $LK,"::/LT/Demo/RegistryDemo.CPZ","FI:::/LT/Demo/RegistryDemo.CPZ"$.

* Make a file called $FG,2$Install.CPZ$FG$ or $FG,2$Install.AUZ$FG$ to create the $FG,2$HOME$FG$ subdirectory and do similar stuff.

 

$FG,5$$TX+CX,"OS PROGRAMMING GUIDELINES:"$$FG$

* Virtual mem is not used (It is identity mapped in EM64T mode).The stk does not grow, so allocate enough when the task (process) is $LK,"Spawn","MN:Spawn"$ed and use the heap for most things.(The "heap" refers to $LK,"MAlloc","MN:MAlloc"$() and $LK,"Free","MN:Free"$().)

* See $LK,"Naming convention","FF:::/LT/Doc/Glossary.TXZ,Naming convention"$.

* There are two modes of compiling $LK,"Static Compiled Mode","FF:::/LT/Doc/Glossary.TXZ,Static Compiled Mode"$ and $LK,"JIT Mode","FF:::/LT/Doc/Glossary.TXZ,JIT"$.Actual compilation is done in both--nothing is "interpreted".

* $LK,"Differences from C/C++","FI:::/LT/Doc/Differences.TXZ"$

* $LK,"System Programming Guidelines","FI:::/LT/Doc/SysPgmGuide.TXZ"$

$FG,5$$TX+CX,"Hash sym tables:"$$FG$

* See $LK,"::/LT/Adam/Hash2a.APZ","FI:::/LT/Adam/Hash2a.APZ"$ for examples of how the hash tables are set-up.Basically, syms are placed into hash tables and child process hash tables are chained to parents.This provides scopes for vars and functions.

* $FG,2$adam_task->hash_table$FG$ holds the C/C++ syms loaded in on start-up.

* $FG,2$Fs->hash_table$FG$ holds user C+ syms and if a sym is not found, it checks parents.When a duplicate sym is added to the table, it overshadows the previous sym unless you have done $LK,"OptOn","MN:OptOn"$($LK,"OPTf_REPLACE_SYMS","MN:OPTf_REPLACE_SYMS"$).When developing software, typically you include the file at the cmd prompt, make changes and reinclude it.Old syms are overshadowed but they are still there.Periodically, kill the TASK and start fresh when mem is low.If you wish your applications to free themselves instead of staying in mem, spawn or $LK,"PopUp","MN:PopUp"$() a task to run the application and kill it when it's done.

* To display the contents of a hash table, use the $LK,"HashRep","MN:HashRep"$() routine or the varients.$LK,"HashDepthRep","MN:HashDepthRep"$() gives a histogram  of how long the chains are, in case you wish to make hash table sizes bigger.

$FG,5$$TX+CX,"Assembly Language Concerns:"$$FG$

* $FG,2$FS$FG$ must always point to the $LK,"TaskStruct","MN:TaskStruct"$.

* $FG,2$GS$FG$ must always point to the $LK,"CPUStruct","MN:CPUStruct"$.

* Don't change the segment registers unless interrupts are off.

* When interacting with compiled code, preserve $FG,2$RBP, RSI, RDI, R10-R15$FG$ because the compiler uses these for register vars.You are free to clobber $FG,2$RAX, RBX, RCX, RDX$FG$, $FG,2$R8$FG$ and $FG,2$R9$FG$.

* I recommend using the standard stk frame for functions because $LK,"Caller","MN:Caller"$() is used to display the call stk, such as for the wallpaper.
$FG,2$	ENTER	nnnn
...
	LEAVE
	RET
$FG$
* The args are removed from the stack with $FG,2$RET1$FG$ statements.

	$FG,2$RET1	16	//remove two args$FG$

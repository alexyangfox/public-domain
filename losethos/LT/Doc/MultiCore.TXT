$WW,1$$FG,5$$TX+CX,"LoseThos MutliCore"$$FG$

LoseThos does master-slave multicore instead of SMP.Core#0 is the master.The master core assigns computational jobs to other cores.It is symmetrical in the sense that you can do file access and heap allocations because there are locks.Call $LK,"TaskLocalInit","MN:TaskLocalInit"$ to enable file access.See $LK,"::/LT/Demo/MultiCore/LoadTest.CPZ","FI:::/LT/Demo/MultiCore/LoadTest.CPZ"$.LoseThos does not move tasks between cores.

Only tasks on core#0 can have windows, but other cores can help render them.

Each core has a "seth task" which is the father of all tasks on that core.Adam is the seth task on core 0.

You give a job to a seth task with $LK,"MPJob","MN:MPJob"$() and get the result with $LK,"MPJobResult","MN:MPJobResult"$().You spawn a task on another core with $LK,"MPSpawn","MN:MPSpawn"$().

Note: you must use the $FG,2$LOCK$FG$ asm prefix when changing shared structures in a multicore environment.The $LK,"LBts","MN:LBts"$(), $LK,"LBtr","MN:LBtr"$() and $LK,"LBtc","MN:LBtc"$() instructions have $FG,2$LOCK$FG$ prefixes.The compiler has a $FG,2$lock{}$FG$ feature but it doesn't work well.See $LK,"::/LT/Demo/MultiCore/Lock.CPZ","FI:::/LT/Demo/MultiCore/Lock.CPZ"$.

See $LK,"::/LT/Demo/Graphics/Transform.CPZ","FI:::/LT/Demo/Graphics/Transform.CPZ"$.
See $LK,"::/LT/OSMain/MultiProc.CPZ","FI:::/LT/OSMain/MultiProc.CPZ"$.

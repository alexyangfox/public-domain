$FG,5$$TX+CX,"Details of Scoping and Linkages"$$FG$
$WW,1$
$LK,"Just-In-Time Compilation","FF:::/LT/Doc/Glossary.TXZ,JIT"$ makes use of the current task's hash sym table and its parent tasks' tables.It fetches syms from parent tasks' tables if not found locally in the current task's table and it places new syms in the current task's table.Conceptually, syms are at the scope of environment vars in other operating systems.

$LK,"Statical Compilation","FF:::/LT/Doc/Glossary.TXZ,Static Compiled"$ creates a new, empty, sym table which you must populate by $FG,2$#include$FG$ing $LK,"::/LT/OSMain/StaticAdam.HPZ","FI:::/LT/OSMain/StaticAdam.HPZ"$ or whatever to import syms.

When a sym is placed into a table, older syms with identical names will be overshadowed if they exist, unless you use the compiler option $LK,"OPTf_REPLACE_SYMS","MN:OPTf_REPLACE_SYMS"$.Duplicates are not allowed in many cases, especially in asm blks.Dupicates are allowed, by design in other cases, so that you can repeatedly $FG,2$#include$FG$ the same file from the cmd line while developing it.Or, so you can repeatedly declare a function with a standard name, like "$FG,2$UpdateWin()$FG$".This case might occur when the $FG,2$adam task$FG$ is starting-up loading-in many little utilities.

$FG,2$extern$FG$ binds a new $LK,"HTT_FUN","MN:HTT_FUN"$ or $LK,"HTT_GLBL_VAR","MN:HTT_GLBL_VAR"$ sym to an existing sym of the same name if it exists in the sym table (just in just-in-time code).It also can be used to generate a fwd reference.

$FG,2$import$FG$ binds a new $LK,"HTT_FUN","MN:HTT_FUN"$ or $LK,"HTT_GLBL_VAR","MN:HTT_GLBL_VAR"$ sym to a sym of the same name imported from the task's sym table at $LK,"Load","MN:Load"$() time.If no sym exists to bind to at $LK,"Load","MN:Load"$() time, the code using this sym will be left incomplete until the sym is defined.

$WW,1$
$FG,2$LTextern$FG$ binds a new $LK,"HTT_FUN","MN:HTT_FUN"$ or $LK,"HTT_GLBL_VAR","MN:HTT_GLBL_VAR"$ sym to an existing sym, of a $BK,1$different$BK,0$ name.It must exists in the sym table.Basically, this binds C to asm.

$FG,2$LTimport$FG$ binds a new $LK,"HTT_FUN","MN:HTT_FUN"$ or $LK,"HTT_GLBL_VAR","MN:HTT_GLBL_VAR"$ sym to a sym, of a $BK,1$different$BK,0$ name imported from the task's sym table at $LK,"Load","MN:Load"$() time.If no sym exists to bind to at $LK,"Load","MN:Load"$() time, the code using this sym will be left incomplete until the sym is defined.Basically, this binds C to asm from elsewhere.


$WW,0$$FG,2$S$FG$taticModule/$FG,2$J$FG$ustInTime
| Code occurs in $FG,2$G$FG$lobalScope/$FG,2$F$FG$unctionScope
| | $FG,2$C$FG$Code/$FG,2$A$FG$smCodeBlk
| | | $FG,2$extern$FG$/$FG,2$import$FG$/$FG,2$LTextern$FG$/$FG,2$LTimport$FG$/$FG,2$IMPORT$FG$/$FG,2$static$FG$/$FG,2$class$FG$/$FG,2$goto$FG$
| | | |        $FG,2$C$FG$odeHeap/$FG,2$D$FG$ataHeap/$FG,2$S$FG$tack/$FG,2$R$FG$egister
| | | |        |          TaskHashEntry:Export$FG,2$S$FG$ysSym/$FG,2$M$FG$acro/$FG,2$F$FG$unction/$FG,2$C$FG$lass/$FG,2$T$FG$ypedef
| | | |        |          | UsageScope: $FG,2$M$FG$odule/$FG,2$A$FG$smLocal/Asm$FG,2$B$FG$lk/$FG,2$T$FG$askAndChildren/$FG,2$F$FG$unction
| | | |        |          | |UsageScope: $FG,2$G$FG$lbl/Asm$FG,2$L$FG$ocal/$FG,2$R$FG$emainder/$FG,2$g$FG$lblThisBlkAndRemainder
| | | |        |          | || $FG,2$S$FG$taticVarInit/$FG,2$D$FG$ynamicVarInitAllowed/$FG,2$N$FG$oInitAllowed
| | | |        |          | || | Are dups allowed within the namespace? A dup overshadows the original.
| | | |        |          | || | $FG,2$D$FG$upsAllowed/$FG,2$N$FG$oDups/NoDupsBut$FG,2$P$FG$ad/$FG,2$W$FG$arningUnlessClosedOut
S G A          C label::  S MG   N
S G A          C label:     MG   N
S G A          C @@label:   AL   N
S G A IMPORT   C label;     MR   N
S F A          C label::  S BG   N
S F A          C label:     BG   N
S F A          C @@label:   AL   N
S F A IMPORT   C label;     BR   N
S x x            #define    MR   D
S G C          C function S MR   D
S F C          R var        FR   N
S F C          S var        FR   N
S F C static   C var        FR D N
S F C goto     C label:     FG   N
S G C          C var      S MR D D
S G C          D var        MR N D
S G C            class      MR   D
S G C            typedef    MR   D
S G C class      member     MR   P
S G C extern     class      MR   D
S G C extern   C function   MR   W
S G C import   C function   MR   D
S G C import   C var        MR   D
S G C LTextern C function   MR   D
S G C LTextern C var        MR   D
S G C LTimport C function   MR   D
S G C LTimport C var        MR   D
J G A          C label::  S Tg   N
J G A          C label:     BG   N
J G A          C @@label:   AL   N
J G A IMPORT   C label;     TR   N
J F A          C label::    BG   N
J F A          C label:     BG   N
J F A          C @@label:   AL   N
J F A IMPORT   C label;     BR   N
J x x            #define  M TR   D
J G C          C function F TR   D
J F C          R var        FR   N
J F C          S var        FR   N
J F C static   C var        FR D N
J F C goto     C label:     FG   N
J G C          C var      G TR D D
J G C          D var      G TR S D
J G C            class    C TR   D
J G C            typedef  T TR   D
J G C class      member     TR   P
J G C extern     class    C TR   D
J G C extern   C function F TR   W
J G C extern   C var      G TR   D
J G C extern   D var      G TR   D
J G C LTextern C function F TR   D
J G C LTextern C var      G TR   D
$WW,1$
* GoTo labels must not have the same name as global scope objects.GoTo's are rare and I don't want to slow the compiler and add code to fix this.You will get errors if a collision happens, so it's not very dangerous, but the error message is baffling.

* The member names "$FG,2$pad$FG$ and "$FG,2$reserved$FG$" are special because multiple instances with the same name are allowed in a class.

* Use $FG,2$reg$FG$ or $FG,2$noreg$FG$ in front of local var names to override automatic register var allocation.You can, optionally, specify a reg after the "$FG,2$reg$FG$" keyword.
 
* Local nonregister function vars can be accessed in asm blks with $FG,2$&i[RBP]$FG$ for example.

* Glbl vars and functions can be accessed in asm with and $FG,2$&$FG$ as in
	$FG,2$MOV	RAX,U64 [&glbl_var]
	CALL	I32 &Fun
	CALL	I32 &SYS_SYM$FG$

* In $FG,2$JIT$FG$ asm code, &SYS_SYM and &Fun don't need $FG,2$IMPORT$FG$.

* All offspring tasks of a task inherit syms.

* The $FG,2$sizeof()$FG$ and C+ structure members can be used in asm blks.

* No register vars are used in functions with a try/catch.They will be force to $FG,2$noreg$FG$.

* Using $FG,2$&i$FG$ or $FG,2$i.u8[2]$FG$ on a local var, $FG,2$i$FG$, will force it to $FG,2$noreg$FG$.

* An unused gap on the stk is left for $FG,2$reg$FG$ vars.

* Note: $FG,2$static$FG$ function vars do not go on the data heap, no matter the setting of the $LK,"OPTf_GLBLS_ON_DATA_HEAP","MN:OPTf_GLBLS_ON_DATA_HEAP"$$FG$.They may in the future.

* $LK,"OPTf_EXTERNS_TO_IMPORTS","MN:OPTf_EXTERNS_TO_IMPORTS"$ will treat $FG,2$LTextern$FG$ as $FG,2$LTimport$FG$ and $FG,2$extern$FG$ as $FG,2$import$FG$.This allows a header to be used either as a $FG,2$JIT compiled$FG$ or $FG,2$static compiled$FG$ header.
$WW,0$
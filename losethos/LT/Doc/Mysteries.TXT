$WW,1$$FG,5$This is to clearify how several mysterious things happen in LoseThos.$FG$

* The main difference between LoseThos and other systems is that the heap and compiler sym table are associated with tasks, not applications.

* There are sym(hash) tables maintained by each task.They are similar in scope to environment vars.When a sym is not found, the parent task's sym table is checked.All process chain back to the $FG,2$adam$FG$ process.

* The compiler only creates pos independent code.You can't create code which is loaded at a fixed, specified location.The code is pos independent by virtue of the fact that abs addresses get patched.

* Binary executable files have export syms which are loaded into the sym tables.The operating system $FG,2$OSMain$FG$ has such an export table.In addition, some map files are processed to provide more information on syms -- src file links.This is how the $LK,"Man","MN:Man"$()/$FG,2$WORDSTAT$FG$ feature can find src lines.

* The word "$FG,2$public$FG$" does very little except allow the $LK,"help_index","FI:::/LT/Doc/HelpIndex.TXZ"$ and $LK,"HashRep","MN:HashRep"$() program varients to exclude meaningless syms.If you wish a full report of public and nonpublic syms $MA+A-X+PU,"Click Here","LtfMax(1000000);HAllRep;View;\n"$.

* When compilation takes place, the structures used by the compiler stick around.Data on classes can be accessed by code.See $LK,"ClassRep","MN:ClassRep"$().

* Filenames ending in '$FG,2$Z$FG$' are automatically compressed and uncompressed when writing to disk.File size in directory listing is the compressed size.You can view uncompressed size with $LK,"Dir","MN:Dir"$("*",TRUE); if you use the native LoseThos filesystem.See $LK,"::/LT/Doc/LTZ.TXZ","FI:::/LT/Doc/LTZ.TXZ"$ for uncompressing from $FG,2$WINDOWS$FG$.

* Some memory objects are allocated when needed and will decrease the available memory displayed.A task keeps mem objects smaller than a couple blocks in it's own separate heap when freed and these are not counted in the available system free memory, though they are free.They get returned to the system when the task is killed.To get a sense of this, compile the operating system and see the amount of mem used.Then, compile it again and far less will be allocated.This is because it is reusing the small chunks.See $LK,"Memory","HI:Memory"$.$MA+A-X+PU,"Click Here","MemRep;View;"$ for a $LK,"MemRep","MN:MemRep"$.

* The cursor location is stored as an $FG,2$ASCII 5$FG$ in files.$FG,2$ASCII 31$FG$ is used for $FG,2$SHIFT-SPACE$FG$, a character which does not get converted to tabs by space-to-tabs, $LK,"S2T","MN:S2T"$().

* Binary data is stored beyond the terminating $FG,2$NULL$FG$ in text files.Map files store debug src lines and other files store pictures.

* Pictures can be stored as vect graphics so they might take shockingly little room.They can be converted to bitmaps.

* If you change code in the $FG,2$/LT/Adam$FG$, $FG,2$/LT/Adam$FG$ or your $FG,2$HOME$FG$ directory, you don't need to recompile, you just need to reboot because those directories get recompiled when you boot.It uses JIT compilation.There is no "$FG,2$.BIN$FG$" file for JIT compilation.

* If a file is not found, the parent directories are searched for a file of the same name.

* LoseThos supports $FG,2$FAT32$FG$ and a native LoseThos file system type.  The native  LoseThos partitions will appear as $FG,2$FAT32$FG$ to other operating systems, but will not work.Do not access the native LoseThos partitions from other operating systems.This was to fool a bootloader when I tricked it to use it's recovery partition feature.

* The CPU usage during disk operation expands to 99%.It polls while swapping-out.You can do other things during disk operations fine because it swaps-out a lot.See $LK,"Cooperative Multitasking","FI:::/LT/Demo/Lectures/Spinning.CPZ"$.


$FG,8$
* "Windows" is a trademark of MicroSoft Corp.

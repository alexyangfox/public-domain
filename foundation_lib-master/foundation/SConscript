
import os.path

Import("env")


# SOURCES

foundationsources = [

	'array.c', 'assert.c', 'base64.c', 'blowfish.c', 'bufferstream.c', 'config.c', 'crash.c', 'environment.c',
	'error.c', 'event.c', 'foundation.c', 'fs.c', 'hash.c', 'hashmap.c', 'hashtable.c', 'library.c', 'log.c',
	'main.c', 'md5.c', 'memory.c', 'mutex.c', 'objectmap.c', 'path.c', 'pipe.c', 'process.c', 'profile.c',
	'radixsort.c', 'random.c', 'ringbuffer.c', 'semaphore.c', 'stacktrace.c', 'stream.c', 'string.c', 'system.c',
	'thread.c', 'time.c', 'uuid.c'

	]

foundationheaders = [

	'array.h', 'assert.h', 'atomic.h', 'base64.h', 'bits.h', 'blowfish.h', 'bufferstream.h', 'build.h', 'config.h',
	'crash.h', 'environment.h', 'error.h', 'event.h', 'foundation.h', 'fs.h', 'hash.h', 'hashmap.h', 'hashstrings.h',
	'hashtable.h', 'library.h', 'log.h', 'main.h', 'mathcore.h', 'md5.h', 'memory.h', 'mutex.h', 'objectmap.h',
	'path.h', 'platform.h', 'pipe.h', 'process.h', 'profile.h', 'radixsort.h', 'random.h', 'ringbuffer.h',
	'semaphore.h', 'stacktrace.h', 'stream.h', 'string.h', 'system.h', 'thread.h', 'time.h', 'types.h', 'uuid.h'

	]

#if env['platform'] == 'raspberrypi':
#	enginesources.extend( [ 'core/atomic64_arm6.s' ] )


# ADD INTERNAL FLAGS

libenv = env.Clone()
libenv.Append( CPPDEFINES=['FOUNDATION_COMPILE=1'] )


# OUTPUTS

#libenv['PCH'] = libenv.PCH( 'foundation.h.gch', '#/src/foundation.h' )[0]
#libenv.Depends( libenv['PCH'], foundationsources )
#if env['PLATFORM'] == 'win32':
#	libenv.Command( '#/src/foundation.h.gch', libenv['PCH'], [ 'copy $SOURCE $TARGET' ] )
#else:
#	libenv.Command( '#/src/foundation.h.gch', libenv['PCH'], [ 'cp -pf $SOURCE $TARGET' ] )

env['foundationlib'] = libenv.StaticLibrary( 'foundation', foundationsources )


# DEPENDENCIES

#if env['toolset'] == 'gnu':
#	libenv.Depends( [ os.path.splitext( x )[0] + '.o' for x in foundationsources ], '#/src/foundation.h.gch' )


# INSTALLS

libenv.AddPostAction( 'foundation', libenv.Install( '#lib/${platform}${platformsuffix}/${buildprofile}', [ env['foundationlib'] ] ) )
